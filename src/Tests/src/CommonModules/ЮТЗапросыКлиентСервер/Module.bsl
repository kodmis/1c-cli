//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеЗапроса(ИмяТаблицы, ПредикатыУсловия, ВыбираемыеПоля = Неопределено) Экспорт
	
	Описание = ЮТЗапросы.ОписаниеЗапроса();
	Описание.ИмяТаблицы = ИмяТаблицы;
	Если ВыбираемыеПоля = Неопределено Тогда
		Описание.ВыбираемыеПоля.Добавить("1 КАК Проверка");
	Иначе
		ЗаполнитьВыбираемыеПоля(Описание, ВыбираемыеПоля);
	КонецЕсли;
	
	СформироватьУсловия(ПредикатыУсловия, Описание.Условия, Описание.ЗначенияПараметров);
	
	Возврат Описание;
	
КонецФункции

Процедура СформироватьУсловия(Предикат, КоллекцияУсловий, ЗначенияПараметров) Экспорт
	
	Если Предикат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Предикаты = ЮТПредикатыКлиентСервер.НаборПредикатов(Предикат);
	ВидыСравнения = ЮТПредикаты.Выражения();
	
	Для Каждого ВыражениеПредиката Из Предикаты Цикл
		
		ИмяПараметра = "Параметр_" + ЮТОбщий.ЧислоВСтроку(ЗначенияПараметров.Количество() + 1);
		Шаблон = ШаблонУсловия(ВыражениеПредиката.ВидСравнения, ВидыСравнения);
		
		Условие = СтрШаблон(Шаблон, ВыражениеПредиката.ИмяРеквизита, ИмяПараметра);
		
		КоллекцияУсловий.Добавить(Условие);
		ЗначенияПараметров.Вставить(ИмяПараметра, ВыражениеПредиката.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонУсловия(Знач Выражение, ВыраженияПредикатов)
	
	Отрицание = ЮТПредикатыКлиентСервер.ЭтоВыраженияОтрицания(Выражение);
	Если Отрицание Тогда
		Выражение = ЮТПредикатыКлиентСервер.ВыраженияБезОтрицания(Выражение);
	КонецЕсли;
	
	Если Выражение = ВыраженияПредикатов.Равно Тогда
		Шаблон = "%1 = &%2";
	ИначеЕсли Выражение = ВыраженияПредикатов.Больше Тогда
		Шаблон = "%1 > &%2";
	ИначеЕсли Выражение = ВыраженияПредикатов.БольшеРавно Тогда
		Шаблон = "%1 >= &%2";
	ИначеЕсли Выражение = ВыраженияПредикатов.Меньше Тогда
		Шаблон = "%1 < &%2";
	ИначеЕсли Выражение = ВыраженияПредикатов.МеньшеРавно Тогда
		Шаблон = "%1 <= &%2";
	ИначеЕсли Выражение = ВыраженияПредикатов.ИмеетТип Тогда
		Шаблон = "ТИПЗНАЧЕНИЯ(%1) = &%2";
	ИначеЕсли Выражение = ВыраженияПредикатов.Содержит Тогда
		Шаблон = "%1 ПОДОБНО ""%%"" + &%2 + ""%%""";
	ИначеЕсли Выражение = ВыраженияПредикатов.Заполнено Тогда
		// TODO Реализовать
		ВызватьИсключение "Проверка заполненности пока не поддерживается";
	Иначе
		ВызватьИсключение "Неподдерживаемое выражения предикатов " + Выражение;
	КонецЕсли;
	
	Если Отрицание Тогда
		Шаблон = СтрШаблон("НЕ (%1)", Шаблон);
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

Процедура ЗаполнитьВыбираемыеПоля(ОписаниеЗапроса, Знач ВыбираемыеПоля)
	
	ТипПараметра = ТипЗнч(ВыбираемыеПоля);
	
	Если ТипПараметра = Тип("Строка") Тогда
		ВыбираемыеПоля = ЮТОбщий.РазложитьСтрокуВМассивПодстрок(ВыбираемыеПоля, ",", Истина);
		ТипПараметра = Тип("Массив");
	КонецЕсли;
	
	Если ТипПараметра = Тип("Массив") Тогда
		
		ОписаниеЗапроса.ВыбираемыеПоля = ВыбираемыеПоля;
		
	ИначеЕсли ТипПараметра = Тип("Структура") Тогда
		
		Для Каждого Поле Из ВыбираемыеПоля Цикл
			Выражение = СтрШаблон("%1 КАК %2", Поле.Значение, Поле.Ключ);
			ОписаниеЗапроса.ВыбираемыеПоля.Добавить(Выражение);
		КонецЦикла;
		
	Иначе
		
		ВызватьИсключение ЮТОбщий.НеподдерживаемыйПараметрМетода("ЮТЗапросыКлиентСервер.ЗаполнитьВыбираемыеПоля", ВыбираемыеПоля);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
