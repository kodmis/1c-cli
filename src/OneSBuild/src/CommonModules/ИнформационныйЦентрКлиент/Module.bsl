
#Область ПрограммныйИнтерфейс

// Процедура-обработчик при нажатии на информационную ссылку.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - контекст управляемой формы.
//	Элемент - ГруппаФормы - группа формы.
//
Процедура НажатиеНаИнформационнуюСсылку(Форма, Элемент) Экспорт
	
	Гиперссылка = Форма.ИнформационныеСсылки.НайтиПоЗначению(Элемент.Имя);
	
	Если Гиперссылка <> Неопределено Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Гиперссылка.Представление);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик при нажатии на "Все" информационные ссылки.
//
// Параметры:
//	ПутьКФорме - Строка - полный путь к форме.
//
Процедура НажатиеНаСсылкуВсеИнформационныеСсылки(ПутьКФорме) Экспорт

	ПараметрыФормы = Новый Структура("ПутьКФорме", ПутьКФорме);
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ИнформационныеСсылкиВКонтексте", ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму со всеми обращениями в службу поддержки.
//
Процедура ОткрытьОбращенияВСлужбуПоддержки() Экспорт
	
	БазаПодключенаКУСП = БазаПодключенаКУСП();
	Если БазаПодключенаКУСП Тогда
		
		КодПользователя = ПрочитатьСКомпьютераКодПользователяДляУСП();
		Если Не ЗначениеЗаполнено(КодПользователя) Тогда
			ОткрытьФормуВводаКодаПользователя();
			Возврат;
		КонецЕсли;
		
		EmailПользователя = EmailПользователя();
		Если Не ЗначениеЗаполнено(EmailПользователя) Тогда
			ТекстСообщения = НСтр("ru='Для работы с обращениями нужно заполнить e-mail пользователя.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		РезультатПроверкиКода = ПроверитьКодПользователяДляУСП(КодПользователя, EmailПользователя);
			
		Если Не РезультатПроверкиКода.КодВерный Тогда
			ОткрытьФормуВводаКодаПользователя();
			Возврат;
		КонецЕсли;
			
		ОткрытьСписокОбращенийВУСП(КодПользователя);
		
	Иначе
		
		ОткрытьФормуПодключенияКУСП(БазаПодключенаКУСП);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму с обсуждениями на форуме.
// @skip-warning ПустойМетод - особенность реализации.
//
Процедура ОткрытьОбсужденияНаФоруме() Экспорт 
КонецПроцедуры

// Открывает форму с Центром идей.
// @skip-warning ПустойМетод - особенность реализации.
//
Процедура ОткрытьЦентрИдей() Экспорт 
КонецПроцедуры

// Открывает форму отображения всех новостей.
// @skip-warning ПустойМетод - особенность реализации.
//
Процедура ПоказатьВсеСообщения() Экспорт
КонецПроцедуры

// Определяет, подключена ли локальная база к службе поддержки
// 
// Возвращаемое значение:
//  Булево - Истина, если база подключена к УСП
//
Функция БазаПодключенаКУСП() Экспорт
	
	ДанныеНастроек = ИнформационныйЦентрВызовСервера.ДанныеНастроекИнтеграцииСУСП();
	Возврат ДанныеНастроек.ПодтвержденКодДляИнтеграцииСУСП;
	
КонецФункции

// Открывает взаимодействие по обращению.
//
// Параметры:
//	ИдентификаторОбращения - УникальныйИдентификатор - идентификатор обращения.
//	ИдентификаторВзаимодействия - УникальныйИдентификатор - идентификатор взаимодействия.
//	ТипВзаимодействия - Строка - тип взаимодействия.
//	Входящее - Булево - признак: входящее сообщение или нет.
//	Просмотрено - Булево - признак: просмотрено сообщение, или нет.
//
Процедура ОткрытьВзаимодействиеВСлужбуПоддержки(ИдентификаторОбращения, ИдентификаторВзаимодействия, ТипВзаимодействия, 
	Входящее, Просмотрено = Истина, КодПользователя = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторОбращения", ИдентификаторОбращения);
	ПараметрыФормы.Вставить("ИдентификаторВзаимодействия", ИдентификаторВзаимодействия);
	ПараметрыФормы.Вставить("ТипВзаимодействия", ТипВзаимодействия);
	ПараметрыФормы.Вставить("Входящее", Входящее);
	ПараметрыФормы.Вставить("Просмотрено", Просмотрено);
	
	Если ЗначениеЗаполнено(КодПользователя) Тогда
		ПараметрыФормы.Вставить("КодПользователя", КодПользователя);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ВзаимодействиеПоОбращению", ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Открывает форму по отправке сообщения получателю.
//
// Параметры:
//	СоздаватьОбращение - Булево - создавать или нет обращения.
//	ИдентификаторОбращения - УникальныйИдентификатор - 
//
Процедура ОткрытьФормуОтправкиСообщенияВСлужбуПоддержки(СоздаватьОбращение, 
	ИдентификаторОбращения = Неопределено, КодПользователя = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоздаватьОбращение", СоздаватьОбращение);
	Если ИдентификаторОбращения <> Неопределено Тогда 
		ПараметрыФормы.Вставить("ИдентификаторОбращения", ИдентификаторОбращения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодПользователя) Тогда
		ПараметрыФормы.Вставить("КодПользователя", КодПользователя);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ОтправкаСообщенияВСлужбуПоддержки", ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму с обращением в службу поддержки
//
// Параметры:
//	ИдентификаторОбращения - УникальныйИдентификатор - идентификатор обращения.
//
Процедура ОткрытьОбращениеВСлужбуПоддержки(ИдентификаторОбращения, КодПользователя = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторОбращения", ИдентификаторОбращения);
	Если ЗначениеЗаполнено(КодПользователя) Тогда
		ПараметрыФормы.Вставить("КодПользователя", КодПользователя);
	КонецЕсли;
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ВзаимодействияПоОбращению", ПараметрыФормы,, 
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Открывает форму со списком обращений
//
// Параметры:
//  КодПользователя	 - Строка - код пользователя для работы с обращениями
//
Процедура ОткрытьСписокОбращенийВУСП(КодПользователя) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КодПользователя", КодПользователя);
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ОбращенияВСлужбуПоддержки", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму отображения отдельной новости.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - идентификатор новости.
//
Процедура ПоказатьНовость(Идентификатор) Экспорт
КонецПроцедуры

// Открывает форму с содержанием идеи.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
//	ИдентификаторИдеи - Строка - уникальный идентификатор идеи.
//
Процедура ПоказатьИдею(Знач ИдентификаторИдеи) Экспорт
КонецПроцедуры

Процедура ПомещениеФайла(Оповещение, 
	Адрес = Неопределено, 
	ПомещаемыйФайл = Неопределено,
	Интерактивно = Неопределено, 
	ИдентификаторФормы = Неопределено,
	ОповещениеПередПомещением = Неопределено) Экспорт

	//@skip-warning МетодУстарел - особенность реализации.
	НачатьПомещениеФайла(Оповещение, Адрес, ПомещаемыйФайл, Интерактивно, ИдентификаторФормы, ОповещениеПередПомещением);
	
КонецПроцедуры

Процедура ПомещениеФайлов(ОповещениеОЗавершении, ПомещаемыеФайлы, 
	Интерактивно = Неопределено,
	ИдентификаторФормы = Неопределено,
	ОповещениеПередПомещением = Неопределено) Экспорт
	
	//@skip-warning МетодУстарел - особенность реализации.
	НачатьПомещениеФайлов(
		ОповещениеОЗавершении, ПомещаемыеФайлы, Интерактивно, ИдентификаторФормы, ОповещениеПередПомещением)

КонецПроцедуры

Функция ПолучитьФайлИзХранилища(Адрес, ИмяФайла, Интерактивно = Истина) Экспорт
	
	//@skip-warning МетодУстарел - особенность реализации.
	Возврат ПолучитьФайл(Адрес, ИмяФайла, Интерактивно);
	
КонецФункции

Процедура СохранитьКодПользователяНаКомпьютере(КодПользователя) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат;
	#Иначе
		
		РазделенныйКод = ИнформационныйЦентрКлиентСервер.РазделитьКодПользователя(КодПользователя);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		// В сеансе подключения к удаленному рабочему столу Windows каталог временных файлов может быть временным
		// подкаталогом, создаваемым на время сеанса. В этом случае создадим файл в общем каталоге пользователя.
		ПозицияОбщегоКаталога = СтрНайти(ВРег(ИмяВременногоФайла), "\TEMP\", НаправлениеПоиска.СКонца);
		Если ПозицияОбщегоКаталога <> 0 Тогда
			ПозицияПредпоследнегоРазделителя = ПозицияОбщегоКаталога + СтрДлина("\TEMP");
			ПозицияПоследнегоРазделителя = СтрНайти(ИмяВременногоФайла, "\", НаправлениеПоиска.СКонца);
			Если ПозицияПоследнегоРазделителя > ПозицияПредпоследнегоРазделителя Тогда
				ИмяВременногоФайла = Лев(ИмяВременногоФайла, ПозицияПредпоследнегоРазделителя - 1)
				+ Сред(ИмяВременногоФайла, ПозицияПоследнегоРазделителя);
			КонецЕсли;
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(РазделенныйКод[1]);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		
		ИнформационныйЦентрВызовСервера.СохранитьКодПользователя(ИмяКомпьютера(), РазделенныйКод[0], ИмяВременногоФайла);
		
	#КонецЕсли
	
КонецПроцедуры

// Открывает непросмотренные взаимодействия.
//
// Параметры:
//	ИдентификаторОбращения - УникальныйИдентификатор - идентификатор обращения.
//	СписокНеПросмотренныхВзаимодействий - СписокЗначений - список непросмотренных взаимодействий.
//
Процедура ОткрытьНепросмотренныеВзаимодействия(ИдентификаторОбращения, СписокНеПросмотренныхВзаимодействий, КодПользователя) Экспорт 
	
	Если СписокНеПросмотренныхВзаимодействий.Количество() = 1 Тогда 
		ПервоеВзаимодействие = СписокНеПросмотренныхВзаимодействий.Получить(0).Значение;
		ОткрытьВзаимодействиеВСлужбуПоддержки(ИдентификаторОбращения, ПервоеВзаимодействие.Идентификатор, 
			ПервоеВзаимодействие.Тип, ПервоеВзаимодействие.Входящее, Ложь, КодПользователя);
	Иначе
		Параметры = Новый Структура;
		Параметры.Вставить("СписокНеПросмотренныхВзаимодействий", СписокНеПросмотренныхВзаимодействий);
		Параметры.Вставить("ИдентификаторОбращения", ИдентификаторОбращения);
		
		Если ЗначениеЗаполнено(КодПользователя) Тогда
			Параметры.Вставить("КодПользователя", КодПользователя);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.НеПросмотренныеВзаимодействия", Параметры,,
			Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьСсылку(Href, Element, HTMLДокумент = Неопределено) Экспорт
	
	ВыбраннаяСсылка = Неопределено;
	
	Если Href <> Неопределено Тогда
		// Если у данных события заполнено свойство Href - будем считать что переход будет по этой ссылке.
		ВыбраннаяСсылка = Href;
	Иначе
		Попытка
			// Если у элемента события заполнено свойство Href и элемент AREA - 
			// будем считать что переход будет по этой ссылке.
			Если ВРег(Element.tagName) = "AREA" Тогда
				ВыбраннаяСсылка = Element.Href;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПустаяСтрока(ВыбраннаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если Найти(ВыбраннаяСсылка, "javascript:_1c") = 1 Тогда
			
			// FF - используется javascript такого вида
			ПозицияНавигационнойСсылки = Найти(ВыбраннаяСсылка, "e1cib/");
			
			Если ПозицияНавигационнойСсылки <> 0 Тогда
				ВыбраннаяСсылка = 
				"v8doc:" 
				+ Сред(
				ВыбраннаяСсылка, 
				ПозицияНавигационнойСсылки, 
				СтрДлина(ВыбраннаяСсылка) - ПозицияНавигационнойСсылки - 2);
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияРазделителя = Найти(ВыбраннаяСсылка, "#");
		ПозицияВнутреннейНавигационнойСсылки = Найти(ВыбраннаяСсылка, "#e1cib/");
		
		Если ПозицияРазделителя = 1  Тогда
			
			// Safari - передается просто относительная ссылка
			Возврат;
			
		КонецЕсли;
		
		Если Найти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
			
			// Chrome, IE - передаётся полная ссылка
			Если ПозицияРазделителя <> 0 И ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	#Иначе
		Если Найти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
			
			ElementID = Сред(ВыбраннаяСсылка, Найти(ВыбраннаяСсылка, "#") + 1);
			ElementByID = HTMLДокумент.getElementById(ElementID);
			
			Если ElementByID <> Неопределено Тогда
				ElementByID.scrollIntoView(true);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	#КонецЕсли
	
	СхемаСсылки = ОпределитьСхемуСсылки(ВыбраннаяСсылка);
	
	Если СхемаСсылки = "e1c://" Тогда
		
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
	
	ИначеЕсли (СхемаСсылки = "http://" И Найти(ВыбраннаяСсылка, "e1cib") > 0)
		ИЛИ (СхемаСсылки = "https://" И Найти(ВыбраннаяСсылка, "e1cib") > 0) Тогда
		
		Если Не ПерейтиПоВнутреннейНавигационнойСсылке(ВыбраннаяСсылка) Тогда
			ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		КонецЕсли;
		
	ИначеЕсли СхемаСсылки = "http://"
		Или СхемаСсылки = "https://"
		Или СхемаСсылки = "ftp://"
		Или СхемаСсылки = "file://" Тогда
		
		#Если ВебКлиент Тогда
			ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		#Иначе
			ЗапуститьПриложение(ВыбраннаяСсылка);
		#КонецЕсли
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ПрочитатьСКомпьютераКодПользователяДляУСП()
	
	#Если ВебКлиент Тогда
		
		Возврат "";
		
	#Иначе
		
		ИмяКомпьютера = ИмяКомпьютера();
		КодНаКомпьютере = ИнформационныйЦентрВызовСервера.ПрочитатьКодПользователя(ИмяКомпьютера);
		
		Если Не ЗначениеЗаполнено(КодНаКомпьютере) Тогда
			Возврат "";
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(КодНаКомпьютере.ВременныйФайлЧастиКода);
			РазделенныйКод = Новый Массив;
			РазделенныйКод.Добавить(КодНаКомпьютере.ЧастьКодаВИБ);
			РазделенныйКод.Добавить(ТекстовыйДокумент.ПолучитьТекст());
			КодПользователя = ИнформационныйЦентрКлиентСервер.СобратьКодПользователя(РазделенныйКод);
			Возврат КодПользователя;
		Исключение // файл удален или поврежден
			ИнформационныйЦентрВызовСервера.ЗаписатьПредупреждение(
			НСтр("ru='Не найдены сохраненные учетные данные пользователя службы поддержки'"));
			Возврат "";
		КонецПопытки;
		
	#КонецЕсли
	
КонецФункции

// Проверяет код пользователя для работы со службой поддержки.
//
// Параметры:
//  КодПользователя	 - Строка - проверяемый код
//  Email			 - Строка - e-mail пользователя, код которого проверяется
// 
// Возвращаемое значение:
//  Структура - с полями:
//  	* КодВерный - Булево
//  	* ТекстСообщения - Строка - заполянется, если код не верный
//
Функция ПроверитьКодПользователяДляУСП(КодПользователя, Email)
	
	Возврат ИнформационныйЦентрВызовСервера.ПроверитьКодПользователя(КодПользователя, Email);
	
КонецФункции

// Открывает форму для ввода код пользователя для работы с обращениями в службу поддержку из локальной базы
//
Процедура ОткрытьФормуВводаКодаПользователя()
	
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ФормаВводаКодаПользователя");
	
КонецПроцедуры

// Открывает форму для подключения локальной базы к службе поддержки
//
Процедура ОткрытьФормуПодключенияКУСП(Знач БазаПодключена = Неопределено) Экспорт
	
	Если БазаПодключена = Неопределено Тогда
		БазаПодключена = БазаПодключенаКУСП();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("БазаПодключена", БазаПодключена);
	ОткрытьФорму("Обработка.ИнформационныйЦентр.Форма.ФормаПодключенияКСлужбеПоддержки", ПараметрыФормы);
	
КонецПроцедуры

// E-mail пользователя для работы с обращениями в службу поддержки
// 
// Возвращаемое значение:
//  Строка - e-mail
//
Функция EmailПользователя()
	
	Возврат ИнформационныйЦентрВызовСервера.EmailПользователя();
	
КонецФункции

Функция ПерейтиПоВнутреннейНавигационнойСсылке(НавигационнаяСсылка)
	
	ПозицияВнутреннейНавигационнойСсылки = Найти(НавигационнаяСсылка, "#e1cib/");
	Если ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВнутренняяНавигационнаяСсылка = Сред(НавигационнаяСсылка, ПозицияВнутреннейНавигационнойСсылки + 1);
	Попытка
		ПерейтиПоНавигационнойСсылке(ВнутренняяНавигационнаяСсылка);
	Исключение
		// Внутренней навигационный ссылки может не быть в базе.
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьСхемуСсылки(Href)
	
	Схемы = Новый Массив;
	Схемы.Добавить("v8doc:");
	Схемы.Добавить("http://");
	Схемы.Добавить("https://");
	Схемы.Добавить("ftp://");
	Схемы.Добавить("e1c://");
	Схемы.Добавить("file://");
	Схемы.Добавить("mailto:");
	
	Для Каждого Схема Из Схемы Цикл
		Если СтрНачинаетсяС(Href, Схема) Тогда
			Возврат Схема;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти