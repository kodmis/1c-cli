///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение внешних компонент".
// ОбщийМодуль.ПолучениеВнешнихКомпонент.
//
// Серверные функции загрузки файлов внешних компонент:
//  - получение измененных файлов внешних компонент регламентным заданием в тихом режиме (без участия пользователя);
//  - получение файлов актуальных версий внешних компонент;
//  - получение файлов версий внешних компонент;
//  - обработки событий Библиотеки технологии сервиса;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает таблицу, которая используется как параметр для получения
// версий внешних компонент из сервиса Портала 1С:ИСТ. См функцию
// ПолучениеВнешнихКомпонент.ВерсииВнешнихКомпонент и
// ПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание запроса внешних компонент:
//    **Идентификатор - Строка - содержит уникальный идентификатор внешней
//                    компоненты, который указывается пользователем в базе публикаций;
//    **Версия        - Строка, Неопределено - содержит версию компоненты, которую необходимо
//                    получить из сервиса внешних компонент;
//
Функция ОписаниеВнешнихКомпонент() Экспорт
	
	ОписательВнешнихКомпонент = Новый ТаблицаЗначений;
	ОписательВнешнихКомпонент.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ОписательВнешнихКомпонент.Колонки.Добавить("Версия",        ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	Возврат ОписательВнешнихКомпонент;
	
КонецФункции

// Выполняет загрузку файлов актуальных версий внешних компонент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - описание внешних компонент, которые необходимо,
//                             загрузить в ИБ. См. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//                             Если в таблице заполнена версия внешней компоненты, будет выполнена
//                             проверка номера версии, т.е. если номер версии в сервисе равен номеру версии
//                             в ИБ, файл не будет загружен и для версии будет установлена ошибка АктуальнаяВерсия.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки внешних компонент:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о загруженных
//                                внешних компонентах:
//     **Идентификатор        - Строка - содержит идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//     **Версия               - Строка, Неопределено - содержит номер версии загруженного компонента;
//     **ДатаВерсии           - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//     **Наименование         - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//     **ИмяФайла             - Строка, Неопределено - содержит имя файла, установленное
//                              в при создании версии внешней компоненты;
//     **Размер               - Число - размер файла;
//     **АдресФайла           - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//     **КодОшибки            - Строка - содержит код ошибки загрузки внешней компоненты:
//                               - <Пустая строка> - обновление загружено успешно;
//                               - ОтсутствуетКомпонента - в сервисе внешних компонент
//                                 не обнаружена внешняя компонента по переданному идентификатору;
//                               - ФайлНеЗагружен - при попытке загрузить файл внешней компоненты из сервиса,
//                                 возникла ошибка;
//                               - АктуальнаяВерсия - при получении последней (актуальной) внешней компоненты
//                                 не обнаружена более новая версия.
//
// Пример:
//	// 1. Обновление версии
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "InputDevice";
//	СтрокаТаблицы.Версия        = "8_1_7_0"; // Допустимо оставить версию пустой.
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки:
//	Результат.КодОшибки          = "";
//	Результат.СообщениеОбОшибке  = "";
//	Результат.ИнформацияОбОшибке = "";
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "InputDevice";
//	СтрокаРезультат.Версия        = "8_1_8_0";
//	СтрокаРезультат.ДатаВерсии    = '10.01.2017 18:00';
//	СтрокаРезультат.Наименование  = "1С:Сканеры штрихкода (NativeApi)";
//	СтрокаРезультат.ИмяФайла      = "Драйвер1СУстройстваВводаNative_8_1_8_0.zip";
//	СтрокаРезультат.АдресФайла    = [uid временного хранилища];
//	СтрокаРезультат.КодОшибки     = "";
//
//	// 2. Ошибка работы с сервисом
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_1";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки                = "СервисВременноНедоступен";
//	Результат.СообщениеОбОшибке        = "Сервис временно не доступен в связи с регламентными работами.";
//	Результат.ИнформацияОбОшибке       = "Не удалось подключиться к сервису внешних компонент. Сервис временно недоступен.";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	// 3. Ошибка загрузки внешней компоненты
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_2";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки          = "";
//	Результат.СообщениеОбОшибке  = "";
//	Результат.ИнформацияОбОшибке = "";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "ProtonScanner";
//	СтрокаРезультат.Версия        = Неопределено;
//	СтрокаРезультат.ДатаВерсии    = Неопределено;
//	СтрокаРезультат.Наименование  = Неопределено;
//	СтрокаРезультат.ИмяФайла      = Неопределено;
//	СтрокаРезультат.АдресФайла    = Неопределено;
//	СтрокаРезультат.КодОшибки     = "АктуальнаяВерсия";
//
Функция АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент) Экспорт
	
	// 1. Проверка доступности загрузки внешних компонент
	// из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Проверка запроса внешних компонент.
	Если ОписаниеВнешнихКомпонент.Количество() = 0 Тогда
		РезультатОперации = ОписаниеРезультатаЗагрузки();
		УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
		Возврат ОписаниеРезультатаЗагрузки();
	КонецЕсли;
	
	// 3. Проверка данных для запроса внешних компонент.
	РезультатОперации = ПроверитьЗаполнениеДанныхВнешнихКомпонент(
		ОписаниеВнешнихКомпонент);
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 4. Получение информации об актуальных версиях внешних компонент
	// из сервиса.
	РезультатОперации = ИнформацияОбАктуальныхВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 5. Определение актуальных версий.
	ОбработатьАктуальныеВерсии(ОписаниеВнешнихКомпонент, РезультатОперации.ДанныеВнешнихКомпонент);
	
	// 6. Загрузка файлов внешних компонент.
	ЗагрузитьФайлыВнешнихКомпонент(РезультатОперации);
	
	// 7. Подготовка результат загрузки.
	УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузка файлов версий внешних компонент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - описание внешних компонент, которые необходимо,
//                             загрузить в ИБ. См. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки внешних компонент:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке      - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке     - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о загруженных
//                              внешних компонентах:
//     **Идентификатор        - Строка - содержит идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//     **Версия               - Строка, Неопределено - содержит номер версии загруженного компонента;
//     **ДатаВерсии           - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//     **Наименование         - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//     **ИмяФайла             - Строка, Неопределено - содержит имя файла, установленное
//                              в при создании версии внешней компоненты;
//     **Размер               - Число - размер файла;
//     **АдресФайла           - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//     **КодОшибки            - Строка - содержит код ошибки загрузки внешней компоненты:
//                               - <Пустая строка> - обновление загружено успешно;
//                               - ОтсутствуетКомпонента - в сервисе внешних компонент
//                                 не обнаружена внешняя компонента по переданному идентификатору;
//                               - ФайлНеЗагружен - при попытке загрузить файл внешней компоненты из сервиса,
//                                 возникла ошибка;
//                               - ОтсутствуетВерсия - в сервисе внешних компонент не обнаружена версия внешней компонента
//                                 по переданному номеру версии.
//
// Пример:
//	// 1. Обновление версии
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "InputDevice";
//	СтрокаТаблицы.Версия        = "8_1_8_0";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки:
//	Результат.КодОшибки          = "";
//	Результат.СообщениеОбОшибке  = "";
//	Результат.ИнформацияОбОшибке = "";
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "InputDevice";
//	СтрокаРезультат.Версия        = "8_1_8_0";
//	СтрокаРезультат.ДатаВерсии    = '10.01.2017 18:00';
//	СтрокаРезультат.Наименование  = "1С:Сканеры штрихкода (NativeApi)";
//	СтрокаРезультат.ИмяФайла      = "Драйвер1СУстройстваВводаNative_8_1_8_0.zip";
//	СтрокаРезультат.АдресФайла    = [uid временного хранилища];
//	СтрокаРезультат.КодОшибки     = "";
//
//	// 2. Ошибка работы с сервисом
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_1";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки                = "СервисВременноНедоступен";
//	Результат.СообщениеОбОшибке        = "Сервис временно не доступен в связи с регламентными работами.";
//	Результат.ИнформацияОбОшибке       = "При подключении к сервису ХХХХХХХХ возникли ошибки ХХХХХХХ.";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	// 3. Ошибка загрузки внешней компоненты
//
//	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
//	ОписаниеВнешнихКомпонент = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
//
//	СтрокаТаблицы = ОписаниеВнешнихКомпонент.Добавить();
//	СтрокаТаблицы.Идентификатор = "ProtonScanner";
//	СтрокаТаблицы.Версия        = "1_2";
//
//	Результат = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
//
//	// Результат загрузки
//	Результат.КодОшибки                = "";
//	Результат.СообщениеОбОшибке        = "";
//	Результат.ИнформацияОбОшибке       = "";
//	Результат.ОписаниеВнешнихКомпонент = Неопределено;
//
//	СтрокаРезультата = Результат.ОписаниеВнешнихКомпонент[0];
//	СтрокаРезультат.Идентификатор = "ProtonScanner";
//	СтрокаРезультат.Версия        = Неопределено;
//	СтрокаРезультат.ДатаВерсии    = Неопределено;
//	СтрокаРезультат.Наименование  = Неопределено;
//	СтрокаРезультат.ИмяФайла      = Неопределено;
//	СтрокаРезультат.АдресФайла    = Неопределено;
//	СтрокаРезультат.КодОшибки     = "ОтсутствуетВерсия";
//
Функция ВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент) Экспорт
	
	// 1. Проверка доступности загрузки внешних компонент
	// из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Проверка запроса внешних компонент.
	Если ОписаниеВнешнихКомпонент.Количество() = 0 Тогда
		РезультатОперации = ОписаниеРезультатаЗагрузки();
		УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
		Возврат ОписаниеРезультатаЗагрузки();
	КонецЕсли;
	
	// 3. Проверка данных для запроса внешних компонент.
	РезультатОперации = ПроверитьЗаполнениеДанныхВнешнихКомпонент(
		ОписаниеВнешнихКомпонент);
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;

	
	// 4. Получение информации об актуальных версиях внешних компонент
	// из сервиса.
	РезультатОперации = ИнформацияОВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// 5. Загрузка файлов внешних компонент.
	ЗагрузитьФайлыВнешнихКомпонент(РезультатОперации);
	
	// 6. Подготовка результат загрузки.
	УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
	
	Возврат РезультатОперации;
	
КонецФункции

// Проверяет возможность загрузки внешних компонент.
//
// Возвращаемое значение:
//  Булево - если Истина, загрузка внешних компонент доступна.
//
Функция ДоступнаЗагрузкаВнешнихКомпонент() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Или Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеКомпоненты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаВнешнихКомпонент(0),
		443,
		НСтр("ru = 'Сервис внешних компонент (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаВнешнихКомпонент(1),
		443,
		НСтр("ru = 'Сервис внешних компонент (eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.3.1.7";
		Обработчик.Процедура           = "ПолучениеВнешнихКомпонент.ОбновитьНастройкиПолучениеВнешнихКомпонент";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("0589c734-f2a8-4af1-97b1-6e8deb4830d6");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Обновление настроек получения внешних компонент.'"),
			ИмяСобытияЖурналаРегистрации());
	КонецЕсли;
	
КонецПроцедуры

// Добавляет регламентное задание проверки обновлений внешних компонент.
//
Процедура ОбновитьНастройкиПолучениеВнешнихКомпонент(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Получение внешних компонент"". Начало обновления.'"),
		Ложь);
	
	ДобавитьРегламентноеЗаданиеОбновления();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Получение внешних компонент"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	СтрОбработчик = Обработчики.Добавить();
	СтрОбработчик.ВидДанных      = ВидПоставляемыхДанныхВнешниеКомпоненты();
	СтрОбработчик.КодОбработчика = ВидПоставляемыхДанныхВнешниеКомпоненты();
	СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхВнешниеКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = "";
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			Идентификатор = Характеристика.Value;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеКомпоненты = Новый Массив;
	
	ИнтеграцияПодсистемБИП.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(
		ИспользуемыеКомпоненты);
	
	МодульПолучениеВнешнихКомпонентВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(
		"ПолучениеВнешнихКомпонентВМоделиСервисаПереопределяемый");
	МодульПолучениеВнешнихКомпонентВМоделиСервиса.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(
		ИспользуемыеКомпоненты);
	
	Загружать = (ИспользуемыеКомпоненты.Найти(Идентификатор) <> Неопределено);
	
КонецПроцедуры
// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхВнешниеКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	МодульВнешниеКомпоненты = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ОписаниеКомпоненты      = МодульВнешниеКомпоненты.ОписаниеПоставляемойОбщейКомпоненты();
	
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			ОписаниеКомпоненты.Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			ОписаниеКомпоненты.Версия = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ДатаВерсии" Тогда
			ОписаниеКомпоненты.ДатаВерсии = СтрокаВДату(Характеристика.Value);
		ИначеЕсли Характеристика.Code = "Наименование" Тогда
			ОписаниеКомпоненты.Наименование = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "ИмяФайла" Тогда
			ОписаниеКомпоненты.ИмяФайла = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеКомпоненты.ПутьКФайлу = ПутьКФайлу;
	МодульВнешниеКомпоненты.ОбновитьОбщуюКомпоненту(ОписаниеКомпоненты);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДобавитьРегламентноеЗаданиеОбновления();
	Иначе
		УдалитьРегламентноеЗаданиеОбновления();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеВнешнихКомпонент"
//
Процедура ОбновлениеВнешнихКомпонент() Экспорт
	
	// Регламентные задания блокируются на время служебных
	// операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	
	// 1. Проверка доступности получения внешних компонент из сервиса.
	ПроверитьДоступностьЗагрузки();
	
	// 2. Формирование запроса для загрузки внешних компонент.
	МодульВнешниеКомпоненты  = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
	ОписаниеВнешнихКомпонент = МодульВнешниеКомпоненты.АвтоматическиОбновляемыеКомпоненты();
	РезультатОперации        = АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	
	// 3. Обработка загруженных компонент.
	Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		МодульВнешниеКомпоненты.ОбновитьВнешниеКомпоненты(РезультатОперации.ДанныеВнешнихКомпонент);
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеВнешнихКомпонент"
// при обновлении ИБ или при подключении Интернет-поддержки пользователей.
//
Процедура ДобавитьРегламентноеЗаданиеОбновления()
	
	// При работе в режиме коробки обновление внешних компонент производится
	// регламентным заданием.
	Если Не ОбщегоНазначения.РазделениеВключено()
		И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
		ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ЗаданияОбновления.Количество() = 0 Тогда
			
			// Чтобы не создавать пиковых нагрузок на сервис,
			// время обновления будет выбрано случайным образом
			// между 00:00 и 06:00.
			Генератор = Новый ГенераторСлучайныхЧисел;
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 21600);
			Расписание.ПериодПовтораДней = 1;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
			ПараметрыЗадания.Вставить("Расписание",    Расписание);
			ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление внешних компонент'"));
			
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Создано регламентное задание обновления внешних компонент.'"),
				Ложь,
				Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеВнешнихКомпонент"
// при обновлении ИБ или при отключении от Интернет-поддержки пользователей.
//
Процедура УдалитьРегламентноеЗаданиеОбновления()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	ТипЗадания = ТипЗнч(ЗаданияОбновления);
	Если ТипЗадания = Тип("Массив") Тогда
		Если ЗаданияОбновления.Количество() > 0 Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(ЗаданияОбновления[0].УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли ТипЗадания = Тип("ТаблицаЗначений") Тогда
		Если ЗаданияОбновления.Количество() > 0 Тогда
			Если ЗаданияОбновления.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(ЗаданияОбновления[0].УникальныйИдентификатор);
			ИначеЕсли ЗаданияОбновления.Колонки.Найти("Идентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(ЗаданияОбновления[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Удалено регламентное задание обновления внешних компонент'"),
		Ложь,
		Метаданные.РегламентныеЗадания.ОбновлениеВнешнихКомпонент);
	
КонецПроцедуры

#КонецОбласти

#Область ВызовОперацийСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /external-components/version/latest.

// Возвращает список описаний актуальных версий компонент, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент  - ТаблицаЗначений - см. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки              - Строка -код ошибки сервиса внешних компонент;
//    *СообщениеОбОшибке      - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке     - Строка - описание ошибки для администратора;
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений - информация о внешних компонент:
//      **Идентификатор       - Строка - содержит уникальный идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//      **Версия              - Строка, Неопределено - содержит номер версии загруженного компонента;
//      **ДатаВерсии          - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//       **Наименование       - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//      **ИмяФайла            - Строка, Неопределено - содержит имя файла, установленное
//                             в при создании версии внешней компоненты;
//      **ИдентификаторФайла  - Строка - содержит URL, по которому доступно скачивание
//                             файла внешней компоненты;
//      **КонтрольнаяСумма    - Строка - содержит хеш MD5 закодированный в строку base64.
//                             Используется для проверки целостности файлов;
//      **АдресФайла          - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//      **КодОшибки           - Строка - содержит код ошибки загрузки внешней компоненты.
//
Функция ИнформацияОбАктуальныхВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент)
	
	Идентификаторы = ОписаниеВнешнихКомпонент.ВыгрузитьКолонку("Идентификатор");
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации об актуальных версиях внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации    = ОписаниеРезультатаЗагрузки();
	ПараметрыПодключения = ИнициализироватьПараметрыОбновления();
	
	URLОперации = URLОперацииСервисаВнешнихКомпонент(
		"/version/latest",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = versionlatest(
		Идентификаторы,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить актуальные версии внешних компонент.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|При получении информации об актуальных версиях внешних компонент сервис вернул ошибку.
					|URL: %2
					|Код ошибки: %3
					|Подробная информация:
					|%4'"),
				Строка(РезультатОперации.СообщениеОбОшибке),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработатьОтветСервиса(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеВнешнихКомпонент,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение актуальных версий внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;

КонецФункции

// Формирует параметры запроса для операции
// /external-components/version/latest.
//
Функция versionlatest(Идентификаторы, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "programNick":"nick",
	//    "externalComponentList":[nick1,nick2],
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//    },
	//    "additionalParameters" : {
	//        "key":"value"
	//    }
	// }
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalComponentNickList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого Идентификатор Из Идентификаторы Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /external-components/version.

// Возвращает список описаний версий компонент, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  ОписаниеВнешнихКомпонент  - ТаблицаЗначений - см. функцию ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки              - Строка -код ошибки сервиса внешних компонент;
//    *СообщениеОбОшибке      - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке     - Строка - описание ошибки для администратора;
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений - информация о внешних компонент:
//      **Идентификатор       - Строка - содержит уникальный идентификатор внешней компоненты, который
//                              указывается пользователем при создании новой компоненты;
//      **Версия              - Строка, Неопределено - содержит номер версии загруженного компонента;
//      **ДатаВерсии          - Дата, Неопределено - содержит дату выхода версии загруженного,
//                              компонента установленную в при заполнении информации о версии
//                              внешней компоненты;
//      **Наименование       - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                              относится версия;
//      **ИмяФайла            - Строка, Неопределено - содержит имя файла, установленное
//                             в при создании версии внешней компоненты;
//      **ИдентификаторФайла  - Строка - содержит URL, по которому доступно скачивание
//                             файла внешней компоненты;
//      **КонтрольнаяСумма    - Строка - содержит хеш MD5 закодированный в строку base64.
//                             Используется для проверки целостности файлов;
//      **АдресФайла          - Строка, Неопределено - содержит адрес файла внешней
//                              компоненты во временно хранилище;
//      **КодОшибки           - Строка - содержит код ошибки загрузки внешней компоненты.
//
Функция ИнформацияОВерсияхВнешнихКомпонент(ОписаниеВнешнихКомпонент)
	
	Идентификаторы = ОписаниеВнешнихКомпонент.ВыгрузитьКолонку("Идентификатор");
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации о версиях внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации    = ОписаниеРезультатаЗагрузки();
	ПараметрыПодключения = ИнициализироватьПараметрыОбновления();
	
	URLОперации = URLОперацииСервисаВнешнихКомпонент(
		"/version",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "Ошибка, ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = version(
		ОписаниеВнешнихКомпонент,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункции.ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить информацию о версиях внешних компонент.
					|
					|При получении информации о версиях внешних компонент сервис вернул ошибку.
					|
					|Техническая информация об ошибке:
					|При получении информации о версиях внешних компонент сервис вернул ошибку.
					|URL: %1
					|Код ошибки: %2
					|Подробная информация:
					|%3'"),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ОбработатьОтветСервиса(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеВнешнихКомпонент,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение версий внешних компонент: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;

КонецФункции

// Формирует параметры запроса для операции
// /external-components/version.
//
Функция version(ОписаниеВнешнихКомпонент, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	// "programNick":"nick",
	// "externalComponents": {
	// [
	//   {
	//    "externalComponentNick": "nick1",
	//    "version": "1"
	//    }
	//   {
	//   "externalComponentNick": "nick2",
	//   "version": "2"
	//   }
	// ],
	// "authenticationInfo": {
	//   "login": "User",
	//   "password":"Pass"},
	// "additionalParameters" : {
	//   "key":"value"}
	//}
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalComponents");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого ОписаниеВнешнейКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("externalComponentNick");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОписаниеВнешнейКомпоненты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("version");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ОписаниеВнешнейКомпоненты.Версия);
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ответа сервиса.

// Чтение ответа операции /external-components/version/latest
// и /external-components/version.
//
Процедура ОбработатьОтветСервиса(
		ТелоJSON,
		ДанныеВнешнихКомпонент,
		ДоменРасположенияСерверовИПП = 1)
	
	// Описание ответа сервиса:
	// externalComponentNick - идентификатор внешней компоненты в сервисе;
	// externalComponentName - наименование внешней компоненты.
	// version - номер актуальной версии;
	// fileUrl - ссылка на скачивание файла актуальной версии;
	// hashSum - контрольная сумма файла;
	// buildDate - дата создания версии;
	// fileSize - размер файла;
	// errorCode - код ошибки;
	//
	// {
	//   [
	//     {
	//      "externalComponentNick": "Идентификатор",
	//      "externalComponentName": "Электронная подпись",
	//      "version": "1",
	//      "buildData": "2017120212122323",
	//      "fileName": "ElectronicSignature_1_1_2_1.zip",
	//      "fileUrl": "https://fileUrl",
	//      "hashSum": "Контрольная сумма",
	//      "fileSize": "Размер в байтах",
	//      "errorCode": "Код ошибки"
	//     }
	//   ]
	//}
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ Сервиса внешних компонент:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	ТекстОшибки    = "";
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "externalComponentName" Тогда
				ОписательВерсии = ДанныеВнешнихКомпонент.Добавить();
				ОписательВерсии.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "externalComponentNick" Тогда
				ОписательВерсии.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "version" Тогда
				ОписательВерсии.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileUrl" Тогда
				ОписательВерсии.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "hashSum" Тогда
				ОписательВерсии.КонтрольнаяСумма = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "buildDate" Тогда
				ОписательВерсии.ДатаВерсии = ПривестиЗначениеКДате(
					ЗначениеСвойстваJSON(ЧтениеОтвета, ""));
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileSize" Тогда
				ОписательВерсии.Размер = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileName" Тогда
				ОписательВерсии.ИмяФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "errorCode" Тогда
				ОписательВерсии.КодОшибки = ПереопределитьКодОшибкиВнешнейКомпоненты(ЗначениеСвойстваJSON(ЧтениеОтвета, ""));
				Если ЗначениеЗаполнено(ОписательВерсии.КодОшибки) Тогда
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '- при загрузке внешней компоненты %1 сервис вернул ошибку %2;'"),
						ОписательВерсии.Идентификатор,
						ОписательВерсии.КодОшибки);
					ТекстОшибки = ТекстОшибки + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибки при получении информации о внешних компонентах:
				|%1'"),
			ТекстОшибки);
		ЗаписатьИнформациюВЖурналРегистрации(ТекстОшибки);
	КонецЕсли;
	
	// Проверка формата ответа.
	ХостСервиса = ХостСервисаВнешнихКомпонент(ДоменРасположенияСерверовИПП);
	Для Каждого ОписательВерсии Из ДанныеВнешнихКомпонент Цикл
		Если Не ЗначениеЗаполнено(ОписательВерсии.Идентификатор) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат ответа Сервиса внешних компонент.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписательВерсии.ИдентификаторФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОписательВерсии.ИдентификаторФайла);
		Если Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6) <> Прав(НРег(СокрЛП(ХостСервиса)), 6) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный адрес файла обновления внешней компоненты.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файлов /version/download/.

// Выполняет загрузку файлов по переданным ранее URL.
//
// Параметры:
//  РезультатОперации  - Структура - см. функцию ПолучениеВнешнихКомпонент.ОписаниеРезультатаЗагрузки().
//
Процедура ЗагрузитьФайлыВнешнихКомпонент(РезультатОперации)
	
	ДанныеАутентификации = ДанныеАутентификации();
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		РезультатОперации.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке;
		РезультатОперации.СообщениеОбОшибке  = Результат.ИнформацияОбОшибке;
		Возврат;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	ПараметрыЗапросаJSON = versiondownload(ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "POST");
	ПараметрыОтправки.Вставить("Таймаут",                  2560);
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки",       ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("Заголовки",                Заголовки);
	
	Для Каждого ОписаниеВнешнейКомпоненты Из РезультатОперации.ДанныеВнешнихКомпонент Цикл
		
		// Если ИБ уже содержит актуальную версию внешней компоненты, повторная
		// загрузка файла не требуется.
		Если ЗначениеЗаполнено(ОписаниеВнешнейКомпоненты.КодОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла внешней компоненты: %1'"),
				ОписаниеВнешнейКомпоненты.ИдентификаторФайла),
			Ложь);
		
		ИнтернетПоддержкаПользователей.ПроверитьURL(ОписаниеВнешнейКомпоненты.ИдентификаторФайла);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			ОписаниеВнешнейКомпоненты.ИдентификаторФайла,
			,
			,
			ПараметрыОтправки);
		
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки          = КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла внешней компоненты %1: 
					|%2'"),
				ОписаниеВнешнейКомпоненты.Идентификатор,
				РезультатОтправки.СообщениеОбОшибке);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл внешней компоненты %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				ОписаниеВнешнейКомпоненты.Идентификатор,
				Строка(РезультатОперации.СообщениеОбОшибке),
				РезультатОперации.КодОшибки,
				ОписаниеВнешнейКомпоненты.ИдентификаторФайла,
				РезультатОтправки.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Продолжить;
			
		КонецЕсли;
		
		КонтрольнаяСуммаФайл = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(РезультатОтправки.Содержимое);
		Если ОписаниеВнешнейКомпоненты.КонтрольнаяСумма <> КонтрольнаяСуммаФайл Тогда
			РезультатОперации.КодОшибки          = КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла внешней компоненты %1: 
					|%2'"),
				ОписаниеВнешнейКомпоненты.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл внешней компоненты %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				ОписаниеВнешнейКомпоненты.Идентификатор);
			ЗаписатьИнформациюВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке);
			
			Продолжить;
		КонецЕсли;
		
		ОписаниеВнешнейКомпоненты.АдресФайла = ПоместитьВоВременноеХранилище(РезультатОтправки.Содержимое);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует параметры запроса для операции
// /version/download/.
//
Функция versiondownload(ДанныеАутентификации)
	
	// {
	//  "programNick":"nick",
	//  "login": "User",
	//  "password":"Pass"
	// }
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Удаляет из результата служебные данные, которые использовались для
// загрузки внешних компонент.
//
// Параметры:
//  ДанныеВнешнихКомпонент - ТаблицаЗначений - см. функцию
//                               ПолучениеВнешнихКомпонент.ОписаниеРезультатаЗагрузки;
Процедура УдалитьСлужебныеДанныеВнешнихКомпонент(ДанныеВнешнихКомпонент)
	
	ДанныеВнешнихКомпонент.Колонки.Удалить("ИдентификаторФайла");
	ДанныеВнешнихКомпонент.Колонки.Удалить("КонтрольнаяСумма");
	
КонецПроцедуры

// Производит определение версий, для которых не требуется обновление,
// которые определяются на основании данных ИБ.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - см. функцию
//                          ПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент().
//  ДанныеВнешнихКомпонент - ТаблицаЗначений - см. функцию
//                          ПолучениеВнешнихКомпонент.ОписаниеРезультатаЗагрузки().
//
Процедура ОбработатьАктуальныеВерсии(ОписаниеВнешнихКомпонент, ДанныеВнешнихКомпонент)
	
	ТекстОшибки = "";
	Для Каждого ОписаниеЗапроса Из ОписаниеВнешнихКомпонент Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ОписаниеЗапроса.Идентификатор);
		
		НайденныеСтроки = ДанныеВнешнихКомпонент.НайтиСтроки(Отбор);
		Для каждого ОписательВерсии Из НайденныеСтроки Цикл
			Если ОписательВерсии.Версия = ОписаниеЗапроса.Версия Тогда
				ОписательВерсии.КодОшибки = "АктуальнаяВерсия";
				ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '- при загрузке внешней компоненты %1 сервис вернул ошибку %2;'"),
						ОписательВерсии.Идентификатор,
						ОписательВерсии.КодОшибки);
					ТекстОшибки = ТекстОшибки + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибки при получении информации о внешних компонентах:
				|%1'"),
			ТекстОшибки);
		ЗаписатьИнформациюВЖурналРегистрации(
			ТекстОшибки,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру, которая будет использоваться как
// возвращаемое значение см. функций ПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент
// и ПолучениеВнешнихКомпонент.ВерсииВнешнихКомпонент.
//
// Возвращаемое значение:
//   Структура - результат загрузки внешних компонент:
//    *КодОшибки                - Строка - содержит код ошибки сервиса внешних компонент;
//    *КраткоеОписаниеОшибки    - Строка - содержит описание ошибки сервиса внешних компонент.
//                                Сообщение предназначено для вывода информации об ошибке
//                                рядовому пользователя конфигурации;
//    *ПодробноеОписаниеОшибки  - Строка - содержит полное описание ошибки сервиса внешних компонент.
//                                Сообщение предназначено для записи в журнал регистрации; 
//    *ДанныеВнешнихКомпонент - ТаблицаЗначений, Неопределено - содержит информацию о загруженных
//                                внешних компонентах:
//     **Идентификатор          - Строка - содержит уникальный идентификатор внешней компоненты, который
//                                указывается пользователем при создании новой компоненты;
//     **Версия                 - Строка, Неопределено - содержит номер версии загруженного компонента;
//     **ДатаВерсии             - Дата, Неопределено - содержит дату выхода версии загруженного,
//                                компонента установленную в при заполнении информации о версии
//                                внешней компоненты;
//     **Наименование           - Строка, Неопределено - содержит наименование внешней компоненты, к которой
//                                относится версия;
//     **ИмяФайла               - Строка, Неопределено - содержит имя файла, установленное
//                                в при создании версии внешней компоненты;
//     **ИдентификаторФайла     - Строка - содержит URL, по которому доступно скачивание
//                                файла внешней компоненты;
//     **Размер                 - Число - размер файла;
//     **КонтрольнаяСумма       - Строка - содержит хеш MD5 закодированный в строку base64.
//                                Используется для проверки целостности файлов;
//     **АдресФайла             - Строка, Неопределено - содержит адрес файла внешней
//                                компоненты во временно хранилище;
//     **КодОшибки              - Строка - содержит код ошибки загрузки внешней компоненты;
//
Функция ОписаниеРезультатаЗагрузки()
	
	ДанныеВнешнихКомпонент = Новый ТаблицаЗначений;
	ДанныеВнешнихКомпонент.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеВнешнихКомпонент.Колонки.Добавить("Версия",        ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеВнешнихКомпонент.Колонки.Добавить("ДатаВерсии",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеВнешнихКомпонент.Колонки.Добавить("Наименование",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеВнешнихКомпонент.Колонки.Добавить("ИмяФайла",      ОбщегоНазначения.ОписаниеТипаСтрока(260));
	ДанныеВнешнихКомпонент.Колонки.Добавить("АдресФайла",    ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеВнешнихКомпонент.Колонки.Добавить("КодОшибки",     ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ДанныеВнешнихКомпонент.Колонки.Добавить("Размер",        ОбщегоНазначения.ОписаниеТипаЧисло(32));
	
	// Служебные колонки, будут удалены после загрузки файлов.
	ДанныеВнешнихКомпонент.Колонки.Добавить("ИдентификаторФайла",  ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ДанныеВнешнихКомпонент.Колонки.Добавить("КонтрольнаяСумма",    ОбщегоНазначения.ОписаниеТипаСтрока(64));
	
	ОписательРезультатаЗагрузки = Новый Структура;
	ОписательРезультатаЗагрузки.Вставить("КодОшибки",              "");
	ОписательРезультатаЗагрузки.Вставить("СообщениеОбОшибке",      "");
	ОписательРезультатаЗагрузки.Вставить("ИнформацияОбОшибке",     "");
	ОписательРезультатаЗагрузки.Вставить("ДанныеВнешнихКомпонент", ДанныеВнешнихКомпонент);
	
	Возврат ОписательРезультатаЗагрузки;
	
КонецФункции

// Создает структуру настроек подключения к сервису внешних компонент.
//
Функция ИнициализироватьПараметрыОбновления()
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыЗагрузки.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Определяет по коду состояния тип ошибки сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если ПустаяСтрока(КодСостояния) Тогда
		Возврат "";
	КонецЕсли;
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "НетДоступаКПрограмме";
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат "НеверныйЛогинИлиПароль";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат "ОшибкаПодключения";
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. процедуру
//              ПереопределитьКодОшибкиСервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки)
	
	Если КодОшибки = "НетДоступаКПрограмме" Тогда
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Доступ к обновлениям внешних компонент невозможен, так как ваша программа не находится на <a href = ""https://portal.1c.ru/support/"">официальной поддержке</a>.'"));
	ИначеЕсли КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		Возврат НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность данных авторизации и повторите
			|попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису внешних компонент. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом внешних компонент.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису внешних компонент.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = КодОшибкиНеизвестнаяОшибка() Тогда
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.
			|Подробнее см. в журнале регистрации.'");;
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сервиса тип ошибки подсистемы.
//
// Параметры:
//  КодОшибки - Строка - код ошибки ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки подсистемы.
//
Функция ПереопределитьКодОшибкиВнешнейКомпоненты(КодОшибки)
	
	Если Не ЗначениеЗаполнено(КодОшибки) Тогда
		Возврат "";
	ИначеЕсли ВРег(КодОшибки) = ВРег("Component_not_found") Тогда
		Возврат "ОтсутствуетКомпонента";
	ИначеЕсли ВРег(КодОшибки) = ВРег("Component_version_not_found")
		Или ВРег(КодОшибки) = ВРег("Actual_component_version_not_found") Тогда
		Возврат "ОтсутствуетВерсия";
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о внешних компонентах
			|загружается из поставляемых данных.'");
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для обновления внешних компонент необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку доступности загрузки файлов версий внешних компонент.
//
Процедура ПроверитьДоступностьЗагрузки()
	
	Если Не ДоступнаЗагрузкаВнешнихКомпонент() Тогда
		ТекстИсключения = НСтр("ru = 'Получение внешних компонент недоступно при работе в модели сервиса.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет параметры запроса внешних компонент, перед обращением к сервису.
//
// Параметры:
//  ОписаниеВнешнихКомпонент - ТаблицаЗначений - см. функцию ОписаниеВнешнихКомпонент.
//
// Возвращаемое значение:
//  Структура - см. функцию ОписаниеРезультатаЗагрузки.
//
Функция ПроверитьЗаполнениеДанныхВнешнихКомпонент(ОписаниеВнешнихКомпонент)
	
	СообщениеОбОшибке = "";
	РезультатОперации = ОписаниеРезультатаЗагрузки();
	
	Для Каждого ОписаниеКомпоненты Из ОписаниеВнешнихКомпонент Цикл
		Если Не ЗначениеЗаполнено(ОписаниеКомпоненты.Идентификатор) Тогда
			СообщениеОбОшибке = НСтр("ru = 'В запросе на загрузку внешних компонент отсутствует идентификаторы компоненты. Заполните идентификатор и повторите загрузку.'");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		РезультатОперации.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		УдалитьСлужебныеДанныеВнешнихКомпонент(РезультатОперации.ДанныеВнешнихКомпонент);
		РезультатОперации.СообщениеОбОшибке  = СообщениеОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = СообщениеОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет преобразование формата YYYY-MM-DDThh:mm:ss±hh:mm
// в дату.
//
// Параметры:
//  Значение - Строка - значение которое необходимо преобразовать.
//
// Возвращаемое значение:
//  Дата - результат преобразования.
//
Функция ПривестиЗначениеКДате(Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	// Часовой пояс игнорируется, т.к. при расчете значения
	// при интерактивной загрузке он также не учитывается.
	ЗначениеДата = Лев(Значение, СтрДлина(Значение) - 10);
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, ".", ""));
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, "-", ""));
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, ":", ""));
	ЗначениеДата = СокрЛП(СтрЗаменить(ЗначениеДата, "T", ""));
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Возврат ОписаниеТипа.ПривестиЗначение(ЗначениеДата);
	
КонецФункции

// Добавление в запись JSON данных аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                         добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Определяет URL для вызова сервиса получения внешних компонент.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу;
//  Домен     - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервисаВнешнихКомпонент(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаВнешнихКомпонент(Домен)
		+ "/api/external-components"
		+ Операция;
	
КонецФункции 

// Определяет хост для вызова сервиса получения внешних компонент.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаВнешнихКомпонент(Домен)
	
	
	Если Домен = 0 Тогда
		Возврат "external-components-manager.1c.ru";
	Иначе
		Возврат "external-components-manager.1c.eu";
	КонецЕсли;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено)
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Получение внешних компонент.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ЧтениеОбъектаJSON    - ЧтениеJSON - чтение JSON для определения значения;
//  ЗначениеПоУмолчанию  - Неопределено, Строка, Число, Булево - определяет
//                         значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1. Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Определяет вид данных и код обработчика для поставляемых данных.
//
// Возвращаемое значение:
//  Строка - наименование вида данных.
//
Функция ВидПоставляемыхДанныхВнешниеКомпоненты()
	
	Возврат "ExternalComponents";
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен()
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде "ДД.ММ.ГГГГ чч:мм:сс".
// 
// Возвращаемое значение:
//  Дата - полученная дата.
//
Функция СтрокаВДату(Значение)
	
	Время = Сред(Значение, СтрНайти(Значение, " ", НаправлениеПоиска.СКонца));
	Время = СтрЗаменить(Время, ":", "");
	Время = СтрЗаменить(Время, " ", "");
	Дата  = Лев(Значение,  СтрНайти(Значение, " "));
	Дата  = СтрЗаменить(Дата, " ", "");
	Дата  = Сред(Дата, 7) + Сред(Дата, 4, 2) + Лев(Дата, 2);
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат    = ОписаниеТипа.ПривестиЗначение(Дата + Время);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
