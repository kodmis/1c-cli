#Область ПрограммныйИнтерфейс

// Инициализирует структуру параметров для получения файла с сервера на клиент.
// Для использования в ФайлыБТСКлиент.ПолучитьФайлИнтерактивно
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ИмяФайлаИлиАдрес - Строка - Адрес во временном хранилище, либо имя файла на сервере (без пути) для
//        получения клиентом. Если указан адрес во временном хранилище, то при попытке получения файлов
//        более 4Гб будет вызвано исключение
//    * ПутьФайлаWindows - Строка - Путь к файлу при работе сеанса на Windows сервере. Значение игнорируется,
//        если в параметре ИмяФайлаИлиАдрес указан адрес во временном хранилище
//    * ПутьФайлаLinux - Строка - Путь к файлу при работе сеанса на Linux сервере. Значение игнорируется,
//        если в параметре ИмяФайлаИлиАдрес указан адрес во временном хранилище
//    * ОписаниеОповещенияОЗавершении - ОписаниеОповещения, Неопределено - Содержит описание процедуры, которая
//        будет вызвана после получения файла. Если указано Неопределено, никакой обработчик запускаться
//        не будет. Вызываемая процедура должна иметь параметры:
//           Результат - Структура, Неопределено - при отказе от получения файла, либо структура со свойствами:
//             ИмяФайлаИлиАдрес - Строка - Адрес во временном хранилище, либо имя файла на сервере (без пути)
//             ИмяФайлаНаКлиенте - Строка - полное имя клиентского файла, полученного клиентом
//           ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//            объекта ОписаниеОповещения
//    * БлокируемаяФорма - ФормаКлиентскогоПриложения, Неопределено - Владелец формы получения файла для блокировки.
//        Если указано Неопределено, на время загрузки будет заблокирован весь интерфейс.
//    * ЗаголовокДиалогаСохранения - Строка, Неопределено - заголовок диалога выбора и формы загрузки файла.
//        Если указано Неопределено, заголовки будут сформированы автоматически.
//    * ФильтрДиалогаСохранения - Строка, Неопределено - фильтр диалога выбора файла для сохранения.
//        Если указано Неопределено, в диалоге можно будет выбрать любой файл.
//    * ИмяФайлаДиалогаСохранения - Строка - Имя клиентского файла, которое будет предложено в диалоге 
//        выбора файла для сохранения.
//    * ПоказатьВопросОткрытьСохранить - Булево - признак того, что при получении файла необходимо
//        дополнительно задать вопрос, и при положительном ответе сразу открыть файл. Если указано Ложь,
//        вопрос задаваться не будет. Если в параметре ИмяФайлаИлиАдрес указан адрес во временном хранилище,
//        то значение параметра игнорируется, а поведение регулируется платформой.
//
Функция ПараметрыПолученияФайла() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайлаИлиАдрес", Неопределено);
	Результат.Вставить("ПутьФайлаWindows", Неопределено);
	Результат.Вставить("ПутьФайлаLinux", Неопределено);
	Результат.Вставить("ОписаниеОповещенияОЗавершении", Неопределено);
	Результат.Вставить("БлокируемаяФорма", Неопределено);
	Результат.Вставить("ЗаголовокДиалогаСохранения", Неопределено);
	Результат.Вставить("ФильтрДиалогаСохранения", Неопределено);
	Результат.Вставить("ИмяФайлаДиалогаСохранения", Неопределено);
	Результат.Вставить("ПоказатьВопросОткрытьСохранить", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Инициализирует структуру параметров для помещения файла из файловой системы клиента на сервер.
// Для использования в ФайлыБТСКлиент.ПоместитьФайлИнтерактивно
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ИмяФайлаИлиАдрес - Строка - Адрес во временном хранилище, либо имя файла на сервере (без пути)
//        для помещения. Если указан адрес во временном хранилище, то при попытке помещения файлов более 4Гб
//        будет вызвано исключение, а для помещения файла более 100Мб потребуется расширение для работы с файлами.
//        Если указан путь к файлу на сервере, то результат будет записан в файл, а для успешной работы в веб 
//        так же потребуется установка расширения для работы с файлами.
//    * ПутьФайлаWindows - Строка - Путь к файлу при работе сеанса на Windows сервере. Значение игнорируется,
//        если в параметре ИмяФайлаИлиАдрес указан адрес во временном хранилище
//    * ПутьФайлаLinux - Строка - Путь к файлу при работе сеанса на Linux сервере. Значение игнорируется,
//        если в параметре ИмяФайлаИлиАдрес указан адрес во временном хранилище
//    * ОписаниеОповещенияОЗавершении - ОписаниеОповещения, Неопределено - Содержит описание процедуры, которая
//        будет вызвана после помещения файла. Если указано Неопределено, никакой обработчик запускаться не будет
//        Вызываемая процедура должна иметь параметры:
//           Результат - Структура, Неопределено - Неопределено при отказе, либо структура со свойствами:
//             ИмяФайлаИлиАдрес - Строка - Адрес во временном хранилище, либо имя файла на сервере (без пути)
//             ИмяФайлаНаКлиенте - Строка - полное имя клиентского файла, помещенного на сервер
//          ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта
//            ОписаниеОповещения
//    * БлокируемаяФорма - ФормаКлиентскогоПриложения, Неопределено - Владелец формы загрузки файла для блокировки.
//        Если указано Неопределено, на время загрузки будет заблокирован весь интерфейс
//    * ЗаголовокДиалогаВыбора - Строка, Неопределено - заголовок диалога выбора и формы загрузки файла. Если указано
//        Неопределено, заголовки будут сформированы автоматически.
//    * ФильтрДиалогаВыбора - Строка, Неопределено - фильтр диалога выбора файла. Если указано Неопределено, в диалоге
//        можно будет выбрать любой файл
//    * ИмяФайлаДиалогаВыбора - Строка - Имя клиентского файла, которое будет предложено в диалоге выбора файла
//    * МаксимальныйРазмер - Число, Неопределено - максимальный размер клиентского файла, доступного к помещению
//      на сервер. Если указано Неопределено, размер клиентсколго файла контролироваться не будет
//
Функция ПараметрыПомещенияФайла() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайлаИлиАдрес", Неопределено);
	Результат.Вставить("ПутьФайлаWindows", Неопределено);
	Результат.Вставить("ПутьФайлаLinux", Неопределено);
	Результат.Вставить("ОписаниеОповещенияОЗавершении", Неопределено);
	Результат.Вставить("БлокируемаяФорма", Неопределено);
	Результат.Вставить("ЗаголовокДиалогаВыбора", Неопределено);
	Результат.Вставить("ФильтрДиалогаВыбора", Неопределено);
	Результат.Вставить("ИмяФайлаДиалогаВыбора", Неопределено);
	Результат.Вставить("МаксимальныйРазмер", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Получает размещенный во временном хранилище или на диске сервера файл, и сохраняет его на клиенте
// в локальной файловой системе пользователя
//
// Параметры:
//   ПараметрыПолученияФайла - Структура - со свойствами см. ФайлыБТСКлиент.ПараметрыПолученияФайла
//
// Пример:
//   Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаКлиентом", ЭтотОбъект);
//   ПараметрыПолученияФайла = ФайлыБТСКлиент.ПараметрыПолученияФайла();
//   ПараметрыПолученияФайла.ИмяФайлаИлиАдрес = "data.zip";
//   ПараметрыПолученияФайла.ПутьФайлаWindows = "\\tmp-files\";
//   ПараметрыПолученияФайла.ПутьФайлаLinux = "/mnt/tmp-files/";
//   ПараметрыПолученияФайла.ОписаниеОповещенияОЗавершении = Оповещение;
//   ПараметрыПолученияФайла.ФильтрДиалогаСохранения = НСтр("ru = 'Архивы (*.zip)|*.zip'");
//   ФайлыБТСКлиент.ПолучитьФайлИнтерактивно(ПараметрыПолученияФайла);
//
Процедура ПолучитьФайлИнтерактивно(ПараметрыПолученияФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПолученияФайла.ИмяФайлаИлиАдрес) Тогда
		ТекстОшибки = НСтр("ru = 'Не укано исходное хранение файла на сервере'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыПолученияФайла.ИмяФайлаИлиАдрес)
		ИЛИ СтрНачинаетсяС(ПараметрыПолученияФайла.ИмяФайлаИлиАдрес, "e1cib/data/") Тогда
		ИспользоватьПорционнуюПередачу = Ложь;
	Иначе
		ИспользоватьПорционнуюПередачу = Истина;
	КонецЕсли;
	ПараметрыПолученияФайла.Вставить("ИспользоватьПорционнуюПередачу", ИспользоватьПорционнуюПередачу);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляПолучения", ЭтотОбъект, ПараметрыПолученияФайла);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение,, НЕ ИспользоватьПорционнуюПередачу);
	
КонецПроцедуры

// Помещает выбранный на клиенте файл из локальной файловой системы пользователя во временное хранилище
// или в файл на диске сервера
//
// Параметры:
//   ПараметрыПомещенияФайла - Структура - со свойствами см. ФайлыБТСКлиент.ПараметрыПомещенияФайла
//
// Пример:
//   Оповещение = Новый ОписаниеОповещения("ПослеПомещенияФайлаНаСервер", ЭтотОбъект);
//   ПараметрыПомещенияФайла = ФайлыБТСКлиент.ПараметрыПомещенияФайла();
//   ПараметрыПомещенияФайла.ИмяФайлаИлиАдрес = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
//   ПараметрыПомещенияФайла.ОписаниеОповещенияОЗавершении = Оповещение;
//   ПараметрыПомещенияФайла.ФильтрДиалогаВыбора = НСтр("ru = 'Архивы (*.zip)|*.zip'");
//   ФайлыБТСКлиент.ПоместитьФайлИнтерактивно(ПараметрыПомещенияФайла);
//
Процедура ПоместитьФайлИнтерактивно(ПараметрыПомещенияФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПомещенияФайла.ИмяФайлаИлиАдрес) Тогда
		ТекстОшибки = НСтр("ru = 'Не указано целевое хранение файла на сервере'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыПомещенияФайла.ИмяФайлаИлиАдрес) Тогда
		ИспользоватьПорционнуюПередачу = Ложь;
		МаксимальныйРазмер = ФайлыБТСКлиентСервер.МаксимальныйРазмерВременногоХранилища();
		Если ПараметрыПомещенияФайла.МаксимальныйРазмер = Неопределено Тогда
			ПараметрыПомещенияФайла.МаксимальныйРазмер = МаксимальныйРазмер;
		Иначе
			ПараметрыПомещенияФайла.МаксимальныйРазмер = Мин(ПараметрыПомещенияФайла.МаксимальныйРазмер, МаксимальныйРазмер);
		КонецЕсли;
	Иначе
		ИспользоватьПорционнуюПередачу = Истина;
	КонецЕсли;
	
	ПараметрыПомещенияФайла.Вставить("ИспользоватьПорционнуюПередачу", ИспользоватьПорционнуюПередачу);
	
	ТекстПредложения = СтрШаблон(НСтр("ru = 'Для загрузки файлов, размером более %1, требуется установить расширение для работы с 1С:Предприятием.
	|С этим расширением работа в веб-клиенте станет удобней не только при работе с большими файлами.'"), ФайлыБТСКлиентСервер.ПредставлениеРазмераФайла(
	ФайлыБТСКлиентСервер.ПриемлемыйРазмерВременногоХранилища()));
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляПомещения", ЭтотОбъект, ПараметрыПомещенияФайла);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, НЕ ИспользоватьПорционнуюПередачу);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПослеПодключенияРасширенияДляПолучения(Подключено, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("РасширениеПодключено", Подключено);
	
	Если НЕ ДополнительныеПараметры.ИспользоватьПорционнуюПередачу Тогда
		
		Если Подключено Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеПолученияФайлаИзХранилища", ЭтотОбъект, ДополнительныеПараметры);
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайлаДиалогаСохранения,
			ДополнительныеПараметры.ИмяФайлаИлиАдрес));
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок = ДополнительныеПараметры.ЗаголовокДиалогаСохранения;
			Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайлаДиалогаСохранения;
			Диалог.Фильтр = ДополнительныеПараметры.ФильтрДиалогаСохранения;
			НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, Диалог, Истина);
			
		Иначе
			
			ПолучитьФайл(ДополнительныеПараметры.ИмяФайлаИлиАдрес, ДополнительныеПараметры.ИмяФайлаДиалогаСохранения, Истина);
			
			ОписаниеФайла = Новый Структура();
			ОписаниеФайла.Вставить("ИмяФайлаИлиАдрес", ДополнительныеПараметры.ИмяФайлаИлиАдрес);
			ОписаниеФайла.Вставить("ИмяФайлаНаКлиенте", Неопределено);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, ОписаниеФайла);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПоказатьВопросОткрытьСохранить Тогда
		ПараметрыПолучения = Новый Структура();
		ПараметрыПолучения.Вставить("ИмяФайлаИлиАдрес", ДополнительныеПараметры.ИмяФайлаИлиАдрес);
		ПараметрыПолучения.Вставить("ПутьФайлаWindows", ДополнительныеПараметры.ПутьФайлаWindows);
		ПараметрыПолучения.Вставить("ПутьФайлаLinux", ДополнительныеПараметры.ПутьФайлаLinux);
		ПараметрыПолучения.Вставить("ЗаголовокДиалогаСохранения", ДополнительныеПараметры.ЗаголовокДиалогаСохранения);
		ПараметрыПолучения.Вставить("ФильтрДиалогаСохранения", ДополнительныеПараметры.ФильтрДиалогаСохранения);
		ПараметрыПолучения.Вставить("ИмяФайлаДиалогаСохранения", ДополнительныеПараметры.ИмяФайлаДиалогаСохранения);
		ОткрытьФорму("Обработка.ФайлыБТС.Форма.ПолучениеФайла", ПараметрыПолучения, ДополнительныеПараметры.БлокируемаяФорма,,,, ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
		
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = ДополнительныеПараметры.ЗаголовокДиалогаСохранения;
	Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайлаДиалогаСохранения;
	Диалог.Фильтр = ДополнительныеПараметры.ФильтрДиалогаСохранения;
	Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораИмениФайлаДляПолучения", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеВыбораИмениФайлаДляПолучения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура();
	ПараметрыПолучения.Вставить("ИмяФайлаИлиАдрес", ДополнительныеПараметры.ИмяФайлаИлиАдрес);
	ПараметрыПолучения.Вставить("ПутьФайлаWindows", ДополнительныеПараметры.ПутьФайлаWindows);
	ПараметрыПолучения.Вставить("ПутьФайлаLinux", ДополнительныеПараметры.ПутьФайлаLinux);
	ПараметрыПолучения.Вставить("ЗаголовокДиалогаСохранения", ДополнительныеПараметры.ЗаголовокДиалогаСохранения);
	ПараметрыПолучения.Вставить("ИмяФайлаНаКлиенте", ВыбранныеФайлы[0]);
	ОткрытьФорму("Обработка.ФайлыБТС.Форма.ПолучениеФайла", ПараметрыПолучения, ДополнительныеПараметры.БлокируемаяФорма, , , , ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

Процедура ПослеПолученияФайлаИзХранилища(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		ОписаниеФайла = Новый Структура();
		ОписаниеФайла.Вставить("ИмяФайлаИлиАдрес", ДополнительныеПараметры.ИмяФайлаИлиАдрес);
		ОписаниеФайла.Вставить("ИмяФайлаНаКлиенте", ПолученныеФайлы[0].ПолноеИмя);
	Иначе
		ОписаниеФайла = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, ОписаниеФайла);

КонецПроцедуры

Процедура ПослеПодключенияРасширенияДляПомещения(Подключено, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("РасширениеПодключено", Подключено);
	
	Если ДополнительныеПараметры.БлокируемаяФорма = Неопределено Тогда
		ИдФормы = Новый УникальныйИдентификатор;
	Иначе
		ИдФормы = ДополнительныеПараметры.БлокируемаяФорма.УникальныйИдентификатор;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдФормы);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = ДополнительныеПараметры.ЗаголовокДиалогаВыбора;
	Диалог.Фильтр = ДополнительныеПараметры.ФильтрДиалогаВыбора;
	Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайлаДиалогаВыбора;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	ДополнительныеПараметры.Вставить("ДиалогВыбораФайла", Диалог);
	
	Если ДополнительныеПараметры.ИспользоватьПорционнуюПередачу = Неопределено ИЛИ НЕ ДополнительныеПараметры.ИспользоватьПорционнуюПередачу Тогда
		
		ОповещениеПосле = Новый ОписаниеОповещения("ПослеПомещенияФайлаВХранилище", ЭтотОбъект, ДополнительныеПараметры);
		ОповещениеПеред = Новый ОписаниеОповещения("ПередПомещениемФайлаВХранилище", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОповещениеПосле, , Диалог, Истина, ДополнительныеПараметры.ИдентификаторФормы, ОповещениеПеред);
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораИмениФайлаВДиалоге", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеПомещенияФайлаВХранилище(ВыборВыполнен, Адрес, ВыбранноеИмяФайла, ПараметрыЗагрузки) Экспорт
	
	Если ВыборВыполнен Тогда
		ОписаниеФайла = Новый Структура();
		ОписаниеФайла.Вставить("ИмяФайлаИлиАдрес", Адрес);
		ОписаниеФайла.Вставить("ИмяФайлаНаКлиенте", ВыбранноеИмяФайла);
	Иначе
		ОписаниеФайла = Неопределено;
	КонецЕсли;
	
	ДлительнаяОперация = Неопределено;
	Если ПараметрыЗагрузки.Свойство("ДлительнаяОперация", ДлительнаяОперация) И ДлительнаяОперация <> Неопределено Тогда
		Если ДлительнаяОперация.ОперацияПрервана Тогда
			УдалитьИзВременногоХранилища(Адрес);
			ОписаниеФайла = Неопределено;
		КонецЕсли;
		Если ДлительнаяОперация.Открыта() Тогда
			ДлительнаяОперация.ПрерываниеРазрешено = Истина;
			ДлительнаяОперация.Закрыть();
		КонецЕсли;
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении, ОписаниеФайла);
	
КонецПроцедуры

Процедура ПередПомещениемФайлаВХранилище(СсылкаНаФайл, Отказ, ПараметрыЗагрузки) Экспорт
	
	СвойстваФайла = Новый Структура("Имя, Расширение, Размер", СсылкаНаФайл.Имя, СсылкаНаФайл.Расширение, СсылкаНаФайл.Размер());
	
	ПараметрыПроверки = Новый Структура("ФильтрДиалога, МаксимальныйРазмер, РасширениеПодключено",
	ПараметрыЗагрузки.ФильтрДиалогаВыбора, ПараметрыЗагрузки.МаксимальныйРазмер, ПараметрыЗагрузки.РасширениеПодключено);
	ПроверкаФайлаПередПомещением(СвойстваФайла, Отказ, ПараметрыПроверки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОперации = Новый Структура();
	СвойстваОперации.Вставить("ЗаголовокДиалога", ПараметрыЗагрузки.ЗаголовокДиалогаВыбора);
	СвойстваОперации.Вставить("ПрерываниеРазрешено", Истина);
	ФормаОперации = ОткрытьФорму("Обработка.ФайлыБТС.Форма.ДлительнаяОперация", СвойстваОперации, ПараметрыЗагрузки.БлокируемаяФорма);
	
	ПараметрыЗагрузки.Вставить("ДлительнаяОперация", ФормаОперации);
	
КонецПроцедуры

Процедура ПослеВыбораИмениФайлаВДиалоге(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНаКлиенте = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайлаНаКлиенте", ИмяФайлаНаКлиенте);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществования", ЭтотОбъект, ДополнительныеПараметры);
	ОбъектФС = Новый Файл(ИмяФайлаНаКлиенте);
	ОбъектФС.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

Процедура ПослеПроверкиСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиЭтоФайл", ЭтотОбъект, ДополнительныеПараметры);
	ОбъектФС = Новый Файл(ДополнительныеПараметры.ИмяФайлаНаКлиенте);
	ОбъектФС.НачатьПроверкуЭтоФайл(Оповещение);

КонецПроцедуры

Процедура ПослеПроверкиЭтоФайл(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияРазмера", ЭтотОбъект, ДополнительныеПараметры);
	ОбъектФС = Новый Файл(ДополнительныеПараметры.ИмяФайлаНаКлиенте);
	ОбъектФС.НачатьПолучениеРазмера(Оповещение);
	
КонецПроцедуры

Процедура ПослеПолученияРазмера(Размер, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("РазмерФайла", Размер);
	
	ОбъектФС = Новый Файл(ДополнительныеПараметры.ИмяФайлаНаКлиенте);
	
	СвойстваФайла = Новый Структура("Имя, Расширение, Размер", ОбъектФС.Имя, ОбъектФС.Расширение, Размер);
	
	ПараметрыПроверки = Новый Структура("ФильтрДиалога, МаксимальныйРазмер, РасширениеПодключено",
	ДополнительныеПараметры.ФильтрДиалогаВыбора, ДополнительныеПараметры.МаксимальныйРазмер, ДополнительныеПараметры.РасширениеПодключено);
	Отказ = Ложь;
	ПроверкаФайлаПередПомещением(СвойстваФайла, Отказ, ПараметрыПроверки);
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура();
	ПараметрыПолучения.Вставить("ИмяФайлаИлиАдрес", ДополнительныеПараметры.ИмяФайлаИлиАдрес);
	ПараметрыПолучения.Вставить("ПутьФайлаWindows", ДополнительныеПараметры.ПутьФайлаWindows);
	ПараметрыПолучения.Вставить("ПутьФайлаLinux", ДополнительныеПараметры.ПутьФайлаLinux);
	ПараметрыПолучения.Вставить("ЗаголовокДиалогаВыбора", ДополнительныеПараметры.ЗаголовокДиалогаВыбора);
	ПараметрыПолучения.Вставить("ИмяФайлаНаКлиенте", ДополнительныеПараметры.ИмяФайлаНаКлиенте);
	ПараметрыПолучения.Вставить("ПредставлениеФайла", ФайлыБТСКлиентСервер.ПредставлениеФайла(ДополнительныеПараметры.ИмяФайлаНаКлиенте, Размер));
	ПараметрыПолучения.Вставить("РазмерФайла", Размер);
	ОткрытьФорму("Обработка.ФайлыБТС.Форма.ПомещениеФайла", ПараметрыПолучения, ДополнительныеПараметры.БлокируемаяФорма,,,, ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

Процедура ПроверкаФайлаПередПомещением(СсылкаНаФайл, Отказ, ПараметрыПроверки)
	
	Если СсылкаНаФайл = Неопределено Тогда
		ОбработатьОшибкуПроверки(Отказ, НСтр("ru = 'Не указана ссылка на файл'"));
		Возврат;
	КонецЕсли;
	
	СвойстваФильтра = СвойстваФильтраДиалога(ПараметрыПроверки.ФильтрДиалога);
	Если СвойстваФильтра <> Неопределено 
		И СвойстваФильтра.Расширения.Найти(НРег(СсылкаНаФайл.Расширение)) = Неопределено 
		И СвойстваФильтра.Расширения.Найти("*") = Неопределено Тогда
		ОбработатьОшибкуПроверки(Отказ, СтрШаблон(НСтр("ru = 'Выбран неверный тип файла. Выберите:
		|%1'"), СтрСоединить(СвойстваФильтра.Представления, Символы.ПС)));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПроверки.РасширениеПодключено Тогда
		МаксРазмерБезРасширения = ФайлыБТСКлиентСервер.ПриемлемыйРазмерВременногоХранилища();
		Если СсылкаНаФайл.Размер > МаксРазмерБезРасширения Тогда
			ОбработатьОшибкуПроверки(Отказ, СтрШаблон(НСтр("ru = 'Выбран файл %1 больше %2
			|Для работы в веб клиенте с такими файлами требуется установка расширения 1С:Предприятия.
			|Воспользуйтесь тонким клиентом, либо установите расширение'"),
			СсылкаНаФайл.Имя, ФайлыБТСКлиентСервер.ПредставлениеРазмераФайла(МаксРазмерБезРасширения)));
		КонецЕсли;
	КонецЕсли;
	
	МаксимальныйРазмер = ПараметрыПроверки.МаксимальныйРазмер;
	Если МаксимальныйРазмер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаФайл.Размер > МаксимальныйРазмер Тогда
		Если МаксимальныйРазмер <= 0 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Размер файла должен быть равен %1'"), ФайлыБТСКлиентСервер.ПредставлениеРазмераФайла(0));
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Файл %1 слишком большой. Выберите файл менее %2'"),
			СсылкаНаФайл.Имя, ФайлыБТСКлиентСервер.ПредставлениеРазмераФайла(МаксимальныйРазмер));
		КонецЕсли;
		ОбработатьОшибкуПроверки(Отказ, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуПроверки(Отказ, ТекстПредупреждения)
	
	Отказ = Истина;
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

Функция СвойстваФильтраДиалога(ФильтрДиалога)
	
	Если НЕ ЗначениеЗаполнено(ФильтрДиалога) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Представления, Маски, Расширения", Новый Массив(), Новый Массив(), Новый Массив());
	
	ЭлементыФильтра = СтрРазделить(ФильтрДиалога, "|");
	Пока ЭлементыФильтра.ВГраница() > 0 Цикл
		
		Представление = ЭлементыФильтра[0];
		Маска = ЭлементыФильтра[1];
		
		Результат.Представления.Добавить(Представление);
		Результат.Маски.Добавить(Маска);
		
		ЭлементыМаски = СтрРазделить(Маска, ";");
		Для Каждого ЭлементМаски Из ЭлементыМаски Цикл
			Если ЭлементМаски = "*.*" ИЛИ ЭлементМаски = "*" Тогда
				Результат.Расширения.Добавить("*");
				Прервать;
			Иначе
				Поз = СтрНайти(ЭлементМаски, ".", НаправлениеПоиска.СКонца);
				Если Поз > 0 Тогда
					Результат.Расширения.Добавить(НРег(Сред(ЭлементМаски, Поз)));
				Иначе
					Результат.Расширения.Добавить("");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыФильтра.Удалить(0);
		ЭлементыФильтра.Удалить(0);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти