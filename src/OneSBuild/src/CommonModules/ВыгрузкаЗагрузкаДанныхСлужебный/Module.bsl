////////////////////////////////////////////////////////////////////////////////
// Подсистема "Выгрузка загрузка данных".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список Обработчики процедуры-обработчики обновления, необходимые данной подсистеме.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//   Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт

	Параметры.Вставить("ВыгрузкаЗагрузкаДанныхЗагрузкаПрервана", ОбщегоНазначенияВызовСервераБТС.ЗагрузкаПрервана());
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Выгрузка/загрузка данных

// Выполняет удаление временного файла, ошибки при удалении игнорируются.
//
// Параметры:
//  Путь - Строка - путь к удаляемому файлу.
//
Процедура УдалитьВременныйФайл(Знач Путь) Экспорт
	
	Инфо = Новый Файл(Путь);
	Если Не Инфо.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(Путь);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив всех объектов метаданных, содержащихся в конфигурации.
//  Используется для запуска выгрузки и загрузки данных в конфигурациях, не содержащих БСП.
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных - типы.
//
// Пример:
//  ПараметрыВыгрузки = Новый Структура();
//  ПараметрыВыгрузки.Вставить("ВыгружаемыеТипы", ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьВсеТипыКонфигурации());
//  ПараметрыВыгрузки.Вставить("ВыгружатьПользователей", Истина);
//  ПараметрыВыгрузки.Вставить("ВыгружатьНастройкиПользователей", Истина);
//  ИмяФайла = ВыгрузкаЗагрузкаДанных.ВыгрузитьДанныеТекущейОбластиВАрхив(ПараметрыВыгрузки);
//
//  ПараметрыЗагрузки = Новый Структура();
//  ПараметрыЗагрузки.Вставить("ЗагружаемыеТипы", ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьВсеТипыКонфигурации());
//  ПараметрыЗагрузки.Вставить("ЗагружатьПользователей", Истина);
//  ПараметрыЗагрузки.Вставить("ЗагружатьНастройкиПользователей", Истина);
//  ВыгрузкаЗагрузкаДанных.ЗагрузитьДанныеТекущейОбластиИзАрхива(ИмяФайла, ПараметрыЗагрузки);
//
Функция ПолучитьВсеТипыКонфигурации() Экспорт
	
	МассивКоллекцийМетаданных = Новый Массив();
	
	ЗаполнитьКоллекцииКонстант(МассивКоллекцийМетаданных);
	ЗаполнитьКоллекцииСсылочныхОбъектов(МассивКоллекцийМетаданных);
	ЗаполнитьКоллекцииНаборовЗаписей(МассивКоллекцийМетаданных);
	
	Возврат МассивКоллекцийМетаданных;
	
КонецФункции

// Выгружает данные в каталог.
//
// Параметры:
//	ПараметрыВыгрузки - Структура - содержащая параметры выгрузки данных.
//		Ключи:
//			ВыгружаемыеТипы - Массив Из ОбъектМетаданных - массив объектов метаданных, данные
//				которых требуется выгрузить в архив,
//			ВыгружатьПользователей - Булево - выгружать информацию о пользователях информационной базы,
//			ВыгружатьНастройкиПользователей - Булево - игнорируется если ВыгружатьПользователей = Ложь.
//			Также структура может содержать дополнительные ключи, которые могут быть обработаны внутри
//				произвольных обработчиков выгрузки данных.
//
// Возвращаемое значение:		
//  Структура - с полями:
//  * ИмяФайла - Строка - имя файла архива
//  * Предупреждения - Массив Из Строка - предупреждения пользователю по результатам выгрузки.
//
Функция ВыгрузитьДанныеТекущейОбластиВАрхив(Знач ПараметрыВыгрузки) Экспорт
	
	Контейнер = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.Создать();
	Контейнер.ИнициализироватьВыгрузку(ПараметрыВыгрузки);
	
	Сериализатор = СериализаторXDTOСАннотациейТипов();
	
	Обработчики = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерОбработчиковВыгрузкиДанных.Создать();
	
	Обработчики.ПередВыгрузкойДанных(Контейнер);
	
	СохранитьОписаниеВыгрузки(Контейнер);
	
	Обработки.ВыгрузкаЗагрузкаДанныхМенеджерВыгрузкиДанныхИнформационнойБазы.ВыгрузитьДанныеИнформационнойБазы(
		Контейнер, Обработчики, Сериализатор);
	
	Если ПараметрыВыгрузки.ВыгружатьПользователей Тогда
		
		ВыгрузкаЗагрузкаПользователейИнформационнойБазы.ВыгрузитьПользователейИнформационнойБазы(Контейнер);
		
		Если ПараметрыВыгрузки.ВыгружатьНастройкиПользователей Тогда
			
			Обработки.ВыгрузкаЗагрузкаДанныхМенеджерВыгрузкиНастроекПользователей.ВыгрузитьНастройкиПользователейИнформационнойБазы(
				Контейнер, Обработчики, Сериализатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыгрузитьСхемуКонфигурации(Контейнер, ПараметрыВыгрузки);
	
	Обработчики.ПослеВыгрузкиДанных(Контейнер);
	
	Возврат Новый Структура("ИмяФайла, Предупреждения",
		Контейнер.ФинализироватьВыгрузку(),
		Контейнер.Предупреждения());
	
КонецФункции

// Загружает данные из каталога.
//
// Параметры:
//	ДанныеФайла - Строка, УникальныйИдентификатор, Структура - имя файла, идентификатор файла или данные файла полученные с помощью ZipАрхивы.ПрочитатьАрхив().
//	ПараметрыЗагрузки - см. ВыгрузкаЗагрузкаДанных.ЗагрузитьДанныеТекущейОбластиИзАрхива.ПараметрыЗагрузки.
//
// Возвращаемое значение:
//  Структура:
//  * Предупреждения - Массив Из Строка - предупреждения пользователю по результатам загрузки.
//
Функция ЗагрузитьДанныеТекущейОбластиИзАрхива(Знач ДанныеФайла, Знач ПараметрыЗагрузки) Экспорт
	
	ЕстьУстановленныеРасширения = Ложь;
	Если ПараметрыЗагрузки.Свойство("ДанныеРасширений")
		И ПараметрыЗагрузки.ДанныеРасширений.Свойство("КлючОбластиДанных") Тогда
		Константы.КлючОбластиДанных.Установить(ПараметрыЗагрузки.ДанныеРасширений.КлючОбластиДанных);
	КонецЕсли;
	
	КаталогРасширений.ПрочитатьДанныеВосстанавливаемыхРасширенийОбласти(ПараметрыЗагрузки);
	
	ОчищатьДанные = Истина;
	Если НЕ ПараметрыЗагрузки.Свойство("ОчищатьДанные", ОчищатьДанные) Тогда
		ОчищатьДанные = Истина;
	КонецЕсли;
	
	Если ОчищатьДанные И НЕ ЭтоПродолжениеЗагрузки() Тогда
		РаботаВМоделиСервиса.УдалитьРасширенияОбласти();
	Иначе
		ЕстьУстановленныеРасширения = РасширенияВМоделиСервиса.ЕстьУстановленныеРасширенияИзменяющиеСтруктуруДанных();	
	КонецЕсли;
	
	РасширенияДляВосстановления = Неопределено;
	Если ПараметрыЗагрузки.Свойство("ДанныеРасширений")
		И ПараметрыЗагрузки.ДанныеРасширений.Свойство("РасширенияДляВосстановления", РасширенияДляВосстановления)
		И НЕ ЕстьУстановленныеРасширения Тогда
		
		Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ЕстьУстановленныеРасширения = КаталогРасширений.ВосстановитьРасширенияВНовойОбласти(
				РасширенияДляВосстановления);
		Иначе
			ЕстьУстановленныеРасширения = ВосстановитьРасширения(
				РасширенияДляВосстановления);
		КонецЕсли;
			
	КонецЕсли;
	
	КаталогРасширений.ЗаписатьДанныеВосстанавливаемыхРасширенийОбласти(РасширенияДляВосстановления);
	
	Попытка
		Если ЕстьУстановленныеРасширения Тогда
			Результат = ЗагрузитьДанныеТекущейОбластиИзАрхиваВФоне(ДанныеФайла, ПараметрыЗагрузки);	
		Иначе
			Результат = НачатьЗагрузкуДанныхТекущейОбластиИзАрхива(ДанныеФайла, ПараметрыЗагрузки);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ОписаниеОшибки = Неопределено Тогда
		Возврат Результат;
	Иначе
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецФункции

// Начать загрузку данных текущей области из архива
// 
// Параметры: 
//  ДанныеФайла - Строка, УникальныйИдентификатор, Структура - имя файла, идентификатор файла или данные файла полученные с помощью ZipАрхивы.ПрочитатьАрхив().
//  ПараметрыЗагрузки - Структура - Параметры загрузки:
// * ЗагружаемыеТипы - Массив из ОбъектМетаданных -
// * ЗагружатьПользователей - Булево -
// * ЗагружатьНастройкиПользователей - Булево -
// * СопоставлениеПользователей - ТаблицаЗначений -:
// ** Пользователь - СправочникСсылка.Пользователи -
// ** ИдентификаторПользователяСервиса - УникальныйИдентификатор -
// ** СтароеИмяПользователяИБ - Строка -
// ** НовоеИмяПользователяИБ - Строка -
//  АдресРезультата - Строка, Неопределено - Адрес результата
// 
// Возвращаемое значение: 
//  Структура - Начать загрузку данных текущей области из архива:
// * Предупреждения - Массив из Строка -
//
Функция НачатьЗагрузкуДанныхТекущейОбластиИзАрхива(Знач ДанныеФайла, Знач ПараметрыЗагрузки, 
	Знач АдресРезультата = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеФайла) = Тип("Структура")
		И ДанныеФайла.Свойство("ИдентификаторФайлаИсточника") Тогда
		
		АрхивКопии = ZipАрхивы.ПрочитатьАрхив(ДанныеФайла.ИдентификаторФайлаИсточника);
		ДанныеФайла = ZipАрхивы.ПрочитатьВложенныйНесжатыйАрхив(АрхивКопии,
			ВыгрузкаЗагрузкаОбластейДанных.ИмяФайлаПолногоАрихва());
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("ЗагружаемыеТипы", Новый Массив);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыЗагрузки.ЗагружаемыеТипы,
		ВыгрузкаЗагрузкаОбластейДанных.ПолучитьТипыМоделиДанныхОбласти());
	
	Если Не РаботаВМоделиСервисаПовтИсп.РазделениеВключено() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПараметрыЗагрузки.ЗагружаемыеТипы, 
			ВыгрузкаЗагрузкаДанныхСлужебныйСобытия
				.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке(),
			Истина);
	КонецЕсли;
	
	Обработчики = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерОбработчиковЗагрузкиДанных.Создать();
	
	Контейнер = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.Создать();
	Контейнер.ИнициализироватьЗагрузку(ДанныеФайла, ПараметрыЗагрузки);
	
	ХешСуммаИсточника = Контейнер.ХешСуммаИсточника();
	ХешСуммаПараметров = Контейнер.ХешСуммаПараметров();

	Если ВозможноПродолжениеПроцедурыЗагрузки(ХешСуммаИсточника, ХешСуммаПараметров) Тогда
		ПродолжитьПроцедуруЗагрузки(
			ПараметрыЗагрузки,
			Контейнер,
			Обработчики);
		РезультатЗагрузки = Новый Структура("Предупреждения", Контейнер.Предупреждения());
		Если АдресРезультата <> Неопределено Тогда
			ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресРезультата);
		КонецЕсли;
		Возврат РезультатЗагрузки;
	КонецЕсли;
			
	ИнформацияОВыгрузке = ПрочитатьИнформациюОВыгрузке(Контейнер);
	
	ПроверитьВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИнформацияОВыгрузке);
	
	СтрогаяПроверка = Неопределено;
	Если Не ПараметрыЗагрузки.Свойство("ПроверятьВерсиюКонфигурации", СтрогаяПроверка) Тогда
		СтрогаяПроверка = Истина;
	КонецЕсли;
	ПроверитьВыгрузкаВАрхивеСовместимаСТекущейВерсиейКонфигурации(ИнформацияОВыгрузке, СтрогаяПроверка);
				
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Истина, Ложь);
	КонецЕсли;
	
	Обработчики.ПередОчисткойДанных(Контейнер);
	
	ОчищатьДанные = Истина;
	Если Не ПараметрыЗагрузки.Свойство("ОчищатьДанные", ОчищатьДанные) Тогда
		ОчищатьДанные = Истина;
	КонецЕсли;
	Если ОчищатьДанные Тогда
		РаботаВМоделиСервиса.ОчиститьДанныеОбласти(Истина);
	КонецЕсли;
	
	Обработчики.ПередЗагрузкойДанных(Контейнер);
	
	ЗафиксироватьНачалоПроцедурыЗагрузки(
		ХешСуммаИсточника,
		ХешСуммаПараметров);
				
	ЗагрузитьДанныеИнформационнойБазы(
		ПараметрыЗагрузки,
		Контейнер,
		Обработчики);
	
	РезультатЗагрузки = Новый Структура("Предупреждения", Контейнер.Предупреждения());
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресРезультата);
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Сравнивает совместима ли выгрузка с текущей конфигурацией.
//
// Параметры:
//	ИнформацияОВыгрузке - ОбъектXDTO - см. процедуру "СохранитьОписаниеВыгрузки".
//
// Возвращаемое значение:
//	Булево - Истина, если совпадает.
//
Функция ВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(Знач ИнформацияОВыгрузке) Экспорт
	
	Возврат ИнформацияОВыгрузке.Configuration.Name = Метаданные.Имя;
	
КонецФункции

// Сравнивает совместима ли версия конфигурации с выгруженной.
//
// Параметры:
//	ИнформацияОВыгрузке - ОбъектXDTO - см. процедуру "СохранитьОписаниеВыгрузки".
//
// Возвращаемое значение:
//	Булево - Истина, если совпадает.
//
Функция ВыгрузкаВАрхивеСовместимаСТекущейВерсиейКонфигурации(Знач ИнформацияОВыгрузке) Экспорт
	
	Возврат ИнформацияОВыгрузке.Configuration.Version = Метаданные.Версия;
	
КонецФункции

// Сравнивает совместима ли выгрузка с текущей конфигурацией.
//
// Параметры:
//	ИнформацияОВыгрузке - ОбъектXDTO - см. процедуру "СохранитьОписаниеВыгрузки".
//
Процедура ПроверитьВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИнформацияОВыгрузке) Экспорт
	
	Если Не ВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИнформацияОВыгрузке) Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно загрузить данные из файла, т.к. файл был выгружен из другой конфигурации (файл выгружен из конфигурации %1 и не может быть загружен в конфигурацию %2)'"),
			ИнформацияОВыгрузке.Configuration.Name,
			Метаданные.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает совместима ли версия конфигурации с выгруженной.
//
// Параметры:
//	ИнформацияОВыгрузке - ОбъектXDTO - см. процедуру "СохранитьОписаниеВыгрузки".
//  СтрогаяПроверка - Булево - если Истина, то проверяет на равенство, если Ложь, то версия в выгрузке должна быть меньше либа равна текущей
//
Процедура ПроверитьВыгрузкаВАрхивеСовместимаСТекущейВерсиейКонфигурации(Знач ИнформацияОВыгрузке, Знач СтрогаяПроверка = Ложь) Экспорт
	
	ВыгрузкаСовместима = Ложь;
	Если СтрогаяПроверка Тогда
		ВыгрузкаСовместима = ИнформацияОВыгрузке.Configuration.Version = Метаданные.Версия
	Иначе
		ВыгрузкаСовместима = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ИнформацияОВыгрузке.Configuration.Version, Метаданные.Версия) <= 0;
	КонецЕсли;
	
	Если Не ВыгрузкаСовместима Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно загрузить данные из файла, т.к. файл был выгружен из другой версии конфигурации (файл выгружен из конфигурации версии %1 и не может быть загружен в конфигурацию версии %2)'"),
			ИнформацияОВыгрузке.Configuration.Version,
			Метаданные.Версия);
		
	КонецЕсли;
	
КонецПроцедуры

// Тип данных файла, в котором хранится имя колонки с исходной ссылкой.
//
// Возвращаемое значение:
//	Строка - имя типа.
//
Функция ТипДанныхДляИмениКолонкиТаблицыЗначений() Экспорт
	
	Возврат "1cfresh\ReferenceMapping\ValueTableColumnName";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Типы файлов и структура каталогов выгрузки/загрузки

// Возвращает наименование типа файла с информацией о выгрузке.
// Возвращаемое значение:
//  Строка - наименование типа.
Функция DumpInfo() Экспорт
	Возврат "DumpInfo";
КонецФункции

// Возвращает наименование типа файла с информацией о составе выгрузке.
// Возвращаемое значение:
//  Строка - наименование типа.
Функция PackageContents() Экспорт
	Возврат "PackageContents";
КонецФункции

// Возвращает наименование типа файла с информацией о сопоставлении ссылок.
// Возвращаемое значение:
//  Строка - наименование типа.
Функция ReferenceMapping() Экспорт
	Возврат "ReferenceMapping";
КонецФункции

// Возвращает наименование типа файла с информацией о пересоздании ссылок.
// Возвращаемое значение:
//  Строка - наименование типа.
Функция ReferenceRebuilding() Экспорт
	Возврат "ReferenceRebuilding";
КонецФункции

// Возвращает наименование типа файла, хранящий сериализованные данные информационной базы.
// Возвращаемое значение:
//  Строка - наименование типа.
Функция InfobaseData() Экспорт
	Возврат "InfobaseData";
КонецФункции

// Возвращает наименование типа файла, хранящий сериализованные данные границ последовательности.
// Возвращаемое значение:
//	Строка - наименование типа.
Функция SequenceBoundary() Экспорт
	Возврат "SequenceBoundary";
КонецФункции

// Возвращает наименование типа файла, хранящий сериализованные данные настроек пользователей.
// Возвращаемое значение:
//	Строка - наименование типа.
Функция UserSettings() Экспорт
	Возврат "UserSettings";
КонецФункции

// Возвращает наименование типа файла, хранящий сериализованные данные пользователей.
// Возвращаемое значение:
//	Строка - наименование типа.
Функция Users() Экспорт
	Возврат "Users";
КонецФункции

// Возвращает наименование типа файла, хранящий произвольные данные.
// Возвращаемое значение:
//	Строка - наименование типа.
Функция CustomData() Экспорт
	Возврат "CustomData";
КонецФункции

// Функция формирует правила структуры каталогов в выгрузке.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - структура каталогов:
//	 * DumpInfo - Строка
//	 * Digest - Строка
//	 * Extensions - Строка
//	 * CustomExtensions - Строка
//	 * PackageContents - Строка
//	 * ReferenceMapping - Строка
//	 * ReferenceRebuilding - Строка
//	 * InfobaseData - Строка
//	 * SequenceBoundary - Строка
//	 * Users - Строка
//	 * UserSettings - Строка
//	 * CustomData - Строка
Функция ПравилаФормированияСтруктурыКаталогов() Экспорт
	
	КорневойКаталог = "";
	КаталогДанных = "Data";
	
	Результат = Новый Структура();
	Результат.Вставить(DumpInfo(), КорневойКаталог);
	Результат.Вставить(Digest(), КорневойКаталог);
	Результат.Вставить(Extensions(), КорневойКаталог);
	Результат.Вставить(CustomExtensions(), КорневойКаталог);
	Результат.Вставить(PackageContents(), КорневойКаталог);
	Результат.Вставить(ReferenceMapping(), ReferenceMapping());
	Результат.Вставить(ReferenceRebuilding(), ReferenceRebuilding());
	Результат.Вставить(InfobaseData(), КаталогДанных);
	Результат.Вставить(SequenceBoundary(), КаталогДанных);
	Результат.Вставить(Users(), КорневойКаталог);
	Результат.Вставить(UserSettings(), UserSettings());
	Результат.Вставить(CustomData(), CustomData());
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает типы файлов, которые поддерживают замену ссылок.
//
// Возвращаемое значение:
//	Массив из Строка - массив типов файлов.
//
Функция ТипыФайловПоддерживающиеЗаменуСсылок() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить(InfobaseData());
	Результат.Добавить(SequenceBoundary());
	Результат.Добавить(UserSettings());
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя типа, который будет использован в xml файле для указанного объекта метаданных
// Используется при поиске и замене ссылок при загрузке, при модификации схемы current-config при записи.
// 
// Параметры:
//  Значение - СправочникСсылка, ДокументСсылка, ОбъектМетаданных - объект метаданных или ссылка.
//
// Возвращаемое значение:
//  Строка - Строка вида AccountingRegisterRecordSet.Хозрасчетный, описывающая объект метаданных.
//
Функция XMLТипСсылки(Знач Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Значение;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Ссылка = МенеджерОбъекта.ПолучитьСсылку();
	Иначе
		ОбъектМетаданных = Значение.Метаданные();
		Ссылка = Значение;
	КонецЕсли;
	
	Если ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ОбъектМетаданных) Тогда
		
		Возврат СериализаторXDTO.XMLТипЗнч(Ссылка).ИмяТипа;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка при определении XMLТипа ссылки для объекта %1: объект не является ссылочным'"),
			ОбъектМетаданных.ПолноеИмя());
		
	КонецЕсли;
	
КонецФункции

// Возвращает объект метаданных по типу поля.
//
// Параметры:
//	ТипПоля - Тип - тип поля
//
// Возвращаемое значение:
//	ОбъектМетаданных - объект метаданных.
//
Функция ОбъектМетаданныхПоТипуСсылки(Знач ТипПоля) Экспорт
	
	СсылкиТочекМаршрутаБизнесПроцессов = СсылкиТочекМаршрутаБизнесПроцессов();
	
	БизнесПроцесс = СсылкиТочекМаршрутаБизнесПроцессов.Получить(ТипПоля);
	Если БизнесПроцесс = Неопределено Тогда
		Ссылка = Новый(ТипПоля);
		МетаданныеСсылки = Ссылка.Метаданные();
	Иначе
		МетаданныеСсылки = БизнесПроцесс;
	КонецЕсли;
	
	Возврат МетаданныеСсылки;
	
КонецФункции

// Возвращает полный список констант конфигурации
//
// Возвращаемое значение:
//  Массив из ОбъектМетаданных - объекты метаданных.
//
Функция ВсеКонстанты() Экспорт
	
	МетаданныеОбъектов = Новый Массив;
	ЗаполнитьКоллекцииКонстант(МетаданныеОбъектов);
	Возврат ВсеМетаданныеКоллекций(МетаданныеОбъектов);
	
КонецФункции

// Возвращает полный список ссылочных типов конфигурации
//
// Возвращаемое значение:
//  Массив из ОбъектМетаданных
//
Функция ВсеСсылочныеДанные() Экспорт
	
	МетаданныеОбъектов = Новый Массив;
	ЗаполнитьКоллекцииСсылочныхОбъектов(МетаданныеОбъектов);
	Возврат ВсеМетаданныеКоллекций(МетаданныеОбъектов);
	
КонецФункции

// Возвращает полный список наборов записей конфигурации
//
// Возвращаемое значение:
//  Массив из ОбъектМетаданных
//
Функция ВсеНаборыЗаписей() Экспорт
	
	МетаданныеОбъектов = Новый Массив;
	ЗаполнитьКоллекцииНаборовЗаписей(МетаданныеОбъектов);
	Возврат ВсеМетаданныеКоллекций(МетаданныеОбъектов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Чтение/запись данных

// Записывает объект в поток записи.
//
// Параметры:
//	Объект - Произвольный - записываемый объект.
//	ПотокЗаписи - ЗаписьXML - поток записи.
//	Сериализатор - СериализаторXDTO - сериализатор.
//
Процедура ЗаписатьОбъектВПоток(Знач Объект, ПотокЗаписи, Сериализатор = Неопределено) Экспорт
	
	Если Сериализатор = Неопределено Тогда
		Сериализатор = СериализаторXDTO;
	КонецЕсли;
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента(ИмяЭлементаСодержащегоОбъект());
	
	ПрефиксыПространствИмен = ПрефиксыПространствИмен();
	Для Каждого ПрефиксПространстваИмен Из ПрефиксыПространствИмен Цикл
		ПотокЗаписи.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен.Значение, ПрефиксПространстваИмен.Ключ);
	КонецЦикла;
	
	Сериализатор.ЗаписатьXML(ПотокЗаписи, Объект, НазначениеТипаXML.Явное);
	
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Возвращает объект из файла.
//
// Параметры:
//	ПотокЧтения - ЧтениеXML - поток чтения.
//
// Возвращаемое значение:
//	Произвольный - прочитанных объект.
//
Функция ПрочитатьОбъектИзПотока(ПотокЧтения) Экспорт
	
	Если ПотокЧтения.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ПотокЧтения.Имя <> ИмяЭлементаСодержащегоОбъект() Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента %1.'"),
			ИмяЭлементаСодержащегоОбъект());
		
	КонецЕсли;
	
	Если НЕ ПотокЧтения.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'");
	КонецЕсли;
	
	Объект = СериализаторXDTO.ПрочитатьXML(ПотокЧтения);
	
	Возврат Объект;
	
КонецФункции

// Читает ОбъектXDTO из файла.
//
// Параметры:
//	ИмяФайла - Строка - полный путь к файлу.
//	ТипXDTO - ТипОбъектаXDTO - тип объекта XDTO.
//
// Возвращаемое значение:
//	ОбъектXDTO - прочитанный объект.
//
Функция ПрочитатьОбъектXDTOИзФайла(Знач ИмяФайла, Знач ТипXDTO) Экспорт
	
	ПотокЧтения = Новый ЧтениеXML();
	ПотокЧтения.ОткрытьФайл(ИмяФайла);
	ПотокЧтения.ПерейтиКСодержимому();
	
	Если ПотокЧтения.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ПотокЧтения.Имя <> ИмяЭлементаСодержащегоXDTOОбъект() Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента %1.'"),
			ИмяЭлементаСодержащегоXDTOОбъект());
		
	КонецЕсли;
	
	Если НЕ ПотокЧтения.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'");
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ПотокЧтения, ТипXDTO);
	
	ПотокЧтения.Закрыть();
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращает префиксы для часто используемых пространств имен.
//
// Возвращаемое значение:
//	Соответствие из КлючИЗначение:
//	* Ключ - Строка - пространство имени.
//	* Значение - Строка - префикс.
//
Функция ПрефиксыПространствИмен() Экспорт
	
	Результат = Новый Соответствие();
	
	Результат.Вставить("http://www.w3.org/2001/XMLSchema", "xs");
	Результат.Вставить("http://www.w3.org/2001/XMLSchema-instance", "xsi");
	Результат.Вставить("http://v8.1c.ru/8.1/data/core", "v8");
	Результат.Вставить("http://v8.1c.ru/8.1/data/enterprise", "ns");
	Результат.Вставить("http://v8.1c.ru/8.1/data/enterprise/current-config", "cc");
	Результат.Вставить("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "dmp");
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Возвращает шаблон записи настроек.
// 
// Возвращаемое значение:
// 	Структура:
// * Настройки - ХранилищеЗначения
// * СериализацияЧерезХранилищеЗначения - Булево
// * Представление - Строка
// * Пользователь - Строка
// * КлючОбъекта - Строка
// * КлючНастроек - Строка
Функция НоваяЗаписьНастроек() Экспорт

	ЗаписьНастроек = Новый Структура();
	ЗаписьНастроек.Вставить("КлючНастроек", "");
	ЗаписьНастроек.Вставить("КлючОбъекта", "");
	ЗаписьНастроек.Вставить("Пользователь", "");
	ЗаписьНастроек.Вставить("Представление", "");
	ЗаписьНастроек.Вставить("СериализацияЧерезХранилищеЗначения", Ложь);
	ЗаписьНастроек.Вставить("Настройки", Новый ХранилищеЗначения(Неопределено));

	Возврат ЗаписьНастроек;
	
КонецФункции

// Типы стандартных хранилищ настроек
// 
// Возвращаемое значение: 
//  ФиксированныйМассив из Строка
Функция ТипыСтандартныхХранилищНастроек() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("ХранилищеОбщихНастроек");
	Результат.Добавить("ХранилищеСистемныхНастроек");
	Результат.Добавить("ХранилищеПользовательскихНастроекОтчетов");
	Результат.Добавить("ХранилищеВариантовОтчетов");
	Результат.Добавить("ХранилищеНастроекДанныхФорм");
	Результат.Добавить("ХранилищеПользовательскихНастроекДинамическихСписков");
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Загрузка прервана
// 
// Возвращаемое значение:
//  Булево
Функция ЗагрузкаПрервана() Экспорт
	Возврат ИнформацияОПроцедуреЗагрузки() <> Неопределено;
КонецФункции

Процедура ЗафиксироватьНачалоЗагрузкиОбъектаМетаданных(ЗагружаемыйОбъектМетаданных) Экспорт
	ИнформацияОПроцедуреЗагрузки =  ИнформацияОПроцедуреЗагрузки();
	ИнформацияОПроцедуреЗагрузки.ПолноеИмяЗагружаемогоОбъектаМетаданных = ЗагружаемыйОбъектМетаданных.ПолноеИмя(); 
	ЗаписатьИнформациюОПроцедуреЗагрузки(ИнформацияОПроцедуреЗагрузки);
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеЗагрузкиОбъектовМетаданных() Экспорт
	ИнформацияОПроцедуреЗагрузки =  ИнформацияОПроцедуреЗагрузки();
	ИнформацияОПроцедуреЗагрузки.ПолноеИмяЗагружаемогоОбъектаМетаданных = Неопределено; 
	ЗаписатьИнформациюОПроцедуреЗагрузки(ИнформацияОПроцедуреЗагрузки);
КонецПроцедуры

// Параметры:
//	ОбъектыМетаданных - Массив из ОбъектМетаданных
//	
// Возвращаемое значение: 
//	ФиксированноеСоответствие - см. ВыгрузкаЗагрузкаДанныхСлужебный.СсылкиНаТипы
//
Функция СсылкиНаОбъектыМетаданных(ОбъектыМетаданных) Экспорт
		
	ВсеСсылочныеДанные = ВыгрузкаЗагрузкаДанныхСлужебный.ВсеСсылочныеДанные();
	
	Типы = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ВсеСсылочныеДанные.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			ОбъектМетаданных.ПолноеИмя());
		Тип = ТипЗнч(МенеджерОбъекта.ПустаяСсылка());
		
		Типы.Добавить(Тип);
			
	КонецЦикла;
	
	Возврат СсылкиНаТипы(Типы);
	
КонецФункции

// Параметры:
//	Типы - Массив из Тип
//	
// Возвращаемое значение: 
//	ФиксированноеСоответствие из КлючИЗначение:
//	 * Ключ - Строка - имя объекта метаданных
//	 * Значение - Массив Из Структура см. ВыгрузкаЗагрузкаДанныхСлужебный.СтруктураРеквизитов
//
Функция СсылкиНаТипы(Типы) Экспорт
				
	СписокМетаданных = Новый Соответствие;
	Для Каждого МетаданныеОбъекта Из ВыгрузкаЗагрузкаДанныхСлужебный.ВсеКонстанты() Цикл
		ДобавитьКонстантуВСписокМетаданных(МетаданныеОбъекта, СписокМетаданных, Типы);
	КонецЦикла;
	
	Для Каждого МетаданныеОбъекта Из ВыгрузкаЗагрузкаДанныхСлужебный.ВсеСсылочныеДанные() Цикл
		ДобавитьСсылочныйТипВСписокМетаданных(МетаданныеОбъекта, СписокМетаданных, Типы);
	КонецЦикла;
	
	Для Каждого МетаданныеОбъекта Из ВыгрузкаЗагрузкаДанныхСлужебный.ВсеНаборыЗаписей() Цикл
		ДобавитьРегистрВТаблицуМетаданных(МетаданныеОбъекта, СписокМетаданных, Типы);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СписокМетаданных);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоПродолжениеЗагрузки()
	
	Возврат ИнформацияОПроцедуреЗагрузки() <> Неопределено;
	
КонецФункции

Функция ЗагрузитьДанныеТекущейОбластиИзАрхиваВФоне(Знач ДанныеФайла, Знач ПараметрыЗагрузки)
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ДанныеФайла);
	ПараметрыЗадания.Добавить(ПараметрыЗагрузки);
	ПараметрыЗадания.Добавить(АдресРезультата);
	
	ИмяМетода = "ВыгрузкаЗагрузкаДанныхСлужебный.НачатьЗагрузкуДанныхТекущейОбластиИзАрхива";
	
	Задание = ТехнологияСервиса.ВыполнитьЗаданиеСРасширениями(
		ИмяМетода,
		ПараметрыЗадания,
		Новый УникальныйИдентификатор,
		НСтр("ru = 'Восстановление области данных из архива'"))
		.ОжидатьЗавершенияВыполнения();
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ВызватьИсключение НСтр("ru = 'Задание отменено'");
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ВызватьИсключение ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(АдресРезультата);	
	
КонецФункции

Функция ВозможноПродолжениеПроцедурыЗагрузки(ХешСуммаИсточника, ХешСуммаПараметров)
	
	ИнформацияОПроцедуреЗагрузки =  ИнформацияОПроцедуреЗагрузки();
		
	СобытиеЖурналаРегистрации = НСтр(
		"ru = 'Выгрузка загрузка данных. Продолжение процедуры загрузки невозможно'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если ИнформацияОПроцедуреЗагрузки = Неопределено Тогда 
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,,,
			НСтр("ru = 'Отсутствует информация о прошлой процедуре загрузки'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформацияОПроцедуреЗагрузки.Конфигурация <> Метаданные.Имя 
		Или ИнформацияОПроцедуреЗагрузки.ВерсияКонфигурации <> Метаданные.Версия Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Изменилось имя или версия конфигурации 
			|Прошлые значения: %1 %2
			|Текущие значения: %3 %4'"),
			ИнформацияОПроцедуреЗагрузки.Конфигурация,
			ИнформацияОПроцедуреЗагрузки.ВерсияКонфигурации,
			Метаданные.Имя,
			Метаданные.Версия);
			
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформацияОПроцедуреЗагрузки.ХешСуммаИсточника <> ХешСуммаИсточника Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Изменился источник загрузки 
				 |Прошлое значение хеш суммы: %1 
				 |Текущее значение хеш суммы: %2'"),
			ИнформацияОПроцедуреЗагрузки.ХешСуммаИсточника,
			ХешСуммаИсточника);
			
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстПредупреждения);
			
		Возврат Ложь;
	КонецЕсли;

	Если ИнформацияОПроцедуреЗагрузки.ХешСуммаПараметров <> ХешСуммаПараметров Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Изменились параметры загрузки
				 |Прошлое значение хеш суммы: %1 
				 |Текущее значение хеш суммы: %2'"),
			ИнформацияОПроцедуреЗагрузки.ХешСуммаПараметров,
			ХешСуммаПараметров);
			
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстПредупреждения);
			
		Возврат Ложь;
	КонецЕсли;
	
	Если  ИнформацияОПроцедуреЗагрузки.ПолноеИмяЗагружаемогоОбъектаМетаданных = Неопределено Тогда
	
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,,,
			НСтр("ru = 'Процесс загрузки был прерван не на загрузке метаданных'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗафиксироватьНачалоПроцедурыЗагрузки(ХешСуммаИсточника, ХешСуммаПараметров)
		
	ИнформацияОПроцедуреЗагрузки = Новый Структура();
	ИнформацияОПроцедуреЗагрузки.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	ИнформацияОПроцедуреЗагрузки.Вставить("Конфигурация", Метаданные.Имя);
	ИнформацияОПроцедуреЗагрузки.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	ИнформацияОПроцедуреЗагрузки.Вставить("ХешСуммаИсточника", ХешСуммаИсточника);
	ИнформацияОПроцедуреЗагрузки.Вставить("ХешСуммаПараметров", ХешСуммаПараметров);
	ИнформацияОПроцедуреЗагрузки.Вставить("ПолноеИмяЗагружаемогоОбъектаМетаданных", Неопределено);
	
	ЗаписатьИнформациюОПроцедуреЗагрузки(ИнформацияОПроцедуреЗагрузки);
	
КонецПроцедуры

Функция ИнформацияОПроцедуреЗагрузки() 
	Возврат Константы.ИнформацияОПроцедуреЗагрузки.Получить().Получить();
КонецФункции

Процедура ЗаписатьИнформациюОПроцедуреЗагрузки(Значение)
	Константы.ИнформацияОПроцедуреЗагрузки.Установить(
		Новый ХранилищеЗначения(Значение));
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеПроцедурыЗагрузки()
	ЗаписатьИнформациюОПроцедуреЗагрузки(Неопределено);
КонецПроцедуры

Процедура ПродолжитьПроцедуруЗагрузки(ПараметрыЗагрузки, Контейнер, Обработчики)
	
	ИнформацияОПроцедуреЗагрузки = ИнформацияОПроцедуреЗагрузки();
	
	ПолноеИмяЗагружаемогоОбъектаМетаданных = ИнформацияОПроцедуреЗагрузки.ПолноеИмяЗагружаемогоОбъектаМетаданных;
	
	СобытиеЖурналаРегистрации = НСтр(
		"ru = 'Выгрузка загрузка данных. Продолжение процедуры загрузки'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Процедура загрузки продолжена с объекта метаданных ''%1'''"),
			ПолноеИмяЗагружаемогоОбъектаМетаданных);
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации,
		УровеньЖурналаРегистрации.Предупреждение,,, 
		ТекстПредупреждения);

	ЗагружаемыйОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяЗагружаемогоОбъектаМетаданных);
	
	РаботаВМоделиСервиса.ОчиститьДанныеОбъектаМетаданных(
		ПолноеИмяЗагружаемогоОбъектаМетаданных,
		ЗагружаемыйОбъектМетаданных);
	
	ЗагрузитьДанныеИнформационнойБазы(
		ПараметрыЗагрузки,
		Контейнер,
		Обработчики,
		ПолноеИмяЗагружаемогоОбъектаМетаданных);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИнформационнойБазы(
	ПараметрыЗагрузки,
	Контейнер,
	Обработчики,
	ПолноеИмяПервогоЗагружаемогоОбъектаМетаданных = Неопределено)
		
	ПотокЗаменыСсылок = Обработки.ВыгрузкаЗагрузкаДанныхМенеджерЗагрузкиДанныхИнформационнойБазы.ЗагрузитьДанныеИнформационнойБазы(
		Контейнер,
		Обработчики,
		ПолноеИмяПервогоЗагружаемогоОбъектаМетаданных);
		
	ПослеЗагрузкиДанныхИнформационнойБазы(
		ПараметрыЗагрузки,
		Контейнер,
		Обработчики,
		ПотокЗаменыСсылок);
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанныхИнформационнойБазы(ПараметрыЗагрузки, Контейнер, Обработчики, ПотокЗаменыСсылок)
	
	СопоставлениеПользователей = Неопределено;
	Если ПараметрыЗагрузки.ЗагружатьПользователей Тогда
		
		ВыгрузкаЗагрузкаПользователейИнформационнойБазы.ЗагрузитьПользователейИнформационнойБазы(Контейнер);
		
		Если ПараметрыЗагрузки.ЗагружатьНастройкиПользователей Тогда
			
			Обработки.ВыгрузкаЗагрузкаДанныхМенеджерЗагрузкиНастроекПользователей.ЗагрузитьНастройкиПользователейИнформационнойБазы(
				Контейнер, Обработчики, ПотокЗаменыСсылок);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.Свойство("СопоставлениеПользователей", СопоставлениеПользователей) Тогда
		
		// Очистить идентификаторы, если они используются.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователи", СопоставлениеПользователей.ВыгрузитьКолонку("Пользователь"));
		Запрос.УстановитьПараметр("Идентификаторы", СопоставлениеПользователей.ВыгрузитьКолонку("ИдентификаторПользователяСервиса"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Ссылка В (&Пользователи)
		|	И Пользователи.ИдентификаторПользователяСервиса В(&Идентификаторы)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПользовательОбъект = Выборка.Пользователь.ПолучитьОбъект(); // СправочникОбъект.Пользователи
			ПользовательОбъект.ИдентификаторПользователяСервиса = Неопределено;
			ПользовательОбъект.ОбменДанными.Загрузка = Истина;
			ПользовательОбъект.Записать();
		КонецЦикла;
		
		// Обновить идентификаторы для используемых пользователей.
		Для Каждого СопоставлениеПользователя Из СопоставлениеПользователей Цикл
			Если Не ЗначениеЗаполнено(СопоставлениеПользователя.Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			ПользовательОбъект = СопоставлениеПользователя.Пользователь.ПолучитьОбъект(); // СправочникОбъект.Пользователи
			Если ПользовательОбъект.ИдентификаторПользователяСервиса <> СопоставлениеПользователя.ИдентификаторПользователяСервиса Тогда
				ПользовательОбъект.ИдентификаторПользователяСервиса = СопоставлениеПользователя.ИдентификаторПользователяСервиса;
				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
				ПользовательОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// Загрузить настройки с заменой имени пользователя ИБ.
		ЗаменитьПользователяВНастройках = Новый Соответствие;
		Для Каждого СопоставлениеПользователя Из СопоставлениеПользователей Цикл
			Если ЗначениеЗаполнено(СопоставлениеПользователя.СтароеИмяПользователяИБ) 
				И ЗначениеЗаполнено(СопоставлениеПользователя.НовоеИмяПользователяИБ) Тогда
				ЗаменитьПользователяВНастройках.Вставить(СопоставлениеПользователя.СтароеИмяПользователяИБ, СопоставлениеПользователя.НовоеИмяПользователяИБ);
			КонецЕсли;
		КонецЦикла;
		Обработки.ВыгрузкаЗагрузкаДанныхМенеджерЗагрузкиНастроекПользователей.ЗагрузитьНастройкиПользователейИнформационнойБазы(
			Контейнер, Обработчики, ПотокЗаменыСсылок, ЗаменитьПользователяВНастройках);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Истина);
	КонецЕсли;
	
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено(); 
	Если РазделениеВключено Тогда
		ПараметрыБлокировки = СоединенияИБ.ПолучитьБлокировкуСеансовОбластиДанных();
		Если НЕ ПараметрыБлокировки.Установлена Тогда
			ПараметрыБлокировки.Установлена = Истина;
			СоединенияИБ.УстановитьБлокировкуСеансовОбластиДанных(ПараметрыБлокировки);		
		КонецЕсли;
	КонецЕсли;
	
	ОчередьЗаданийСлужебныйРазделениеДанных.ПослеЗагрузкиДанных(Контейнер);
	
	Обработчики.ПослеЗагрузкиДанных(Контейнер);
	
	Если РазделениеВключено Тогда
		ПараметрыБлокировки.Установлена = Ложь;
		СоединенияИБ.УстановитьБлокировкуСеансовОбластиДанных(ПараметрыБлокировки);	
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь);
	КонецЕсли;
	
	Контейнер.ФинализироватьЗагрузку();	
	
	ЗафиксироватьЗавершениеПроцедурыЗагрузки();
	
КонецПроцедуры

// Записывает описание конфигурации
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура СохранитьОписаниеВыгрузки(Знач Контейнер)
	
	ТипDumpInfo = ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo");
	ТипConfigurationInfo = ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "ConfigurationInfo");
	
	ИнформацияОВыгрузке = ФабрикаXDTO.Создать(ТипDumpInfo);
	ИнформацияОВыгрузке.Created = ТекущаяУниверсальнаяДата();
	
	ИнформацияОКонфигурации = ФабрикаXDTO.Создать(ТипConfigurationInfo);
	ИнформацияОКонфигурации.Name = Метаданные.Имя;
	ИнформацияОКонфигурации.Version = Метаданные.Версия;
	ИнформацияОКонфигурации.Vendor = Метаданные.Поставщик;
	ИнформацияОКонфигурации.Presentation = Метаданные.Представление();
	
	ИнформацияОВыгрузке.Configuration = ИнформацияОКонфигурации;
	
	ИмяФайла = Контейнер.СоздатьФайл(DumpInfo());
	ЗаписатьОбъектXDTOВФайл(ИнформацияОВыгрузке, ИмяФайла);
	Контейнер.ФайлЗаписан(ИмяФайла);
	
КонецПроцедуры

// Читает описание конфигурации
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Функция ПрочитатьИнформациюОВыгрузке(Контейнер)
	
	Файл = Контейнер.ПолучитьФайлИзКаталога(DumpInfo());
	
	Контейнер.РаспаковатьФайл(Файл);
	
	Результат =  ПрочитатьОбъектXDTOИзФайла(Файл.ПолноеИмя, ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo"));
	
	УдалитьФайлы(Файл.ПолноеИмя);
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя элемента в потоке записи/чтения, в котором хранится XDTOОбъект.
//
// Возвращаемое значение:
//	Строка - имя элемента.
//
Функция ИмяЭлементаСодержащегоXDTOОбъект()
	
	Возврат "XDTODataObject";
	
КонецФункции

// Возвращает имя элемента в потоке записи/чтения, в котором хранится объект.
//
// Возвращаемое значение:
//	Строка - имя элемента.
//
Функция ИмяЭлементаСодержащегоОбъект()
	
	Возврат "Data";
	
КонецФункции

// Возвращает массив пространства имен для записи пакетов.
//
// Параметры:
//	URIПространстваИмен - Строка - пространство имен.
//
// Возвращаемое значение:
//	Массив - массив пространств имен.
//
Функция ПолучитьПространстваИменДляЗаписиПакета(Знач URIПространстваИмен)
	
	Результат = Новый Массив();
	Результат.Добавить(URIПространстваИмен);
	
	Зависимости = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен).Зависимости;
	Для Каждого Зависимость Из Зависимости Цикл
		ЗависимыеПространстваИмен = ПолучитьПространстваИменДляЗаписиПакета(Зависимость.URIПространстваИмен);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЗависимыеПространстваИмен, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет массив коллекцией метаданных ссылочных объектов.
//
// Параметры:
//	МассивКоллекцийМетаданных - Массив из ОбъектМетаданных - объекты метаданных.
//
Процедура ЗаполнитьКоллекцииСсылочныхОбъектов(МассивКоллекцийМетаданных)

	МассивКоллекцийМетаданных.Добавить(Метаданные.Справочники);
	МассивКоллекцийМетаданных.Добавить(Метаданные.Документы);
	МассивКоллекцийМетаданных.Добавить(Метаданные.БизнесПроцессы);
	МассивКоллекцийМетаданных.Добавить(Метаданные.Задачи);
	МассивКоллекцийМетаданных.Добавить(Метаданные.ПланыСчетов);
	МассивКоллекцийМетаданных.Добавить(Метаданные.ПланыОбмена);
	МассивКоллекцийМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	МассивКоллекцийМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	
КонецПроцедуры

// Заполняет массив коллекцией метаданных наборов записей.
//
// Параметры:
//	МассивКоллекцийМетаданных - Массив - массив.
//
Процедура ЗаполнитьКоллекцииНаборовЗаписей(МассивКоллекцийМетаданных)
	
	МассивКоллекцийМетаданных.Добавить(Метаданные.РегистрыСведений);
	МассивКоллекцийМетаданных.Добавить(Метаданные.РегистрыНакопления);
	МассивКоллекцийМетаданных.Добавить(Метаданные.РегистрыБухгалтерии);
	МассивКоллекцийМетаданных.Добавить(Метаданные.Последовательности);
	МассивКоллекцийМетаданных.Добавить(Метаданные.РегистрыРасчета);
	Для Каждого РегистрРасчета Из Метаданные.РегистрыРасчета Цикл
		МассивКоллекцийМетаданных.Добавить(РегистрРасчета.Перерасчеты);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив коллекцией метаданных констант.
//
// Параметры:
//	МассивКоллекцийМетаданных - Массив - массив.
//
Процедура ЗаполнитьКоллекцииКонстант(МассивКоллекцийМетаданных)
	
	МассивКоллекцийМетаданных.Добавить(Метаданные.Константы);
	
КонецПроцедуры

// Возвращает полный список объектов из указанных коллекций
//
// Параметры:
//  Коллекции - Массив - Коллекции.
//
// Возвращаемое значение:
//  Массив - Объекты метаданных.
//
Функция ВсеМетаданныеКоллекций(Знач Коллекции)
	
	Результат = Новый Массив;
	Для Каждого Коллекция Из Коллекции Цикл
		
		Для Каждого Объект Из Коллекция Цикл
			Результат.Добавить(Объект);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылки точек бизнес процесса
//
// Возвращаемое значение:
//	Соответствие - где:
//		Ключ - Тип - тип ссылки точки бизнес процесса.
//		Значение - ОбъектМетаданных -бизнес процесс.
//
Функция СсылкиТочекМаршрутаБизнесПроцессов()
	
	Результат = Новый Соответствие();
	
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		
		Результат.Вставить(Тип("ТочкаМаршрутаБизнесПроцессаСсылка." + БизнесПроцесс.Имя), БизнесПроцесс);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает СериализаторXDTO с аннотацией типов.
//
// Возвращаемое значение:
//	СериализаторXDTO - сериализатор.
//
Функция СериализаторXDTOСАннотациейТипов()
	
	ДвоичныеДанныеСхемы = СхемаКонфигурации.ДвоичныеДанныеСхемы(Истина, Истина);
	СхемаXML = СхемаXML(ДвоичныеДанныеСхемы);	
	Фабрика = ФабрикаПоСхеме(СхемаXML);	
	Возврат Новый СериализаторXDTO(Фабрика);
	
КонецФункции

// Возвращает наименование файла с дайджестом выгрузки.
//
// Возвращаемое значение:
//	Строка - наименование
Функция Digest() Экспорт
	Возврат "Digest";
КонецФункции

// Extensions
// 
// Возвращаемое значение:
//  Строка
Функция Extensions() Экспорт
	Возврат "Extensions";
КонецФункции

// Custom extensions
// 
// Возвращаемое значение:
//  Строка
Функция CustomExtensions() Экспорт 
	Возврат "CustomExtensions";	
КонецФункции

// Записывает ОбъектXDTO в файл.
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - записываемый ОбъектXDTO.
//	ИмяФайла - Строка - полный путь к файлу.
//	ПрефиксПространстваИменПоУмолчанию - Строка - префикс.
//
Процедура ЗаписатьОбъектXDTOВФайл(Знач ОбъектXDTO, Знач ИмяФайла, Знач ПрефиксПространстваИменПоУмолчанию = "")
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайла);
	
	ПрефиксыПространствИмен = ПрефиксыПространствИмен();
	ПространствоИменОбъекта = ОбъектXDTO.Тип().URIПространстваИмен;
	Если ПустаяСтрока(ПрефиксПространстваИменПоУмолчанию) Тогда
		ПрефиксПространстваИменПоУмолчанию = ПрефиксыПространствИмен.Получить(ПространствоИменОбъекта);
	КонецЕсли;
	ИспользуемыеПространстваИмен = ПолучитьПространстваИменДляЗаписиПакета(ПространствоИменОбъекта);
	
	ПотокЗаписи.ЗаписатьНачалоЭлемента(ИмяЭлементаСодержащегоXDTOОбъект());
	
	Для Каждого ИспользуемоеПространствоИмен Из ИспользуемыеПространстваИмен Цикл
		ПрефиксПространстваИмен = ПрефиксыПространствИмен.Получить(ИспользуемоеПространствоИмен);
		Если ПрефиксПространстваИмен = ПрефиксПространстваИменПоУмолчанию Тогда
			ПотокЗаписи.ЗаписатьСоответствиеПространстваИмен("", ИспользуемоеПространствоИмен);
		Иначе
			ПотокЗаписи.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, ИспользуемоеПространствоИмен);
		КонецЕсли;
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, ОбъектXDTO);
	
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	
	ПотокЗаписи.Закрыть();
	
КонецПроцедуры

Функция СхемаXML(ДвоичныеДанныеСхемы)
	
	ПотокДляЧтения = ДвоичныеДанныеСхемы.ОткрытьПотокДляЧтения();
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьПоток(ПотокДляЧтения);
	
	Построитель = Новый ПостроительDOM;
	Документ = Построитель.Прочитать(Чтение); // ЭлементDOM
	
	ПотокДляЧтения.Закрыть();
	
	ПостроительСхем = Новый ПостроительСхемXML;	
	
	Возврат ПостроительСхем.СоздатьСхемуXML(Документ);

КонецФункции

Функция ФабрикаПоСхеме(Схема)
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема);
	
	Возврат Новый ФабрикаXDTO(НаборСхем);

КонецФункции

Процедура ВыгрузитьСхемуКонфигурации(Контейнер, ПараметрыВыгрузки)
	
	ДанныеСхемыКонфигурации = Неопределено;
	Если Не ПараметрыВыгрузки.Свойство("ДанныеСхемыКонфигурации", ДанныеСхемыКонфигурации) Тогда
		ДанныеСхемыКонфигурации = СхемаКонфигурации.ДвоичныеДанныеСхемы(Ложь, Ложь);	
	КонецЕсли;
	
	ПолноеИмяФайла = Контейнер.СоздатьПроизвольныйФайл("xsd", "ConfigScheme");
	ДанныеСхемыКонфигурации.Записать(ПолноеИмяФайла);
	
	Контейнер.УстановитьКоличествоОбъектов(ПолноеИмяФайла, 1);
	
КонецПроцедуры

Функция ВосстановитьРасширения(РасширенияДляВосстановления)

	УстановленыРасширенияИзменяющиеСтруктуруДанных = Ложь;

	СтуктураОтбора = Новый Структура("Имя");

	Для Каждого РасширениеДляВосстановления Из РасширенияДляВосстановления Цикл

		СтуктураОтбора.Имя = РасширениеДляВосстановления.Имя;

		ДанныеВосстанавливаемогоРасширения = РасширениеДляВосстановления.Данные;

		УстановленныеРасширения = РасширенияКонфигурации.Получить(СтуктураОтбора,
			ИсточникРасширенийКонфигурации.БазаДанных);

		Если ЗначениеЗаполнено(УстановленныеРасширения) Тогда

			УстановленноеРасширение = УстановленныеРасширения[0];

			Если УстановленноеРасширение.Активно = РасширениеДляВосстановления.Активно
				И УстановленноеРасширение.БезопасныйРежим = РасширениеДляВосстановления.БезопасныйРежим
				И УстановленноеРасширение.ИспользоватьОсновныеРолиДляВсехПользователей = РасширениеДляВосстановления.ИспользоватьОсновныеРолиДляВсехПользователей
				И УстановленноеРасширение.ИспользуетсяВРаспределеннойИнформационнойБазе = РасширениеДляВосстановления.ИспользуетсяВРаспределеннойИнформационнойБазе
				И УстановленноеРасширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = РасширениеДляВосстановления.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях Тогда			
					
				Если УстановленноеРасширение.УникальныйИдентификатор = РасширениеДляВосстановления.УникальныйИдентификатор Тогда
					Продолжить;
				КонецЕсли;
												
				МетаданныеУстановленногоРасширения = Новый ОбъектМетаданныхКонфигурация(УстановленноеРасширение.ПолучитьДанные());
				МетаданныеВосстанавливаемогоРасширения = Новый ОбъектМетаданныхКонфигурация(ДанныеВосстанавливаемогоРасширения);

				Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(МетаданныеУстановленногоРасширения.Версия,	МетаданныеВосстанавливаемогоРасширения.Версия) = 0 Тогда									
					Продолжить;
				КонецЕсли;

			КонецЕсли;
			
			УстановленноеРасширение.Удалить();

		КонецЕсли;

		ВосстанавливаемоеРасширение = РасширенияКонфигурации.Создать();
		ЗаполнитьЗначенияСвойств(ВосстанавливаемоеРасширение, РасширениеДляВосстановления);
		ВосстанавливаемоеРасширение.Записать(ДанныеВосстанавливаемогоРасширения);
		
		Если РасширениеДляВосстановления.ИзменяетСтруктуруДанных Тогда
			УстановленыРасширенияИзменяющиеСтруктуруДанных = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Возврат УстановленыРасширенияИзменяющиеСтруктуруДанных;
КонецФункции

Процедура ДобавитьКонстантуВСписокМетаданных(МетаданныеОбъекта, СписокМетаданных, Типы)
	
	Для Каждого Тип Из Типы Цикл
		
		Если МетаданныеОбъекта.Тип.СодержитТип(Тип) Тогда 
			СписокМетаданных.Вставить(МетаданныеОбъекта.ПолноеИмя(), Новый Массив);		
			Возврат;
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьСсылочныйТипВСписокМетаданных(МетаданныеОбъекта, СписокМетаданных, Типы)
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл 
		
		ДобавитьРеквизитВМассив(МассивСтруктур, Реквизит,, Типы);
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл 
		
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
			ДобавитьРеквизитВМассив(МассивСтруктур, Реквизит, ТабличнаяЧасть, Типы);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВставитьОбъектМетаданныхВСоответствие(МетаданныеОбъекта.ПолноеИмя(), СписокМетаданных, МассивСтруктур);
	
КонецПроцедуры

Процедура ДобавитьРегистрВТаблицуМетаданных(МетаданныеОбъекта, Знач СписокМетаданных, Типы)
	
	МассивСтруктур = Новый Массив;
	ЭтоПерерасчет = Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта.Родитель());
	
	Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл 
		
		Если ЭтоПерерасчет Тогда
			Измерение = Измерение.ИзмерениеРегистра;
		КонецЕсли;
		
		ДобавитьРеквизитВМассив(МассивСтруктур, Измерение,, Типы);
		
	КонецЦикла;
		
	Если Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда 
		
		Для Каждого ДокументМетаданные Из МетаданныеОбъекта.Документы Цикл
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
				ДокументМетаданные.ПолноеИмя());
			ТипДокумента = ТипЗнч(МенеджерДокумента.ПустаяСсылка());
			
			Если Типы.Найти(ТипДокумента) <> Неопределено Тогда 
				
				Структура = СтруктураРеквизитов();
				Структура.ИмяРеквизита = "Регистратор";
				
				МассивСтруктур.Добавить(Структура);
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Не ЭтоПерерасчет Тогда
		
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл 
			
			ДобавитьРеквизитВМассив(
				МассивСтруктур,
				Реквизит,,
				Типы);
			
		КонецЦикла;
		
		Для Каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл 
			
			ДобавитьРеквизитВМассив(
				МассивСтруктур,
				Ресурс,,
				Типы);
			
		КонецЦикла;
		
		Если Не ОбщегоНазначенияБТС.ЭтоНезависимыйНаборЗаписей(МетаданныеОбъекта) Тогда
			ДобавитьРеквизитВМассив(
				МассивСтруктур,
				МетаданныеОбъекта.СтандартныеРеквизиты.Регистратор,,
				Типы);	
		КонецЕсли;
		
		Если ОбщегоНазначенияБТС.ЭтоРегистрБухгалтерии(МетаданныеОбъекта) Тогда
			
			МенеджерПланаСчетов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
				МетаданныеОбъекта.ПланСчетов.ПолноеИмя());
			ТипПланаСчетов = ТипЗнч(МенеджерПланаСчетов.ПустаяСсылка());
			
			Если Типы.Найти(ТипПланаСчетов) <> Неопределено Тогда 
				
				Если МетаданныеОбъекта.Корреспонденция Тогда 
					Структура = СтруктураРеквизитов();
					Структура.ИмяРеквизита = "СчетДт";		
					МассивСтруктур.Добавить(Структура);
					
					Структура = СтруктураРеквизитов();
					Структура.ИмяРеквизита = "СчетКт";		
					МассивСтруктур.Добавить(Структура);
				Иначе		
					Структура = СтруктураРеквизитов();
					Структура.ИмяРеквизита = "Счет";		
					МассивСтруктур.Добавить(Структура);
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЕсли;
				
	КонецЕсли;
	
	ВставитьОбъектМетаданныхВСоответствие(МетаданныеОбъекта.ПолноеИмя(), СписокМетаданных, МассивСтруктур);
	
КонецПроцедуры

Процедура ДобавитьРеквизитВМассив(МассивСтруктур, Реквизит, ТабличнаяЧасть = Неопределено, Типы)
	
	Для Каждого Тип Из Типы Цикл
		
		Если Реквизит.Тип.СодержитТип(Тип) Тогда 
			ИмяРеквизита      = Реквизит.Имя;
			ИмяТабличнойЧасти = ?(ТабличнаяЧасть = Неопределено, Неопределено, ТабличнаяЧасть.Имя);
			
			Структура = СтруктураРеквизитов();
			Структура.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
			Структура.ИмяРеквизита      = ИмяРеквизита;
			
			МассивСтруктур.Добавить(Структура);
			
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ВставитьОбъектМетаданныхВСоответствие(ПолноеИмяМетаданных, СписокМетаданных, МассивСтруктур)
	
	Если МассивСтруктур.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СписокМетаданных.Вставить(ПолноеИмяМетаданных, МассивСтруктур);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура:
// * ИмяРеквизита - Строка
// * ИмяТабличнойЧасти - Строка
// 
Функция СтруктураРеквизитов()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяТабличнойЧасти");
	Результат.Вставить("ИмяРеквизита");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
