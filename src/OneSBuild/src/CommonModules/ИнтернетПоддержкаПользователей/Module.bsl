///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователей.
//
// Серверные процедуры и функции Интернет-поддержки пользователей:
//  - определения настроек программы и подключения к сервисам;
//  - обработка аутентификации в сервисах Интернет-поддержки пользователей;
//  - настройка аутентификации в сервисах Интернет-поддержки пользователей;
//  - переход на страницы интегрированных сайтов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Возвращает имя, по которому программа идентифицируется в
// сервисах Интернет-поддержки.
//
// Возвращаемое значение:
//  Строка - имя программы. <Пустая строка>, если имя программы не заполнено.
//
Функция ИмяПрограммы() Экспорт
	
	Результат = СлужебнаяИмяПрограммы();
	Возврат ?(Результат = "Unknown", "", Результат);
	
КонецФункции

// Возвращает настройки соединения с серверами Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - настройки соединения. Поля структуры:
//    * УстанавливатьПодключениеНаСервере - Булево - Истина, если подключение
//      устанавливается на сервере 1С:Предприятие;
//    * ТаймаутПодключения - Число - таймаут подключения к серверам в секундах;
//    * ДоменРасположенияСерверовИПП - Число - если 0, устанавливать подключение
//      к серверам ИПП в доменной зоне 1c.ru, если 1 - в доменной зоне 1c.eu.
//
Функция НастройкиСоединенияССерверами() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
КонецФункции

#КонецОбласти

#Область АутентификацияВСервисахИнтернетПоддержки

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Возвращаемое значение:
//  Структура - структура, содержащая логин и пароль пользователя
//              Интернет-поддержки:
//     * Логин - Строка - логин пользователя Интернет-поддержки;
//     * Пароль - Строка - пароль пользователя Интернет-поддержки.
//   Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт

	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы(),
		"login,password");

	Если ДанныеВБезопасномХранилище.login <> Неопределено
		И ДанныеВБезопасномХранилище.password <> Неопределено Тогда
		Возврат Новый Структура(
			"Логин, Пароль",
			ДанныеВБезопасномХранилище.login,
			ДанныеВБезопасномХранилище.password);
	КонецЕсли;

КонецФункции

// Возвращает тикет аутентификации пользователя на портале поддержки.
// Возвращенный тикет может быть проверен вызовом операции check
// сервиса https://login.1c.ru или https://login.1c.eu
//
// Подробнее см. https://login.1c.ru/rest/public/swagger-ui.html.
//
// Получение тикета выполняется в соответствии с настройками
// библиотеки:
//  - доменная зона серверов (1c.ru или 1c.eu);
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Параметры:
//  ВладелецТикета - Строка - произвольное имя сервиса, для которого
//      выполняется аутентификация пользователя. Это же имя должно
//      использоваться при вызове операции checkTicket;
//      Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//  Структура - результат получения тикета. Поля структуры:
//        * Тикет - Строка - полученный тикет аутентификации. Если при получении
//          тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//          значение поля - пустая строка.
//        * КодОшибки - Строка - строковый код возникшей ошибки, который
//          может быть обработан вызывающим функционалом:
//              - <Пустая строка> - получение тикета выполнено успешно;
//              - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//              - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                 получения тикета с некорректным логином и паролем;
//              - "ОшибкаПодключения" - ошибка при подключении к сервису;
//              - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//              - "НеизвестнаяОшибка" - при получении тикета возникла
//                 неизвестная (не обрабатываемая) ошибка;
//        * СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//          может быть отображено пользователю;
//        * ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//          может быть записано в журнал регистрации.
//
Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт

	Если Не ЗначениеЗаполнено(ВладелецТикета) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ВладелецТикета""'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Работа в модели сервиса.
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		Результат = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			ВладелецТикета);
		
	Иначе
		
		Результат = СлужебнаяТикетАутентификации(
			"",
			"",
			ВладелецТикета,
			НастройкиСоединенияССерверами());
		
	КонецЕсли;
	
	Если Результат.КодОшибки = "ОперацияНеПоддерживается" Тогда
		// Для внешней функциональности ошибка
		// интерпретируется как ошибка подключения к сервису.
		Результат.КодОшибки = "ОшибкаПодключения";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнение данных аутентификации пользователя
// Интернет-поддержки.
//
// Возвращаемое значение:
//  Булево - признак заполнения данных аутентификации.
//      Истина - данные аутентификации заполнены,
//      Ложь - в противном случае.
//
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат (ДанныеАутентификацииПользователяИнтернетПоддержки() <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область НастройкаАутентификации

// Проверяет данные аутентификации пользователя
// Интернет-поддержки.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - результат проверки данных аутентификации:
//   *Результат - Булево - результат проверки, если Истина, логин и пароль ведены верно,
//   *КодОшибки - Строка - идентификатор ошибки в случае если логин и пароль ведены верно
//                или в процессе проверки возникли ошибки;
//   *СообщениеОбОшибке - Строка - описание ошибки проверки данных аутентификации.
//
Функция ПроверитьЛогинИПароль(Логин, Пароль) Экспорт
	
	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, Результат", "", "", Ложь);
	
	НастройкиСоединенияССерверами = НастройкиСоединенияССерверами();
	URLСервиса = URLСервисаПроверкиПаролей(НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыAuthJSON(Логин, Пароль));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	
	РезультатПолученияФайла = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);
	
	Если РезультатПолученияФайла.КодСостояния = 200 Тогда
		
		Результат.Результат = Истина;
		
	ИначеЕсли РезультатПолученияФайла.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль.'");
		
	ИначеЕсли РезультатПолученияФайла.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность указанных данных и повторите
			|попытку через 30 минут.'");
		
	Иначе
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось проверить логин и пароль в сервисе %1. %2'"),
				URLСервиса,
				РезультатПолученияФайла.ИнформацияОбОшибке));
		
		Результат.КодОшибки         = РезультатПолученияФайла.КодОшибки;
		Результат.СообщениеОбОшибке = РезультатПолученияФайла.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет логин и пароль пользователя в подсистеме Интернет-поддержки
// в безопасном хранилище. В вызывающем коде перед записью данных необходимо
// выполнить проверку доступности подключения Интернет-поддержки, вызвав
// метод ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки
// и установить привилегированный режим.
//
// В случае реализации собственной формы подключения Интернет-поддержки, необходимо
// после сохранения данных аутентификации, удалить значения введенные пользователем
// для того, чтобы минимизировать время хранения секретных данных на клиенте.
//
// Параметры:
//  ДанныеАутентификации - Структура, Неопределено - структура, содержащая логин 
//                         и пароль пользователя и пароль пользователя Интернет-поддержки.
//                         Если передано значение Неопределено, данные аутентификации удаляются.
//   * Логин - Строка - логин пользователя Интернет-поддержки;
//   * Пароль - Строка - пароль пользователя Интернет-поддержки.
//
Процедура СохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт
	
	Если Не ДоступноПодключениеИнтернетПоддержки() Или Не ПривилегированныйРежим() Тогда
		ВызватьИсключение НСтр("ru = 'Подключение Интернет-поддержки не доступно.'");
	КонецЕсли;
	
	СлужебнаяСохранитьДанныеАутентификации(ДанныеАутентификации)
	
КонецПроцедуры

// Определяет, доступно ли текущему пользователю выполнение интерактивного
// подключения Интернет-поддержки в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//  Булево - Истина - интерактивное подключение доступно,
//           Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПодключениеИнтернетПоддержки", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакскомВызовСервера = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакскомВызовСервера");
		Если МодульПодключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПереходПоСсылкам

// Возвращает URL для перехода на страницу сайта, система аутентификации
// которого интегрирована с Порталом 1С:ИТС.
// В зависимости от текущего режима работы информационной базы и наличия у
// текущего пользователя информационной базы соответствующих прав
// переданный URL страницы сайта трансформируется таким образом, что открытие
// страницы происходит с учетными данными пользователя Портала 1С:ИТС.
// При отсутствии прав, несоответствии режима работы или возникновении ошибок
// переданный URL возвращается без изменений.
//
// Важно. Полученный URL необходимо использовать сразу после получения, т.к.
// URL действителен ограниченное время (исчисляется секундами).
//
// Параметры:
//  URLСтраницыСайта - Строка - URL страницы сайта;
//
// Возвращаемое значение:
//  Строка - URL для перехода на страницу сайта.
//
Функция URLДляПереходаНаСтраницуИнтегрированногоСайта(URLСтраницыСайта) Экспорт
	
	РезультатПолученияURL = СлужебнаяURLДляПереходаНаСтраницуИнтегрированногоСайта(URLСтраницыСайта);
	Возврат РезультатПолученияURL.URL;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СлужебныйОбщегоНазначения

// Сохраняет логин и пароль пользователя в подсистеме Интернет-поддержки
// в безопасном хранилище. В вызывающем коде перед записью данных необходимо
// проверить права и установить привилегированный режим.
//
// Параметры:
// ДанныеАутентификации - Структура, Неопределено - структура, содержащая логин 
//                        и пароль пользователя и пароль пользователя Интернет-поддержки.
//                        Если передано значение Неопределено, данные аутентификации удаляются.
//   * Логин - Строка - логин пользователя Интернет-поддержки;
//   * Пароль - Строка - пароль пользователя Интернет-поддержки.
//
Процедура СлужебнаяСохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт

	Если ДанныеАутентификации = Неопределено Тогда
		
		// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Очищены данные аутентификации.'"),
			Неопределено,
			Ложь);
		
		ПриИзмененииДанныхАутентификации(
			"",
			"");
		
	Иначе

		// Запись данных в безопасное хранилище
		ИДПодсистемы = ИдентификаторПодсистемы();
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Логин,
				"login");

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Пароль,
				"password");
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьИнформациюВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Записаны данные аутентификации, логин ""%1"".'"),
				ДанныеАутентификации.Логин),
			Неопределено,
			Ложь);
		
		ПриИзмененииДанныхАутентификации(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку, что переданный объект имеет тип СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
// Параметры:
//  Объект - Произвольный - объект для проверки.
//
// Возвращаемое значение:
//  Булево - если Истина, тип совпадает с СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
Функция ЭтоИдентификаторОбъектаМетаданных(Объект) Экспорт
	
	Возврат ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
//   Булево - Истина, если это разделенная конфигурация.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ЭтоРазделеннаяКонфигурация();
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
//   Булево - Истина, если сеанс запущен без разделителей.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.СеансЗапущенБезРазделителей();
	
КонецФункции

// Возвращает значение разделителя сеанса.
//
// Возвращаемое значение:
//  Число - значение разделителя.
//
Функция ЗначениеРазделителяСеанса() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат 0;
	КонецЕсли;
	
	МодульРаботаВМоделиСервисаБИП = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБИП");
	Возврат МодульРаботаВМоделиСервисаБИП.ЗначениеРазделителяСеанса();
	
КонецФункции

// Возвращает имя программы в сервисах Интернет-поддержки.
//
// Возвращаемое значение:
//  Строка - имя программы.
//
Функция СлужебнаяИмяПрограммы() Экспорт
	
	Результат = ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации();
	Если Результат = Неопределено Или ПустаяСтрока(Результат) Тогда
		Результат = "Unknown";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает синоним конфигурации для использования в других подсистемах.
//
// Возвращаемое значение:
//  Строка - синоним программы.
//
Функция СинонимКонфигурации() Экспорт
	
	Возврат Метаданные.Синоним;
	
КонецФункции

// Проверяет доступность изменения параметров Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//  Булево - Истина, если у текущего пользователя есть право записи параметров ИПП.
//           Ложь - в противном случае.
//
Функция ПравоЗаписиПараметровИПП() Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь)
		Или Пользователи.РолиДоступны("ПодключениеИнтернетПоддержки", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском")
		И Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь);

КонецФункции

// Реализует инкрементальный расчет хеш-суммы и кодировку в формат base64.
// Способ расчета и тип вычисляемого значения определяются типом хеш-функции.
//
// Параметры:
//  Данные  - Строка, ДвоичныеДанные - данные для расчета хеш-суммы.
//
// Возвращаемое значение:
//  Строка - рассчитанная хеш-сумма закодированная по алгоритму base64.
//
Функция КонтрольнаяСуммаФайла(Данные) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		ХешированиеДанных.Добавить(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		ХешированиеДанных.ДобавитьФайл(Данные);
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение параметра Данные (%1)'"),
			Строка(Данные));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
// Возвращаемое значение:
//  Строка - идентификатор подсистемы.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат "ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП";
	
КонецФункции

// Возвращает значение свойства Метаданные.Имя
//
// Возвращаемое значение:
//  Строка - имя конфигурации.
//
Функция ИмяКонфигурации() Экспорт

	Возврат Метаданные.Имя;

КонецФункции

// Возвращает значение свойства Метаданные.Версия
//
// Возвращаемое значение:
//  Строка - версия конфигурации.
//
Функция ВерсияКонфигурации() Экспорт
	
	ВерсияПрограммы = Метаданные.Версия;
	ИнтеграцияПодсистемБИП.ПриОпределенииНомераВерсииПрограммы(
		ВерсияПрограммы);
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииНомераВерсииПрограммы(
		ВерсияПрограммы);
	
	Возврат ВерсияПрограммы;
	
КонецФункции

// Проверяет доступность переданного URL по критерию:
//  - Код ответа 200;
//  - Таймаут ответа - 10 секунд.
//
// Параметры:
//  URL - Строка - URL для проверки;
//  НастройкиПроксиСервера - Структура, Неопределено - настройки прокси;
//  Метод - Строка - http метод проверки.
//
// Возвращаемое значение:
//  Булево - Истина елис URL доступен.
//
Функция ПроверитьURLДоступен(
		URL,
		НастройкиПроксиСервера = Неопределено,
		Метод = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИмяОшибки"         , "");
	РезультатПроверки.Вставить("СообщениеОбОшибке" , "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	Если НастройкиПроксиСервера = Неопределено Тогда
		Попытка
			ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ПроверитьURLДоступен(
				URL,
				Метод,
				РезультатПроверки.ИмяОшибки,
				РезультатПроверки.СообщениеОбОшибке,
				РезультатПроверки.ИнформацияОбОшибке);
		Исключение
			Возврат РезультатПроверки;
		КонецПопытки;
	Иначе
		СлужебнаяПроверитьURLДоступен(
			URL,
			Метод,
			РезультатПроверки.ИмяОшибки,
			РезультатПроверки.СообщениеОбОшибке,
			РезультатПроверки.ИнформацияОбОшибке,
			НастройкиПроксиСервера);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает номер версии платформы 1С:Предприятия.
//
// Возвращаемое значение:
//  Строка - версия платформы.
//
Функция ТекущаяВерсияПлатформы1СПредприятие() Экспорт
	
	СистИнфо = Новый СистемнаяИнформация;
	Возврат СистИнфо.ВерсияПриложения;
	
КонецФункции

// Производит проверку хоста для URL полученного из внешних источников.
//
// Параметры:
//  URL - Строка - URL из внешнего источника.
//
Процедура ПроверитьURL(URL) Экспорт
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	ДоменХоста = Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6);
	Если ДоменХоста <> ".1c.ru" И ДоменХоста <> ".1c.eu" Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный хост (%1)'"),
			СтруктураURI.Хост);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет запись JSON дополнительными параметрами.
//
// Параметры:
//  ДопПараметрыЗапроса - Структура - дополнительные параметры запроса;
//  ЗаписьДанныхСообщения - ЗаписьJSON - поток записи запроса к сервису.
//
Процедура ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("additionalParameters");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("key");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(КлючЗначение.Ключ);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(КлючЗначение.Значение));
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
КонецПроцедуры

// Возвращает сохраненный регистрационный номер программного продукта.
//
// Возвращаемое значение:
//  Строка - регистрационный номер.
//
Функция РегистрационныйНомерПрограммногоПродукта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы(), "regnumber");
	
КонецФункции

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ИнтернетПоддержкаПользователей.Пауза", Параметры);
	КонецЕсли;
	
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

// Записывает в журнал регистрации сообщение информации
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//  Сообщение - Строка - строковое представление ошибки.
//  Данные - Произвольный - данные, к которым относится сообщение об ошибке;
//  Ошибка - Булево - определяет уровень журнала регистрации.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		Сообщение,
		Данные = Неопределено,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		Данные,
		Сообщение);
	
КонецПроцедуры

#КонецОбласти

#Область Тарификация

// Определяет доступность услуги по переданному идентификатору
//
// Параметры:
//  ИдентификаторУслуги  - Строка - идентификатор услуги в сервисе;
//  ЗначениеРазделителя - Число - идентификатор области данных.
//
// Возвращаемое значение:
//  Булево - если Истина, услуга доступна.
//
Функция УслугаПодключена(ИдентификаторУслуги, ЗначениеРазделителя = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		// В локальном режиме нет функциональности
		// для проверки по данным ИБ.
		Возврат Истина;
	Иначе
		
		ТребуетсяРазделение = Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		Если ТребуетсяРазделение Тогда
			Если ЗначениеРазделителя = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ЗначениеРазделителя"".'");
			КонецЕсли;
			МодульРаботаВМоделиСервисаБИП = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБИП");
			МодульРаботаВМоделиСервисаБИП.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
		КонецЕсли;
		
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		Результат = МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
			ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
			ИдентификаторУслуги);
		
		Если ТребуетсяРазделение Тогда
			МодульРаботаВМоделиСервисаБИП.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		Если Не Результат Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Услуга с идентификатором %1 не подключена.'"),
					ИдентификаторУслуги),
				Неопределено,
				Ложь);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСодержимогоИзИнтернет

// Загружает содержимое из Интернет по протоколу HTTP(S)
// с использованием методов GET, POST или PUT. Поддерживает
// обработку перенаправлений.
//
// Параметры:
//  URL - Строка - URL вызываемой операции;
//  Логин - Строка - логин basic authentication;
//  Пароль - Строка - пароль basic authentication.
//  ПараметрыЗапроса - Структура, Неопределено - уточняющие параметры запроса:
//   *ФорматОтвета - Число - определяет формат возврата содержимого ответа операции:
//      - 0 - имя файла ответа (формат ответа по умолчанию);
//      - 1 - как строка;
//      - 2 - как двоичные данные;
//   *Метод - Строка - http метод: "GET", "POST" или "PUT". По умолчанию используется GET;
//   *ДанныеДляОбработки - Строка, ДвоичныеДанные - данные для отправки методов
//                         передаваемые методом POST или PUT;
//   *ФорматДанныхДляОбработки - Число - формат отправки данных:
//      - 0 - имя файла (формат ответа по умолчанию);
//      - 1 - как строка;
//      - 2 - как двоичные данные;
//   *Заголовки - Соответствие - заголовки запроса;
//   *ИмяФайлаОтвета - Строка - путь к файлу для записи результата;
//   *Таймаут - Число - время ожидания завершения операции
//   *НастройкиПрокси - Структура - настройки подключения к прокси серверу.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *КодОшибки - Строка - идентификатор ошибки;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    *Содержимое - Строка, ДвоичныеДанные, Неопределено - тело ответа;
//    *КодСостояния - Число - код состояния http, который вернул сервер;
//    *ФорматОтвета - Число - определяет формат возврата содержимого ответа операции:
//      - 0 - имя файла ответа;
//      - 1 - как строка;
//      - 2 - как двоичные данные;
//   *Заголовки - Соответствие - заголовки ответа.
//
Функция ЗагрузитьСодержимоеИзИнтернет(
		Знач URL,
		Знач Логин = Неопределено,
		Знач Пароль = Неопределено,
		ПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);
	Результат.Вставить("Заголовки"         , Новый Соответствие);
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , -1);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ПараметрыЗапроса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ПараметрыЗапроса);
	КонецЕсли;
	 
	Если ПараметрыПолучения.Таймаут = -1 Тогда
		// Таймаут по умолчанию.
		ПараметрыПолучения.Таймаут = 30;
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
					Неопределено,
					Новый СертификатыУдостоверяющихЦентровОС);
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		Если Прокси = Неопределено Тогда
			Если ПараметрыПолучения.НастройкиПрокси = Неопределено Тогда
				Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
			Иначе
				Прокси = СформироватьИнтернетПрокси(ПараметрыПолучения.НастройкиПрокси, СтруктураURI.Схема);
			КонецЕсли;
			ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе
			
				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить содержимое (%1). %2'"),
				URL,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			// Диагностика соединения с ресурсом.
			Попытка
				
				РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(URL);
				ОписаниеРезультатаДиагностики = НСтр("ru = 'Результаты диагностики соединения:'")
					+ Символы.ПС + РезультатДиагностики.ОписаниеОшибки;
				
			Исключение
				
				ОписаниеРезультатаДиагностики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось выполнить диагностику соединения. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				ПредставлениеОшибки,
				ПодробноеОписаниеОшибки + Символы.ПС + ОписаниеРезультатаДиагностики,
				Перенаправления);
			Возврат Результат;
			
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru = 'Превышено количество перенаправлений.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru = 'Некорректное перенаправление.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Некорректное перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Циклическое перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
				
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	Если Ответ <> Неопределено Тогда
		Результат.Заголовки = Ответ.Заголовки;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru = 'Ошибка аутентификации на прокси-сервере.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный ответ сервера (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка (%1) при выполнении запроса к ресурсу.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код ошибки: %1.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВызовОперацийСервисов

// Формирует структуру дополнительных параметров для передачи в сервисы.
//
// Параметры:
//  ФорматЗначенийСтрока - Булево - формат смещения.
//
// Возвращаемое значение:
//  Соответствие - дополнительные параметры.
//
Функция ДополнительныеПараметрыВызоваОперацииСервиса(ФорматЗначенийСтрока = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ClientPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипаПлатформы(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ClientOSVersion", СистИнфо.ВерсияОС);
		
	Иначе
		
		ПараметрыКлиента = ПараметрыКлиента();
		Если ПараметрыКлиента <> Неопределено Тогда
			
			Если ПараметрыКлиента.Свойство("ТипПлатформы") Тогда
				Результат.Вставить("ClientPlatformType", ПараметрыКлиента.ТипПлатформы);
			КонецЕсли;
			
			Если ПараметрыКлиента.Свойство("ВерсияОС") Тогда
				Результат.Вставить("ClientOSVersion", ПараметрыКлиента.ВерсияОС);
			КонецЕсли;
			
		КонецЕсли;
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ServerPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипаПлатформы(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ServerOSVersion", СистИнфо.ВерсияОС);
		
	КонецЕсли;
	
	Результат.Вставить("PlatformVersion", СистИнфо.ВерсияПриложения);
	
	Результат.Вставить("LibraryVersion",
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	Результат.Вставить("ConfigName", ИмяКонфигурации());
	Результат.Вставить("ConfigVersion", ВерсияКонфигурации());
	Результат.Вставить("Vendor", Метаданные.Поставщик);
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат.Вставить("IBID",
			СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	КонецЕсли;
	Результат.Вставить("ConfigLanguage", КодЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("ConfigMainLanguage", КодОсновногоЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("CurLocalizationCode", ТекущийКодЛокализации());
	Результат.Вставить("SystemLanguage", ТекущийЯзыкСистемы());
	Результат.Вставить("ClientTimeOffsetGMT",
		?(ФорматЗначенийСтрока,
		  Формат((ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()), "ЧГ=0"),
		  (ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата())));
	
	Результат.Вставить("countryId", "");
	
	Результат.Вставить(
		"IBIsSeparated",
		?(ФорматЗначенийСтрока,
		  ?(ОбщегоНазначения.РазделениеВключено(), "true", "false"),
		  ОбщегоНазначения.РазделениеВключено()));
	Результат.Вставить("IBUserName", Строка(ИмяПользователя()));
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	Если НастройкиСоединения.ДоменРасположенияСерверовИПП = 0 Тогда
		Результат.Вставить("DomainZone", "ru");
	ИначеЕсли НастройкиСоединения.ДоменРасположенияСерверовИПП = 1 Тогда
		Результат.Вставить("DomainZone", "eu");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры клиентского приложения.
//
// Возвращаемое значение:
//  ФиксированноеСоответствие - см. ИнтернетПоддержкаПользователейКлиент.ПараметрыКлиента.
//
Функция ПараметрыКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП;
	
КонецФункции

#КонецОбласти

#Область НастройкиКлиентаЛицензирования

// Возвращает признак возможности работы с настройками клиента лицензирования
// в БИП.
//
// Возвращаемое значение:
//  Булево - Истина если версия платформы 1С:Предприятие 8.3.7 или выше и не работа в модели сервиса.
//
Функция ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Экспорт

	Возврат Не ОбщегоНазначения.РазделениеВключено();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Аутентификация

// Определяет URL операции получения тикета в зависимости от переданного домена.
//
// Параметры:
//  Домен - Число - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции получения тикета.
//
Функция URLОперацииПолучитьТикет(Домен)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(Домен)
		+ "/rest/public/ticket/get";

КонецФункции

// Определяет URL операции проверки данных аутентификации в зависимости от переданного домена.
//
// Параметры:
//  Домен - Число - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции проверки данных аутентификации.
//
Функция URLСервисаПроверкиПаролей(Домен)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(Домен)
		+ "/rest/public/user/auth";

КонецФункции

// Внутренняя функция для получения тикетов аутентификации.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//  ВладелецТикета - Строка - произвольное имя сервиса, для которого
//      выполняется аутентификация пользователя. Это же имя должно
//      использоваться при вызове операции checkTicket;
//      Не допускается незаполненное значение параметра.
//  НастройкиСоединения - Структура - см. НастройкиСоединенияССерверами;
//
// Возвращаемое значение:
//  Структура - результат получения тикета. Поля структуры:
//        * Тикет - Строка - полученный тикет аутентификации. Если при получении
//          тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//          значение поля - пустая строка.
//        * КодОшибки - Строка - строковый код возникшей ошибки, который
//          может быть обработан вызывающим функционалом:
//              - <Пустая строка> - получение тикета выполнено успешно;
//              - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//              - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                 получения тикета с некорректным логином и паролем;
//              - "ОшибкаПодключения" - ошибка при подключении к сервису;
//              - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//              - "НеизвестнаяОшибка" - при получении тикета возникла
//                 неизвестная (не обрабатываемая) ошибка;
//        * СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//          может быть отображено пользователю;
//        * ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//          может быть записано в журнал регистрации.
//
Функция СлужебнаяТикетАутентификации(
	Знач Логин,
	Знач Пароль,
	Знач ИмяСервиса,
	НастройкиСоединения)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Тикет"             , Неопределено);
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Логин  = ДанныеАутентификации.Логин;
			Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = НастройкиСоединенияССерверами();
	КонецЕсли;
	
	URLСервиса = URLОперацииПолучитьТикет(
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыTicketGetJSON(Логин, Пароль, ИмяСервиса));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);

	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Попытка
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОперации.Содержимое);
			ОтветОбъект = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Результат.Тикет = ОтветОбъект.ticket;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат.КодОшибки = "ОшибкаСервиса";
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
					|Некорректный ответ сервиса.
					|Ошибка при обработке ответа сервиса:
					|%2
					|Код состояния: %3;
					|Тело ответа: %4'"),
				URLСервиса,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				РезультатОперации.КодСостояния,
				Лев(РезультатОперации.Содержимое, 5120));
			ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации. Некорректный ответ сервиса.'");
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.
			|Повторите попытку позже.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 500 Тогда
		
		Результат.КодОшибки          = "ОшибкаСервиса";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Внутренняя ошибка сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Ошибка аутентификации. Внутренняя ошибка сервиса.
				|Подробнее см. в журнале регистрации.'");
		
	ИначеЕсли РезультатОперации.КодСостояния = 0 Тогда
		
		Результат.КодОшибки         = "ОшибкаПодключения";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|%2'"),
			URLСервиса,
			РезультатОперации.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения к сервису.
			|Подробнее см. в журнале регистрации.'");
		
	Иначе
		
		Результат.КодОшибки = "НеизвестнаяОшибка";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Неизвестный код состояния ответа сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка аутентификации в сервисе (%1).
					|Подробнее см. в журнале регистрации.'"),
				РезультатОперации.КодСостояния);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует тело запроса на получение тикета аутентификации.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//  ВладелецТикета - Строка - произвольное имя сервиса, для которого
//      выполняется аутентификация пользователя. Это же имя должно
//      использоваться при вызове операции checkTicket;
//      Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//  Строка - тело запроса
//
Функция ПараметрыTicketGetJSON(Логин, Пароль, ВладелецТикета)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("serviceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВладелецТикета);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

// Формирует тело запроса для проверки данных аутентификации.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//  Строка - тело запроса
//
Функция ПараметрыAuthJSON(Логин, Пароль)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// См. ИнтернетПоддержкаПользователей.URLДляПереходаНаСтраницуИнтегрированногоСайта
//
Функция СлужебнаяURLДляПереходаНаСтраницуИнтегрированногоСайта(URLСтраницыСайта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", "");
	Результат.Вставить("URL"      , URLСтраницыСайта);
	
	РезультатПолученияТикета = Неопределено;
	Если ОбщегоНазначения.РазделениеВключено() Или Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета = ТикетАутентификацииНаПорталеПоддержки(URLСтраницыСайта);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если РезультатПолученияТикета <> Неопределено Тогда
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.URL =
				ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
					"/ticket/auth?token=" + РезультатПолученияТикета.Тикет,
					НастройкиСоединенияССерверами());
		Иначе
			Результат.КодОшибки = РезультатПолученияТикета.КодОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийБиблиотеки

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль)
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации(Логин, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриИзмененииДанныхАутентификации(Логин, Пароль);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриИзмененииДанныхАутентификации(Логин, Пароль);
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
	// ПолучениеВнешнихКомпонент
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПриИзмененииДанныхАутентификации(Логин, Пароль);
	КонецЕсли;
	// Конец ПолучениеВнешнихКомпонент
	
	// ПодключениеСервисовСопровождения
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		МодульПодключениеСервисовСопровождения.ПриИзмененииДанныхАутентификации();
	КонецЕсли;
	// Конец ПодключениеСервисовСопровождения
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПриИзмененииДанныхАутентификации(Логин);
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// Переопределяемая обработка события.
	Если ЗначениеЗаполнено(Логин) Тогда 
		ДанныеАутентификации = Новый Структура("Логин, Пароль", Логин, Пароль);
		ИнтеграцияПодсистемБИП.ПриИзмененииДанныхАутентификацииИнтернетПоддержки(
			ДанныеАутентификации);
		ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки(
			ДанныеАутентификации);
	Иначе
		ИнтеграцияПодсистемБИП.ПриИзмененииДанныхАутентификацииИнтернетПоддержки(
			Неопределено);
		ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки(
			Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Установка параметров сеанса базовой функциональности БИП.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ПараметрыКлиентаНаСервереБИП"
		И УстановленныеПараметры.Найти("ПараметрыКлиентаНаСервереБИП") = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП = Новый ФиксированнаяСтруктура(Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСодержимогоИзИнтернет

// Устанавливает описание ошибки в результат выполнения операции.
//
// Параметры:
//  Результат - Структура - результат выполнения операции;
//  КодОшибки - Строка - Идентификатор ошибки
//  СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//  ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//  Перенаправления - Массив - данные перенаправлений.
//
Процедура УстановитьОписаниеОшибки(
		Результат,
		КодОшибки,
		СообщениеОбОшибке,
		ИнформацияОбОшибке,
		Перенаправления)
	
	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	Сообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		Сообщение = НСтр("ru = 'Ошибка при подключении к серверу.'");
	ИначеЕсли КодОшибки = "ServerError" Тогда
		Сообщение = НСтр("ru = 'На сервере возникла внутренняя ошибка при обработке запроса.'");
	ИначеЕсли КодОшибки = "ClientError" Тогда
		Сообщение = НСтр("ru = 'Некорректный запрос.'");
	ИначеЕсли КодОшибки = "InternalError" Тогда
		Сообщение = НСтр("ru = 'Внутренняя ошибка.'");
	ИначеЕсли КодОшибки = "LoginError" Тогда
		Сообщение = НСтр("ru = 'Ошибка аутентификации на сервере.'");
	КонецЕсли;
	
	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(Сообщение), "", Сообщение + " ")
		+ СообщениеОбОшибке;
	
	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;
	
	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
			+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает описание перенаправления при выполнения операции.
//
// Параметры:
//  ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//  Перенаправления - Массив - данные перенаправлений.
//
Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
		ИнформацияОбОшибке,
		Перенаправления)
	
	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
		+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	
КонецПроцедуры

// Проверяет доступность переданного URL по критерию:
//  - Код ответа 200;
//  - Таймаут ответа - 10 секунд.
//
// Параметры:
//  URL - Строка - URL для проверки;
//  Метод - Строка - http метод проверки;
//  ИмяОшибки - Строка - идентификатор ошибки;
//  СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//  ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//  НастройкиПроксиСервера - Структура, Неопределено - настройки прокси;
//
Процедура СлужебнаяПроверитьURLДоступен(
		URL,
		Метод,
		ИмяОшибки,
		СообщениеОбОшибке,
		ИнформацияОбОшибке,
		НастройкиПроксиСервера = Неопределено) Экспорт
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, 10);
	ДопПараметрыПолученияФайла.Вставить("НастройкиПрокси", НастройкиПроксиСервера);
	
	Если Метод <> Неопределено Тогда
		ДопПараметрыПолученияФайла.Вставить("Метод", Метод);
	КонецЕсли;
	
	Попытка
		РезультатЗагрузки = ЗагрузитьСодержимоеИзИнтернет(
			URL,
			,
			,
			ДопПараметрыПолученияФайла);
	Исключение
		ИмяОшибки = "Unknown";
		СообщениеОбОшибке = НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестная ошибка при проверке доступности URL.
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если Не ПустаяСтрока(РезультатЗагрузки.КодОшибки) Тогда
		ИмяОшибки          = РезультатЗагрузки.КодОшибки;
		СообщениеОбОшибке  = РезультатЗагрузки.СообщениеОбОшибке;
		ИнформацияОбОшибке = РезультатЗагрузки.ИнформацияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

// Формирует ИнтернетПрокси на основании переданных настроек.
//
// Параметры:
//  НастройкаПроксиСервера - Строка, Соответствие - параметры подключения к прокси;
//  Протокол - Строка - протокол подключения к прокси.
//
// Возвращаемое значение:
//  ИнтернетПрокси - подготовленный объект прокси.
//
Функция СформироватьИнтернетПрокси(
		НастройкаПроксиСервера,
		Протокол)
	
	Если НастройкаПроксиСервера = Неопределено
		Или НастройкаПроксиСервера = "<СистемныеУстановки>" Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;	
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
			
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = НастройкаПроксиСервера.Получить("ИспользоватьАутентификациюОС");
	ИспользоватьАутентификациюОС = ?(ИспользоватьАутентификациюОС = Истина, Истина, Ложь);
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Определяет идентификатор домена на основании
// режима использования внешних ресурсов.
//
// Возвращаемое значение:
//  Число - идентификатор домена.
//
Функция ДоменРасположенияСерверовИПП() Экспорт
	
	РежимИспользования = ПолучитьРежимВнешнихРесурсов();
	Если ВРег(РежимИспользования) = "D" Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Локализация

// Возвращается код текущего языка интерфейса конфигурации
// в формате ISO-639-1.
//
// Возвращаемое значение:
//  Строка - код языка интерфейса конфигурации.
//
Функция КодЯзыкаИнтерфейсаКонфигурации()

	Язык = ТекущийЯзык();
	Если Язык = Неопределено Тогда
		// Для пользователя информационной базы не указан язык.
		Возврат КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	КонецЕсли;

	КодЯзыкаВМетаданных = ?(ТипЗнч(Язык) = Тип("Строка"), Язык, Язык.КодЯзыка);
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	
	ИнтеграцияПодсистемБИП.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

// Возвращается код основного языка интерфейса конфигурации
// в формате ISO-639-1.
//
// Возвращаемое значение:
//  Строка - код языка интерфейса конфигурации.
//
Функция КодОсновногоЯзыкаИнтерфейсаКонфигурации()

	КодЯзыкаВМетаданных = Метаданные.ОсновнойЯзык.КодЯзыка;
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	
	ИнтеграцияПодсистемБИП.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.7.1";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.8.14";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
КонецПроцедуры

// Выполняет перенос данных из регистра сведений УдалитьПараметрыИнтернетПоддержкиПользователей
// в безопасное хранилище.
//
Процедура ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ЗапросПараметровИПП = Новый Запрос;
		ЗапросПараметровИПП.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
		|ИЗ
		|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
		|ГДЕ
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""login""
		|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
		|ГДЕ
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""password""
		|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
		|ГДЕ
		|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""regnumber""
		|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор";
		
		ЗапросПараметровИПП.УстановитьПараметр(
			"ПустойИдентификатор",
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаПараметров = ЗапросПараметровИПП.Выполнить().Выбрать();
		
		// Запись данных в безопасное хранилище
		ИдентификаторПодсистемыБИП = ИдентификаторПодсистемы();
		Пока ВыборкаПараметров.Следующий() Цикл
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемыБИП,
				ВыборкаПараметров.ЗначениеПараметра,
				ВыборкаПараметров.ИмяПараметра);
		КонецЦикла;
		
		// Очистка неиспользуемого регистра параметров ИПП
		НаборЗаписей = РегистрыСведений.УдалитьПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке);
		
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет замену идентификатора подсистемы в безопасном хранилище.
//
Процедура ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса.
		Возврат;
	КонецЕсли;
	
	ИдентификаторПодсистемыБИПУстаревший =
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.БазоваяФункциональностьБИП");
	ДанныеВБезопасномХранилищеУстаревшие =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			ИдентификаторПодсистемыБИПУстаревший,
			"login,password,regnumber");
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	Для Каждого КлючЗначение Из ДанныеВБезопасномХранилищеУстаревшие Цикл
		Если КлючЗначение.Значение <> Неопределено Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемы,
				КлючЗначение.Значение,
				КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Удалить устаревшие данные после переноса.
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИПУстаревший);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает минимальную версию БСП,
// с которой возможна работа БИП.
//
// Возвращаемое значение:
//   Строка - номер версии БСП
//
Функция МинимальнаяВерсияБСП() Экспорт
	
	Возврат "3.1.4.148";
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

Функция ОтправитьДанныеСообщенияВТехПоддержку(
	Тема,
	Тело,
	Знач Получатель,
	Вложения,
	НастройкиСоединенияССерверами,
	ДопПараметры,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"           , "");
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ТокенДанных"         , "");
	
	// Проверка доступности сервиса.
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИмяОшибки"         , "");
	РезультатПроверки.Вставить("СообщениеОбОшибке" , "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	СлужебнаяПроверитьURLДоступен(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержкуPing(
			НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		"HEAD",
		РезультатПроверки.ИмяОшибки,
		РезультатПроверки.СообщениеОбОшибке,
		РезультатПроверки.ИнформацияОбОшибке,
		НастройкиПрокси);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса отправки сообщений.
					|%1'"),
				РезультатПроверки.ИнформацияОбОшибке));
		
		Результат.КодОшибки = РезультатПроверки.ИмяОшибки;
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса.
					|%1'"),
				РезультатПроверки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Отправка данных сообщения.
	ТелоСообщения = СтрЗаменить(
		ДопПараметры.ШаблонТекстаСообщения,
		"%msgtxt",
		Тело);

	ПодготовитьВложенияКОтправке(Вложения, ДопПараметры.Вложения);

	ДанныеJSON = ПараметрыSaveTechSupportRequestJSON(
		Тема,
		ТелоСообщения,
		Получатель,
		ДопПараметры.Вложения);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "PUT");
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеJSON);
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("НастройкиПрокси"         , НастройкиПрокси);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 300);
	
	РезультатОтправки = ЗагрузитьСодержимоеИзИнтернет(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержку(
			НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		,
		,
		ДопПараметрыЗапроса);

	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда

		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке));

		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);

		Возврат Результат;

	КонецЕсли;

	Попытка
		РезультатВызова = РезультатSaveTechSupportRequestИзJSON(РезультатОтправки.Содержимое);
	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса отправки сообщений.
				|%1
				|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Лев(РезультатОтправки.Содержимое, 1024)));

		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Некорректный ответ сервиса отправки сообщений.'");

		Возврат Результат;

	КонецПопытки;

	Если РезультатВызова.success <> Истина Тогда

		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в тех. поддержку.
				|Сервис сообщил об ошибке.
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));

		Результат.КодОшибки = "ВозвращенОтказСервиса";
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в тех. поддержку.
				|Подробнее см. в журнале регистрации.'");

		Возврат Результат;

	КонецЕсли;

	Результат.ТокенДанных = РезультатВызова.uuid;

	Возврат Результат;

КонецФункции

Функция ХостСервисовТехническойПоддержки(Домен) Экспорт


	Если Домен = 0 Тогда
		Возврат "portal-support.1c.ru";
	Иначе
		Возврат "portal-support.1c.eu";
	КонецЕсли;

КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержку(Домен)

	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/request";

КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержкуPing(Домен)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/ping";
	
КонецФункции

Процедура ПодготовитьВложенияКОтправке(ПереданныеВложения, ВложенияДляОтправки)

	Если ПереданныеВложения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ТекВложение Из ПереданныеВложения Цикл
		ВложенияДляОтправки.Добавить(ТекВложение);
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыSaveTechSupportRequestJSON(Тема, Тело, Получатель, ТекстовыеВложения)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("theme");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тема);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("text");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тело);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("language");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(КодЯзыка(ТекущийЯзыкСистемы()));

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Получатель);

	// Добавление вложений
	Если ТекстовыеВложения <> Неопределено Тогда

		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportAdditionalDtoList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();

		Для Каждого ТекВложение Из ТекстовыеВложения Цикл
			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("name");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Представление);
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Текст);
			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		КонецЦикла;

		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();

	КонецЕсли;

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция РезультатSaveTechSupportRequestИзJSON(ТелоJSON)

	ОтветОбъект  = Новый Структура("success, errorMessage, uuid", "false", "", "");
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
			ОтветОбъект.Вставить(ИмяСвойства, ЧтениеОтвета.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	ЧтениеОтвета.Закрыть();

	Возврат ОтветОбъект;

КонецФункции

Функция КодЯзыка(ЯзыкИСтрана)

	ПозицияПодчеркивание = СтрНайти(ЯзыкИСтрана, "_");
	Если ПозицияПодчеркивание = 0 Тогда
		Возврат ЯзыкИСтрана;
	Иначе
		Возврат Лев(ЯзыкИСтрана, ПозицияПодчеркивание - 1);
	КонецЕсли;

КонецФункции

Функция ТекстВДвоичныхДанных(Данные) Экспорт

	Результат = "";

	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	Данные.Записать(ИмяВремФайла);
	Результат = ТекстВФайле(ИмяВремФайла);

	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ТекстВФайле(ИмяФайла)

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

