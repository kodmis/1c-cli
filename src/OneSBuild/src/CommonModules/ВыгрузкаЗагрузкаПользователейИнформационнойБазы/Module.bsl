#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыгрузитьПользователейИнформационнойБазы(Контейнер) Экспорт
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	ПользователиИБ = СортироватьМассивПользователейИБПередВыгрузкой(ПользователиИБ);
	
	ИмяФайла = Контейнер.СоздатьФайл(ВыгрузкаЗагрузкаДанныхСлужебный.Users());
	
	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайла);
	ПотокЗаписи.ЗаписатьОбъявлениеXML();
	ПотокЗаписи.ЗаписатьНачалоЭлемента("Data");
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл // ПользовательИнформационнойБазы
		
		ФабрикаXDTO.ЗаписатьXML(ПотокЗаписи, СериализоватьПользователяИнформационнойБазы(ПользовательИБ));
		
	КонецЦикла;
	
	ПотокЗаписи.ЗаписатьКонецЭлемента();
	ПотокЗаписи.Закрыть();
	
	Контейнер.ФайлЗаписан(ИмяФайла);
	
КонецПроцедуры

Процедура ЗагрузитьПользователейИнформационнойБазы(Контейнер) Экспорт
	
	Файл = Контейнер.ПолучитьФайлИзКаталога(ВыгрузкаЗагрузкаДанныхСлужебный.Users());
	Контейнер.РаспаковатьФайл(Файл);
	
	ПотокЧтения = Новый ЧтениеXML();
	ПотокЧтения.ОткрытьФайл(Файл.ПолноеИмя);
	ПотокЧтения.ПерейтиКСодержимому();
	
	Если ПотокЧтения.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ПотокЧтения.Имя <> "Data" Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента %1.'"),
			"Data");
		
	КонецЕсли;
	
	Если НЕ ПотокЧтения.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'");
	КонецЕсли;
	
	НетПользователейСАдминистративнымиПравами = Истина;
	
	Пока ПотокЧтения.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		СериализацияПользователя = ФабрикаXDTO.ПрочитатьXML(ПотокЧтения, ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "InfoBaseUser"));
		
		ПользовательИБ = ДесериализоватьПользователяИнформационнойБазы(СериализацияПользователя);
		Если НетПользователейСАдминистративнымиПравами И Не ПользовательИБ.АутентификацияСтандартная Тогда
			СоздатьПользователяСАдминистративнымиПравами();
			НетПользователейСАдминистративнымиПравами = Ложь;
		КонецЕсли;
		
		Отказ = Ложь;
		ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВыполнитьДействияПриЗагрузкеПользователяИнформационнойБазы(
			Контейнер, СериализацияПользователя, ПользовательИБ, Отказ);
		
		Если Не Отказ Тогда
			
			ПользовательИБ.Записать();
			
			ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВыполнитьДействияПослеЗагрузкиПользователяИнформационнойБазы(
				Контейнер, СериализацияПользователя, ПользовательИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПотокЧтения.Закрыть();
	УдалитьФайлы(Файл.ПолноеИмя);	
	
	ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВыполнитьДействияПослеЗагрузкиПользователейИнформационнойБазы(Контейнер);
	
КонецПроцедуры

Процедура СоздатьПользователяСАдминистративнымиПравами()
	
	ИмяПользователя = НСтр("ru = 'Администратор'");
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	Иначе
		Пользователь.Роли.Очистить();
	КонецЕсли;
	
	Пользователь.АутентификацияСтандартная = Истина;	
	Пользователь.Имя = ИмяПользователя;
	Пользователь.ПоказыватьВСпискеВыбора = Истина;
	Пользователь.ПолноеИмя = ИмяПользователя;
	Для Каждого ТекРоль Из Метаданные.ОсновныеРоли Цикл
		Пользователь.Роли.Добавить(ТекРоль);
	КонецЦикла;
	
	Пользователь.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СортироватьМассивПользователейИБПередВыгрузкой(Знач ИсходныйМассив)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("ПользовательИнформационнойБазы"));
	ТЗ.Колонки.Добавить("Администратор", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("АутентификацияСтандартная", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ПользовательИБ Из ИсходныйМассив Цикл
		
		СтрокаТЗ = ТЗ.Добавить();
		СтрокаТЗ.Пользователь = ПользовательИБ;
		СтрокаТЗ.Администратор = ПравоДоступа("АдминистрированиеДанных", Метаданные, СтрокаТЗ.Пользователь);
		СтрокаТЗ.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
		
	КонецЦикла;
	
	ТЗ.Сортировать("Администратор Убыв, АутентификацияСтандартная Убыв");
	
	Возврат ТЗ.ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы - пользователь.
// 	СохранятьПароль - Булево - 
// 	СохранятьРазделение - Булево - 
// Возвращаемое значение:
// 	ОбъектXDTO - пользователь в виде объекта XDTO.
Функция СериализоватьПользователяИнформационнойБазы(Знач Пользователь, Знач СохранятьПароль = Ложь, Знач СохранятьРазделение = Ложь)
	
	ТипInfoBaseUser = ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "InfoBaseUser");
	ТипUserRoles = ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "UserRoles");
	
	ПользовательXDTO = ФабрикаXDTO.Создать(ТипInfoBaseUser);
	ПользовательXDTO.OSAuthentication = Пользователь.АутентификацияОС;
	ПользовательXDTO.StandardAuthentication = Пользователь.АутентификацияСтандартная;
	ПользовательXDTO.CannotChangePassword = Пользователь.ЗапрещеноИзменятьПароль;
	ПользовательXDTO.Name = Пользователь.Имя;
	Если Пользователь.ОсновнойИнтерфейс <> Неопределено Тогда
		ПользовательXDTO.DefaultInterface = Пользователь.ОсновнойИнтерфейс.Имя;
	Иначе
		ПользовательXDTO.DefaultInterface = "";
	КонецЕсли;
	ПользовательXDTO.PasswordIsSet = Пользователь.ПарольУстановлен;
	ПользовательXDTO.ShowInList = Пользователь.ПоказыватьВСпискеВыбора;
	ПользовательXDTO.FullName = Пользователь.ПолноеИмя;
	ПользовательXDTO.OSUser = Пользователь.ПользовательОС;
	Если СохранятьРазделение Тогда
		ПользовательXDTO.DataSeparation = СериализаторXDTO.ЗаписатьXDTO(Пользователь.РазделениеДанных);
	Иначе
		ПользовательXDTO.DataSeparation = Неопределено;
	КонецЕсли;
	ПользовательXDTO.RunMode = РежимЗапускаСтрокой(Пользователь.РежимЗапуска);
	ПользовательXDTO.Roles = ФабрикаXDTO.Создать(ТипUserRoles);
	Для каждого Роль Из Пользователь.Роли Цикл
		ПользовательXDTO.Roles.Role.Добавить(Роль.Имя);
	КонецЦикла;
	Если СохранятьПароль Тогда
		ПользовательXDTO.StoredPasswordValue = Пользователь.СохраняемоеЗначениеПароля;
	Иначе
		ПользовательXDTO.StoredPasswordValue = Неопределено;
	КонецЕсли;
	ПользовательXDTO.UUID = Пользователь.УникальныйИдентификатор;
	Если Пользователь.Язык <> Неопределено Тогда
		ПользовательXDTO.Language = Пользователь.Язык.Имя;
	Иначе
		ПользовательXDTO.Language = "";
	КонецЕсли;
	
	Возврат ПользовательXDTO;
	
КонецФункции

Функция РежимЗапускаСтрокой(Знач РежимЗапуска)
	
	Если РежимЗапуска = Неопределено Тогда
		Возврат "";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто Тогда
		Возврат "Auto";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		Возврат "OrdinaryApplication";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Возврат "ManagedApplication";
	Иначе
		ШаблонСообщения = НСтр("ru = 'Неизвестный режим запуска клиентского приложения %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, РежимЗапуска);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Функция ДесериализоватьПользователяИнформационнойБазы(Знач ПользовательXDTO, Знач ВосстанавливатьПароль = Ложь, Знач ВосстанавливатьРазделение = Ложь)
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательXDTO.UUID);
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	Пользователь.АутентификацияОС = ПользовательXDTO.OSAuthentication;
	Пользователь.АутентификацияСтандартная = ПользовательXDTO.StandardAuthentication;
	Пользователь.ЗапрещеноИзменятьПароль = ПользовательXDTO.CannotChangePassword;
	Пользователь.Имя = ПользовательXDTO.Name;
	Если ПустаяСтрока(ПользовательXDTO.DefaultInterface) Тогда
		Пользователь.ОсновнойИнтерфейс = Неопределено;
	Иначе
		Пользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ПользовательXDTO.DefaultInterface);
	КонецЕсли;
	Пользователь.ПоказыватьВСпискеВыбора = ПользовательXDTO.ShowInList;
	Пользователь.ПолноеИмя = ПользовательXDTO.FullName;
	Пользователь.ПользовательОС = ПользовательXDTO.OSUser;
	Если ВосстанавливатьРазделение Тогда
		Если ПользовательXDTO.DataSeparation = Неопределено Тогда
			Пользователь.РазделениеДанных = Новый Структура;
		Иначе
			Пользователь.РазделениеДанных = СериализаторXDTO.ПрочитатьXDTO(ПользовательXDTO.DataSeparation);
		КонецЕсли;
	Иначе
		Пользователь.РазделениеДанных = Новый Структура;
	КонецЕсли;
	Пользователь.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ПользовательXDTO.RunMode];
	Пользователь.Роли.Очистить();
	Для каждого ИмяРоли Из ПользовательXDTO.Roles.Role Цикл
		Роль = Метаданные.Роли.Найти(ИмяРоли);
		Если Роль <> Неопределено Тогда
			Пользователь.Роли.Добавить(Роль);
		КонецЕсли;
	КонецЦикла;
	Если ВосстанавливатьПароль Тогда
		Пользователь.СохраняемоеЗначениеПароля = ПользовательXDTO.StoredPasswordValue;
	Иначе
		Пользователь.СохраняемоеЗначениеПароля = "";
	КонецЕсли;
	Если ПустаяСтрока(ПользовательXDTO.Language) Тогда
		Пользователь.Язык = Неопределено;
	Иначе
		Пользователь.Язык = Метаданные.Языки[ПользовательXDTO.Language];
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

#КонецОбласти



