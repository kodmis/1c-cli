#Область СлужебныйПрограммныйИнтерфейс

// Возвращает адрес для запроса к внешнему программному интерфейсу менеджера сервиса.
//
// Параметры:
//  Метод - Строка - имя метода внешнего программного интерфейса менеджера сервиса.
//  ТипИнтерфейса - Строка, Неопределено - тип интерфейса метода внешнего программного интерфейса менеджера сервиса.
//    Если не указано, принимается значение "usr"
// 
// Возвращаемое значение:
//  Строка
//
Функция АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод, ТипИнтерфейса = Неопределено) Экспорт
	
	Адрес = "hs/ext_api/execute";
	
	Если ПрограммныйИнтерфейсСервисаПовтИсп.МенеджерСервисаПоддерживаетМетодВАдресе() Тогда
		
		Возврат Адрес + "/" + ?(ТипИнтерфейса = Неопределено, "usr", ТипИнтерфейса) + "/" + Метод;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Версия http сервиса ExtAPI менеджера сервиса, полученная через механизм версий интерфейсов БСП.
// 
// Возвращаемое значение:
//  Число, Неопределено - Версия ExtAPI. Неопределено возвращается в случае, когда подключение к Менеджеру сервиса не настроено
Функция ВерсияExtAPIМенеджераСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Если Не РаботаВМоделиСервиса.КонечнаяТочкаМенеджераСервисаНастроена() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Версии = ОбщегоНазначения.ПолучитьВерсииИнтерфейса(
			РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса(),
			РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса(),
			РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса(),
			"ExtAPI");
		Если Не ЗначениеЗаполнено(Версии) Тогда
			Возврат 1;
		КонецЕсли;
			
		Возврат Версии[Версии.ВГраница()];
	Иначе
		Возврат ПрограммныйИнтерфейсСервисаПовтИсп.СвойстваВерсииИнтерфейса().Версия;
	КонецЕсли; 
	
КонецФункции

// Менеджер сервиса поддерживает указание метода в адресе http сервиса ExtAPI.
// 
// Возвращаемое значение:
//  Булево
Функция МенеджерСервисаПоддерживаетМетодВАдресе() Экспорт
	
	ВерсияExtAPI = ВерсияExtAPIМенеджераСервиса();
	
	Возврат ВерсияExtAPI <> Неопределено И ВерсияExtAPI >= 19;

КонецФункции

// Возвращает шаблон запроса к внешнему программному интерфейсу менеджера сервиса.
//
// Параметры:
//  Метод - Строка - имя метода внешнего программного интерфейса менеджера сервиса.
//  ТипИнтерфейса - Строка, Неопределено - тип интерфейса метода внешнего программного интерфейса менеджера сервиса.
//    Если не указано, принимается значение "usr"
// 
// Возвращаемое значение:
//  Структура - шаблон запроса.
//
Функция ШаблонЗапроса(Метод, ТипИнтерфейса = Неопределено) Экспорт

	Если ПрограммныйИнтерфейсСервисаПовтИсп.МенеджерСервисаПоддерживаетМетодВАдресе() Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ОсновныеПараметрыМетода = Новый Структура;
	ОсновныеПараметрыМетода.Вставить("type", ?(ТипИнтерфейса = Неопределено, "usr", ТипИнтерфейса));
	ОсновныеПараметрыМетода.Вставить("method", Метод);

	ШаблонЗапроса = Новый Структура;
	ШаблонЗапроса.Вставить("general", ОсновныеПараметрыМетода);

	Возврат ШаблонЗапроса;

КонецФункции

// Отправляет запрос к сервису внешнего программного интерфейса менеджера сервиса.
//
// Параметры:
//  ДанныеЗапроса - Структура - данные запроса, в соответствующем формате без раздела "auth"
//   Подробнее см. статью https://its.1c.ru/db/freshsm#content:15205582:hdoc
//  Метод - Строка - имя метода внешнего программного интерфейса менеджера сервиса.
//  ТипИнтерфейса - Строка, Неопределено - тип интерфейса метода внешнего программного интерфейса менеджера сервиса.
//    Если не указано, принимается значение "usr"
//  АвторизоватьАбонента - Булево - признак добавления авторизации абонента текущей области.
//   Данные авторизации добавляются непосредственно перед выполнением запроса.
//
// Возвращаемое значение:
//  HTTPОтвет - ответ HTTP-сервиса Менеджера сервиса. 
//
Функция ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод, ТипИнтерфейса = Неопределено, АвторизоватьАбонента = Истина) Экспорт

	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	Адрес = АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод, ТипИнтерфейса);
	
	Если АвторизоватьАбонента Тогда
		Если РазделениеВключено Тогда
			Абонент = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения();
			СвойстваАвторизации = СвойстваАвторизации(Абонент.Код);
		Иначе
			ДанныеАвторизации = ДанныеАвторизацииВСервисе();
			СвойстваАвторизации = СвойстваАвторизации(ДанныеАвторизации.КодАбонента);
		КонецЕсли; 
	Иначе
		СвойстваАвторизации = СвойстваАвторизации();
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("auth", СвойстваАвторизации);
	
	Если РазделениеВключено Тогда
		Результат =  РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	Иначе
		Результат = ОтправитьЗапросВСервисИзЛокальнойБазы("POST", Адрес, ДанныеЗапроса);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

// Переименовывает поля данных ответа по соответствию переименований полей.
// 
// Параметры:
// 	ДанныеОтвета - Структура - данные ответа.
// 	Переименования - Соответствие из КлючИЗначение:
// 	* Ключ - Строка - имя исходного поля.
// 	* Значение  - см. ОписаниеКолонки
// 				- Строка - имя колонки.
// Возвращаемое значение:
// 	см. ПереименоватьСвойства.ДанныеОтвета
Функция ПереименоватьСвойства(ДанныеОтвета, Знач Переименования) Экспорт

	Для Каждого Элемент Из Переименования Цикл
		Если ДанныеОтвета.Свойство(Элемент.Ключ) Тогда
			ЗначениеПереименования = Элемент.Значение; // см. ОписаниеКолонки
			Если ТипЗнч(ЗначениеПереименования) = Тип("Строка") Тогда 
				ИмяПоля = ЗначениеПереименования;
				ТипПоля = Неопределено;
			Иначе
				ИмяПоля = ЗначениеПереименования.Имя;
				ТипПоля = ЗначениеПереименования.Тип;
			КонецЕсли;
			Если ТипПоля <> Неопределено Тогда
				Значение = ЗначениеПоТипу(ТипПоля, ДанныеОтвета[Элемент.Ключ]);
				ДанныеОтвета.Вставить(ИмяПоля, Значение);
			Иначе
				ДанныеОтвета.Вставить(ИмяПоля, ДанныеОтвета[Элемент.Ключ]);
			КонецЕсли; 
			ДанныеОтвета.Удалить(Элемент.Ключ);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ДанныеОтвета;

КонецФункции

// Возвращает данные ответа вызова метода программного интерфейса.
//
// Параметры:
// 	Ответ - HTTPОтвет - HTTP-ответ для обработки.
// 	ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке. Ошибка, когда код состояния не равен 102xx.
// 	КодСостояния - Число - возвращаемый параметр - код состояния HTTP-ответа.
// 	КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
// 	Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
// 	Неопределено, Структура - данные результата.
Функция РезультатВыполнения(Ответ, ВызыватьИсключениеПриОшибке = Истина,
		КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	КодСостояния = Ответ.КодСостояния;
	Если КодСостояния <> 200 Тогда
		Если ВызыватьИсключениеПриОшибке Тогда
			ВызватьИсключение СтрШаблон("%1 %2", КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	ПотокДанных = Ответ.ПолучитьТелоКакПоток();
	ИменаДат = СтрРазделить("start,completion,planned_date,created,modified,activated,blocked,expiration,timestamp", ",", Ложь);
	Данные = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных, ИменаДат);

	КодОтвета = Данные.general.response;
	Сообщение = Данные.general.message;

	Если Не (КодОтвета = 10200 Или КодОтвета = 10201 Или КодОтвета = 10202 Или КодОтвета = 10240) Тогда
		Если ВызыватьИсключениеПриОшибке Тогда
			Если КодОтвета <> 10404 Тогда
				Сообщение = СтрШаблон("%1 %2", КодОтвета, Сообщение);
			КонецЕсли; 
			ВызватьИсключение Сообщение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Данные;

КонецФункции

// Возвращает свойства авторизации для запроса к внешнему программному интерфейсу менеджера сервиса.
// 
// Параметры:
// 	КодАбонента - Число
// 	Пользователь - СправочникСсылка.Пользователи
// 	
// Возвращаемое значение:
// 	Структура:
//   * account - Число - код (номер) абонента области
//  Если авторизация осуществляется в модели сервиса, дополнительно передаются:
//   * key - Строка - ключ области
//   * tenant - Число - номер области
//   * hash - Строка - хеш пароля пользователя
//   * login - Строка - логин пользователя
//   * host - Строка - хост витрины, где расположено приложение
//   * type - Строка - тип запроса. Из БТС всегда равен "smtl".
//
Функция СвойстваАвторизации(КодАбонента = Неопределено, Знач Пользователь = Неопределено) Экспорт

	СвойстваАвторизации = Новый Структура;
	Если ЗначениеЗаполнено(КодАбонента) Тогда
		СвойстваАвторизации.Вставить("account", КодАбонента);
	КонецЕсли;
	
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат СвойстваАвторизации;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		ИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	Иначе
		ИдентификаторПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
	КонецЕсли;

	НомерОбласти = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	
	// Пользователя нужно считать из базы, т.к. при смене пароля ТекущийПользователь() содержит старый пароль
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователя);

	Если ТекущийПользователь = Неопределено Тогда
		// Выполняется запрос от администратора информационной базы после входа в область данных.
		Администратор = ПользователиИнформационнойБазы.ТекущийПользователь();
		ШаблонИсключения = НСтр("ru='Запрос не может быть выполнен, т.к. вызывается от администратора информационной базы - %1 (%2).
								 |Возможно выполнение только от имени пользователя области - %3.'");
		ВызватьИсключение СтрШаблон(ШаблонИсключения, Администратор.Имя, Администратор.ПолноеИмя, Формат(НомерОбласти, "ЧГ=0")); 
	КонецЕсли;

	СохраняемоеЗначениеПароля = ТекущийПользователь.СохраняемоеЗначениеПароля;
	
	УстановитьПривилегированныйРежим(Ложь);

	РасположениеПриложения = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолучитьНавигационнуюСсылкуИнформационнойБазы());

	СвойстваАвторизации.Вставить("type", "smtl");
	СвойстваАвторизации.Вставить("host", РасположениеПриложения.Хост);
	СвойстваАвторизации.Вставить("login", ТекущийПользователь.Имя);
	СвойстваАвторизации.Вставить("hash", СохраняемоеЗначениеПароля);
	СвойстваАвторизации.Вставить("tenant", НомерОбласти);
	СвойстваАвторизации.Вставить("key", КлючДоступа);
	
	Возврат СвойстваАвторизации;

КонецФункции

// Возвращает шаблон основных свойств ответа на запрос программного интерфейса.
// 
// Возвращаемое значение:
// 	Структура:
// * КодСостояния - Число - код состояния ответа вызова HTTP-сервиса.
// * КодОтвета - Число - код ответа программного интерфейса. 
// * Сообщение - Строка - сообщение программного интерфейса.
Функция НовыйОсновныеСвойстваОтвета() Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("КодСостояния", 0);
	Свойства.Вставить("КодОтвета", 0);
	Свойства.Вставить("Сообщение", "");

	Возврат Свойства;

КонецФункции

Функция ОтправитьЗапросВСервисИзЛокальнойБазы(Метод, Адрес, Данные = Неопределено, КэшСоединения = Истина, Таймаут = 60) Экспорт
	
	АдресСервиса = АдресСервисаИзЛокальнойБазы();
	
	ПолныйАдрес = СтрШаблон("%1/%2", АдресСервиса, Адрес);
	ДанныеСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдрес);
	
	Если КэшСоединения Тогда
		Соединение = ПрограммныйИнтерфейсСервисаПовтИсп.СоединениеСМенеджеромСервисаИзЛокальнойБазы(ДанныеСервера, Таймаут);
	Иначе
		Соединение = СоединениеСМенеджеромСервисаИзЛокальнойБазы(ДанныеСервера, Таймаут);
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(ДанныеСервера.ПутьНаСервере);
	Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Данные = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Данные);
		Запрос.УстановитьТелоИзСтроки(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Запрос.УстановитьТелоИзСтроки(Данные);
	КонецЕсли;

	Возврат Соединение.ВызватьHTTPМетод(Метод, Запрос);
	
КонецФункции

Функция АдресСервисаИзЛокальнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	АдресСервиса = Константы.АдресСервиса1СФреш.Получить();
	
	Если Не ЗначениеЗаполнено(АдресСервиса) Тогда
		ТекстОшибки = НСтр("ru = 'Не установлен адрес сервиса. Нужно установить адрес в настройках по ссылке: 
		|%1'");
		СсылкаНаНастройку = "e1cib/data/Обработка.ПанельАдминистрированияБТС.Форма.НастройкиБиллингаСервиса1СФреш";
		ВызватьИсключение СтрШаблон(ТекстОшибки, СсылкаНаНастройку); 
	КонецЕсли;
	
	Возврат АдресСервиса;

КонецФункции

Функция СоединениеСМенеджеромСервисаИзЛокальнойБазы(ДанныеСервера, Таймаут = 60) Экспорт
	
	СхемаSSL = "https";
	Если НРег(ДанныеСервера.Схема) = СхемаSSL Тогда
		ЗащищенноеСоединение =  Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	ДанныеАвторизации = ДанныеАвторизацииВСервисе();
	Соединение = Новый HTTPСоединение(ДанныеСервера.Хост, ДанныеСервера.Порт,
		ДанныеАвторизации.Логин, ДанныеАвторизации.Пароль, , Таймаут, ЗащищенноеСоединение);

	Возврат Соединение;
	
КонецФункции

// Возвращает данные авторизации в сервисе для указанного пользователя.
// Если пользователь не указан, используется текущий.
//
// Возвращаемое значение:
//  Структура:
//   * Логин - Строка
//   * Пароль - Строка
//   * КодАбонента - Число
//
Функция ДанныеАвторизацииВСервисе(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	ДанныеАвторизации = РегистрыСведений.АвторизацияВСервисе1СФреш.Прочитать(Пользователь);
	Если Не ЗначениеЗаполнено(ДанныеАвторизации.Логин) Тогда
		ТекстОшибки = НСтр("ru = 'Не установлены данные авторизации в сервисе. Нужно установить данные авторизации по ссылке:
						         |%1.'");
		СсылкаНаДанныеАвторизации = "e1cib/data/РегистрСведений.АвторизацияВСервисе1СФреш";
		ВызватьИсключение СтрШаблон(ТекстОшибки, СсылкаНаДанныеАвторизации);
	КонецЕсли; 
	
	Возврат ДанныеАвторизации;
	
КонецФункции
 
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур, ПереименованияКолонок = Неопределено) Экспорт

	Результат = Новый ТаблицаЗначений;
	Для Каждого Строка Из МассивСтруктур Цикл
		Для Каждого КлючЗначение Из Строка Цикл
			ТипКолонки = Неопределено;
			Если ПереименованияКолонок <> Неопределено Тогда
				ЗначениеПереименования = ПереименованияКолонок.Получить(КлючЗначение.Ключ);
				Если ЗначениеЗаполнено(ЗначениеПереименования) И ТипЗнч(ЗначениеПереименования) = Тип("Структура") Тогда
					ТипКолонки = ЗначениеПереименования.Тип;
				КонецЕсли;
				Если Результат.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
					Результат.Колонки.Добавить(КлючЗначение.Ключ, ТипКолонки);
				КонецЕсли;
			КонецЕсли;
			Если ТипКолонки <> Неопределено Тогда
				Строка[КлючЗначение.Ключ] = ЗначениеПоТипу(ТипКолонки, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;

	Если ПереименованияКолонок <> Неопределено Тогда
		Для Каждого Элемент Из ПереименованияКолонок Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
				ИмяКолонки = Элемент.Значение;
				ТипКолонки = Неопределено;
			Иначе
				ИмяКолонки = Элемент.Значение.Имя;
				ТипКолонки = Элемент.Значение.Тип;
			КонецЕсли;
			Если Результат.Колонки.Найти(Элемент.Ключ) <> Неопределено Тогда
				Колонка = Результат.Колонки[Элемент.Ключ]; // КолонкаТаблицыЗначений
				Колонка.Имя = ИмяКолонки;
			Иначе
				Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ТаблицаЗначенийВМассивСтруктур(ТаблицаЗначений, ПереименованияСвойств) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Элемент = Новый Структура;
		Для Каждого КлючЗначение Из ПереименованияСвойств Цикл
			Значение = Строка[КлючЗначение.Значение.Имя];
			Если КлючЗначение.Значение.Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
				Значение = Строка(Значение);
			КонецЕсли; 
			Элемент.Вставить(КлючЗначение.Ключ, Значение);
		КонецЦикла; 
		Результат.Добавить(Элемент);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции
 
#Область Абонент

// Возвращает поля переименования абонента.
//
// Параметры:
//  КИ - Булево - добавлять поля контактной информации.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - Строка - имя поля API
//   * Значение - см. ОписаниеКолонки
//
Функция ПереименованияАбонент(КИ = Ложь) Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	Переименования.Вставить("id", ОписаниеКолонки(
		"Код", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	Если КИ Тогда // Добавлять поля контактной информации.
		Переименования.Вставить("site", ОписаниеКолонки("Сайт", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
		Переименования.Вставить("city", ОписаниеКолонки("Город", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
		Переименования.Вставить("email", ОписаниеКолонки("Почта", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
		Переименования.Вставить("phone", ОписаниеКолонки("Телефон", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	КонецЕсли; 
	                                            
	Возврат Переименования;

КонецФункции

Функция ПереименованияПользователиАбонента() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("login", ОписаниеКолонки(
		"Логин", ОбщегоНазначения.ОписаниеТипаСтрока(32)));
	Переименования.Вставить("name", ОписаниеКолонки(
		"ПолноеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	Переименования.Вставить("email", ОписаниеКолонки(
		"Почта", ОбщегоНазначения.ОписаниеТипаСтрока(254)));
	Переименования.Вставить("role", ОписаниеКолонки(
		"РольПользователя", Новый ОписаниеТипов("ПеречислениеСсылка.РолиПользователейАбонентов")));
	Переименования.Вставить("session_restriction", ОписаниеКолонки(
		"РазрешенноеКоличествоСеансов", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("is_temporary", ОписаниеКолонки(
		"ВременныйДоступ", Новый ОписаниеТипов("Булево")));
	
	Возврат Переименования;
	
КонецФункции
 
#КонецОбласти

#Область УчетнаяСистема

Функция ПереименованияУчетнаяСистема(Метод) Экспорт
	
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("id", ОписаниеКолонки(
		"Код", ОбщегоНазначения.ОписаниеТипаЧисло(9, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	Переименования.Вставить("owner_id", ОписаниеКолонки(
		"КодВладельца", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("import", ОписаниеКолонки("ЗагружатьДанные",Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("import_login", ОписаниеКолонки(
		"ЛогинПользователяДляЗагрузки", ОбщегоНазначения.ОписаниеТипаСтрока(32)));
	Переименования.Вставить("export", ОписаниеКолонки("ВыгружатьДанные",Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("export_url", ОписаниеКолонки(
		"АдресДляВыгрузки", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	Переименования.Вставить("export_login", ОписаниеКолонки(
		"ЛогинПользователяДляВыгрузки", ОбщегоНазначения.ОписаниеТипаСтрока(32)));
	
	Если Метод = "accounting_system/info" Тогда
		Переименования.Вставить("description", ОписаниеКолонки("Описание", Новый ОписаниеТипов("Строка")));
		Переименования.Вставить("export_rules", "ПравилаВыгрузки");
		Переименования.Вставить("import_rules", "ПравилаЗагрузки");
		Переименования.Вставить("response_processing_rules", "ПравилаОбработкиОтветов");
	КонецЕсли;
	
	Возврат Переименования;
	
КонецФункции
 
Функция ПереименованияУчетнаяСистемаПравилаВыгрузки() Экспорт
	
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("rule_id",  ОписаниеКолонки(
		"КодПравила", ОбщегоНазначения.ОписаниеТипаСтрока(120)));
	Переименования.Вставить("rule_line_id",  ОписаниеКолонки(
		"ИдентификаторСтроки", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("condition_id",  ОписаниеКолонки(
		"КодУсловия", ОбщегоНазначения.ОписаниеТипаЧисло(9, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("url",  ОписаниеКолонки(
		"Адрес", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	Переименования.Вставить("fast_sending",  ОписаниеКолонки(
		"БыстраяОтправка", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("scheduled_export",  ОписаниеКолонки(
		"ВыгрузкаПоРасписанию", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("provider_selection",  ОписаниеКолонки(
		"ОтборПоПоставщику", Новый ОписаниеТипов("Булево")));
	
	Возврат Переименования;
	
КонецФункции

Функция ПереименованияУчетнаяСистемаПравилаЗагрузки() Экспорт
	
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("rule_id",  ОписаниеКолонки(
		"КодПравила", ОбщегоНазначения.ОписаниеТипаСтрока(120)));
	Переименования.Вставить("url",  ОписаниеКолонки(
		"Адрес", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	
	Возврат Переименования;

КонецФункции

Функция ПереименованияУчетнаяСистемаПравилаОбработкиОтветов() Экспорт
	
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("rule_line_id",  ОписаниеКолонки(
		"ИдентификаторСтрокиПравилаВыгрузки", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("rule_id",  ОписаниеКолонки(
		"КодПравила", ОбщегоНазначения.ОписаниеТипаСтрока(120)));
	Переименования.Вставить("response_codes",  ОписаниеКолонки(
		"КодыОтветов", Новый ОписаниеТипов("Массив")));
	
	Возврат Переименования;
	
КонецФункции

#КонецОбласти

#Область ПодпискаНаТариф

Функция ПереименованияПодпискаНаТариф(ДляОбслуживающейОрганизации) Экспорт
	
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("id",  ОписаниеКолонки(
		"Номер", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("created", ОписаниеКолонки(
		"Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	Переименования.Вставить("start", ОписаниеКолонки(
		"ДатаПодключения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	Переименования.Вставить("completion", ОписаниеКолонки(
		"ДатаОтключения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	Если ДляОбслуживающейОрганизации Тогда
		Переименования.Вставить("account", ОписаниеКолонки(
			"КодОбслуживаемогоАбонента", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
		Переименования.Вставить("servant", ОписаниеКолонки(
			"КодВедущегоАбонента", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
		Переименования.Вставить("tariff", ОписаниеКолонки(
			"КодТарифаПровайдера", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Иначе
		Переименования.Вставить("account", ОписаниеКолонки(
			"КодАбонента", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
		Переименования.Вставить("servant", ОписаниеКолонки(
			"КодОбслуживающейОрганизации", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
		Переименования.Вставить("tariff", ОписаниеКолонки(
			"КодТарифа", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	КонецЕсли; 
	
	Переименования.Вставить("servant_tariff", ОписаниеКолонки(
		"КодТарифаОбслуживающейОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("period", ОписаниеКолонки(
		"КодПериодаДействия", ОбщегоНазначения.ОписаниеТипаСтрока(10)));
	Переименования.Вставить("amount", ОписаниеКолонки(
		"Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("parent", ОписаниеКолонки(
		"НомерОсновнойПодписки", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("type", ОписаниеКолонки(
		"ТипПодписки", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПодписокСервиса")));
	
	Возврат Переименования;
	
КонецФункции

Функция ПереименованияОтветСозданияПодпискиНаТариф() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id",  ОписаниеКолонки(
		"Номер", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("completion", ОписаниеКолонки(
		"ДатаОтключения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	
	Возврат Переименования;

КонецФункции

Функция ИменаСвойствСозданияПодписки(СвойстваРасширения = Ложь) Экспорт
	
	ИменаСвойств = Новый Соответствие;
	ИменаСвойств.Вставить("КодВедущегоАбонента", "servant");
	ИменаСвойств.Вставить("КодОбслуживаемогоАбонента", "account");
	ИменаСвойств.Вставить("КодТарифаОбслуживающейОрганизации", "servant_tariff");
	ИменаСвойств.Вставить("КодТарифаПровайдера", "tariff");
	ИменаСвойств.Вставить("КодПериодаДействия", "period");
	ИменаСвойств.Вставить("ДатаПодключения", "start");
	ИменаСвойств.Вставить("ДатаОтключения", "completion");
	Если СвойстваРасширения Тогда
		ИменаСвойств.Вставить("НомерОсновнойПодписки", "parent");
		ИменаСвойств.Вставить("Количество", "amount");
	КонецЕсли; 
	
	Возврат ИменаСвойств;

КонецФункции

#КонецОбласти

#Область Тариф

Функция ПереименованияТариф() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	Переименования.Вставить("description", ОписаниеКолонки("ОписаниеДляОбслуживающихОрганизаций", Новый ОписаниеТипов("Строка")));
	Переименования.Вставить("description_for_subscribers", ОписаниеКолонки("ОписаниеДляАбонентов", Новый ОписаниеТипов("ФорматированныйДокумент")));
	Переименования.Вставить("start", ОписаниеКолонки("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	Переименования.Вставить("expiration", ОписаниеКолонки("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	Переименования.Вставить("prolongation_validity", ОписаниеКолонки(
		"ПериодДействияПродлевающейПодписки", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("extension_validity", ОписаниеКолонки(
		"ПериодДействияРасширяющейПодписки", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("prolongation_during", ОписаниеКолонки(
		"ПериодДобавленияПродлевающейПодписки", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("is_extension", ОписаниеКолонки("РасширениеТарифа", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("is_payable", ОписаниеКолонки("Платный", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("is_trial", ОписаниеКолонки("Тестовый", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("has_condition", ОписаниеКолонки("ЕстьУсловие", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("payment_by_periods", ОписаниеКолонки("ПериодическаяОплата", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("periods_frequency", ОписаниеКолонки("ПериодичностьОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(10)));
	Переименования.Вставить("validity_periods", ОписаниеКолонки("ПериодыДействия", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	Возврат Переименования;

КонецФункции

Функция ПереименованияТарифПериодыДействия() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(10)));
	Переименования.Вставить("period", ОписаниеКолонки("Периодичность", Новый ОписаниеТипов("ПеречислениеСсылка.ПериодичностьПериодовДействия")));
	Переименования.Вставить("quantity", ОписаниеКолонки("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("cost", ОписаниеКолонки("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2)));
	Переименования.Вставить("comment", ОписаниеКолонки("Комментарий", Новый ОписаниеТипов("Строка")));
	
	Возврат Переименования;

КонецФункции

Функция ПереименованияРекомендуемыеТарифы() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("provider_tariff_id", ОписаниеКолонки(
		"КодТарифаПровайдера", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("servant_tariff_id", ОписаниеКолонки(
		"КодТарифаОбслуживающейОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	
	Возврат Переименования;
	
КонецФункции

#КонецОбласти
 
#Область ТарифОбслуживающейОрганизации

Функция ПереименованияТарифОбслуживающейОрганизации(Метод) Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(12)));
	Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	Переименования.Вставить("tariff_id", ОписаниеКолонки("КодТарифаПровайдера", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("brief_description", ОписаниеКолонки("КраткоеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(1024)));
	Если Метод = "account/servant_tariffs/info" Тогда
		Переименования.Вставить("description_for_subscribers", ОписаниеКолонки(
			"ОписаниеДляАбонентов", Новый ОписаниеТипов("ФорматированныйДокумент")));
	КонецЕсли; 
	Переименования.Вставить("validity_periods", ОписаниеКолонки("ПериодыДействия", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	Возврат Переименования;

КонецФункции

Функция ПереименованияТарифОбслуживающейОрганизацииПериодыДействия() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(10)));
	Переименования.Вставить("period", ОписаниеКолонки("Периодичность", Новый ОписаниеТипов("ПеречислениеСсылка.ПериодичностьПериодовДействия")));
	Переименования.Вставить("quantity", ОписаниеКолонки("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10,, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("cost", ОписаниеКолонки("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2)));
	Переименования.Вставить("recommended", ОписаниеКолонки("Рекомендуемый", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("comment", ОписаниеКолонки("Комментарий", Новый ОписаниеТипов("Строка")));
	
	Возврат Переименования;

КонецФункции

#КонецОбласти  

#Область СчетНаОплату

Функция ПереименованияСчет(Метод) Экспорт
	
	Переименования = Новый Соответствие;
	Если Не (Метод = "bill/update" Или Метод = "bill/create") Тогда
		Переименования.Вставить("id", ОписаниеКолонки(
			"Номер", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
		Переименования.Вставить("created", ОписаниеКолонки(
			"Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
		Переименования.Вставить("modified", ОписаниеКолонки(
			"ДатаИзменения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	КонецЕсли; 
	Переименования.Вставить("bill_id", ОписаниеКолонки(
		"ИдентификаторСчета", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("seller_id", ОписаниеКолонки(
		"КодПродавца", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("customer_id", ОписаниеКолонки(
		"КодПокупателя", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("total_cost", ОписаниеКолонки(
		"Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("renewal", ОписаниеКолонки(
		"Продление", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("payment_link", ОписаниеКолонки(
		"ПлатежнаяСсылка", ОбщегоНазначения.ОписаниеТипаСтрока(1024)));
	Переименования.Вставить("paid", ОписаниеКолонки(
		"Оплачен", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("add_info", ОписаниеКолонки(
		"ДополнительнаяИнформация", Новый ОписаниеТипов("Строка")));
	Переименования.Вставить("comment", ОписаниеКолонки(
		"Комментарий", Новый ОписаниеТипов("Строка")));
		
	Возврат Переименования;
	
КонецФункции

Функция ПереименованияСчетТарифы() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("tariff_id", ОписаниеКолонки("КодТарифаПровайдера", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("servant_tariff_id", ОписаниеКолонки(
		"КодТарифаОбслуживающейОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("period_id", ОписаниеКолонки("КодПериодаДействия", ОбщегоНазначения.ОписаниеТипаСтрока(10)));
	Переименования.Вставить("amount", ОписаниеКолонки("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10,0)));
	Переименования.Вставить("cost", ОписаниеКолонки("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2)));
	Переименования.Вставить("basis_id", ОписаниеКолонки("НомерОснования", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	
	Возврат Переименования;

КонецФункции

Функция ПереименованияСчетУслуги() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("service", ОписаниеКолонки("Услуга", ОбщегоНазначения.ОписаниеТипаСтрока(1000)));
	Переименования.Вставить("cost", ОписаниеКолонки("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2)));
	
	Возврат Переименования;
	
КонецФункции

Функция ПереименованияСчетФайлы() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("name", ОписаниеКолонки("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	
	Возврат Переименования;

КонецФункции

Функция ПереименованияСчетСостояние() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("name", ОписаниеКолонки("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(17)));
	Переименования.Вставить("error", ОписаниеКолонки("Ошибка", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("description", ОписаниеКолонки("Описание", Новый ОписаниеТипов("Строка")));
	
	Возврат Переименования;
	
КонецФункции

Функция ПереименованияСчетРезультатСозданияИзменения() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("bill_id", ОписаниеКолонки("ИдентификаторСчета", Новый ОписаниеТипов("УникальныйИдентификатор")));

	Возврат Переименования;
	
КонецФункции

Функция ПереименованияСчетТалонНаЗагрузку() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("bill_id", ОписаниеКолонки("ИдентификаторСчета", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("direction", ОписаниеКолонки("НаправлениеПередачиДанных", ОбщегоНазначения.ОписаниеТипаСтрока(8)));
	Переименования.Вставить("token", ОписаниеКолонки("ТалонНаЗагрузкуФайла",  ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	Переименования.Вставить("url", ОписаниеКолонки("АдресДляЗагрузки", Новый ОписаниеТипов("Строка")));
	
	Возврат Переименования;
	
КонецФункции
 
Функция ДанныеЗапросаСозданияИзмененияСчетаНаОплату(ДанныеСчета, Метод) Экспорт
	
	ДанныеЗапроса = ШаблонЗапроса(Метод);
	Переименования = ПереименованияСчет(Метод);
	Для Каждого КлючЗначение Из Переименования Цикл
		Если Не ДанныеСчета.Свойство(КлючЗначение.Значение.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		ЗначениеПоля = ДанныеСчета[КлючЗначение.Значение.Имя];
		Если КлючЗначение.Значение.Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
			ЗначениеПоля = Строка(ЗначениеПоля);
		КонецЕсли; 
		ДанныеЗапроса.Вставить(КлючЗначение.Ключ, ЗначениеПоля);		
	КонецЦикла;
	Если ДанныеСчета.Свойство("Тарифы") Тогда
		Переименования = ПереименованияСчетТарифы();
		ДанныеЗапроса.Вставить("tariffs", ТаблицаЗначенийВМассивСтруктур(ДанныеСчета.Тарифы, Переименования));
	КонецЕсли; 
	Если ДанныеСчета.Свойство("Услуги") Тогда
		Переименования = ПереименованияСчетУслуги();
		ДанныеЗапроса.Вставить("services", ТаблицаЗначенийВМассивСтруктур(ДанныеСчета.Услуги, Переименования));
	КонецЕсли; 
	Если ДанныеСчета.Свойство("Файлы") Тогда
		Переименования = ПереименованияСчетФайлы();
		ДанныеЗапроса.Вставить("files", ТаблицаЗначенийВМассивСтруктур(ДанныеСчета.Файлы, Переименования));
	КонецЕсли; 
	Если ДанныеСчета.Свойство("ДополнительныеРеквизиты") Тогда
		Переименования = ПереименованияДополнительныхСведений(Ложь);
		ДанныеЗапроса.Вставить("fields", ТаблицаЗначенийВМассивСтруктур(
			ДанныеСчета.ДополнительныеРеквизиты, Переименования));
	КонецЕсли;
	
	Возврат ДанныеЗапроса;

КонецФункции

#КонецОбласти

#Область Приложение

Функция ПереименованияПриложение() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки(
		"Код", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("name", ОписаниеКолонки(
		"Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	Переименования.Вставить("owner", ОписаниеКолонки(
		"КодАбонентаВладельца", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("application", ОписаниеКолонки(
		"КодКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("app_version", ОписаниеКолонки(
		"ВерсияКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(18)));
	Переименования.Вставить("app_name", ОписаниеКолонки(
		"НаименованиеКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	Переименования.Вставить("status", ОписаниеКолонки(
		"СостояниеПриложения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПриложений")));
	Переименования.Вставить("url", ОписаниеКолонки(
		"АдресПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	Переименования.Вставить("timezone", ОписаниеКолонки(
		"ЧасовойПояс", ОбщегоНазначения.ОписаниеТипаСтрока(100)));

	Возврат Переименования;
	
КонецФункции

Функция ПереименованияРезервныеКопийПриложения() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки(
		"ИдентификаторРК", ОбщегоНазначения.ОписаниеТипаСтрока(36)));
	Переименования.Вставить("timestamp", ОписаниеКолонки(
		"МоментСозданияРК", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	Переименования.Вставить("for_support", ОписаниеКолонки(
		"ДляТехПоддержки", Новый ОписаниеТипов("Булево")));
	
	Возврат Переименования;
	
КонецФункции
 
#КонецОбласти

#Область ЗадачаПользователя

Функция ПереименованияЗадачаПользователя() Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки(
		"Номер", ОбщегоНазначения.ОписаниеТипаСтрока(32)));
	Переименования.Вставить("name", ОписаниеКолонки(
		"НаименованиеЗадачи", Новый ОписаниеТипов("Строка")));
	Переименования.Вставить("created", ОписаниеКолонки(
		"Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	Переименования.Вставить("author", ОписаниеКолонки(
		"АвторСтрокой", Новый ОписаниеТипов("Строка")));
	
	Возврат Переименования;
	
КонецФункции

#Область ДополнительныеСведения

Функция ПереименованияДополнительныхСведений(ДобавлятьЗаголовок = Истина) Экспорт
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("key", ОписаниеКолонки("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	Если ДобавлятьЗаголовок Тогда
		Переименования.Вставить("name", ОписаниеКолонки("Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	КонецЕсли;
	Переименования.Вставить("type", ОписаниеКолонки("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("value", ОписаниеКолонки("Значение", ОписаниеТиповЗначенийДополнительныхСведений()));
	
	Возврат Переименования;
	
КонецФункции

Функция НовыйДополнительныеСведения() Экспорт
	
	ДополнительныеСведения = Новый ТаблицаЗначений;
	ДополнительныеСведения.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДополнительныеСведения.Колонки.Добавить("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДополнительныеСведения.Колонки.Добавить("Значение", ОписаниеТиповЗначенийДополнительныхСведений());

	Возврат ДополнительныеСведения

КонецФункции

Функция ПредставленияТиповЗначенийДополнительныхСведений() Экспорт
	
	ПредставленияТипов = Новый СписокЗначений;
    ПредставленияТипов.Добавить("string", НСтр("ru = 'Строка'"));
    ПредставленияТипов.Добавить("decimal", НСтр("ru = 'Число'"));
    ПредставленияТипов.Добавить("date", НСтр("ru = 'Дата'"));
    ПредставленияТипов.Добавить("boolean", НСтр("ru = 'Булево'"));
    ПредставленияТипов.Добавить("subscriber", НСтр("ru = 'Справочник ""Абоненты""'"));
    ПредставленияТипов.Добавить("service", НСтр("ru = 'Справочник ""Услуги""'"));
    ПредставленияТипов.Добавить("additional_value", НСтр("ru = 'Справочник ""Дополнительные значения""'"));
    ПредставленияТипов.Добавить("additional_value_group", НСтр("ru = 'Справочник ""Дополнительные значения (иерархия)""'"));
    ПредставленияТипов.Добавить("tariff", НСтр("ru = 'Справочник ""Тарифы""'"));
    ПредставленияТипов.Добавить("service_provider_tariff", НСтр("ru = 'Справочник ""Тарифы поставщиков услуг""'"));
    ПредставленияТипов.Добавить("user", НСтр("ru = 'Справочник ""Пользователи""'"));
    ПредставленияТипов.Добавить("tariff_period", НСтр("ru = 'Справочник ""Периоды тарифов""'"));
    ПредставленияТипов.Добавить("subscription", НСтр("ru = 'Документ ""Подписка""'"));
	
	Возврат ПредставленияТипов;
	
КонецФункции

Функция ОписаниеТиповЗначенийДополнительныхСведений() Экспорт
	
	ТипыЗначений = Новый Массив;
	ТипыЗначений.Добавить("Число");
	ТипыЗначений.Добавить("Строка");
	ТипыЗначений.Добавить("Дата");
	ТипыЗначений.Добавить("Булево");
	
	Возврат Новый ОписаниеТипов(ТипыЗначений);

КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеПоТипу(ТипЗначения, Значение)
	
	Если ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		Возврат Новый УникальныйИдентификатор(Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.ТипыУслуг")) Тогда
		Возврат Перечисления.ТипыУслуг.ЗначениеПоИмени(Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.ПериодичностьПериодовДействия")) Тогда
		Возврат Перечисления.ПериодичностьПериодовДействия.ЗначениеПоИмени(Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.СостоянияПриложений")) Тогда
		Возврат Перечисления.СостоянияПриложений.ЗначениеПоИмени(Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.ТипыПодписокСервиса")) Тогда
		Возврат Перечисления.ТипыПодписокСервиса.ЗначениеПоИмени(Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.ПраваПользователяПриложения")) Тогда
		Возврат Перечисления.ПраваПользователяПриложения.ЗначениеПоИмени(Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("ПеречислениеСсылка.РолиПользователейАбонентов")) Тогда
		Возврат Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции
 
// Возвращает описание колонки таблицы переименования полей.
// 
// Параметры:
//	Имя - Строка - имя переименования.
//	Тип - ОписаниеТипов - тип значения.
//	
// Возвращаемое значение:
//	Структура:
//	 * Имя - Строка - имя переименования.
//	 * Тип - ОписаниеТипов - тип значения.
Функция ОписаниеКолонки(Имя, Тип) Экспорт

	Возврат Новый Структура("Имя, Тип", Имя, Тип);

КонецФункции

#КонецОбласти
