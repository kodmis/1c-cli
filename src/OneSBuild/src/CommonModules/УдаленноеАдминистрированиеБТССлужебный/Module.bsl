////////////////////////////////////////////////////////////////////////////////
// Подсистема "Удаленное администрирование".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
//  СтруктураПоддерживаемыхВерсий - Структура - структура поддерживаемых версий:
//	  * Ключи - Строка - название подсистеы. 
//	  * Значения - Массив - названия поддерживаемых версий.
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт

	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.0.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ManagedApplication", МассивВерсий);

КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет принадлежность сеанса текущей области данных.
//
// Параметры:
//  НомерСеанса - Число - номер сеанса, принадлежность которого проверяется.
//
// Возвращаемое значение:
//  Булево - признак принадлежности сеанса текущей области данных.
//
Функция ПроверитьПринадлежностьСеансаТекущейОбластиДанных(Знач НомерСеанса) Экспорт
	
	СеансыОбласти = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансОбласти Из СеансыОбласти Цикл
		Если СеансОбласти.НомерСеанса = НомерСеанса Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Завершает сеанс пользователя области данных.
//
// Параметры:
//  НомераСеансов - Массив - массив номеров сеансов,
//  ПарольПользователя - Строка - пароль текущего пользователя области данных.
//  СообщениеПользователям - Строка - текст сообщения пользователям при завершении сеансов.
//
Процедура ЗавершитьСеансыОбластиДанных(Знач НомераСеансов, Знач ПарольПользователя, Знач СообщениеПользователям) Экспорт

	ПараметрыАвторизации = ПараметрыАвторизацииУправляющегоПриложения(ПарольПользователя);
	ВерсияСервисаУправляющегоПриложения = ИспользуемаяВерсияСервисаУправляющегоПриложения(ПараметрыАвторизации);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.3") < 0 Тогда
		ВызватьИсключение НСтр(
			"ru = 'Текущая версия управляющего приложения не поддерживает завершение сеанса из приложений.'");
	КонецЕсли;

	Прокси = ПроксиСервисаУправляющегоПриложения(ПараметрыАвторизации);
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяОбластьДанных = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КлючТекущийОбластиДанных = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);

	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.4") >= 0 Тогда

		ИнформацияОбОшибке = Неопределено;
		ИнформацияОНомерахСеанса = ПривестиНомераСеансов(НомераСеансов, Прокси.ФабрикаXDTO);

		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияСервисаУправляющегоПриложения, "1.0.3.6") >= 0 Тогда
			ИмяОперации = "TerminateSessionsWithMessage";
			Прокси.TerminateSessionsWithMessage(
				ТекущаяОбластьДанных,
				КлючТекущийОбластиДанных,
				ИнформацияОНомерахСеанса,
				СообщениеПользователям,
				ИнформацияОбОшибке); 
		Иначе
			ИмяОперации = "TerminateSessions";
			Прокси.TerminateSessions(
				ТекущаяОбластьДанных,
				КлючТекущийОбластиДанных,
				ИнформацияОНомерахСеанса,
				ИнформацияОбОшибке);
		КонецЕсли;
		
		РаботаВМоделиСервиса.ОбработатьИнформациюОбОшибкеWebСервиса(
			ИнформацияОбОшибке,
			Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы.УдаленноеАдминистрирование,
			ИнтерфейсСервисаУправляющегоПриложения(),
			ИмяОперации);

	Иначе

		Для Каждого НомерСеанса Из НомераСеансов Цикл

			ИнформацияОбОшибке = Неопределено;
			Прокси.TerminateSession(
				ТекущаяОбластьДанных,
				КлючТекущийОбластиДанных,
				НомерСеанса,
				ИнформацияОбОшибке);

			РаботаВМоделиСервиса.ОбработатьИнформациюОбОшибкеWebСервиса(
				ИнформацияОбОшибке,
				Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы.УдаленноеАдминистрирование,
				ИнтерфейсСервисаУправляющегоПриложения(),
				"TerminateSession");

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Возвращает название интерфейса управляющего приложения.
//
// Возвращаемое значение:
//  Строка - имя интерфейса.
//
Функция ИнтерфейсСервисаУправляющегоПриложения() Экспорт

	Возврат "ManageApplication"; // Не локализуется

КонецФункции

// Параметры авторизации управляющего приложения
// 
// Параметры:
// 	ПарольПользователя - Строка - Пароль пользователя для авторизации. Если указан или пустая строка, используется имя текущего 
// 	пользователя. 
// Возвращаемое значение:
// 	Структура - Описание:
// * Адрес - Строка - внутренний адрес Менеджера сервиса
// * Пользователь - Строка - имя пользователя
// * Пароль - Строка
Функция ПараметрыАвторизацииУправляющегоПриложения(Знач ПарольПользователя = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Адрес = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса();
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан внутренний адрес Менеджера сервиса'");
	КонецЕсли;
	Если ПарольПользователя <> Неопределено Тогда
		Пользователь = ИмяПользователя();
		Пароль = ПарольПользователя;
	Иначе
		Пользователь = РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
		Пароль = РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан пользователь для авторизации в Менеджере сервиса'");
	КонецЕсли;

	Возврат Новый Структура("Адрес, Пользователь, Пароль", Адрес, Пользователь, Пароль);

КонецФункции

// Используемая версия сервиса управляющего приложения
// 
// Параметры:
// 	ПараметрыАвторизации - Структура - см. ПараметрыАвторизацииУправляющегоПриложения()
// 	ТребуемаяВерсия - Строка, Неопределено - если не указано, будет получена максимальная из поддерживаемых версий
// Возвращаемое значение:
// 	Строка - Версия ws ManageApplication_a_b_c_d Менеджера сервиса
Функция ИспользуемаяВерсияСервисаУправляющегоПриложения(ПараметрыАвторизации, ТребуемаяВерсия = Неопределено) Экспорт

	ИмяИнтерфейса = ИнтерфейсСервисаУправляющегоПриложения();
	ПоддерживаемыеВерсии = ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыАвторизации.Адрес,
		ПараметрыАвторизации.Пользователь, ПараметрыАвторизации.Пароль, ИмяИнтерфейса);

	Если Не ЗначениеЗаполнено(ПоддерживаемыеВерсии) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Корреспондент %1 не поддерживает интерфейс %2'"),
			ПараметрыАвторизации.Адрес, ИмяИнтерфейса);
	КонецЕсли;

	ИспользуемаяВерсия = Неопределено;

	Для Каждого ПоддерживаемаяВерсия Из ПоддерживаемыеВерсии Цикл
		Если Не ЗначениеЗаполнено(ТребуемаяВерсия) Тогда
			Если ИспользуемаяВерсия = Неопределено Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПоддерживаемаяВерсия,
				ИспользуемаяВерсия) > 0 Тогда
				ИспользуемаяВерсия = ПоддерживаемаяВерсия;
			КонецЕсли;
		ИначеЕсли ТребуемаяВерсия = ПоддерживаемаяВерсия Тогда
			ИспользуемаяВерсия = ПоддерживаемаяВерсия;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТребуемаяВерсия) И Не ЗначениеЗаполнено(ИспользуемаяВерсия) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Корреспондент %1 не поддерживает интерфейс %2 требуемой версии %3'"),
			ПараметрыАвторизации.Адрес, ИмяИнтерфейса, ТребуемаяВерсия);
	КонецЕсли;

	Возврат ИспользуемаяВерсия;

КонецФункции

// Возвращает прокси Менеджера сервиса максимальной из поддерживаемых версий
// 
// Параметры:
// 	ПараметрыАвторизации - Структура - см. ПараметрыАвторизацииУправляющегоПриложения()
// 	ТребуемаяВерсия - Строка, Неопределено - если не указано, будет получен прокси максимальной из поддерживаемых версий
// Возвращаемое значение:
// 	WSПрокси - прокси ws ManageApplication_a_b_c_d Менеджера сервиса
Функция ПроксиСервисаУправляющегоПриложения(ПараметрыАвторизации, ТребуемаяВерсия = Неопределено) Экспорт

	ИспользуемаяВерсия = ИспользуемаяВерсияСервисаУправляющегоПриложения(ПараметрыАвторизации, ТребуемаяВерсия);
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL = ПараметрыАвторизации.Адрес + "/ws/ManageApplication_" + СтрЗаменить(
		ИспользуемаяВерсия, ".", "_") + "?wsdl";
	ПараметрыПодключения.URIПространстваИмен = "http://www.1c.ru/SaaS/ManageApplication/" + ИспользуемаяВерсия;
	ПараметрыПодключения.ИмяСервиса = "ManageApplication_" + СтрЗаменить(ИспользуемаяВерсия, ".", "_");
	ПараметрыПодключения.ИмяТочкиПодключения = "";
	ПараметрыПодключения.ИмяПользователя = ПараметрыАвторизации.Пользователь;
	ПараметрыПодключения.Пароль = ПараметрыАвторизации.Пароль;
	ПараметрыПодключения.Таймаут = 60;

	Возврат ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Приводит массив номеров сеансов к ОбъектуXDTO.
//
// Параметры:
//  НомераСеансов - Массив из Число - массив номеров сеансов.
//  Фабрика - ФабрикаXDTO - фабрика XDTO.
//
// Возвращаемое значение:
//  ОбъектXDTO - список номеров сеансов.
//
Функция ПривестиНомераСеансов(Знач НомераСеансов, Знач Фабрика) Экспорт
	
	ТипСпискаНомеровСеансов = Фабрика.Тип("http://www.1c.ru/1cFresh/ManageApplication/1.0.3.4", "SessionNumberList");
	СписокНомеровСеансов = Фабрика.Создать(ТипСпискаНомеровСеансов);
	
	Для Каждого НомерСеанса Из НомераСеансов Цикл
		НомераСписок = СписокНомеровСеансов.SessionNumbers; // СписокXDTO
		НомераСписок.Добавить(НомерСеанса);
	КонецЦикла;
	
	Возврат СписокНомеровСеансов;
	
КонецФункции

#КонецОбласти
