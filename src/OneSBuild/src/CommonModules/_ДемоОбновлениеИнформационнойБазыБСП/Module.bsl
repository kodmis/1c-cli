///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// См. ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем.
Процедура ПриДобавленииПодсистем(МодулиПодсистем) Экспорт
	
	МодулиПодсистем.Добавить("_ДемоОбновлениеИнформационнойБазыБСП");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БиблиотекаСтандартныхПодсистемДемо";
	Описание.Версия = "3.1.7.206";
	Описание.ИдентификаторИнтернетПоддержки = "SSL";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "2.3.3.20";
	Описание.ЗаполнятьДанныеНовыхПодсистемПриПереходеСДругойПрограммы = Истина;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Параметры) Экспорт
	
	Параметры.ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
	Параметры.Вставить("МногопоточноеОбновление", Истина);
	Параметры.Вставить("КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию", 4);
	
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыВидовХарактеристик._ДемоВидыСубконто);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.ПланыСчетов._ДемоОсновной);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники._ДемоВидыНоменклатуры);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.МонопольныйРежим = Истина; // Для демонстрации условного выполнения в монопольном режиме.
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВыполнятьВсегдаПриСменеВерсии";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбработчикСОшибкой";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.СоздатьВидыКонтактнойИнформации";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.6";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ВыполнитьПервоначальноеЗаполнениеВалют";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.16";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.12";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.34";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.10";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеКлючевыеОперации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.8";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.8";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.7";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныйВидКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.19";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьИспользованиеКонтактнойИнформацииКонтактныхЛицПартнеров";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.21";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьИспользованиеНаборовСвойствВнешнихПользователей";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.44";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.УстановитьНазначенияРолейИсполнителей";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.2.4";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.НастроитьИсториюКонтактнойИнформацииИМногострочноеПоле";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.6";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 99;
	Обработчик.НачальноеЗаполнение = Истина;
	
	// Обработчики оперативного обновления.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.82";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьВидКонтактнойИнформацииМеждународныйАдрес";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.82";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ЗаполнитьВидКонтактнойИнформацииВебСайтПартнера";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.100";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.СнятьПризнакПредопределенныйДляВидовКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	
	// Обработчики отложенного обновления.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*"; // для целей тестирования
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("39e98a12-69b3-40a0-95e9-03469462f506");
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОтложенныйОбработчикСОшибкой";
	Обработчик.Комментарий = НСтр("ru = 'Демонстрационный обработчик отложенного обновления данных.
		|Для имитации нештатной ситуации нажать на кнопку ""Имитировать ошибку при отложенном обновлении"" в инструменте разработчика и выполнить перезапуск программы.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = Метаданные.Версия; // для целей тестирования
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3be66c5-708d-42c8-a019-818036d09d06");
	Обработчик.Процедура = "Документы._ДемоЗаказПокупателя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значения нового реквизита ""Статус заказа"" у документов ""Демо: Заказ покупателя"" прошлых периодов.
		|До завершения обработки ""Статус заказа"" данных документов будет отображаться некорректно.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы._ДемоЗаказПокупателя.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты      = "Документ._ДемоЗаказПокупателя";
	Обработчик.ИзменяемыеОбъекты    = "Документ._ДемоЗаказПокупателя";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты   = "Документ._ДемоЗаказПокупателя, Отчет._ДемоСтатусыЗаказовПокупателей";
	Обработчик.Многопоточный        = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.3.2";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d58853ca-0549-4c60-8427-5c2a41832837");
	Обработчик.Процедура = "Справочники.НаборыДополнительныхРеквизитовИСведений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Обновление состава наборов свойств справочника Демо: Контрагенты.
		|Дополнительные реквизиты данного справочника будут недоступны до завершения обновления.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НаборыДополнительныхРеквизитовИСведений.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты      = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты   = "Справочник._ДемоКонтрагенты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.22";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a58854ca-0549-4c60-8427-5c2a41832837");
	Обработчик.Процедура = "Документы._ДемоСчетНаОплатуПокупателю.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Отражает в настройках печати переименование макета печатной формы в документе Демо: Счет на оплату покупателю.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы._ДемоСчетНаОплатуПокупателю.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты      = "РегистрСведений.ПользовательскиеМакетыПечати";
	Обработчик.ИзменяемыеОбъекты    = "РегистрСведений.ПользовательскиеМакетыПечати";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	Приоритет = Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Порядок = "После";
	Приоритет.Процедура = "РегистрыСведений.ПользовательскиеМакетыПечати.ОбработатьПользовательскиеМакеты";
	
	УправлениеДоступом.ДобавитьОбработчикОбновленияДляВключенияУниверсальногоОграничения("3.1.2.69", Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("368609d8-0ecf-47fb-9751-a9f66fb21c29");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ключи аналитики в документе Реализация товаров'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы._ДемоРеализацияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы._ДемоРеализацияТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ЧитаемыеОбъекты      = "Документ._ДемоРеализацияТоваров";
	Обработчик.ИзменяемыеОбъекты    = "Документ._ДемоРеализацияТоваров";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.50";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.АктивироватьИсправлениеУстаревшихАдресовПартнеров";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.140";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3a8f247f-2090-4f8b-bbd1-9b4ab55c85c6");
	Обработчик.Процедура = "Справочники._ДемоКонтактныеЛицаПартнеров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Конвертация контактной информации контактных лиц партнеров из устаревших форматов в современный формат JSON.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники._ДемоКонтактныеЛицаПартнеров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты      = "Справочник._ДемоКонтактныеЛицаПартнеров";
	Обработчик.ИзменяемыеОбъекты    = "Справочник._ДемоКонтактныеЛицаПартнеров";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И ПользователиСлужебныйПовтИсп.ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		
		Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
		
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "Справочники.ВнешниеПользователи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "После";
	
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.170";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d57859ca-1543-4c60-8427-5c2a41832831");
	Обработчик.Процедура = "Справочники.РолиИсполнителей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных ролей исполнителей.
		|До завершения обработки наименования ролей в ряде случаев будет отображаться на другом языке.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РолиИсполнителей.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты      = "Справочник.РолиИсполнителей";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.РолиИсполнителей";
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты   = "Справочник.РолиИсполнителей";
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриОпределенииРежимаОбновленияДанных.
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковПереходаСДругойПрограммы.
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "БиблиотекаСтандартныхПодсистемДемоБазовая";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПерейтиСБазовойВерсииНаПРОФ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "*";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПерейтиСДругойПрограммы";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриЗавершенииПереходаСДругойПрограммы.
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриФормированииСпискаРазрабатываемыхПодсистем.
Процедура ПриФормированииСпискаРазрабатываемыхПодсистем(РазрабатываемыеПодсистемы) Экспорт
	
	РазрабатываемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	РазрабатываемыеПодсистемы.Добавить("БиблиотекаСтандартныхПодсистемДемо");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	// Код для первоначального заполнения информационной базы.
	
КонецПроцедуры

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// видов контактной информации.
//
Процедура СоздатьВидыКонтактнойИнформации() Экспорт
	
	// Контактная информация справочника "Контактные лица партнеров"
	ГруппаКонтактнойИнформации     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКонтактнойИнформации.Имя = "Справочник_ДемоКонтактныеЛицаПартнеров";
	ГруппаКонтактнойИнформации.Наименование =  НСтр("ru = 'Контактная информация справочника ""Контактные лица партнеров""'");
	
	Группа = УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКонтактнойИнформации);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Вид.Имя          = "_ДемоАдресКонтактногоЛица";
	Вид.Наименование = НСтр("ru = 'Адрес контактного лица'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Вид.Имя          = "_ДемоEmailКонтактногоЛица";
	Вид.Наименование = НСтр("ru = 'Электронная почта контактного лица'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
//
// Параметры:
//  КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//  Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//  ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииВидовКонтактнойИнформации(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Справочник_ДемоКонтактныеЛицаПартнеров";
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
			"ru = 'Контактная информация справочника ""Контактные лица партнеров""'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоАдресКонтактногоЛица";
	Элемент.Родитель = "Справочник_ДемоКонтактныеЛицаПартнеров";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.ИдентификаторДляФормул       = "АдресКонтактногоЛица";
	Элемент.ВидРедактирования            = "ПолеВвода";
	Элемент.ВключатьСтрануВПредставление = Ложь;
	Элемент.ХранитьИсториюИзменений      = Ложь;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
			"ru = 'Адрес контактного лица'", КодыЯзыков); // @НСтр-1
	
	// Демо: Организации
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Справочник_ДемоОрганизации";	
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
			"ru = 'Контактная информация справочника ""Демо: Организации""'", КодыЯзыков); // @НСтр-1
	
	// _ДемоЮридическийАдресОрганизации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоЮридическийАдресОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип      = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.ВидРедактирования                 = "Диалог";
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.ХранитьИсториюИзменений           = Истина;
	Элемент.ПроверятьКорректность             = Истина;
	Элемент.ТолькоНациональныйАдрес           = Истина;
	Элемент.РеквизитДопУпорядочивания         = 1;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Юридический адрес'", КодыЯзыков); // @НСтр-1
	
	// _ДемоФактическийАдресОрганизации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоФактическийАдресОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.РеквизитДопУпорядочивания         = 2;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Фактический адрес'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоПочтовыйАдресОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.РеквизитДопУпорядочивания         = 3;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Почтовый адрес'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоМеждународныйАдресОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.МеждународныйФорматАдреса         = Истина;
	Элемент.РеквизитДопУпорядочивания         = 4;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Международный адрес для платежей / Address for payments'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоТелефонОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений   = Истина;
	Элемент.ТелефонCДобавочнымНомером         = Истина;
	Элемент.РеквизитДопУпорядочивания         = 5;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Телефон'", КодыЯзыков); // @НСтр-1
		
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоФаксОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Факс;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений   = Истина;
	Элемент.РеквизитДопУпорядочивания         = 6;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Факс'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоEmailОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений   = Истина;
	Элемент.РеквизитДопУпорядочивания         = 7;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Электронная почта'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоДругаяИнформацияОрганизации";
	Элемент.Родитель = "Справочник_ДемоОрганизации";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.ВидПоляДругое   = "ОднострочноеШирокое";
	Элемент.РеквизитДопУпорядочивания         = 8;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Другое'", КодыЯзыков); // @НСтр-1
	
	// Контактная информация справочника "Партнеры"
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Справочник_ДемоПартнеры";	
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Контактная информация справочника ""Партнеры""'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоАдресПартнера";
	Элемент.Родитель = "Справочник_ДемоПартнеры";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Адрес'", КодыЯзыков); // @НСтр-1
		
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоВебСайтПартнера";
	Элемент.Родитель = "Справочник_ДемоПартнеры";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Веб-сайт'", КодыЯзыков); // @НСтр-1
		
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоТелефонПартнера";
	Элемент.Родитель = "Справочник_ДемоПартнеры";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.ТелефонCДобавочнымНомером         = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Телефон'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоEmailПартнера";
	Элемент.Родитель = "Справочник_ДемоПартнеры";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений   = Истина;
	Элемент.ПроверятьКорректность             = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Электронная почта партнера'", КодыЯзыков); // @НСтр-1
		
	// Контактная информация справочника "Контрагенты"
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Справочник_ДемоКонтрагенты";	
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Контактная информация справочника ""Контрагенты""'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоАдресКонтрагента";
	Элемент.Родитель = "Справочник_ДемоКонтрагенты";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.ТолькоНациональныйАдрес = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Адрес'", КодыЯзыков); // @НСтр-1
		
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоEmailКонтрагента";
	Элемент.Родитель = "Справочник_ДемоКонтрагенты";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Элемент.РазрешитьВводНесколькихЗначений = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Электронная почта'", КодыЯзыков); // @НСтр-1

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоSkypeКонтрагенты";
	Элемент.Родитель = "Справочник_ДемоКонтрагенты";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Skype'", КодыЯзыков); // @НСтр-1
		
	// Контактная информация справочника "Демо: Физические лица"
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Справочник_ДемоФизическиеЛица";	
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Контактная информация справочника ""Демо: Физические лица""'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоАдресФизическогоЛица";
	Элемент.Родитель = "Справочник_ДемоФизическиеЛица";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Адрес'", КодыЯзыков); // @НСтр-1
		
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоТелефонФизическогоЛица";
	Элемент.Родитель = "Справочник_ДемоФизическиеЛица";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений   = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Телефон'", КодыЯзыков); // @НСтр-1	
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоEmailФизическогоЛица";
	Элемент.Родитель = "Справочник_ДемоФизическиеЛица";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.РазрешитьВводНесколькихЗначений   = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Электронная почта'", КодыЯзыков); // @НСтр-1	
	
	// Контактная информация документа "Заказ покупателя"
	// Контактная информация табличной части "Партнеры и контактные лица"
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Документ_ДемоЗаказПокупателя";	
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Контактная информация документа ""Заказ покупателя""'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить(); 
	Элемент.ИмяПредопределенногоВида = "Документ_ДемоЗаказПокупателяПартнерыИКонтактныеЛица";
	Элемент.Родитель = "Документ_ДемоЗаказПокупателя";
	Элемент.ЭтоГруппа = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Контактная информация табличной части ""Партнеры и контактные лица""'", КодыЯзыков); // @НСтр-1

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоПартнерыИКонтактныеЛицаАдресПартнера";
	Элемент.Родитель = "Документ_ДемоЗаказПокупателяПартнерыИКонтактныеЛица";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Адрес партнера'", КодыЯзыков); // @НСтр-1

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоПартнерыИКонтактныеЛицаТелефонПартнера";
	Элемент.Родитель = "Документ_ДемоЗаказПокупателяПартнерыИКонтактныеЛица";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	Элемент.ТелефонCДобавочнымНомером = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Телефон партнера'", КодыЯзыков); // @НСтр-1
		
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенногоВида = "_ДемоПартнерыИКонтактныеЛицаEmailПартнера";
	Элемент.Родитель = "Документ_ДемоЗаказПокупателяПартнерыИКонтактныеЛица";
	Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Элемент.МожноИзменятьСпособРедактирования = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Электронная почта'", КодыЯзыков); // @НСтр-1
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ВыполнятьМонопольноеОбновление", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Демо-пример установки значений реквизитов предопределенных элементов справочника.
// РолиИсполнителей.
//
Процедура ИнициализироватьРолиИсполнителей() Экспорт
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоРуководительКомпании.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоГлавныйБухгалтер.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоОрганизация;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоРуководительПодразделения.ПолучитьОбъект();
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоПодразделение;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
	РольОбъект = Справочники.РолиИсполнителей._ДемоРуководительПроекта.ПолучитьОбъект();
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоПроект;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
	
КонецПроцедуры

// Процедура выполняет заполнение справочника Валюты для новой области данных.
//
Процедура ВыполнитьПервоначальноеЗаполнениеВалют() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СписокВалют = Новый Массив; 
		СписокВалют.Добавить("840");
		СписокВалют.Добавить("643");
		СписокВалют.Добавить("978");
		
		РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
		
	КонецЕсли;

КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.1.3.16.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "_ДемоЮридическийАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "_ДемоФактическийАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "_ДемоПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "_ДемоТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "_ДемоEmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "_ДемоФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "_ДемоДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию БСП 2.2.1.12.
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если Константы._ДемоИспользоватьНесколькоОрганизаций.Получить() =
		Константы._ДемоНеИспользоватьНесколькоОрганизаций.Получить() Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы._ДемоИспользоватьНесколькоОрганизаций.Установить(Справочники._ДемоОрганизации.КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	// Справочник "Партнеры"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = "_ДемоАдресПартнера";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = "_ДемоТелефонПартнера";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = "_ДемоEmailПартнера";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Физические лица".
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = "_ДемоEmailФизическогоЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Контактные лица партнеров".
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = "_ДемоАдресКонтактногоЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = "_ДемоEmailКонтактногоЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Контрагенты"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = "_ДемоАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = "_ДемоEmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Документ "Заказ покупателя"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = "_ДемоПартнерыИКонтактныеЛицаАдресПартнера";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = "_ДемоПартнерыИКонтактныеЛицаТелефонПартнера";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = "_ДемоПартнерыИКонтактныеЛицаEmailПартнера";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.2.5.8.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = "_ДемоАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = "_ДемоEmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.5.6.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц() Экспорт
	
	ГруппаКонтактнойИнформации     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКонтактнойИнформации.Имя = "Справочник_ДемоФизическиеЛица";
	ГруппаКонтактнойИнформации.Наименование = НСтр("ru = 'Контактная информация справочника ""Демо: Физические лица""'");
	
	Группа = УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКонтактнойИнформации);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Группа = Группа;
	ПараметрыВида.Вид = "_ДемоEmailФизическогоЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Группа = Группа;
	ПараметрыВида.Вид = "_ДемоТелефонФизическогоЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Группа = Группа;
	ПараметрыВида.Вид = "_ДемоАдресФизическогоЛица";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.0.1.82
// Заполняет добавленный предопределенный вид контактной информации.
//
Процедура ЗаполнитьВидКонтактнойИнформацииМеждународныйАдрес() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = "_ДемоМеждународныйАдресОрганизации";
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования                 = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.МеждународныйФорматАдреса         = Истина;
	
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.1.3.50
// Устанавливает свойство вида КИ ИсправлятьУстаревшиеАдреса в Истина,
// которое активирует регламентное задание исправляющие устаревшие адреса у Партнеров.
//
Процедура АктивироватьИсправлениеУстаревшихАдресовПартнеров() Экспорт
	
	ВидКИ = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресПартнера");
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
	ПараметрыВида.ИсправлятьУстаревшиеАдреса  = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.0.2.82
// Заполняет добавленный предопределенный вид контактной информации.
//
Процедура ЗаполнитьВидКонтактнойИнформацииВебСайтПартнера() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ПараметрыВида.Вид                               = "_ДемоВебСайтПартнера";
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Тестовый обработчик, предназначенный для имитации ошибки при обновлении.
//
Процедура ОбработчикСОшибкой() Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ", "ИмитироватьОшибкуПриОбновлении", , ИмяПользователя());
	Если ИмитироватьОшибку = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ИмитироватьОшибкуПриОбновлении", Ложь, ИмяПользователя());
		ТекстСообщения = НСтр("ru = 'Процедура %1 выполнилась с ошибкой.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "ОбработчикСОшибкой");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных ключевых операций.
Процедура ОбновитьПредопределенныеКлючевыеОперации() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.КлючевыеОперации");
		ЭлементБлокировки.УстановитьЗначение("Имя", "");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КлючевыеОперации.Ссылка,
		               |	КлючевыеОперации.ИмяПредопределенныхДанных
		               |ИЗ
		               |	Справочник.КлючевыеОперации КАК КлючевыеОперации
		               |ГДЕ
		               |	КлючевыеОперации.Имя = """"
		               |	И КлючевыеОперации.Предопределенный";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			КлючеваяОперация = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.КлючевыеОперации
			КлючеваяОперация.Имя = Выборка.ИмяПредопределенныхДанных;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КлючеваяОперация);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗаписьПредопределенныхКлючевыхОпераций'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Примеры обработчиков отложенного обновления.

// Тестовый обработчик отложенного обновления для демонстрации нештатной ситуации.
//
Процедура ОтложенныйОбработчикСОшибкой(Параметры) Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ИмитироватьОшибкуПриОтложенномОбновлении", Ложь);
	Если Не ИмитироватьОшибку Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("КоличествоЗапусков") Тогда
		Параметры.Вставить("КоличествоЗапусков", 1);
	Иначе
		Параметры.КоличествоЗапусков = Параметры.КоличествоЗапусков + 1;
	КонецЕсли;
	
	Если Параметры.КоличествоЗапусков = 3 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ИмитироватьОшибкуПриОтложенномОбновлении", Ложь);
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Процедура %1 завершилась с ошибкой.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "ТестированиеОтложенногоОбновления");
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры

// Пример перехода с конфигурации с именем "БиблиотекаСтандартныхПодсистемДемоБазовая".
// 
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Выполнен обработчик перехода %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "ПерейтиСБазовойВерсииНаПРОФ");
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		ТекстСообщения);
	
КонецПроцедуры

// Пример обработчика перехода с любой программы.
//
Процедура ПерейтиСДругойПрограммы() Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ", "ИмитироватьОшибкуПриПереходе", , ИмяПользователя());
	Если ИмитироватьОшибку = Истина Тогда
		// Имитация ошибки в обработчике перехода с другой программы.
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ИмитироватьОшибкуПриПереходе", Ложь, ИмяПользователя());
		
		ТекстСообщения = НСтр("ru = 'Процедура %1 выполнилась с ошибкой.
			|Имитация ошибки при переходе с другой программы.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "ПерейтиСДругойПрограммы");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Выполнен обработчик перехода %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "ПерейтиСДругойПрограммы");
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		ТекстСообщения);
	
КонецПроцедуры

// Вызывается при начальном заполнении.
Процедура ОбновитьПредопределенныйВидКонтактнойИнформации() Экспорт
	
	// Добавление нового предопределенного вида контактной информации Skype.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Skype);
	ПараметрыВида.Вид = "_ДемоSkypeКонтрагенты";
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Установка параметров вида контактной информации телефон организации.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "_ДемоТелефонОрганизации";
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Выполняется при начальном заполнении. Актуализирует признак использования
// видов контактной информации справочника КонтактныхЛицПартнеров.
//
Процедура ОбновитьИспользованиеКонтактнойИнформацииКонтактныхЛицПартнеров() Экспорт
	
	// Начальная инициализация новой константы.
	Константы._ДемоИспользоватьКонтактныеЛицаПартнеров.Установить(Истина);
	
	КонтактныеЛицПартнеров = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("Справочник_ДемоКонтактныеЛицаПартнеров");
	Если КонтактныеЛицПартнеров <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтактныеЛицПартнеровОбъект = КонтактныеЛицПартнеров.ПолучитьОбъект();
	КонтактныеЛицПартнеровОбъект.Используется = ПолучитьФункциональнуюОпцию("_ДемоИспользоватьКонтактныеЛицаПартнеров");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонтактныеЛицПартнеров);
	
КонецПроцедуры

// Выполняется при начальном заполнении. Актуализирует признак использования
// наборов свойств справочника Внешние пользователи.
//
Процедура ОбновитьИспользованиеНаборовСвойствВнешнихПользователей() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВнешниеПользователи", ПараметрыНабора);
	
КонецПроцедуры

// Обновляет нумерацию видов контактной информации контрагентов.
Процедура УстановитьНазначенияРолейИсполнителей() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.РолиИсполнителей");
		Блокировка.Заблокировать();
		
		ЭлементСправочника = Справочники.РолиИсполнителей.Выбрать();
		Пока ЭлементСправочника.Следующий() Цикл
			Если ЭлементСправочника.Назначение.Количество() = 0 Тогда
				РольОбъект = ЭлементСправочника.ПолучитьОбъект();
				РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
				Если ЭлементСправочника.Ссылка = Справочники.РолиИсполнителей._ДемоРуководительКомпании Тогда
					РольОбъект.Назначение.Добавить().ТипПользователей = Справочники._ДемоПартнеры.ПустаяСсылка();
					РольОбъект.Назначение.Добавить().ТипПользователей = Справочники._ДемоКонтактныеЛицаПартнеров.ПустаяСсылка();
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольОбъект);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняется для обновления видов контактной информации для версии БСП 2.3.2.4 и выше.
// Для юридического адреса организации устанавливает флаг ХранитьИсториюИзменений.
// Для сохранения обратной совместимости всех элементов с видом контактной информации Другое
// свойство МногострочноеПоле устанавливается в Истина.
//
Процедура НастроитьИсториюКонтактнойИнформацииИМногострочноеПоле() Экспорт
	
	ЮридическийАдресОрганизации = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации");
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ВидыКонтактнойИнформации");
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ЮридическийАдресОрганизации);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		ЮридическийАдресОрганизацииОбъект = ЮридическийАдресОрганизации.ПолучитьОбъект();
		
		Если ЮридическийАдресОрганизацииОбъект <> Неопределено Тогда
			
			ЮридическийАдресОрганизацииОбъект.ХранитьИсториюИзменений      = Истина;
			ЮридическийАдресОрганизацииОбъект.ВидРедактирования            = "Диалог";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЮридическийАдресОрганизацииОбъект);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ВидыКонтактнойИнформации'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Выполняется при переходе на версию 3.0.2.100.
// .
//
Процедура СнятьПризнакПредопределенныйДляВидовКонтактнойИнформации() Экспорт
	
	УправлениеКонтактнойИнформацией.СнятьПризнакПредопределенныйДляВидовКонтактнойИнформации();
	
КонецПроцедуры

#КонецОбласти
