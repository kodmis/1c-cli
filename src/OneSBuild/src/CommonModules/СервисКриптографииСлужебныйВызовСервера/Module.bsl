////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис криптографии (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Зашифровать
// 
// Параметры: 
//  Данные - см. СервисКриптографииКлиент.Зашифровать.Данные
//  Получатели - см. СервисКриптографииКлиент.Зашифровать.Получатели
//  ТипШифрования - см. СервисКриптографииКлиент.Зашифровать.ТипШифрования
//  ПараметрыШифрования - см. СервисКриптографииКлиент.Зашифровать.ПараметрыШифрования
// 
// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция Зашифровать(Знач Данные, Знач Получатели, Знач ТипШифрования, Знач ПараметрыШифрования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Получатели", Получатели);
	ПараметрыПроцедуры.Вставить("ТипШифрования", ТипШифрования);
	ПараметрыПроцедуры.Вставить("ПараметрыШифрования", ПараметрыШифрования);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", СервисКриптографииСлужебный.ВернутьРезультатКакАдресВоВременномХранилище(Данные));
	Данные = СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Данные);
	ПараметрыПроцедуры.Вставить("Данные", Данные);
			
	АдресаФайловРезультата = Новый Массив;
	Если ПараметрыПроцедуры.ВернутьРезультатКакАдресВоВременномХранилище Тогда
		Если ТипЗнч(Данные) = Тип("Массив") Тогда 
			ВсегоЭлементов = Данные;
		Иначе
			ВсегоЭлементов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные);
		КонецЕсли;		
		// @skip-warning НеиспользуемаяПеременная - особенность реализации.
		Для Каждого Элемент Из ВсегоЭлементов Цикл
			АдресаФайловРезультата.Добавить(ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
		КонецЦикла;
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("АдресаФайловРезультата", АдресаФайловРезультата);
		
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.Зашифровать", ПараметрыПроцедуры);
	
КонецФункции

// Зашифровать блок
// 
// Параметры: 
//  Данные - см. СервисКриптографииКлиент.РасшифроватьБлок.ЗашифрованныеДанные
//  Получатель - см. СервисКриптографииКлиент.РасшифроватьБлок.Получатель
// 
// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ЗашифроватьБлок(Знач Данные, Знач Получатель) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Получатель", Получатель);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", СервисКриптографииСлужебный.ВернутьРезультатКакАдресВоВременномХранилище(Данные));
	Данные = СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Данные);
	ПараметрыПроцедуры.Вставить("Данные", Данные);
			
	Если ПараметрыПроцедуры.ВернутьРезультатКакАдресВоВременномХранилище Тогда
		ПараметрыПроцедуры.Вставить("АдресФайлаРезультата", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
	КонецЕсли;
		
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ЗашифроватьБлок", ПараметрыПроцедуры);
	
КонецФункции

// Параметры: 
//  ЗашифрованныеДанные - см. СервисКриптографииКлиент.Расшифровать.ЗашифрованныеДанные
//  Сертификат - Структура:
//   * Идентификатор - Произвольный
//  ТипШифрования - см. СервисКриптографииКлиент.Расшифровать.ТипШифрования
//  ПараметрыШифрования - см. СервисКриптографииКлиент.Расшифровать.ПараметрыШифрования
// 
// Возвращаемое значение:  см. ДлительныеОперации.ВыполнитьВФоне
Функция Расшифровать(Знач ЗашифрованныеДанные, Знач Сертификат, Знач ТипШифрования, Знач ПараметрыШифрования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗашифрованныеДанные", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(ЗашифрованныеДанные));
	ПараметрыПроцедуры.Вставить("Сертификат", Сертификат);
	ПараметрыПроцедуры.Вставить("ТипШифрования", ТипШифрования);
	ПараметрыПроцедуры.Вставить("ПараметрыШифрования", ПараметрыШифрования);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", СервисКриптографииСлужебный.ВернутьРезультатКакАдресВоВременномХранилище(ЗашифрованныеДанные));
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПроцедуры.Вставить("МаркерыБезопасности", ПараметрыСеанса.МаркерыБезопасности);
	УстановитьПривилегированныйРежим(Ложь);
	
	АдресаФайловРезультата = Новый Массив;
	АдресаФайловРезультата.Добавить(ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
	ПараметрыПроцедуры.Вставить("АдресаФайловРезультата", АдресаФайловРезультата);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.Расшифровать", ПараметрыПроцедуры);
	
КонецФункции

// Параметры: 
//  ЗашифрованныеДанные - см. СервисКриптографииКлиент.РасшифроватьБлок.ЗашифрованныеДанные
//  Получатель - см. СервисКриптографииКлиент.РасшифроватьБлок.Получатель
//  КлючеваяИнформация - см. СервисКриптографииКлиент.РасшифроватьБлок.КлючеваяИнформация
//  ПараметрыШифрования - см. СервисКриптографииКлиент.РасшифроватьБлок.ПараметрыШифрования
// 
// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция РасшифроватьБлок(Знач ЗашифрованныеДанные, Знач Получатель, Знач КлючеваяИнформация, Знач ПараметрыШифрования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗашифрованныеДанные", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(ЗашифрованныеДанные));
	ПараметрыПроцедуры.Вставить("Получатель", Получатель);
	ПараметрыПроцедуры.Вставить("КлючеваяИнформация", КлючеваяИнформация);	
	ПараметрыПроцедуры.Вставить("ПараметрыШифрования", ПараметрыШифрования);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", СервисКриптографииСлужебный.ВернутьРезультатКакАдресВоВременномХранилище(ЗашифрованныеДанные));
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПроцедуры.Вставить("МаркерыБезопасности", ПараметрыСеанса.МаркерыБезопасности);
	УстановитьПривилегированныйРежим(Ложь);
	
	АдресФайлаРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыПроцедуры.Вставить("АдресФайлаРезультата", АдресФайлаРезультата);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.РасшифроватьБлок", ПараметрыПроцедуры);
	
КонецФункции

// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция Подписать(Знач Данные, Знач Подписант, Знач ТипПодписи, Знач ПараметрыПодписания) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Подписант", Подписант);
	ПараметрыПроцедуры.Вставить("ТипПодписи", ТипПодписи);
	ПараметрыПроцедуры.Вставить("ПараметрыПодписания", ПараметрыПодписания);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", СервисКриптографииСлужебный.ВернутьРезультатКакАдресВоВременномХранилище(Данные));
	Данные = СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Данные);
	ПараметрыПроцедуры.Вставить("Данные", Данные);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПроцедуры.Вставить("МаркерыБезопасности", ПараметрыСеанса.МаркерыБезопасности);
	УстановитьПривилегированныйРежим(Ложь);
	
	АдресаФайловРезультата = Новый Массив;
	Если ПараметрыПроцедуры.ВернутьРезультатКакАдресВоВременномХранилище Тогда
		Если ТипЗнч(Данные) = Тип("Массив") Тогда 
			ВсегоЭлементов = Данные;
		Иначе
			ВсегоЭлементов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные);
		КонецЕсли;		
		// @skip-warning НеиспользуемаяПеременная - особенность реализации.
		Для Каждого Элемент Из ВсегоЭлементов Цикл
			АдресаФайловРезультата.Добавить(ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
		КонецЦикла;
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("АдресаФайловРезультата", АдресаФайловРезультата);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.Подписать", ПараметрыПроцедуры);	
	
КонецФункции

// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ПроверитьПодпись(Знач Подпись, Знач Данные, Знач ТипПодписи, Знач ПараметрыПодписания) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Данные", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Данные));
	ПараметрыПроцедуры.Вставить("Подпись", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Подпись));
	ПараметрыПроцедуры.Вставить("ТипПодписи", ТипПодписи);
	ПараметрыПроцедуры.Вставить("ПараметрыПодписания", ПараметрыПодписания);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПроверитьПодпись", ПараметрыПроцедуры);	
	
КонецФункции

// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ПроверитьСертификат(Знач Сертификат) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сертификат", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Сертификат));
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПроверитьСертификат", ПараметрыПроцедуры);	

КонецФункции

// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ПроверитьСертификатСПараметрами(Знач Сертификат, Знач ПараметрыПроверки) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сертификат", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Сертификат));
	ПараметрыПроцедуры.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПроверитьСертификатСПараметрами", ПараметрыПроцедуры);	

КонецФункции

// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ПолучитьСвойстваСертификата(Знач Сертификат) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сертификат", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Сертификат));
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПолучитьСвойстваСертификата", ПараметрыПроцедуры);	
	
КонецФункции

// Получить сертификаты из подписи
// 
// Параметры: 
//  Подпись - Строка, ДвоичныеДанные - данные подписи.
// 
// Возвращаемое значение: 
//  Структура:
// * Статус - Строка
// * ИдентификаторЗадания - УникальныйИдентификатор
// * АдресРезультата - Строка
// * АдресДополнительногоРезультата - Строка
// * КраткоеПредставлениеОшибки - Строка
// * ПодробноеПредставлениеОшибки - Строка
// * Сообщения - ФиксированныйМассив из Строка
//
Функция ПолучитьСертификатыИзПодписи(Знач Подпись) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Подпись", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Подпись));
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", СервисКриптографииСлужебный.ВернутьРезультатКакАдресВоВременномХранилище(Подпись));
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПолучитьСертификатыИзПодписи", ПараметрыПроцедуры);	
	
КонецФункции

// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ПолучитьСвойстваКриптосообщения(Знач Криптосообщение, Знач ТолькоКлючевыеСвойства) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Криптосообщение", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Криптосообщение));
	ПараметрыПроцедуры.Вставить("ТолькоКлючевыеСвойства", ТолькоКлючевыеСвойства);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПолучитьСвойстваКриптосообщения", ПараметрыПроцедуры);
	
КонецФункции

// Параметры: 
//  Данные - см. СервисКриптографииКлиент.ХешированиеДанных.Данные
//  АлгоритмХеширования - см. СервисКриптографииКлиент.ХешированиеДанных.АлгоритмХеширования
//  ПараметрыХеширования - см. СервисКриптографииКлиент.ХешированиеДанных.ПараметрыХеширования
// 
// Возвращаемое значение: см. ДлительныеОперации.ВыполнитьВФоне
Функция ХешированиеДанных(Знач Данные, Знач АлгоритмХеширования, Знач ПараметрыХеширования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Данные", СервисКриптографииСлужебный.ИзвлечьДвоичныеДанныеПриНеобходимости(Данные));
	ПараметрыПроцедуры.Вставить("АлгоритмХеширования", АлгоритмХеширования);
	ПараметрыПроцедуры.Вставить("ПараметрыХеширования", ПараметрыХеширования);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ХешированиеДанных", ПараметрыПроцедуры);	
	
КонецФункции

// Выполняет сортировку идентификаторов сертификатов по дате действия и принадлежности к базе
//
// Параметры:
//	ИдентификаторыСертификатов – Массив Из Строка – содержит идентификаторы сертификатов
//
// Возвращаемое значение:
//  Массив Из Строка
//
Функция ОпределитьПорядокСертификатов(ИдентификаторыСертификатов) Экспорт
	
	Возврат СервисКриптографииСлужебный.ОпределитьПорядокСертификатов(ИдентификаторыСертификатов);
	
КонецФункции

#КонецОбласти
