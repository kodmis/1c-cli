#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует выгрузку.
//
// Параметры:
//   АдресПриложения - Строка - url приложения, которое создано специально для миграции.
//   Логин - Строка - логин пользователя в этом приложении.
//   Пароль - Строка - пароль пользователя.
//   ВыгружатьНастройкиПользователей - Соответствие из КлючИЗначение - коллекция пользователей, настройки которых нужно выгружать:
//      * Ключ - СправочникСсылка.Пользователи - пользователь, настройки которого нужно выгрузить.
//      * Значение - Строка - новый логин пользователя.
//   ЗавершитьМиграциюАвтоматически - Булево - если Истина, то будет выполнена попытка установить монопольный режим и
//                                             завершить миграцию.
//   ДополнительныеСвойства - Структура - доп. свойства для сохранения.
//
Процедура НачатьВыгрузку(АдресПриложения, Логин, Пароль, ВыгружатьНастройкиПользователей, ЗавершитьМиграциюАвтоматически, ДополнительныеСвойства) Экспорт
	
	ПроверитьСоставПланаОбмена();
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	Запись = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		ВызватьИсключение НСтр("ru = 'Переход уже начался.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		НовыйУзел = ПланыОбмена.МиграцияПриложений.СоздатьУзел();
		НовыйУзел.Наименование = СтрШаблон(НСтр("ru = 'Миграция в %1 (%2)'"), Метаданные.Представление(), АдресПриложения);
		НовыйУзел.Код = Строка(Новый УникальныйИдентификатор);
		НовыйУзел.Записать();
		
		ПараметрыДоступа = Новый Структура;
		ПараметрыДоступа.Вставить("URL", АдресПриложения);
		ПараметрыДоступа.Вставить("UserName", Логин);
		ПараметрыДоступа.Вставить("Password", Пароль);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел.Ссылка, ПараметрыДоступа, "ПараметрыДоступа");
		УстановитьПривилегированныйРежим(Ложь);
		
		Запись = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
		Запись.Состояние = Перечисления.СостоянияМиграцииПриложения.Выполняется;
		Запись.ДатаНачала = ТекущаяУниверсальнаяДата();
		Запись.АдресПриложения = АдресПриложения;
		Запись.ВыгружатьНастройкиПользователей = Новый ХранилищеЗначения(ВыгружатьНастройкиПользователей);
		Запись.УзелОбмена = НовыйУзел.Ссылка;
		Запись.ЗавершитьМиграциюАвтоматически = ЗавершитьМиграциюАвтоматически;
		Запись.ДополнительныеСвойства = Новый ХранилищеЗначения(ДополнительныеСвойства);
		Запись.Инициатор = Пользователи.ТекущийПользователь();
		Запись.Записать();
		
		ЗначенияПоУмолчанию = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Расписание", ЗначенияПоУмолчанию.Расписание);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", ЗначенияПоУмолчанию.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ЗначенияПоУмолчанию.ИнтервалПовтораПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("Ключ", ЗначенияПоУмолчанию.Ключ);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отменяет выгрузку.
//
Процедура ОтменитьВыгрузку() Экспорт
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	НачатьТранзакцию();
	Попытка
		Запись = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			ВызватьИсключение НСтр("ru = 'Переход не выполняется.'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.УзелОбмена) Тогда
		
			УстановитьПривилегированныйРежим(Истина);
			ПараметрыДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Запись.УзелОбмена, "ПараметрыДоступа");
			Запись.УзелОбмена.ПолучитьОбъект().Удалить();
			УстановитьПривилегированныйРежим(Ложь);
			
			РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
			
			Запись.Удалить();
			
			Попытка
				ОтменитьЗагрузкуВСервисе(ПараметрыДоступа);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Отмена миграции на сервисе завершилась с ошибкой, обратитесь к администратору сервиса. 
		                                |Описание ошибки:
		                                |%1'");
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				СообщениеПользователю.Сообщить();
			КонецПопытки;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает состояние выгрузки.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * ДатаНачала - Дата - универсальная дата начала перехода.
//     * НомерОтправленногоСообщения - Число - номер отправленного сообщения.
//     * НомерПринятогоСообщения - Число - количество обработанных сообщений.
//     * ИзмененоОбъектов - Число - количество зарегистрированных изменений.
//     * ВыгруженоОбъектов - Число - количество выгруженных объектов.
//     * ЗагруженоОбъектов - Число - количество загруженных объектов.
//     * ЗагрузитьОбъектов - Число - количество объектов, которые еще нужно загрузить. 
//     * ДатаЗавершения - Дата - универсальная дата завершения перехода.
//     * Состояние - ПеречислениеСсылка.СостоянияМиграцииПриложения - состояние миграции.
//     * Комментарий - Строка - доп. описание состояния.
//
Функция СостояниеВыгрузки() Экспорт 
	
	СостояниеВыгрузки = Новый Структура;
	СостояниеВыгрузки.Вставить("ДатаНачала", Дата(1, 1, 1));
	СостояниеВыгрузки.Вставить("АдресПриложения", "");
	СостояниеВыгрузки.Вставить("ЗавершитьМиграциюАвтоматически", Ложь);
	СостояниеВыгрузки.Вставить("НомерОтправленногоСообщения", 0);
	СостояниеВыгрузки.Вставить("НомерПринятогоСообщения", 0);
	СостояниеВыгрузки.Вставить("ИзмененоОбъектов", 0);
	СостояниеВыгрузки.Вставить("ВыгруженоОбъектов", 0);
	СостояниеВыгрузки.Вставить("ЗагруженоОбъектов", 0);
	СостояниеВыгрузки.Вставить("ЗагрузитьОбъектов", 0);
	СостояниеВыгрузки.Вставить("ТребуетсяМонопольныйРежим", Ложь);
	СостояниеВыгрузки.Вставить("ДатаЗавершения", Дата(1, 1, 1));
	СостояниеВыгрузки.Вставить("Состояние", Перечисления.СостоянияМиграцииПриложения.ПустаяСсылка());
	СостояниеВыгрузки.Вставить("Комментарий", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеВыгрузки.ДатаНачала КАК ДатаНачала,
	|	СостояниеВыгрузки.АдресПриложения КАК АдресПриложения,
	|	СостояниеВыгрузки.ЗавершитьМиграциюАвтоматически КАК ЗавершитьМиграциюАвтоматически,
	|	СостояниеВыгрузки.НомерОтправленногоСообщения КАК НомерОтправленногоСообщения,
	|	СостояниеВыгрузки.НомерПринятогоСообщения КАК НомерПринятогоСообщения,
	|	СостояниеВыгрузки.ИзмененоОбъектов КАК ИзмененоОбъектов,
	|	СостояниеВыгрузки.ВыгруженоОбъектов КАК ВыгруженоОбъектов,
	|	СостояниеВыгрузки.ЗагруженоОбъектов КАК ЗагруженоОбъектов,
	|	СостояниеВыгрузки.Состояние КАК Состояние,
	|	СостояниеВыгрузки.Комментарий КАК Комментарий,
	|	СостояниеВыгрузки.ДатаЗавершения КАК ДатаЗавершения,
	|	СостояниеВыгрузки.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийСостояниеВыгрузки КАК СостояниеВыгрузки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат СостояниеВыгрузки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СостояниеВыгрузки, Выборка);
	
	СостояниеВыгрузки.ЗагрузитьОбъектов = СостояниеВыгрузки.ВыгруженоОбъектов - СостояниеВыгрузки.ЗагруженоОбъектов + СостояниеВыгрузки.ИзмененоОбъектов;
	Для Каждого КлючИЗначение Из Выборка.ДополнительныеСвойства.Получить() Цикл
		СостояниеВыгрузки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	СостояниеВыгрузки.ТребуетсяМонопольныйРежим = СостояниеВыгрузки.ВыгруженоОбъектов > 0 И СостояниеВыгрузки.ИзмененоОбъектов < РазмерПорцииДанных();
	
	Возврат СостояниеВыгрузки;
	
КонецФункции

// Инициализирует загрузку.
//
// Параметры:
// ПользователиОбласти - Соответствие - в качестве ключа исходная ссылка, в качестве значения логин пользователя.
//
Процедура НачатьЗагрузку(ПользователиОбласти) Экспорт
	
	ПроверитьИспользованиеРазделениеСеанса();
		
	НачатьТранзакцию();
	Попытка
		СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
		СостояниеЗагрузки.Прочитать();
		Если СостояниеЗагрузки.Выбран() Тогда
			ВызватьИсключение НСтр("ru = 'Загрузка уже выполняется.'");
		КонецЕсли;
		
		СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
		СостояниеЗагрузки.ДатаНачала = ТекущаяУниверсальнаяДата();
		СостояниеЗагрузки.СоответствиеСсылок = Новый ХранилищеЗначения(Новый Соответствие);
		СостояниеЗагрузки.Пользователи = Новый ХранилищеЗначения(ПользователиОбласти);
		СостояниеЗагрузки.Записать();
		
		ЗначенияПоУмолчанию = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Расписание", ЗначенияПоУмолчанию.Расписание);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", ЗначенияПоУмолчанию.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ЗначенияПоУмолчанию.ИнтервалПовтораПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("Ключ", ЗначенияПоУмолчанию.Ключ);
		ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("МиграцияПриложений.ЗаданиеВыгрузка");
	СоответствиеИменПсевдонимам.Вставить("МиграцияПриложений.ЗаданиеЗагрузка");
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
// 
// Параметры:
// 	Типы - См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.Типы
// 
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	ВыгрузкаЗагрузкаДанных.ДополнитьТипомИсключаемымИзВыгрузкиЗагрузки(
		Типы,
		Метаданные.ПланыОбмена.МиграцияПриложений,
		ВыгрузкаЗагрузкаДанных.ДействиеСоСсылкамиНеИзменять());
		
	Типы.Добавить(Метаданные.РегистрыСведений.МиграцияПриложенийОчередьЗагрузки);
	Типы.Добавить(Метаданные.РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки);
	Типы.Добавить(Метаданные.РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки);
	Типы.Добавить(Метаданные.Константы.ИспользуетсяМиграцияПриложений);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
//
// Параметры:
//	Настройки - см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.Настройки
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
// Параметры:
//	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия    = "1.0.16.6";
	Обработчик.Процедура = "ПланыОбмена.МиграцияПриложений.ЗаполнитьВспомогательныеДанные";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт

	Параметры.Вставить("МиграцияПриложенийОткрытьФорму", НужноОткрытьФорму());
	
КонецПроцедуры

// Регламентное задание МиграцияПриложенийВыгрузка.
//
Процедура ЗаданиеВыгрузка(ЗавершитьМиграцию = Ложь) Экспорт
	
 	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеВыгрузки = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
	СостояниеВыгрузки.Прочитать();
	Если Не СостояниеВыгрузки.Выбран() Тогда
		ПредставлениеОшибки = НСтр("ru = 'Состояние выгрузки не найдено.'");
		РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
		Возврат;
	КонецЕсли;
	
	УзелОбмена = СостояниеВыгрузки.УзелОбмена;
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПредставлениеОшибки = НСтр("ru = 'Не найден узел обмена.'");
		ЗавершитьВыгрузкуСОшибкой(СостояниеВыгрузки, ПредставлениеОшибки, ПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(УзелОбмена);
		КлючЗаписи = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьКлючЗаписи(Новый Структура);
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	Исключение
		Возврат;
	КонецПопытки;
	
	// Регистрация объектов идет до обращения к сервису, т.к. приложение может быть еще не готово.
	Если СостояниеВыгрузки.НомерОтправленногоСообщения = 0 Тогда
		Для Каждого КлючИЗначение Из МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, КлючИЗначение.Ключ);
			Если Метаданные.РегистрыРасчета.Содержит(КлючИЗначение.Ключ) Тогда
				Для Каждого Перерасчет Из КлючИЗначение.Ключ.Перерасчеты Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Перерасчет);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыДоступа = Неопределено Тогда
		ПредставлениеОшибки = НСтр("ru = 'Не найдены параметры подключения.'");
		ЗавершитьВыгрузкуСОшибкой(СостояниеВыгрузки, ПредставлениеОшибки, ПредставлениеОшибки);
		Возврат;
	КонецЕсли;
		
	Попытка
		СостояниеЗагрузки = СостояниеЗагрузкиИзСервиса(ПараметрыДоступа);
	Исключение
		// Сервис может быть недоступен, это не ошибка.
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Шаблон = НСтр("ru = 'Не удалось получить состояние загрузки, возможно сервис временно недоступен: %1 %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		Комментарий = СтрШаблон(Шаблон, Символы.ПС, ПредставлениеОшибки);
		РегистрацияПримечания(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), Комментарий);
		ДатаПроверки = ?(ЗначениеЗаполнено(СостояниеВыгрузки.ДатаСостоянияЗагрузки), СостояниеВыгрузки.ДатаСостоянияЗагрузки, СостояниеВыгрузки.ДатаНачала);
		Если (ТекущаяУниверсальнаяДата() - ДатаПроверки) > (86400) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Сервис недоступен 24 часа, выгрузка прервана.'");
			ЗавершитьВыгрузкуСОшибкой(СостояниеВыгрузки, ПредставлениеОшибки, ПредставлениеОшибки);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	Если СостояниеЗагрузки.ИмяКонфигурации <> Метаданные.Имя Тогда
		ПредставлениеОшибки = НСтр("ru = 'Имя конфигурации не совпадает.'");
		ЗавершитьВыгрузкуСОшибкой(СостояниеВыгрузки, ПредставлениеОшибки, ПредставлениеОшибки);
	КонецЕсли;
	
	Если СостояниеВыгрузки.НомерПринятогоСообщения < СостояниеЗагрузки.НомерПринятогоСообщения Тогда
		СостояниеВыгрузки.НомерПринятогоСообщения = СостояниеЗагрузки.НомерПринятогоСообщения;
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СостояниеЗагрузки.НомерПринятогоСообщения);
	КонецЕсли;
	
	Если СостояниеЗагрузки.ТребуетсяПовторнаяОтправка Тогда
		
		// Значит версия в приемнике обновилась и нужно повторно отправить уже выгруженные объекты.
		ЗарегистрироватьИзмененияПовторно(УзелОбмена, СостояниеВыгрузки.НомерОтправленногоСообщения);
		
		НачатьТранзакцию();
		Попытка
			// В приемнике очередь очищена, здесь тоже нужно сбросить номер отправленного
			СостояниеВыгрузки.НомерОтправленногоСообщения = СостояниеЗагрузки.НомерПринятогоСообщения;
			
			СостояниеЗагрузки = ПодтвердитьПовторнуюЗагрузкуВСервисе(ПараметрыДоступа);
			
			ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
			СостояниеВыгрузки.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Если СостояниеЗагрузки.ВерсияКонфигурации <> Метаданные.Версия Тогда
		СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ОжиданиеОбновления;
		СостояниеВыгрузки.Комментарий = СостояниеЗагрузки.ВерсияКонфигурации;
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.Записать();
	ИначеЕсли СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ОжиданиеОбновления Тогда
		СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.Выполняется;
		СостояниеВыгрузки.Записать();
		Возврат;
	КонецЕсли;
	
	
	НомерСообщения = СостояниеВыгрузки.НомерОтправленногоСообщения + 1;
		
	Если (СостояниеВыгрузки.НомерОтправленногоСообщения - СостояниеЗагрузки.НомерПринятогоСообщения) >= МаксимальнаяОчередьЗагрузки() Тогда
		
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.Записать();
		
		Возврат;
		
	ИначеЕсли СостояниеЗагрузки.ЗавершеноСОшибками Тогда
		
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
		УзелОбмена.ПолучитьОбъект().Удалить();
		СостояниеВыгрузки.Записать();
		
		Возврат;
		
	ИначеЕсли СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ОжиданиеЗагрузки Тогда
		// Сообщения больше не формируются, а только ожидается когда все будет загружено.
		НачатьТранзакцию();
		Попытка
			Если Не СостояниеЗагрузки.ВыполняетсяЗагрузка Тогда
				СостояниеВыгрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
				СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ЗавершенаУспешно;
				СостояниеВыгрузки.Комментарий = НСтр("ru = 'Переход завершен.
					|
					|Внимание! 
					|Любые изменения в исходном приложении не будут переданы в созданное приложение облачного сервиса.
					|Рекомендуется работать с данными приложения только в облачном сервисе.'");
				СостояниеВыгрузки.УзелОбмена = Неопределено;
				РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
				УзелОбмена.ПолучитьОбъект().Удалить();
			КонецЕсли;
			ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
			СостояниеВыгрузки.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("AppMigrationOut") + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогВыгрузки);
	
	
	НачатьТранзакцию();
	Попытка
		
		Результат = ВыгрузитьДанныеВКаталог(КаталогВыгрузки, 
			УзелОбмена, 
			НомерСообщения, 
			СостояниеВыгрузки.ПоследнийОбъектМетаданных, 
			СостояниеВыгрузки.ВыгружатьНастройкиПользователей.Получить(), 
			СостояниеВыгрузки.ЗавершитьМиграциюАвтоматически Или ЗавершитьМиграцию);
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СостояниеВыгрузки.КоличествоПопыток = СостояниеВыгрузки.КоличествоПопыток + 1;
		СостояниеВыгрузки.ДатаПоследнейВыгрузки = ТекущаяУниверсальнаяДата();
			
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		
		Если СостояниеВыгрузки.КоличествоПопыток >= 3 Тогда
						
			ЗавершитьВыгрузкуСОшибкой(СостояниеВыгрузки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));			
			
		Иначе
			
			СостояниеВыгрузки.Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			СостояниеВыгрузки.Записать();
			
			РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		// Сообщение отправляется только если в нем есть данные.
		Если Результат.КоличествоОбъектов > 0 Или Результат.ЭтоПоследнееСообщение Тогда
		
			ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
			ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайлаАрхива);
			ЗаписьZIP.Добавить(КаталогВыгрузки + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			ЗаписьZIP.Записать();
			
			СостояниеВыгрузки.НомерОтправленногоСообщения = НомерСообщения;
			СостояниеВыгрузки.ВыгруженоОбъектов = СостояниеВыгрузки.ВыгруженоОбъектов + Результат.КоличествоОбъектов;
			СостояниеВыгрузки.КоличествоПопыток = 0;
			СостояниеВыгрузки.ДатаПоследнейВыгрузки = ТекущаяУниверсальнаяДата();
			СостояниеВыгрузки.Комментарий = "";
			Если Результат.ЭтоПоследнееСообщение Тогда
				СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ОжиданиеЗагрузки;
			КонецЕсли;
			СостояниеВыгрузки.Записать();
			
			СостояниеЗагрузки = ОтправитьСообщениеВСервис(ПараметрыДоступа, ИмяФайлаАрхива);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
	СостояниеВыгрузки.Записать();
	
	Если ЗначениеЗаполнено(ИмяФайлаАрхива) Тогда
		Попытка
			УдалитьФайлы(ИмяФайлаАрхива);
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
		КонецПопытки;
	КонецЕсли;
			
	Попытка
		УдалитьФайлы(КаталогВыгрузки);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Регламентное задание МиграцияПриложенийЗагрузка.
//
Процедура ЗаданиеЗагрузка() Экспорт
	
	// Вызов ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания() не требуется, 
	// т.к. это регламентное задание может быть только в новой области, в которой не выполнено обновление.
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	СостояниеЗагрузки.Прочитать();
	
	Если Не СостояниеЗагрузки.Выбран() Тогда
		Комментарий = НСтр("ru = 'Состояние загрузки не найдено. Загрузка прервана'", ОбщегоНазначения.КодОсновногоЯзыка());
		РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), Комментарий);
		УдалитьОчередь();
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МиграцияПриложенийОчередьЗагрузки.Номер КАК Номер,
	|	МиграцияПриложенийОчередьЗагрузки.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		// Если долго очередь пустует, значит инициатор миграции больше не формирует сообщения.
		ОтсчетВремени = ?(ЗначениеЗаполнено(СостояниеЗагрузки.ДатаПоследнейЗагрузки), СостояниеЗагрузки.ДатаПоследнейЗагрузки, СостояниеЗагрузки.ДатаНачала);
		Если (ТекущаяУниверсальнаяДата() - ОтсчетВремени) > (86400) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Отсутствуют сообщения в течении 24 часов.'");
			ЗавершитьЗагрузкуСОшибкой(СостояниеЗагрузки, ПредставлениеОшибки, ПредставлениеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Выборка.ИмяФайла);
	Если Не Файл.Существует() Тогда
		ПодробноеПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Файл сообщения %1 не найден.'"), Выборка.ИмяФайла);
		КраткоеПредставлениеОшибки = НСтр("ru = 'Файл сообщения не найден.'");
		ЗавершитьЗагрузкуСОшибкой(СостояниеЗагрузки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	СоответствиеСсылок = СостояниеЗагрузки.СоответствиеСсылок.Получить();
	Если СоответствиеСсылок = Неопределено Тогда
		СоответствиеСсылок = Новый Соответствие;
	КонецЕсли;
	
	ОбъектыДляОчистки = СостояниеЗагрузки.ОбъектыДляОчистки.Получить(); // Соответствие
	Если ОбъектыДляОчистки = Неопределено Тогда
		ОбъектыДляОчистки = Новый Соответствие;
		Для Каждого КлючИЗначение Из МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты() Цикл
			ОбъектыДляОчистки.Вставить(КлючИЗначение.Ключ.ПолноеИмя(), Истина);
		КонецЦикла;
		// Это самое начало
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Истина, Ложь);
			
		КонецЕсли;
		
		УстановитьИспользованиеИтоговРегистров(Ложь);
		ОчиститьПользовательскиеДанные(РаботаСФайламиСлужебныйВМоделиСервисаПовтИсп.СправочникиФайловИОбъектыХранения().ОбъектыХранения);
	КонецЕсли;
		
	КаталогЗагрузки = ПолучитьИмяВременногоФайла("AppMigrationIn") + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогЗагрузки);
	
	ЧтениеZIP = Новый ЧтениеZipФайла(Выборка.ИмяФайла);
	ЧтениеZIP.ИзвлечьВсе(КаталогЗагрузки, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ЧтениеZIP.Закрыть();
	
	Попытка
		
		Результат = ЗагрузитьДанныеИзКаталога(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если СостояниеЗагрузки.КоличествоПопыток >= 3 Тогда
			ЗавершитьЗагрузкуСОшибкой(СостояниеЗагрузки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Иначе 
			РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			СостояниеЗагрузки.КоличествоПопыток = СостояниеЗагрузки.КоличествоПопыток + 1;
			СостояниеЗагрузки.ДатаПоследнейЗагрузки = ТекущаяУниверсальнаяДата();
			СостояниеЗагрузки.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			СостояниеЗагрузки.Записать();
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		Если Результат.Успешно Тогда
		
			ОчередьЗагрузки = РегистрыСведений.МиграцияПриложенийОчередьЗагрузки.СоздатьМенеджерЗаписи();
			ОчередьЗагрузки.Номер = Выборка.Номер;
			ОчередьЗагрузки.Удалить();
			
			СборщикМусора = РаботаВМоделиСервиса.ЗапланироватьУдалениеФайла(Выборка.ИмяФайла, 3600);
			
			СостояниеЗагрузки.СоответствиеСсылок = Новый ХранилищеЗначения(СоответствиеСсылок);
			СостояниеЗагрузки.ОбъектыДляОчистки = Новый ХранилищеЗначения(ОбъектыДляОчистки);
			СостояниеЗагрузки.НомерПринятогоСообщения = Выборка.Номер;
			СостояниеЗагрузки.ЗагруженоОбъектов = СостояниеЗагрузки.ЗагруженоОбъектов + Результат.ЗагруженоОбъектов;
			
			Если Результат.ЭтоПоследнееСообщение Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
					
					МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
					МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь);
					
				КонецЕсли;
				
				УстановитьИспользованиеИтоговРегистров(Истина);
				
				СостояниеЗагрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
				
				ЗавершитьЗагрузку(СостояниеЗагрузки);
				
			КонецЕсли;
			
			СостояниеЗагрузки.ДатаПоследнейЗагрузки = ТекущаяУниверсальнаяДата();
			СостояниеЗагрузки.Записать();
			
		Иначе
			
			// Версия конфигурации не совпадает.
			// Требуется заново выгрузить все объекты, которые в очереди.
			УдалитьОчередь();
			
			СостояниеЗагрузки.ТребуетсяПовторнаяОтправка = Истина;
			СостояниеЗагрузки.Записать();
			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.ЭтоПоследнееСообщение Тогда
		СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогЗагрузки);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(Выборка.ИмяФайла);
		ОчередьЗаданий.УдалитьЗадание(СборщикМусора);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
	КонецПопытки;
		
КонецПроцедуры

// Проверяет состав плана обмена, в случае некорректного состава вызывается исключение.
// Проверки:
//   1) У всех объектов выключена авторегистрация. 
//   2) В составе есть все объекты необходимые для обмена.
//
Процедура ПроверитьСоставПланаОбмена() Экспорт
	
	СоставПланаОбмена = Новый Соответствие;
	Для Каждого Состав Из Метаданные.ПланыОбмена.МиграцияПриложений.Состав Цикл
		Если Состав.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
			ВызватьИсключение НСтр("ru = 'Некорректно настроен план обмена ""Миграция приложений"": авторегистрация должна быть выключена.'");
		КонецЕсли;
		СоставПланаОбмена.Вставить(Состав.Метаданные, Истина);
	КонецЦикла;
	
	Для Каждого ЗагружаемыйОбъект Из МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты() Цикл
		Если СоставПланаОбмена.Получить(ЗагружаемыйОбъект.Ключ) = Неопределено Тогда
			Шаблон = НСтр("ru = 'Некорректно настроен план обмена ""Миграция приложений"": в состав нужно добавить %1.'");
			ВызватьИсключение СтрШаблон(Шаблон, ЗагружаемыйОбъект.Ключ.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюОбъекта.
//
Процедура ПередЗаписьюОбъекта(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ЗаписьюДокумента.
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюНабора.
//
Процедура ПередЗаписьюНабора(Источник, Отказ, Замещение) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюНабораРасчета.
//
Процедура ПередЗаписьюНабораРасчета(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалениемОбъекта.
//
Процедура ПередУдалениемОбъекта(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Получается абонентов пользователя из сервиса.
// Используется во внешней обработке перехода в сервис, которая должна работать на БТС от 1.2.2.
//
// Параметры:
//   ИсточникПараметровДоступа - ФормаКлиентскогоПриложения, Структура -
//
// Возвращаемое значение:
//   СписокЗначений - в качестве значения код, в качестве представления наименование.
//
Функция АбонентыПользователя(ИсточникПараметровДоступа) Экспорт
	
	ПараметрыДоступа = ПолучитьПараметрыДоступа(ИсточникПараметровДоступа);
	Метод = "account/list";
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("general", Новый Структура);
	Если Не МетодВАдресеПоддерживается(ПараметрыДоступа) Тогда
		ПараметрыМетода.general.Вставить("type", "ext");
		ПараметрыМетода.general.Вставить("method", Метод);
	КонецЕсли;
	ПараметрыМетода.general.Вставить("version", 3);
	
	Результат = ВызватьМетодПрограммногоИнтерфейса(ПараметрыДоступа, ПараметрыМетода, Метод);
	
	АбонентыПользователя = Новый СписокЗначений;
	
	Попытка
		Для Каждого Абонент Из Результат.account Цикл
			Если Абонент.role = "owner" Или Абонент.role = "administrator" Тогда
				АбонентыПользователя.Добавить(Абонент.id, Абонент.name);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный формат ответа внешнего программного интерфейса: ""%1""'"), "ext/account/list");
	КонецПопытки;
	
	Возврат АбонентыПользователя;
	
КонецФункции

// Вызывает метода программного интерфейса менеджера сервиса.
//
// Параметры:
//   ИсточникПараметровДоступа - ФормаКлиентскогоПриложения, Структура -
//   ПараметрыМетода - Структура - параметры вызываемого метода.
//   Метод - Строка, Неопределено - имя метода для подстановки в URL запроса. Если не указано, в менеджере сервиса
//      будет использовано имя метода из параметров запроса.
//
// Возвращаемое значение:
// 	Структура - результат запроса:
//	* Поле - Произвольный - произвольный набор полей.
Функция ВызватьМетодПрограммногоИнтерфейса(ИсточникПараметровДоступа, ПараметрыМетода, Метод = Неопределено) Экспорт
	
	ПараметрыДоступа = ПолучитьПараметрыДоступа(ИсточникПараметровДоступа);
	ДанныеJSON = ОбъектВJSON(ПараметрыМетода);
	
	ЧастиАдреса = СтрРазделить(ПараметрыДоступа.АдресПрограммногоИнтерфейса, "/", Ложь);
	ЧастиАдреса.Удалить(0); // Протокол
	
	ИмяСервера = ЧастиАдреса[0];
	ЧастиАдреса.Удалить(0);
	
	АдресРесурса = СтрСоединить(ЧастиАдреса, "/") + "/execute";
	Если Метод <> Неопределено И МетодВАдресеПоддерживается(ПараметрыДоступа) Тогда
		АдресРесурса = АдресРесурса + "/usr/" + Метод;
	КонецЕсли;
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	Соединение = Новый HTTPСоединение(ИмяСервера, , ПараметрыДоступа.Логин, ПараметрыДоступа.Пароль, Новый ИнтернетПрокси, 30, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	Запрос.УстановитьТелоИзСтроки(ДанныеJSON);
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	Если Ответ.КодСостояния = 401 Тогда
		ВызватьИсключение НСтр("ru = 'Неверный логин или пароль.'");
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		Шаблон = НСтр("ru = '""Не удалось выполнить запрос, код ошибки: %1'");
		ВызватьИсключение СтрШаблон(Шаблон, "" + Ответ.КодСостояния + Символы.ПС + Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Результат = JSONВОбъект(Ответ.ПолучитьТелоКакСтроку());
	
	Если Результат.general.error Тогда
		ВызватьИсключение Результат.general.message;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку сервиса.
// Используется во внешней обработке перехода в сервис, которая должна работать на БТС от 1.2.2.
//
// Параметры:
//	ИмяСервера - Строка - имя сервера.
//	АдресПрограммногоИнтерфейса - Строка - выходной параметр.
//	АдресРегистрации - Строка - выходной параметр.
//	АдресВосстановления - Строка - выходной параметр.
//	РегистрацияРазрешена - Булево - выходной параметр. 
// Возвращаемое значение:
//   Булево - Истина - в случае если поддерживает миграцию.
//
Функция СервисПоддерживаетМиграцию(ИмяСервера, АдресПрограммногоИнтерфейса, АдресРегистрации, АдресВосстановления, РегистрацияРазрешена) Экспорт
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	Соединение = Новый HTTPСоединение(ИмяСервера, , , , Новый ИнтернетПрокси, 30, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос("/info/hs/migration/info");
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	Исключение
		Шаблон = НСтр("ru = 'Сервис временно недоступен или не поддерживает миграцию,
                       |описание ошибки:
                       |%1'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Шаблон, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Ложь;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сервис не поддерживает миграцию'"));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ПараметрыFresh = JSONВОбъект(Ответ.ПолучитьТелоКакСтроку());
		
		Если ПараметрыFresh.enabled <> Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сервис не поддерживает миграцию'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если ПараметрыFresh.applications.Найти(Метаданные.Имя) = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сервис не поддерживает миграцию текущего приложения'"));		
			Возврат Ложь;
		КонецЕсли;
		
		АдресПрограммногоИнтерфейса = ПараметрыFresh.url_api;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сервис не поддерживает миграцию'"));
		Возврат Ложь;
	КонецПопытки;
	
	АдресРегистрации = "";
	ПараметрыFresh.Свойство("url_register", АдресРегистрации);
	
	АдресВосстановления = "";
	ПараметрыFresh.Свойство("url_recover", АдресВосстановления);
	
	РегистрацияРазрешена = Ложь;
	ПараметрыFresh.Свойство("register_available", РегистрацияРазрешена);
	
	Возврат Истина;
	
КонецФункции

// Получает пользователей сервиса.
// Используется во внешней обработке перехода в сервис, которая должна работать на БТС от 1.2.2.
//
// Параметры:
//   ИсточникПараметровДоступа - ФормаКлиентскогоПриложения, Структура -
//
// Возвращаемое значение:
//   Массив Из Структура - описание:
//     * Логин - Строка -
//     * Наименование - Строка -
//     * ЭлектроннаяПочта - Строка -
//     * Роль - см. МиграцияПриложенийКлиентСервер.ПредставлениеРоли
//
Функция ПользователиСервиса(ИсточникПараметровДоступа) Экспорт
	
	ПараметрыДоступа = ПолучитьПараметрыДоступа(ИсточникПараметровДоступа);
	Метод = "account/users/list";
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("auth", Новый Структура);
	ПараметрыМетода.auth.Вставить("account", ПараметрыДоступа.КодАбонента);
	
	ПараметрыМетода.Вставить("general", Новый Структура);
	Если Не МетодВАдресеПоддерживается(ПараметрыДоступа) Тогда
		ПараметрыМетода.general.Вставить("type", "ext");
		ПараметрыМетода.general.Вставить("method", Метод);
	КонецЕсли;
	ПараметрыМетода.general.Вставить("version", 3);
	
	ПараметрыМетода.Вставить("id", ПараметрыДоступа.КодАбонента);
	
	РезультатВызова = ВызватьМетодПрограммногоИнтерфейса(ПараметрыДоступа, ПараметрыМетода, Метод);
	
	ПользователиСервиса = Новый Массив;
	Для Каждого ДанныеПользователя Из РезультатВызова.user Цикл
		
		ПользовательСервиса = Новый Структура("Логин, Наименование, ЭлектроннаяПочта, Роль");
		ПользовательСервиса.Логин = ДанныеПользователя.login;
		ПользовательСервиса.Наименование = ДанныеПользователя.name;
		ПользовательСервиса.ЭлектроннаяПочта = ДанныеПользователя.email;
		ПользовательСервиса.Роль = МиграцияПриложенийКлиентСервер.ПредставлениеРоли(ДанныеПользователя.role);
		
		ПользователиСервиса.Добавить(ПользовательСервиса);
		
	КонецЦикла;
	
	Возврат ПользователиСервиса;
	
КонецФункции

// Создает приложение для миграции в сервисе.
//
// Параметры:
//   ИсточникПараметровДоступа - ФормаКлиентскогоПриложения, Структура -
//   Наименование - Строка - Наименование приложения.
//   ЧасовойПояс - Строка - часовой пояс приложения.
//   ПраваПользователей - ТаблицаЗначений - таблица с колонками:
//     * Логин - Строка - логин пользователя сервиса.
//     * Пользователь - СправочникСсылка.Пользователи - пользователь к которому будет привязан пользователь сервиса.
//     * Право - Строка - см. МиграцияПриложенийКлиентСервер.ИдентификаторAPIПрава().
//
// Возвращаемое значение:
//   Структура - ключи:
//     * АдресПриложения - Строка - url приложения.
//     * Логин - Строка - логин служебного пользователя.
//     * Пароль - Строка - пароль служебного пользователя.
//     * Код - Число - код области.
//
Функция СоздатьПриложениеДляМиграции(ИсточникПараметровДоступа, Наименование, ЧасовойПояс, ПраваПользователей) Экспорт
	
	ПараметрыДоступа = ПолучитьПараметрыДоступа(ИсточникПараметровДоступа);

	Права = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПраваПользователей Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Право) Тогда
			Продолжить;
		КонецЕсли;
		Право = Новый Структура("login, role, userid");
		Право.login = СтрокаТаблицы.Логин;
		Право.role = МиграцияПриложенийКлиентСервер.ИдентификаторAPIПрава(СтрокаТаблицы.Право);
		Право.userid = Строка(СтрокаТаблицы.Пользователь.УникальныйИдентификатор());
		Права.Добавить(Право);
	КонецЦикла;
	
	Метод = "tenant/create_for_migration";
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("auth", Новый Структура);
	ПараметрыМетода.auth.Вставить("account", ПараметрыДоступа.КодАбонента);
	
	ПараметрыМетода.Вставить("general", Новый Структура);
	Если Не МетодВАдресеПоддерживается(ПараметрыДоступа) Тогда
		ПараметрыМетода.general.Вставить("type", "ext");
		ПараметрыМетода.general.Вставить("method", Метод);
	КонецЕсли;
	ПараметрыМетода.general.Вставить("version", 3);
	
	ПараметрыМетода.Вставить("id", ПараметрыДоступа.КодАбонента);
	ПараметрыМетода.Вставить("application", Метаданные.Имя);
	ПараметрыМетода.Вставить("version", Метаданные.Версия);
	ПараметрыМетода.Вставить("name", Наименование);
	ПараметрыМетода.Вставить("timezone", ЧасовойПояс);
	ПараметрыМетода.Вставить("users", Права);
	
	РезультатВызова = ВызватьМетодПрограммногоИнтерфейса(ПараметрыДоступа, ПараметрыМетода, Метод);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресПриложения", РезультатВызова.tenant.url);
	Результат.Вставить("Логин", РезультатВызова.tenant.login);
	Результат.Вставить("Пароль", РезультатВызова.tenant.password);
	Результат.Вставить("Код", РезультатВызова.tenant.id);
	
	Возврат Результат;
	
КонецФункции

// Получает данные обслуживающей организации в сервисе.
//
// Параметры:
//   ИсточникПараметровДоступа - ФормаКлиентскогоПриложения, Структура -
//
// Возвращаемое значение:
//   Структура - ключи:
//     * Код - Число -
//     * Наименование - Строка -
//     * ЭлектроннаяПочта - Строка - 
//     * Телефон - Строка - 
//
Функция ДанныеОбслуживающейОрганизации(ИсточникПараметровДоступа) Экспорт
	
	ПараметрыДоступа = ПолучитьПараметрыДоступа(ИсточникПараметровДоступа);
	Метод = "account/servant_info";
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("auth", Новый Структура);
	ПараметрыМетода.auth.Вставить("account", ПараметрыДоступа.КодАбонента);
	
	ПараметрыМетода.Вставить("general", Новый Структура);
	Если Не МетодВАдресеПоддерживается(ПараметрыДоступа) Тогда
		ПараметрыМетода.general.Вставить("type", "ext");
		ПараметрыМетода.general.Вставить("method", Метод);
	КонецЕсли;
	ПараметрыМетода.general.Вставить("version", 1);
	
	ПараметрыМетода.Вставить("id", ПараметрыДоступа.КодАбонента);
	
	Результат = Новый Структура("Код, Наименование, ЭлектроннаяПочта, Телефон, ОписаниеОшибки");
	
	Попытка
		
		РезультатВызова = ВызватьМетодПрограммногоИнтерфейса(ПараметрыДоступа, ПараметрыМетода, Метод);
		
		Результат.Код = РезультатВызова.servant.id;
		Результат.Наименование = РезультатВызова.servant.name;
		Результат.ЭлектроннаяПочта = РезультатВызова.servant.email;
		Результат.Телефон = РезультатВызова.servant.phone;
	
	Исключение
		
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Регистрирует в сервисе.
//
// Параметры:
//   ИмяСервера - Строка - имя сервера
//   Наименование - Строка - наименование абонента
//   Логин - Строка -
//   ЭлектроннаяПочта - Строка - адрес электронной почты
//   Пароль - Строка -
//   Телефон - Строка - телефон абонента
//
// Возвращаемое значение:
//   Булево - результат регистрации.
//
Функция Зарегистрироваться(ИмяСервера, Наименование, Логин, ЭлектроннаяПочта, Пароль, Телефон) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("name", Наименование);
	ПараметрыЗапроса.Вставить("login", Логин);
	ПараметрыЗапроса.Вставить("email", ЭлектроннаяПочта);
	ПараметрыЗапроса.Вставить("password", Пароль);
	ПараметрыЗапроса.Вставить("phone", Телефон);
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	Соединение = Новый HTTPСоединение(ИмяСервера, , , , Новый ИнтернетПрокси, 30, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос("/info/hs/migration/register");
	Запрос.УстановитьТелоИзСтроки(ОбъектВJSON(ПараметрыЗапроса));
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось выполнить запрос, код ответа: %1'"), Ответ.КодСостояния));
		Возврат Ложь;
	КонецЕсли;
	
	Результат = JSONВОбъект(Ответ.ПолучитьТелоКакСтроку());
	
	Если Результат.error Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.description);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Подтверждает регистрацию в сервисе.
//
// Параметры:
//   ИмяСервера - Строка - имя сервера
//   КодПодтверждения - Строка - код подтверждения регистрации
//
// Возвращаемое значение:
//   Булево - результат подтверждения регистрации.
//
Функция ПодтвердитьРегистрацию(ИмяСервера, КодПодтверждения) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("code", КодПодтверждения);
		
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	Соединение = Новый HTTPСоединение(ИмяСервера, , , , Новый ИнтернетПрокси, 30, ЗащищенноеСоединение);
	
	Запрос = Новый HTTPЗапрос("/info/hs/migration/activation");
	Запрос.УстановитьТелоИзСтроки(ОбъектВJSON(ПараметрыЗапроса));
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось выполнить запрос, код ответа: %1'"), Ответ.КодСостояния));
		Возврат Ложь;
	КонецЕсли;
	
	Результат = JSONВОбъект(Ответ.ПолучитьТелоКакСтроку());
	
	Если Результат.error Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.description);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ИнтеграцияСПодсистемойПередачаДанных

// Возвращает описание данных логического хранилища.
//
// Параметры:
//  ИдентификаторХранилища - Строка - идентификатор логического хранилища.
//  ИдентификаторДанных    - Строка - идентификатор данных хранилища.
// 
// Возвращаемое значение:
//   Структура - описание состояния задания очереди:
//    * ИмяФайла - Строка - имя файла.
//    * Размер - Число - размер файла в байтах.
//    * Данные - ДвоичныеДанные - двоичные данные файла описания задания.
//
Функция Описание(ИдентификаторХранилища, ИдентификаторДанных) Экспорт
	
	Результат = Новый Структура("Успешно, Комментарий, СостояниеЗагрузки", Истина, "");
	Если ИдентификаторДанных = "status" Тогда
		Результат.СостояниеЗагрузки = СостояниеЗагрузки();
	Иначе
		Результат.Успешно = Ложь;
		Результат.Комментарий = СтрШаблон(НСтр("ru = 'Неподдерживаемый идентификатор данных: %1.'"), ИдентификаторДанных);
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ОбщегоНазначения.ЗначениеВСтрокуXML(Результат));
	
	Описание = Новый Структура;
    Описание.Вставить("ИмяФайла", ИдентификаторДанных);
    Описание.Вставить("Размер", ДвоичныеДанные.Размер());
    Описание.Вставить("Данные", ДвоичныеДанные);
	
	Возврат Описание;
    
КонецФункции

// Возвращает данные логического хранилища.
//
// Параметры:
//  ОписаниеДанных - Структура - описание данных хранилища.
// 
// Возвращаемое значение:
//   ДвоичныеДанные -
//
Функция Данные(ОписаниеДанных) Экспорт
	
	Возврат ОписаниеДанных.Данные;
	
КонецФункции

// Записывает данные в логическое хранилище.
// Выполняет действия:
// - сохраняет файл данных в файловом хранилище
// - планирует задание очереди заданий на обработки файла
// - возвращается идентификатор задания в ответ.
//
// Возвращаемое значение:
//   Структура - состояние загрузки:
//   * id - Структура:
//    ** Успешно - Булево
//    ** Комментарий - Строка
//    ** СостояниеЗагрузки - см. СостояниеЗагрузки
//
Функция Загрузить(ОписаниеДанных) Экспорт
	
	Результат = Новый Структура("Успешно, Комментарий, СостояниеЗагрузки", Истина, "");
	
	Если ОписаниеДанных.ИмяФайла = "message" Тогда
		
		Попытка
			ЗагрузитьСообщение(ОписаниеДанных.Данные);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			РегистрацияОшибки(НСтр("ru = 'Загрузка сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			Результат.Успешно = Ложь;
			Результат.Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	
	ИначеЕсли ОписаниеДанных.ИмяФайла = "cancel" Тогда
		
		Попытка
			ОтменитьЗагрузку();
		Исключение
			Результат.Успешно = Ложь;
			Результат.Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	ИначеЕсли ОписаниеДанных.ИмяФайла = "confirm_reload" Тогда
		
		Попытка
			ПодтвердитьПовторнуюЗагрузку();
		Исключение
			Результат.Успешно = Ложь;
			Результат.Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	Иначе
		
		Результат.Успешно = Ложь;
		Результат.Комментарий = СтрШаблон(НСтр("ru = 'Загрузка файла ""%1"" не поддерживается.'"), ОписаниеДанных.ИмяФайла);
			
	КонецЕсли;
	
	Результат.СостояниеЗагрузки = СостояниеЗагрузки();
	
    Возврат Новый Структура("id", Результат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Загружает данные из каталога.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога.
//   СоответствиеСсылок - Соответствие - коллекция старых и новых ссылок, необходимо сохранять между вызовами.
//   ОбъектыДляОчистки - Соответствие - коллекция полных имен метаданных, необходимо сохранять между вызовами.
//
// Возвращаемое значение:
//   Структура - результат загрузки, ключи:
//     * Успешно - Булево -
//     * ЗагруженоОбъектов - Число - Необязательное. Количество загруженных объектов.
//     * ЭтоПоследнееСообщение - Булево - Необязательное. Истина, если это последнее сообщение.
//
Функция ЗагрузитьДанныеИзКаталога(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки)
	
	Манифест = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "Manifest.xml");
	
	Если Манифест.ИмяКонфигурации <> Метаданные.Имя Тогда
		ВызватьИсключение НСтр("ru = 'Имя конфигурации не совпадает.'");
	КонецЕсли;
	
	Если Манифест.ВерсияКонфигурации <> Метаданные.Версия Тогда
		// Сообщение не может быть загружено.
		Возврат Новый Структура("Успешно", Ложь);		
	КонецЕсли;
	
	ОбъектыВыгруженныеПолностью = Неопределено;
	Если Манифест.Свойство("ОбъектыВыгруженныеПолностью", ОбъектыВыгруженныеПолностью) Тогда
		Шаблон = НСтр("ru = 'Не удалось выгрузить порциями объекты: %1.'", ОбщегоНазначения.КодОсновногоЯзыка());
		Комментарий = СтрШаблон(Шаблон, СтрСоединить(ОбъектыВыгруженныеПолностью, ", "));
		РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), Комментарий);
	КонецЕсли;
	
	ЭтоПоследнееСообщение = Манифест.ЭтоПоследнееСообщение;
	
	ПараметрыЗагрузки = ПараметрыЗагрузки(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки);
	
	ЗагруженоОбъектов = ЗагрузитьПользовательскиеДанные(ПараметрыЗагрузки);
	
	Если ЭтоПоследнееСообщение Тогда
		
		ИсторияРаботыПользователя.ОчиститьВсе();
		
		ОчиститьПользовательскиеДанные(ОбъектыДляОчистки);
		
		ДобавитьПолноправныхПользователейВГруппуАдминистраторыИОбновитьРолиОстальнымПользователям();
		
		ЗагрузитьГраницыПоследовательностей(ПараметрыЗагрузки);
		
		ЗагрузитьНастройкиПользователей(ХранилищеВариантовОтчетов, "ReportsVariantsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеНастроекДанныхФорм, "FormDataSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеОбщихНастроек, "CommonSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеПользовательскихНастроекДинамическихСписков, "DynamicListsUserSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеПользовательскихНастроекОтчетов, "ReportsUserSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеСистемныхНастроек, "SystemSettingsStorage.xml", ПараметрыЗагрузки);
		
		ЗагрузитьСоставСтандартногоИнтерфейсаOData(КаталогЗагрузки);
		
		ЗагрузитьВерсииПодсистем(КаталогЗагрузки);
		
	КонецЕсли;
	
	Возврат Новый Структура("Успешно, ЗагруженоОбъектов, ЭтоПоследнееСообщение", Истина, ЗагруженоОбъектов, ЭтоПоследнееСообщение);
	
КонецФункции

// Выгружает данные в указанный каталог.
//
// Параметры:
//   КаталогВыгрузки - Строка - полное имя каталога, в который нужно выгрузить.
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел, по которому выбираются изменения.
//   НомерСообщения - Число - номер сообщения записывается в манифест.
//   ПоследнийОбъектМетаданных - Строка - полное имя объекта метаданных, если заполнено,
//        то загрузка начнется со следующего объекта.
//   ВыгружатьНастройкиПользователей - Соответствие - коллекция пользователей, настройки которых нужно выгрузить:
//     * Ключ - СправочникСсылка.Пользователи - пользователь, настройки которого нужно выгрузить.
//     * Значение - Строка - новый логин пользователя.
//   ЗавершитьМиграциюАвтоматически - Булево - признак того, что в случае необходимости будет выполнена 
//        попытка установки монопольного режима.
//
// Возвращаемое значение:
//   Структура - результат выполнения, ключи:
//     * НомерСообщения - Число -
//     * ИмяКонфигурации - Строка -
//     * ВерсияКонфигурации - Строка -
//     * ВерсияПлатформы - Строка -
//     * ДлительностьСек - Число - 
//     * КоличествоОбъектов - Число - 
//     * ЭтоПоследнееСообщение - Число - 
//     * ОбъектыВыгруженныеПолностью - Массив - массив строк, необязательное.
//
Функция ВыгрузитьДанныеВКаталог(КаталогВыгрузки, УзелОбмена, НомерСообщения, ПоследнийОбъектМетаданных, ВыгружатьНастройкиПользователей, ЗавершитьМиграциюАвтоматически)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КаталогДанных = КаталогВыгрузки + "Data" + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогДанных);
	
	ПараметрыВыгрузки = ПараметрыВыгрузки(КаталогВыгрузки, КаталогДанных, ВыгружатьНастройкиПользователей);
	
	ВыгруженоОбъектов = ВыгрузитьПользовательскиеДанные(УзелОбмена, НомерСообщения, ПоследнийОбъектМетаданных, ПараметрыВыгрузки);
	
	ЭтоПоследнееСообщение = Ложь;
	Если ВыгруженоОбъектов < ПараметрыВыгрузки.РазмерПорцииДанных Тогда
		Если ЗавершитьМиграциюАвтоматически Тогда
			Попытка
				УстановитьМонопольныйРежим(Истина);
			Исключение
				Комментарий = НСтр("ru = 'Не удалось установить монопольный режим.'", ОбщегоНазначения.КодОсновногоЯзыка());
				РегистрацияПримечания(НСтр("ru = 'Выгрузка'"), Комментарий);
			КонецПопытки;
		КонецЕсли;
		ЭтоПоследнееСообщение = ЗавершитьМиграциюАвтоматически И МонопольныйРежим() И КоличествоИзмененных(УзелОбмена) = 0;
	КонецЕсли;
	
	Если ЭтоПоследнееСообщение Тогда
		
		ВыгрузитьГраницыПоследовательностей(ПараметрыВыгрузки);
		
		ВыгрузитьНастройкиПользователей("ХранилищеВариантовОтчетов", ХранилищеВариантовОтчетов, "ReportsVariantsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеНастроекДанныхФорм", ХранилищеНастроекДанныхФорм, "FormDataSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеОбщихНастроек", ХранилищеОбщихНастроек, "CommonSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеПользовательскихНастроекДинамическихСписков", ХранилищеПользовательскихНастроекДинамическихСписков, "DynamicListsUserSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеПользовательскихНастроекОтчетов", ХранилищеПользовательскихНастроекОтчетов, "ReportsUserSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеСистемныхНастроек", ХранилищеСистемныхНастроек, "SystemSettingsStorage.xml", ПараметрыВыгрузки);
		
		ВыгрузитьСоставСтандартногоИнтерфейсаOData(КаталогВыгрузки);
		
		ВыгрузитьВерсииПодсистем(КаталогВыгрузки);
		
	КонецЕсли;
	
	ВыгрузитьОбщиеДанные(ПараметрыВыгрузки);
		
	ЗаписатьДанныеВФайл(ПараметрыВыгрузки.Данные, КаталогВыгрузки + "Data.xml");
	ЗаписатьДанныеВФайл(ВсеЭтиУзлы(), КаталогВыгрузки + "ThisNodes.xml");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Манифест = Новый Структура;
	Манифест.Вставить("НомерСообщения", НомерСообщения);
	Манифест.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Манифест.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Манифест.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
	Манифест.Вставить("ДлительностьСек", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	Манифест.Вставить("КоличествоОбъектов", ВыгруженоОбъектов);
	Манифест.Вставить("ЭтоПоследнееСообщение", ЭтоПоследнееСообщение);
	
	Если ПараметрыВыгрузки.ОбъектыВыгруженныеПолностью.Количество() > 0 Тогда
		Манифест.Вставить("ОбъектыВыгруженныеПолностью", ПараметрыВыгрузки.ОбъектыВыгруженныеПолностью);
	КонецЕсли;
	
	ЗаписатьДанныеВФайл(Манифест, КаталогВыгрузки + "Manifest.xml");
	
	Возврат Манифест;
	
КонецФункции

// Помещает сообщение в очередь.
//
// Параметры:
//   Источник - Поток, Строка, ДвоичныеДанные - данные сообщения. 
//
Процедура ЗагрузитьСообщение(Источник)
	
	ПроверитьИспользованиеРазделениеСеанса();
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьВыполняетсяЗагрузка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ОчередьЗагрузки
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.ОчередьЗагрузки >= МаксимальнаяОчередьЗагрузки() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Очередь загрузки больше %1'"), МаксимальнаяОчередьЗагрузки());
	КонецЕсли;
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	Каталог = ФайлыБТС.ОбщийКаталогВременныхФайлов() + "AppMigrationIn" + ПолучитьРазделительПути() 
		+ Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧН=0; ЧГ=0;");
	СоздатьКаталог(Каталог);
	ИмяФайла = Каталог + ПолучитьРазделительПути() + Идентификатор + ".zip";
	
	СборщикМусора = РаботаВМоделиСервиса.ЗапланироватьУдалениеФайла(ИмяФайла, 3600);
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		ПереместитьФайл(Источник, ИмяФайла);
	ИначеЕсли ТипЗнч(Источник) = Тип("Поток")
		Или ТипЗнч(Источник) = Тип("ПотокВПамяти") 
		Или ТипЗнч(Источник) = Тип("ФайловыйПоток") Тогда 
		ПотокЗаписи = Новый ФайловыйПоток(ИмяФайла, РежимОткрытияФайла.СоздатьНовый);
		Источник.КопироватьВ(ПотокЗаписи);
		ПотокЗаписи.Закрыть();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДвоичныеДанные") Тогда
		Источник.Записать(ИмяФайла);
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайла);
	ЭлементZipФайла = ЧтениеZipФайла.Элементы.Найти("Manifest.xml");
	Если ЭлементZipФайла = Неопределено Тогда
		ВызватьИсключение "ru = 'Не найден файл Manifest.xml'";
	КонецЕсли;
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	
	ЧтениеZipФайла.Извлечь(ЭлементZipФайла, ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	Манифест = ПрочитатьДанныеИзФайла(ВременныйКаталог + ПолучитьРазделительПути() + "Manifest.xml");
	
	Попытка
		УдалитьФайлы(ВременныйКаталог);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
	КонецПопытки;
	
	Если Манифест.ИмяКонфигурации <> Метаданные.Имя Тогда
		ВызватьИсключение НСтр("ru = 'Имя конфигурации не совпадает.'");
	КонецЕсли;
	
	Если Манифест.ВерсияКонфигурации <> Метаданные.Версия Тогда
		ВызватьИсключение НСтр("ru = 'Версия конфигурации не совпадает.'");
	КонецЕсли;
	
	НомерСообщения = Манифест.НомерСообщения;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МиграцияПриложенийОчередьЗагрузки");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.МиграцияПриложенийОчередьЗагрузки.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Запись.Номер = НомерСообщения;
		Запись.ИмяФайла = ИмяФайла;
		НаборЗаписей.Записать(Ложь);
		ОчередьЗаданий.УдалитьЗадание(СборщикМусора);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Выключает признак загрузки, сама загрузка завершится в регламентном задании.
//
Процедура ОтменитьЗагрузку()
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка	
		ПроверитьВыполняетсяЗагрузка();
		
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		
		НаборЗаписейОбластиДанных = РегистрыСведений.ОбластиДанных.СоздатьНаборЗаписей();
		НаборЗаписейОбластиДанных.Прочитать();
		НаборЗаписейОбластиДанных[0].Статус = Перечисления.СтатусыОбластейДанных.КУдалению;
		НаборЗаписейОбластиДанных.Записать();
		
		УдалитьОчередь();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает состояние загрузки.
// 
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * ИмяКонфигурации - Строка - имя конфигурации.
//     * ВерсияКонфигурации - Строка - версия конфигурации.
//     * ВыполняетсяЗагрузка - Булево - признак что выполняется загрузка.
//     * НомерПринятогоСообщения - Число - количество обработанных сообщений.
//     * ЗагруженоОбъектов - Число - количество загруженных объектов.
//     * ЗавершеноСОшибками - Булево - признак завершения с ошибками.
//     * ОписаниеОшибки - Строка - описание ошибки.
//     * ТребуетсяПовторнаяОтправка - Булево - Истина если требуется отправить повторно данные, которые находятся сейчас
//                                             в очереди.
//
Функция СостояниеЗагрузки()
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	Статус = Новый Структура();
	Статус.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Статус.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Статус.Вставить("ВыполняетсяЗагрузка", Ложь);
	Статус.Вставить("НомерПринятогоСообщения", 0);
	Статус.Вставить("ЗагруженоОбъектов", 0);
	Статус.Вставить("ЗавершеноСОшибками", Ложь);
	Статус.Вставить("ОписаниеОшибки", "");
	Статус.Вставить("ТребуетсяПовторнаяОтправка", Ложь);
	
	СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	СостояниеЗагрузки.Прочитать();
	Если СостояниеЗагрузки.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Статус, СостояниеЗагрузки);
		Статус.ВыполняетсяЗагрузка = Не ЗначениеЗаполнено(СостояниеЗагрузки.ДатаЗавершения);
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Возвращает размер порции данных.
//
// Возвращаемое значение:
//   Число - размер порции.
//
Функция РазмерПорцииДанных() Экспорт
	
	Возврат 10000;
	
КонецФункции

// Возвращает состояние загрузки из сервиса.
//
// Возвращаемое значение:
//   Структура - описание см. СостояниеЗагрузки().
//
Функция СостояниеЗагрузкиИзСервиса(ПараметрыДоступа)
	
	Результат = ПередачаДанныхСервер.ПолучитьИзЛогическогоХранилища(ПараметрыДоступа, "migration", "status");
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить статус.'");
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Результат.ПолноеИмя);
	СостояниеЗагрузки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(Результат.ПолноеИмя);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеОшибки);
	КонецПопытки;
	
	Если СостояниеЗагрузки.Успешно Тогда
		Возврат СостояниеЗагрузки.СостояниеЗагрузки;
	Иначе
		ВызватьИсключение СостояниеЗагрузки.Комментарий;
	КонецЕсли;
	
КонецФункции

// Передает сформированное сообщение в сервис.
//  
// Параметры:
//   ПараметрыДоступа - Структура - описание см. ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище().
//   ИмяФайла - Строка - имя zip файла.
//
// Возвращаемое значение:
//   Структура - описание см. СостояниеЗагрузки().
//
Функция ОтправитьСообщениеВСервис(ПараметрыДоступа, ИмяФайла)
	
	Результат = ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище(ПараметрыДоступа, "migration", ИмяФайла, "message");
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить сообщение.'");
	ИначеЕсли Не Результат.Успешно Тогда
		ВызватьИсключение Результат.Комментарий;
	Иначе 
		Возврат Результат.СостояниеЗагрузки;
	КонецЕсли;
	
КонецФункции

// Отменяет загрузку в сервисе.
//  
// Параметры:
//   ПараметрыДоступа - Структура - описание см. ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище().
//   ИмяФайла - Строка - имя zip файла.
//
// Возвращаемое значение:
//   Структура - описание см. СостояниеЗагрузки().
//
Функция ОтменитьЗагрузкуВСервисе(ПараметрыДоступа)
	
	Результат = ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище(ПараметрыДоступа, "migration", ПолучитьДвоичныеДанныеИзСтроки("cancel"), "cancel");
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отменить загрузку в сервисе.'");
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		Возврат Результат.СостояниеЗагрузки;
	Иначе
		ВызватьИсключение Результат.Комментарий;
	КонецЕсли;
	
КонецФункции

// Подтверждает повторную загрузку в сервисе.
//  
// Параметры:
//   ПараметрыДоступа - Структура - описание см. ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище().
//   ИмяФайла - Строка - имя zip файла.
//
// Возвращаемое значение:
//   Структура - описание см. СостояниеЗагрузки().
//
Функция ПодтвердитьПовторнуюЗагрузкуВСервисе(ПараметрыДоступа)
	
	Результат = ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище(ПараметрыДоступа, "migration", ПолучитьДвоичныеДанныеИзСтроки("confirm_reload"), "confirm_reload");
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось подтвердить повторную загрузку в сервисе.'");
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		Возврат Результат.СостояниеЗагрузки;
	Иначе
		ВызватьИсключение Результат.Комментарий;
	КонецЕсли;
	
КонецФункции

// Возвращает параметры, необходимые для выгрузки.
//
// Параметры:
//   КаталогВыгрузки - Строка - полное имя каталога, в который производится выгрузка.
//   КаталогДанных - Строка - полное имя каталога, в который производится выгрузка данных, всегда каталог "Data" в
//                            каталоге выгрузки.
//   ВыгружатьНастройкиПользователей - Соответствие - коллекция пользователей, настройки которых нужно выгружать.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * КаталогВыгрузки - Строка - полное имя каталога, в который производится выгрузка.
//     * КаталогДанных - Строка - полное имя каталога, в который производится выгрузка данных, всегда каталог "Data" в
//                                каталоге выгрузки.
//     * ВыгружатьНастройкиПользователей - Соответствие - коллекция пользователей, настройки которых нужно выгружать.
//     * Данные - см. ТаблицаДанных
//     * СсылкиОбщихДанных - Соответствие из КлючИЗначение - коллекция всех общих ссылок, которые будут обнаружены:
//       ** Ключ - СправочникСсылка
//       ** Значение - Булево - Истина
//     * ТипыСопоставляемыхОбщихДанныхПоПолямПоиска - см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска
//     * ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени - см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени
//     * ЗапрещенныеТипыОбщихДанных - см. МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных
//     * СправочникиФайлов - см. РаботаСФайламиСлужебныйВМоделиСервисаПовтИсп.СправочникиФайловИОбъектыХранения
//     * РазмерПорцииДанных - Число
//     * ОбъектыВыгруженныеПолностью - Массив
//
Функция ПараметрыВыгрузки(КаталогВыгрузки, КаталогДанных, ВыгружатьНастройкиПользователей)
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	ПараметрыВыгрузки.Вставить("КаталогДанных", КаталогДанных);
	ПараметрыВыгрузки.Вставить("ВыгружатьНастройкиПользователей", ВыгружатьНастройкиПользователей);
	ПараметрыВыгрузки.Вставить("Данные", ТаблицаДанных());
	ПараметрыВыгрузки.Вставить("СсылкиОбщихДанных", Новый Соответствие);
	ПараметрыВыгрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПолямПоиска", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска());
	ПараметрыВыгрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени());
	ПараметрыВыгрузки.Вставить("ЗапрещенныеТипыОбщихДанных", МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных());
	ПараметрыВыгрузки.Вставить("СправочникиФайлов", РаботаСФайламиСлужебныйВМоделиСервисаПовтИсп.СправочникиФайловИОбъектыХранения());
	ПараметрыВыгрузки.Вставить("РазмерПорцииДанных", РазмерПорцииДанных());
	ПараметрыВыгрузки.Вставить("ОбъектыВыгруженныеПолностью", Новый Массив);
	ПараметрыВыгрузки.Вставить("Сериализатор", Новый СериализаторXDTO(ПолучитьФабрикуСУказаниемТипов()));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ПолучитьФабрикуСУказаниемТипов()
	
	Типы = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыТребующиеАннотациюСсылокПриВыгрузке();
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	УказанныеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		УказанныеТипы.Вставить(XMLТип(Тип.СтандартныеРеквизиты.Ссылка.Тип.Типы()[0]).ИмяТипа, Истина);
	КонецЦикла;
	
	ПространствоИмен = Новый Соответствие;
	ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	РазыменовательПространствИменDOM = Новый РазыменовательПространствИменDOM(ПространствоИмен);
	ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
	
	Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath,
		РазыменовательПространствИменDOM);
	Результат = Запрос.Вычислить(Схема.ДокументDOM);

	Пока Истина Цикл
		
		УзелПоля = Результат.ПолучитьСледующий();
		Если УзелПоля = Неопределено Тогда
			Прервать;
		КонецЕсли;
		АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
		ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
		
		Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелПоля.УстановитьАтрибут("nillable", "true");
		УзелПоля.УдалитьАтрибут("type");
	КонецЦикла;
	
	СхемаСАннотациейТипов = ПолучитьИмяВременногоФайла("xsd");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(СхемаСАннотациейТипов);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(СхемаСАннотациейТипов);
	
	Возврат Фабрика;
	
КонецФункции

// Выгружает данные, зарегистрированные в плане обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   СостояниеВыгрузки - РегистрСведенийМенеджерЗаписи.МиграцияПриложенийСостояниеВыгрузки - состояние выгрузки.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьПользовательскиеДанные(УзелОбмена, НомерСообщения, ПоследнийОбъектМетаданных, ПараметрыВыгрузки)
	
	ШаблонНачалоВыгрузки = НСтр("ru = 'Выгрузка объекта: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонОкончаниеВыгрузки = НСтр("ru = 'Выгружен объект: %1, Количество: %2, Длительность (сек): %3'", ОбщегоНазначения.КодОсновногоЯзыка());
	ВсегоОбъектов = 0;
	ОсталосьВыгрузить = ПараметрыВыгрузки.РазмерПорцииДанных;
	Для Каждого ОбъектМетаданных Из ПорядокВыборкиМетаданных(ПоследнийОбъектМетаданных) Цикл
		
		Комментарий = СтрШаблон(ШаблонНачалоВыгрузки, ОбъектМетаданных.ПолноеИмя());
		РегистрацияПримечания(НСтр("ru = 'Статистика выгрузки'"), Комментарий);
		
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			ВыгруженоОбъектов = ВыгрузитьКонстанту(ОбъектМетаданных, УзелОбмена, НомерСообщения, ПараметрыВыгрузки);
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			ВыгруженоОбъектов = ВыгрузитьСсылочныйТип(ОбъектМетаданных, УзелОбмена, НомерСообщения, ОсталосьВыгрузить, ПараметрыВыгрузки);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			ВыгруженоОбъектов = ВыгрузитьНаборЗаписей(ОбъектМетаданных, УзелОбмена, НомерСообщения, ОсталосьВыгрузить, ПараметрыВыгрузки);
			
		Иначе
			
			ВызватьИсключениеНеизвестныйОбъектМетаданных(ОбъектМетаданных);
			
		КонецЕсли;
		
		Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000;
		Комментарий = СтрШаблон(ШаблонОкончаниеВыгрузки, ОбъектМетаданных.ПолноеИмя(), ВыгруженоОбъектов, СериализаторXDTO.XMLСтрока(Длительность));
		РегистрацияПримечания(НСтр("ru = 'Статистика выгрузки'"), Комментарий);
		
		ВсегоОбъектов = ВсегоОбъектов + ВыгруженоОбъектов;
		ОсталосьВыгрузить = ПараметрыВыгрузки.РазмерПорцииДанных - ВсегоОбъектов;
				
		// Ограничение порции по количеству записей.
		Если ОсталосьВыгрузить <= 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследнийОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	Возврат ВсегоОбъектов;
	
КонецФункции

// Выгружает константу.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхКонстанта - объект, который нужно выгрузить.
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   ПараметрыВыгрузки - см. ПараметрыВыгрузки
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьКонстанту(ОбъектМетаданных, Узел, НомерСообщения, ПараметрыВыгрузки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст = СтрЗаменить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Проверка
	|ИЗ
	|	ИмяТаблицы КАК Изменения
	|ГДЕ
	|	Изменения.Узел = &Узел
	|	И Изменения.НомерСообщения ЕСТЬ NULL", "ИмяТаблицы", ОбъектМетаданных.ПолноеИмя() + "." + "Изменения");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, ОбъектМетаданных);
	Если Не ВыборкаДанных.Следующий() Тогда
		Возврат 0;
	КонецЕсли;
	
	Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
	
	Объект = ВыборкаДанных.Получить();
	
	Отказ = Ложь;
	МиграцияПриложенийПереопределяемый.ПриВыгрузкеОбъекта(Объект, Отказ);
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Значение) = Тип("ХранилищеЗначения") Тогда
		ВыгрузитьХранилищеЗначений(Объект.Значение, Идентификатор, 0, ПараметрыВыгрузки);
	КонецЕсли;
	
	ЗаписатьДанныеВФайл(Объект, ПараметрыВыгрузки.КаталогДанных + Идентификатор + ".xml");
	
	ДобавитьВспомогательныеДанныеИзФайлаXML(ПараметрыВыгрузки.КаталогДанных + Идентификатор + ".xml", ПараметрыВыгрузки);
	
	СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
	СтрокаТаблицы.ОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтрокаТаблицы.Идентификатор = Идентификатор;
	СтрокаТаблицы.КоличествоЗаписей = 1;
	
	Возврат 1;
	
КонецФункции

// Выгружает ссылочный объект.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент - 
//                    - ОбъектМетаданныхПланВидовХарактеристик, ОбъектМетаданныхПланСчетов -
//                    - ОбъектМетаданныхПланВидовРасчета, ОбъектМетаданныхЗадача -
//                    - ОбъектМетаданныхБизнесПроцесс - объект, который нужно выгрузить.
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьСсылочныйТип(ОбъектМетаданных, Узел, НомерСообщения, ОсталосьВыгрузить, ПараметрыВыгрузки)

	ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Изменения.Ссылка КАК Ссылка
	|ИЗ
	|	ИмяТаблицы КАК Изменения
	|ГДЕ
	|	Изменения.Узел = &Узел
	|	И Изменения.НомерСообщения ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1", Формат(ОсталосьВыгрузить, "ЧГ=0"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", СтрШаблон("%1.%2", ИмяТаблицы, "Изменения"));
	
	ФильтрВыборки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Если ФильтрВыборки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ОбработчикФайлов = ПараметрыВыгрузки.СправочникиФайлов.СправочникиФайлов[ИмяТаблицы];
	ЭтоСправочникФайлов = ОбработчикФайлов <> Неопределено;
	Если ЭтоСправочникФайлов Тогда
		ОбработчикФайлов = ОбщегоНазначения.ОбщийМодуль(ОбработчикФайлов);
		КоличествоФайлов = 0;
	КонецЕсли;
	
	КоличествоФайловХранилищ = 0;
	РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты);
	Если ЭтоСправочникФайлов Тогда
		РеквизитыСХранилищем.Удалить(РеквизитыСХранилищем.Найти("ФайлХранилище"));
	КонецЕсли;
	
	ТабличныеЧастиСХранилищем = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл // ОбъектМетаданных
		Реквизиты = РеквизитыСХранилищем(ТабличнаяЧасть.Реквизиты);
		Если Реквизиты.Количество() Тогда
			ТабличныеЧастиСХранилищем.Вставить(ИмяОбъектаМетаданных(ТабличнаяЧасть), Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
	ИмяФайла = Идентификатор + ".xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	КоличествоОбъектов = 0;
	
	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, ФильтрВыборки);
	Пока ВыборкаДанных.Следующий() Цикл
		
		Объект = ВыборкаДанных.Получить();
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриВыгрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
		Если ТипЗнч(Объект) <> Тип("УдалениеОбъекта") Тогда
		
			Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
				ВыгрузитьХранилищеЗначений(Объект[Реквизит], Идентификатор, КоличествоФайловХранилищ, ПараметрыВыгрузки);
			КонецЦикла;
			
			Если ЭтоСправочникФайлов И Не Объект.ЭтоГруппа Тогда
				КаталогФайлов = ПараметрыВыгрузки.КаталогДанных + Идентификатор + "-files";
				ИмяФайлаВложения = СформироватьИмяФайла(КаталогФайлов, КоличествоФайлов) + ".bin";
				Объект.Том = Неопределено;
				ПолноеИмяФайлаВложения = КаталогФайлов + ПолучитьРазделительПути() + ИмяФайлаВложения;
				Попытка
					ОбработчикФайлов.ВыгрузитьФайл(Объект, ПолноеИмяФайлаВложения);
					Объект.ФайлХранилище = Новый ХранилищеЗначения(ИмяФайлаВложения);
				Исключение
					Объект.ФайлХранилище = Неопределено;
					РегистрацияОшибки(
						НСтр("ru = 'Выгрузка справочника файлов'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						Объект.Метаданные(),
						Объект.Ссылка);
					Инфо = Новый Файл(ПолноеИмяФайлаВложения);
					Если Инфо.Существует() Тогда
						УдалитьФайлы(ПолноеИмяФайлаВложения);
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
			
			Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСХранилищем Цикл
				Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
					Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
						ВыгрузитьХранилищеЗначений(СтрокаТабличнойЧасти[Реквизит], Идентификатор, КоличествоФайловХранилищ, ПараметрыВыгрузки);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыВыгрузки.Сериализатор.ЗаписатьXML(ЗаписьXML, Объект, "Object", НазначениеТипаXML.Явное);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	Если КоличествоОбъектов = 0 Тогда
		
		УдалитьФайлы(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
		
	Иначе
		
		ДобавитьВспомогательныеДанныеИзФайлаXML(ПараметрыВыгрузки.КаталогДанных + ИмяФайла, ПараметрыВыгрузки);
				
		СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ИмяТаблицы;
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.КоличествоЗаписей = КоличествоОбъектов;
		
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

// Выгружает набор записей.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных - РегистрСведений, РегистрНакопления, РегистрРасчета, 
//	   РегистрБухгалтерии, Последовательность - объект, который нужно выгрузить.
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   НомерСообщения - Число - номер сообщения выгрузки. 
//   ОсталосьВыгрузить - Число - 
//   ПараметрыВыгрузки - Структура - см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьНаборЗаписей(ОбъектМетаданных, Узел, НомерСообщения, ОсталосьВыгрузить, ПараметрыВыгрузки) Экспорт
	
	ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
	
	ФильтрИзменений = ФильтрИзмененийНабораЗаписей(ОбъектМетаданных, Узел, ОсталосьВыгрузить);
	
	Если ТипЗнч(ФильтрИзменений) = Тип("Массив") И ФильтрИзменений.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) 
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
		
		РеквизитыСХранилищем = Новый Массив;
		
	Иначе 
		
		РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты);
		Для Каждого Реквизит Из РеквизитыСХранилищем(ОбъектМетаданных.Ресурсы) Цикл
			РеквизитыСХранилищем.Добавить(Реквизит);
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоФайловХранилищ = 0;
	
	Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
	ИмяФайла = Идентификатор + ".xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	КоличествоОбъектов = 0;
	
	Пока Истина Цикл
		// Размер фильтра может быть меньше размера порции, поэтому здесь цикл.
		ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, ФильтрИзменений);
		
		// Временный обход ошибки платформы: некоторые регистры сведений не могут быть выгружены порциями.
		Если ТипЗнч(ФильтрИзменений) = Тип("Массив") Тогда
			Если Не ВыборкаДанных.Следующий() Тогда
				ПараметрыВыгрузки.ОбъектыВыгруженныеПолностью.Добавить(ОбъектМетаданных.ПолноеИмя());
				ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, ОбъектМетаданных);
			Иначе
				ВыборкаДанных.Сбросить();
			КонецЕсли;
		КонецЕсли;
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			КоличествоОбъектов = КоличествоОбъектов + 1;
			
			Объект = ВыборкаДанных.Получить();
			
			Отказ = Ложь;
			МиграцияПриложенийПереопределяемый.ПриВыгрузкеОбъекта(Объект, Отказ);
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыСХранилищем.Количество() Тогда
				Для Каждого Запись Из Объект Цикл
					Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
						ВыгрузитьХранилищеЗначений(Запись[Реквизит], Идентификатор, КоличествоФайловХранилищ, ПараметрыВыгрузки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыВыгрузки.Сериализатор.ЗаписатьXML(ЗаписьXML, Объект, "Object", НазначениеТипаXML.Явное);
			
		КонецЦикла;
		
		Если ТипЗнч(ФильтрИзменений) = Тип("ОбъектМетаданных")
			Или КоличествоОбъектов >= ОсталосьВыгрузить Тогда
			Прервать;
		КонецЕсли;
		
		ФильтрИзменений = ФильтрИзмененийНабораЗаписей(ОбъектМетаданных, Узел, ОсталосьВыгрузить - КоличествоОбъектов);
		
		Если ТипЗнч(ФильтрИзменений) = Тип("Массив") И ФильтрИзменений.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	Если КоличествоОбъектов = 0 Тогда
		
		УдалитьФайлы(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
		
	Иначе
		
		ДобавитьВспомогательныеДанныеИзФайлаXML(ПараметрыВыгрузки.КаталогДанных + ИмяФайла, ПараметрыВыгрузки);
		
		СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ИмяТаблицы;
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.КоличествоЗаписей = КоличествоОбъектов;
		
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

// Возвращает фильтр изменений для набора записей.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных -
//   Узел - ПланОбменаСсылка.МиграцияПриложений -
//   ОсталосьВыгрузить - Число -
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных -
//
Функция ФильтрИзмененийНабораЗаписей(ОбъектМетаданных, Узел, ОсталосьВыгрузить)
	
	Если Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
		ИмяТаблицы = СтрШаблон("%1.%2.%3", "РегистрРасчета", ОбъектМетаданных.Родитель().Имя, ОбъектМетаданных.Имя);
	Иначе
		ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	ИмяТаблицы КАК Изменения
	|ГДЕ
	|	Изменения.Узел = &Узел
	|	И Изменения.НомерСообщения ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", СтрШаблон("%1.%2", ИмяТаблицы, "Изменения"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Количество = 0 Тогда
			Возврат Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) 
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
		// Некоторые объекты могут быть выбраны только полностью.
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	РазмерПорции = ОсталосьВыгрузить;
	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		РазмерПорции = Мин(1000, РазмерПорции);
	КонецЕсли;
	
	ПоляОтбора = ПоляОтбораНабораЗаписей(ОбъектМетаданных);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Если ПоляОтбора.Количество() = 0 Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Поля
	|ИЗ
	|	ИмяТаблицы КАК Изменения
	|ГДЕ
	|	Изменения.Узел = &Узел
	|	И Изменения.НомерСообщения ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1", Формат(РазмерПорции, "ЧГ=0"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", СтрШаблон("%1.%2", ИмяТаблицы, "Изменения"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрСоединить(ПоляОтбора, ", "));
	
	Выборка = Запрос.Выполнить().Выбрать();
	ФильтрИзменений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		Для Каждого ПолеОтбора Из ПоляОтбора Цикл
			ЭлементОтбора = НаборЗаписей.Отбор[ПолеОтбора]; // ЭлементОтбора
			ЭлементОтбора.Установить(Выборка[ПолеОтбора]);
		КонецЦикла;
		ФильтрИзменений.Добавить(НаборЗаписей);
	КонецЦикла;
	
	Возврат ФильтрИзменений;
	
КонецФункции

// Выгружает хранилище в файл.
//
// Параметры:
//   Реквизит - ХранилищеЗначения - значение, которое нужно выгрузить.
//   Идентификатор - Строка - идентификатор выгружаемого объекта.
//   КоличествоФайлов - Число - переменная для накопления количества файлов по данному объекту метаданных.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьХранилищеЗначений(Реквизит, Идентификатор, КоличествоФайлов, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(Реквизит) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Значение = Реквизит.Получить();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Значение = Неопределено
		Или (ОбщегоНазначенияБТС.ЭтоПримитивныйТип(ТипЗнч(Значение)) И Не ЗначениеЗаполнено(Значение)) Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогХранилищ = ПараметрыВыгрузки.КаталогДанных + Идентификатор + "-storages";
	
	ИмяФайла = СформироватьИмяФайла(КаталогХранилищ, КоличествоФайлов);
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		ИмяФайла = ИмяФайла + ".bin";
		Значение.Записать(КаталогХранилищ + ПолучитьРазделительПути() + ИмяФайла);
	Иначе
		ИмяФайла = ИмяФайла + ".xml";
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(КаталогХранилищ + ПолучитьРазделительПути() + ИмяФайла);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
		
		ДобавитьВспомогательныеДанныеИзФайлаXML(КаталогХранилищ + ПолучитьРазделительПути() + ИмяФайла, ПараметрыВыгрузки);
		
	КонецЕсли;
	
	Реквизит = Новый ХранилищеЗначения(ИмяФайла);
	
КонецПроцедуры

// Выгружает общие данные по накопленным ссылкам.
//
// Параметры:
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьОбщиеДанные(ПараметрыВыгрузки) Экспорт
	
	Если ПараметрыВыгрузки.СсылкиОбщихДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СсылкиПоТипам = Новый Соответствие;
	Для Каждого КлючИЗначение Из ПараметрыВыгрузки.СсылкиОбщихДанных Цикл
		Ссылка = КлючИЗначение.Ключ;
		Список = СсылкиПоТипам[ТипЗнч(Ссылка)];
		Если Список = Неопределено Тогда
			Список = Новый Массив;
			СсылкиПоТипам.Вставить(ТипЗнч(Ссылка), Список);
		КонецЕсли;
		Список.Добавить(ссылка);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СсылкиПоТипам Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		
		Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
		ИмяФайла = Идентификатор + ".xml";
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
		ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
		ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
		
		Для Каждого Ссылка Из КлючИЗначение.Значение Цикл
			
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ПараметрыВыгрузки.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени[КлючИЗначение.Ключ] <> Неопределено
				И Не Объект.Предопределенный Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Обнаружена ссылка на общие данные без поля поиска. Тип данных: %1'"), Объект.Метаданные().ПолноеИмя());
			КонецЕсли;
			
			ПараметрыВыгрузки.Сериализатор.ЗаписатьXML(ЗаписьXML, Объект, "Object", НазначениеТипаXML.Явное);
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
		ДобавитьВспомогательныеДанныеИзФайлаXML(ПараметрыВыгрузки.КаталогДанных + ИмяФайла, ПараметрыВыгрузки);
		
		СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.КоличествоЗаписей = КлючИЗначение.Значение.Количество();
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает границы всех последовательностей.
//
// Параметры:
//   ПараметрыВыгрузки - см. ПараметрыВыгрузки
//
Процедура ВыгрузитьГраницыПоследовательностей(ПараметрыВыгрузки)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогВыгрузки + "SequenceBounds.xml");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	РазмерПорции = 10000;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Последовательности Цикл
		
		Запрос = Новый Запрос;
		ОтборЗапроса = Новый Структура;
		
		Если ОбъектМетаданных.Измерения.Количество() = 0 Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Период, Регистратор
			|ИЗ
			|	ИмяТаблицы";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", 
				СтрШаблон("%1.%2.%3", "Последовательность", ОбъектМетаданных.Имя, "Границы"));
			
			ПараметрыВыгрузки.Сериализатор.ЗаписатьXML(ЗаписьXML, 
				Запрос.Выполнить().Выгрузить(), 
				ОбъектМетаданных.Имя, 
				НазначениеТипаXML.Явное);
			
		Иначе
			
			Измерения = Новый Массив;
			ПоляЗапроса = Новый Массив;
			ПоляЗапроса.Добавить("ЕСТЬNULL(Период, ДАТАВРЕМЯ(1,1,1)) КАК Период");
			ПоляЗапроса.Добавить("Регистратор");
			Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
				ПоляЗапроса.Добавить(Измерение.Имя);
				Измерения.Добавить(Измерение.Имя);
				ОтборЗапроса.Вставить(Измерение.Имя);
				Запрос.УстановитьПараметр(Измерение.Имя, Неопределено);
			КонецЦикла;
			
			ИзмеренияСтрокой = СтрСоединить(Измерения, ",");
			
			// Пример условия:
			// ГДЕ    (Измерение1 > &Измерение1) 
			//    ИЛИ (Измерение1 = &Измерение1 И Измерение2 > &Измерение2)
			//    ИЛИ (Измерение1 = &Измерение1 И Измерение2 = &Измерение2 И Измерение3 > &Измерение3)
			//    ИЛИ < ... >
			УсловияЗапроса = Новый Массив;
			Для ИндексИзмерения = 0 По Измерения.ВГраница() Цикл
				УсловияПоИ = Новый Массив;
				// Условия на равенство.
				Для ИндексРавно = 0 По ИндексИзмерения - 1 Цикл
					УсловияПоИ.Добавить(Измерения[ИндексРавно] + " = &" + Измерения[ИндексРавно]);
				КонецЦикла;
				// Условие на больше (оно всегда одно).
				УсловияПоИ.Добавить(Измерения[ИндексИзмерения] + " > &" + Измерения[ИндексИзмерения]);
				
				УсловияЗапроса.Добавить("(" + СтрСоединить(УсловияПоИ, " И ") + ")");
			КонецЦикла;
			
			// Курсорный запрос.
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	&Поля
			|ИЗ
			|	ИмяТаблицы
			|ГДЕ 
			|	&Условия" + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + ИзмеренияСтрокой;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "1", Формат(РазмерПорции, "ЧГ=0"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрСоединить(ПоляЗапроса, ","));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", 
				СтрШаблон("%1.%2.%3", "Последовательность", ОбъектМетаданных.Имя, "Границы"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", СтрСоединить(УсловияЗапроса, " ИЛИ "));
			
		КонецЕсли;
		
		Пока Истина Цикл
			
			ЗаполнитьЗначенияСвойств(Запрос.Параметры, ОтборЗапроса);
			Границы = Запрос.Выполнить().Выгрузить();
			
			Если Границы.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Данные = Новый ТаблицаЗначений;
			Для Каждого Колонка Из Границы.Колонки Цикл
				Если Колонка.Имя = "Регистратор" Тогда
					Данные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения));
				Иначе
					Данные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения, , "Null"));
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТаблицы Из Границы Цикл
				ЗаполнитьЗначенияСвойств(Данные.Добавить(), СтрокаТаблицы);
			КонецЦикла;
			
			ПараметрыВыгрузки.Сериализатор.ЗаписатьXML(ЗаписьXML, Данные, ОбъектМетаданных.Имя, НазначениеТипаXML.Явное);
			
			Если Границы.Количество() < РазмерПорции Тогда
				Прервать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборЗапроса, Границы[Границы.Количество() - 1]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ДобавитьВспомогательныеДанныеИзФайлаXML(ПараметрыВыгрузки.КаталогВыгрузки + "SequenceBounds.xml", ПараметрыВыгрузки);
	
КонецПроцедуры

// Выгружает настройки пользователей ИБ.
//
// Параметры:
//   ХранилищеНастроек - СтандартноеХранилищеНастроекМенеджер - настройки, которые нужно выгрузить.
//   ИмяФайла - Строка - краткое имя файла, в который нужно выгрузить настройки.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьНастройкиПользователей(НаименованиеХранилищаНастроек, ХранилищеНастроек, ИмяФайла, ПараметрыВыгрузки)
	
	Если ТипЗнч(ХранилищеНастроек) <> Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогВыгрузки + ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Настройки");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			// Сопоставление при загрузке невозможно.
			Продолжить;
		КонецЕсли;
		
		ИмяПользователя = ПараметрыВыгрузки.ВыгружатьНастройкиПользователей.Получить(Пользователь);
		Если ИмяПользователя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ХранилищеНастроек.Выбрать(Новый Структура("Пользователь", ПользовательИБ.Имя));
		Пока Истина Цикл
			
			Попытка
				Если Не Выборка.Следующий() Тогда
					Прервать;
				КонецЕсли;
			Исключение
				ШаблонОшибки = НСтр("ru = 'Выгрузка настройки %1 (пользователь: %2, ключ объекта: %3, ключ настроек: %4 ) пропущена по причине: %5'");
				Комментарий = СтрШаблон(ШаблонОшибки, 
					НаименованиеХранилищаНастроек, 
					Выборка.Пользователь, 
					Выборка.КлючОбъекта, 
					Выборка.КлючНастроек, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), Комментарий);
				Продолжить;
			КонецПопытки;
			
			Если Выборка.Настройки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипНастроек = ТипЗнч(Выборка.Настройки);
			
			Если ТипНастроек = Тип("ИзбранноеРаботыПользователя") Тогда
				
				Для Каждого Элемент Из Выборка.Настройки Цикл // ЭлементИзбранногоРаботыПользователя
					НавигационнаяСсылкаСтруктура = ПреобразоватьНавигационнуюСсылкуВСтруктуру(Элемент.НавигационнаяСсылка);
					Если НавигационнаяСсылкаСтруктура <> Неопределено Тогда
						ЗаписьXMLНавигационнаяСсылка = Новый ЗаписьXML;
						ЗаписьXMLНавигационнаяСсылка.УстановитьСтроку();
						СериализаторXDTO.ЗаписатьXML(ЗаписьXMLНавигационнаяСсылка, НавигационнаяСсылкаСтруктура, НазначениеТипаXML.Явное);
						ДобавитьВспомогательныеДанныеИзСтрокиXML(ЗаписьXMLНавигационнаяСсылка.Закрыть(), ПараметрыВыгрузки);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Настройка = Новый Структура("КлючОбъекта, КлючНастроек, Настройки,  Представление");
			ЗаполнитьЗначенияСвойств(Настройка, Выборка);
			Настройка.Вставить("Пользователь", ИмяПользователя);
			
			ТекстXML = СериализоватьНастройкуВСтроку(Настройка, "Настройка");
			ЗаписьXML.ЗаписатьБезОбработки(ТекстXML);
			
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ДобавитьВспомогательныеДанныеИзФайлаXML(ПараметрыВыгрузки.КаталогВыгрузки + ИмяФайла, ПараметрыВыгрузки);
	
КонецПроцедуры

Функция СериализоватьНастройкуВСтроку(Значение, ПолноеИмя)
	
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, ПолноеИмя, НазначениеТипаXML.Явное);
		Возврат ЗаписьXML.Закрыть();
	Исключение
	КонецПопытки;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(Значение), ПолноеИмя, НазначениеТипаXML.Явное);
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Выгружает состав стандартного интерфейса.
//
// Параметры:
//   ПараметрыВыгрузки - Строка - полное имя каталога.
//
Процедура ВыгрузитьСоставСтандартногоИнтерфейсаOData(КаталогВыгрузки)
	
	Состав = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из ПолучитьСоставСтандартногоИнтерфейсаOData() Цикл
		Состав.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	ЗаписатьДанныеВФайл(Состав, КаталогВыгрузки + "StandardODataInterfaceContent.xml");
	
КонецПроцедуры

// Выгружает версии подсистем.
//
// Параметры:
//   ПараметрыВыгрузки - Строка - полное имя каталога.
//
Процедура ВыгрузитьВерсииПодсистем(КаталогВыгрузки)
	
	ВерсииПодсистем = Новый Структура;
	
	ОписанияПодсистем = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам;
	Для Каждого ОписаниеПодсистемы Из ОписанияПодсистем Цикл
		ВерсииПодсистем.Вставить(ОписаниеПодсистемы.Ключ, ОбновлениеИнформационнойБазы.ВерсияИБ(ОписаниеПодсистемы.Ключ));
	КонецЦикла;
	
	ЗаписатьДанныеВФайл(ВерсииПодсистем, КаталогВыгрузки + "SubsystemsVersions.xml");
	
КонецПроцедуры

// Возвращает параметры для загрузки.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога, из которого выполняется загрузка.
//   СоответствиеСсылок - Соответствие - соответствие старых и новых ссылок.
//   ОбъектыДляОчистки - Соответствие - коллекция полных имен метаданных, которые требуется очистить.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * КаталогЗагрузки - Строка - полное имя каталога, из которого выполняется загрузка.
//     * КаталогДанных - Строка - полное имя каталога, в котором находятся данные, это каталог Data в каталоге загрузки.
//     * ТаблицаДанных - см. ТаблицаДанных
//     * ОбщиеДанные - Соответствие - соответствие старых и новых ссылок общих данных.
//     * ТипыУзловОбмена - см. ТипыУзловОбмена
//     * СоответствиеСсылок - Соответствие - соответствие старых и новых ссылок.
//     * Разделитель - Число - значение текущего разделителя.
//     * СправочникиФайлов - см. РаботаСФайламиСлужебныйВМоделиСервисаПовтИсп.СправочникиФайловИОбъектыХранения 
//     * ОбъектыДляОчистки - Соответствие - коллекция полных имен метаданных, которые требуется очистить.
//     * ТипыСопоставляемыхОбщихДанныхПоПолямПоиска - см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска
//     * ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени - см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени
//     * ЗапрещенныеТипыОбщихДанных - см. МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных
//     * ТипыПересоздаваемыхСсылок - см. МиграцияПриложенийПовтИсп.ТипыПересоздаваемыхСсылок
//     * СовместноИспользуемыеОбъектыМетаданных - см. МиграцияПриложенийПовтИсп.СовместноИспользуемыеОбъектыМетаданных
//
Функция ПараметрыЗагрузки(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки)
	
	КаталогДанных = КаталогЗагрузки + "Data" + ПолучитьРазделительПути();
	ТаблицаДанных = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "Data.xml");
	
	Если ТаблицаДанных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует файл Data.xml'");
	КонецЕсли;
	
	ОбщиеДанные = ЗагрузитьОбщиеДанные(КаталогДанных, ТаблицаДанных);
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("КаталогЗагрузки", КаталогЗагрузки);
	ПараметрыЗагрузки.Вставить("КаталогДанных", КаталогДанных);
	ПараметрыЗагрузки.Вставить("ТаблицаДанных", ТаблицаДанных);
	ПараметрыЗагрузки.Вставить("ОбщиеДанные", ОбщиеДанные);
	ПараметрыЗагрузки.Вставить("ТипыУзловОбмена", ТипыУзловОбмена());
	ПараметрыЗагрузки.Вставить("СоответствиеСсылок", ПрочитатьСоответствиеСсылок(СоответствиеСсылок, КаталогЗагрузки));
	ПараметрыЗагрузки.Вставить("Разделитель", ПараметрыСеанса.ОбластьДанныхЗначение);
	ПараметрыЗагрузки.Вставить("СправочникиФайлов", РаботаСФайламиСлужебныйВМоделиСервисаПовтИсп.СправочникиФайловИОбъектыХранения());
	ПараметрыЗагрузки.Вставить("ОбъектыДляОчистки", ОбъектыДляОчистки);
	ПараметрыЗагрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПолямПоиска", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска());
	ПараметрыЗагрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени());
	ПараметрыЗагрузки.Вставить("ЗапрещенныеТипыОбщихДанных", МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных());
	ПараметрыЗагрузки.Вставить("ТипыПересоздаваемыхСсылок", МиграцияПриложенийПовтИсп.ТипыПересоздаваемыхСсылок());
	ПараметрыЗагрузки.Вставить("СовместноИспользуемыеОбъектыМетаданных", МиграцияПриложенийПовтИсп.СовместноИспользуемыеОбъектыМетаданных());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Загружает пользовательские данные.
//
// Параметры:
//   ПараметрыЗагрузки - см. ПараметрыЗагрузки
//
// Возвращаемое значение:
//   Число - количество загруженных объектов.
//
Функция ЗагрузитьПользовательскиеДанные(ПараметрыЗагрузки)
	
	ШаблонНачалоЗагрузки = НСтр("ru = 'Загружается объект: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонОкончаниеЗагрузки = НСтр("ru = 'Загружен объект: %1, Количество: %2, Длительность (сек): %3'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗагружаемыеОбъекты = МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты();
	ВсегоОбъектов = 0;
	
	Для Каждого СтрокаДанных Из ПараметрыЗагрузки.ТаблицаДанных Цикл
		
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ЗаменитьСсылкиПриЗагрузкеИзФайлаXML(ПараметрыЗагрузки.КаталогДанных + СтрокаДанных.Идентификатор + ".xml", ПараметрыЗагрузки);
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(СтрокаДанных.ОбъектМетаданных);
		
		Комментарий = СтрШаблон(ШаблонНачалоЗагрузки, ОбъектМетаданных.ПолноеИмя());
		РегистрацияПримечания(НСтр("ru = 'Статистика загрузки'"), Комментарий);
		
		Если ЗагружаемыеОбъекты[ОбъектМетаданных] = Неопределено Тогда
			
			Продолжить;
		
		ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			ЗагруженоОбъектов = ЗагрузитьКонстанту(ОбъектМетаданных, СтрокаДанных.Идентификатор, ПараметрыЗагрузки);
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			ЗагруженоОбъектов = ЗагрузитьСсылочныйТип(ОбъектМетаданных, СтрокаДанных.Идентификатор, ПараметрыЗагрузки);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			ЗагруженоОбъектов = ЗагрузитьНаборЗаписей(ОбъектМетаданных, СтрокаДанных.Идентификатор, ПараметрыЗагрузки);
			
		Иначе
			
			ВызватьИсключениеНеизвестныйОбъектМетаданных(ОбъектМетаданных);
			
		КонецЕсли;
		
		Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000;
		Комментарий = СтрШаблон(ШаблонОкончаниеЗагрузки, ОбъектМетаданных.ПолноеИмя(), ЗагруженоОбъектов, Длительность);
		РегистрацияПримечания(НСтр("ru = 'Статистика загрузки'"), Комментарий);
		
		ВсегоОбъектов = ВсегоОбъектов + ЗагруженоОбъектов;
		
	КонецЦикла;
	
	Возврат ВсегоОбъектов;
	
КонецФункции

// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхКонстанта - объект, который нужно выгрузить.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - см. ПараметрыЗагрузки
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ЗагрузитьКонстанту(ОбъектМетаданных, Идентификатор, ПараметрыЗагрузки)
	
	ПараметрыЗагрузки.ОбъектыДляОчистки.Удалить(ОбъектМетаданных.ПолноеИмя());
	
	СовместноРазделен = ПараметрыЗагрузки.СовместноИспользуемыеОбъектыМетаданных[ОбъектМетаданных] <> Неопределено;
	
	Объект = ПрочитатьДанныеИзФайла(ПараметрыЗагрузки.КаталогДанных + Идентификатор + ".xml");
	ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
	
	Если СовместноРазделен Тогда
		Объект.ОбластьДанныхВспомогательныеДанные = ПараметрыЗагрузки.Разделитель;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Значение) = Тип("ХранилищеЗначения") Тогда
		ЗагрузитьХранилищеЗначений(Объект.Значение, Идентификатор, ПараметрыЗагрузки);
	КонецЕсли;
	
	Отказ = Ложь;
	МиграцияПриложенийПереопределяемый.ПриЗагрузкеОбъекта(Объект, Отказ);
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Объект.Записать();
	
	Возврат 1;
	
КонецФункции

// Загружает ссылочный объект.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент - 
//                    - ОбъектМетаданныхПланВидовХарактеристик, ОбъектМетаданныхПланСчетов - 
//                    - ОбъектМетаданныхПланВидовРасчета, ОбъектМетаданныхЗадача -
//                    - ОбъектМетаданныхБизнесПроцесс - объект, который нужно выгрузить.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - см. ПараметрыЗагрузки
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ЗагрузитьСсылочныйТип(ОбъектМетаданных, Идентификатор, ПараметрыЗагрузки)
	
	ЭтоСправочникПрофилиГруппДоступа = ОбъектМетаданных = Метаданные.Справочники.ПрофилиГруппДоступа;
	Если ЭтоСправочникПрофилиГруппДоступа Тогда
		НедоступныеРоли = НедоступныеРоли();
	КонецЕсли;
	
	ЭтоСправочникПользователи = ОбъектМетаданных = Метаданные.Справочники.Пользователи;
	
	ОбработчикФайлов = ПараметрыЗагрузки.СправочникиФайлов.СправочникиФайлов[ОбъектМетаданных.ПолноеИмя()];
	ЭтоСправочникФайлов = ОбработчикФайлов <> Неопределено;
	Если ЭтоСправочникФайлов Тогда
		ОбработчикФайлов = ОбщегоНазначения.ОбщийМодуль(ОбработчикФайлов);
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ОбъектыДляОчистки[ОбъектМетаданных.ПолноеИмя()] <> Неопределено Тогда
		ПараметрыЗагрузки.ОбъектыДляОчистки.Удалить(ОбъектМетаданных.ПолноеИмя());
		ОчиститьСсылочныйТип(ОбъектМетаданных);
	КонецЕсли;
	
	СовместноРазделен = ПараметрыЗагрузки.СовместноИспользуемыеОбъектыМетаданных[ОбъектМетаданных] <> Неопределено;
	
	РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты);
	Если ЭтоСправочникФайлов Тогда
		РеквизитыСХранилищем.Удалить(РеквизитыСХранилищем.Найти("ФайлХранилище"));
	КонецЕсли;
	
	ТабличныеЧастиСХранилищем = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Реквизиты = РеквизитыСХранилищем(ТабличнаяЧасть.Реквизиты);
		Если Реквизиты.Количество() Тогда
			ТабличныеЧастиСХранилищем.Вставить(ТабличнаяЧасть.Имя, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогДанных + Идентификатор + ".xml");
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
	КонецЕсли;	
	
	КоличествоОбъектов = 0;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML); // СправочникОбъект, ДокументОбъект
		
		Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Продолжить;
		КонецЕсли;
		
		ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
		
		Если ЭтоСправочникПрофилиГруппДоступа Тогда
			Для ОбратныйИндекс = 1 - Объект.Роли.Количество() По 0 Цикл
				Если НедоступныеРоли[Объект.Роли[-ОбратныйИндекс].Роль] <> Неопределено Тогда
					Объект.Роли.Удалить(-ОбратныйИндекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СовместноРазделен Тогда
			Объект.ОбластьДанныхВспомогательныеДанные = ПараметрыЗагрузки.Разделитель;
		КонецЕсли;
		
		Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
			ЗагрузитьХранилищеЗначений(Объект[Реквизит], Идентификатор, ПараметрыЗагрузки);
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСХранилищем Цикл
			Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
				Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
					ЗагрузитьХранилищеЗначений(СтрокаТабличнойЧасти[Реквизит], Идентификатор, ПараметрыЗагрузки);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если ЭтоСправочникПользователи Тогда
			Объект.ИдентификаторПользователяСервиса = Неопределено;
		ИначеЕсли ЭтоСправочникФайлов И Не Объект.ЭтоГруппа И Объект.ФайлХранилище.Получить() <> Неопределено Тогда
			ОбработчикФайлов.ЗагрузитьФайл(Объект, ПараметрыЗагрузки.КаталогДанных + Идентификатор + "-files" + ПолучитьРазделительПути() + Объект.ФайлХранилище.Получить());
		КонецЕсли;
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриЗагрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		
		Объект.Записать();
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат КоличествоОбъектов
	
КонецФункции

// Очищает ссылочный тип:
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент -
//                    - ОбъектМетаданныхПланВидовХарактеристик, ОбъектМетаданныхПланСчетов -
//                    - ОбъектМетаданныхПланВидовРасчета, ОбъектМетаданныхЗадача -
//                    - ОбъектМетаданныхБизнесПроцесс - объект, который нужно выгрузить.
//
Процедура ОчиститьСсылочныйТип(ОбъектМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	&Таблица", "&Таблица", ОбъектМетаданных.ПолноеИмя());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Загружает набор записей.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхРегистрСведений, ОбъектМетаданныхРегистрНакопления -
//                    - ОбъектМетаданныхРегистрРасчета, ОбъектМетаданныхРегистрБухгалтерии -
//                    - ОбъектМетаданныхПоследовательность - объект, который нужно выгрузить.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - см. ПараметрыЗагрузки
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ЗагрузитьНаборЗаписей(ОбъектМетаданных, Идентификатор, ПараметрыЗагрузки)
	
	Если ПараметрыЗагрузки.ОбъектыДляОчистки[ОбъектМетаданных.ПолноеИмя()] <> Неопределено Тогда
		
		ПараметрыЗагрузки.ОбъектыДляОчистки.Удалить(ОбъектМетаданных.ПолноеИмя());
		ОчиститьНаборЗаписей(ОбъектМетаданных);
		
	КонецЕсли;
	
	СовместноРазделен = ПараметрыЗагрузки.СовместноИспользуемыеОбъектыМетаданных[ОбъектМетаданных] <> Неопределено;
	
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) 
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
		РеквизитыСХранилищем = Новый Массив;
	Иначе
		РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Ресурсы);
		Для Каждого Реквизит Из РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты) Цикл
			РеквизитыСХранилищем.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогДанных + Идентификатор + ".xml");
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
	КонецЕсли;	
	
	КоличествоОбъектов = 0;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
		
		Если СовместноРазделен Тогда
			Объект.Отбор.ОбластьДанныхВспомогательныеДанные.Значение = ПараметрыЗагрузки.Разделитель;
		КонецЕсли;
		Если СовместноРазделен Или РеквизитыСХранилищем.Количество() > 0 Тогда 
			Для Каждого Запись Из Объект Цикл
				Если СовместноРазделен Тогда
					Запись.ОбластьДанныхВспомогательныеДанные = ПараметрыЗагрузки.Разделитель;
				КонецЕсли;
				Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
					ЗагрузитьХранилищеЗначений(Запись[Реквизит], Идентификатор, ПараметрыЗагрузки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриЗагрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.Записать();
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат КоличествоОбъектов;
	
КонецФункции

// Очищает набор записей.
// 
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхРегистрСведений, ОбъектМетаданныхРегистрНакопления - 
//                    - ОбъектМетаданныхРегистрРасчета, ОбъектМетаданныхПерерасчет - 
//                    - ОбъектМетаданныхРегистрБухгалтерии, ОбъектМетаданныхПоследовательность - объект для выгрузки.
//
Процедура ОчиститьНаборЗаписей(ОбъектМетаданных)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) 
		И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.Записать();
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектПерерасчета КАК ОбъектПерерасчета
		|ИЗ
		|	&Таблица", "&Таблица", СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), "." + "Перерасчет" + ".", "."));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
			// @skip-warning СвойствоНеОбнаружено - ошибка проверки.
			ОтборОбъектПересчета = НаборЗаписей.Отбор.ОбъектПерерасчета; // ЭлементОтбора
			ОтборОбъектПересчета.Установить(Выборка.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистратор КАК Регистратор
		|ИЗ
		|	&Таблица", "&Таблица", ОбъектМетаданных.ПолноеИмя());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
			// @skip-warning СвойствоНеОбнаружено - ошибка проверки.
			ОтборРегистратор = НаборЗаписей.Отбор.Регистратор; // ЭлементОтбора
			ОтборРегистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	// Дополнительно очищаются границы последовательности с битыми ссылками.
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) И ОбъектМетаданных.Измерения.Количество() Тогда
		
		Измерения = Новый Массив;
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Измерения.Добавить(Измерение.Имя);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Поля
		|ИЗ
		|	ИмяТаблицы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрСоединить(Измерения, ","));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ОбъектМетаданных.ПолноеИмя() + "." + "Границы");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() Тогда
			
			МетаданныеДокумента = Неопределено;
			Для Каждого МетаданныеДокумента Из ОбъектМетаданных.Документы Цикл
				Прервать;
			КонецЦикла;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
			ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор);
			
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
			// @skip-warning СвойствоНеОбнаружено - ошибка проверки.
			ОтборРегистратор = НаборЗаписей.Отбор.Регистратор; // ЭлементОтбора
			ОтборРегистратор.Установить(ДокументСсылка);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			НаборЗаписей.Записать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает общие данные из каталога.
//
// Параметры:
//  КаталогДанных - Строка - полное имя каталога.
//  ТаблицаДанных - см. ТаблицаДанных
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - соответствие старых и новых ссылок общих данных:
//   * Ключ - 
//
Функция ЗагрузитьОбщиеДанные(КаталогДанных, ТаблицаДанных) Экспорт
	
	// Ключ - старая ссылка, Значение - новая ссылка.
	ОбщиеДанные = Новый Соответствие;
	
	ОбщиеДанныеСопоставляемыеПоПолямПоиска = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке();
	
	Для Каждого ОбъектМетаданных Из ПорядокСопоставленияОбщихДанных() Цикл
		
		НайденнаяСтрока = ТаблицаДанных.Найти(ОбъектМетаданных.ПолноеИмя(), "ОбъектМетаданных");
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СопоставитьПоПолямПоиска = ОбщиеДанныеСопоставляемыеПоПолямПоиска.Найти(ОбъектМетаданных) <> Неопределено;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КаталогДанных + НайденнаяСтрока.Идентификатор + ".xml");
		ЧтениеXML.ПерейтиКСодержимому();
		
		ТаблицаДанных.Удалить(НайденнаяСтрока);
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
			ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
		КонецЕсли;
		
		Объекты = Новый Массив;
		
		ЧтениеXML.Прочитать();
		Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
		    Объекты.Добавить(Объект);
			
			Если Объекты.Количество() = 10000 Тогда
				Если СопоставитьПоПолямПоиска Тогда
					СопоставитьОбщиеДанныеПоПолямПоиска(ОбъектМетаданных, Объекты, ОбщиеДанные);
				Иначе
					СопоставитьОбщиеДанныеПоПредопределенномуИмени(ОбъектМетаданных, Объекты, ОбщиеДанные);
				КонецЕсли;
				Объекты.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		ЧтениеXML.Закрыть();
		
		Если Объекты.Количество() > 0 Тогда
			Если СопоставитьПоПолямПоиска Тогда
				СопоставитьОбщиеДанныеПоПолямПоиска(ОбъектМетаданных, Объекты, ОбщиеДанные);
			Иначе
				СопоставитьОбщиеДанныеПоПредопределенномуИмени(ОбъектМетаданных, Объекты, ОбщиеДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщиеДанные;
		
КонецФункции

// Загружает хранилища значений в реквизит.
//
// Параметры:
//   Реквизит - ХранилищеЗначения - значение реквизита.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - см. ПараметрыЗагрузки
//
Процедура ЗагрузитьХранилищеЗначений(Реквизит, Идентификатор, ПараметрыЗагрузки) Экспорт
	
	Если ТипЗнч(Реквизит) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИмяФайла = Реквизит.Получить();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(ИмяФайла) <> Тип("Строка") Или ПустаяСтрока(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ПараметрыЗагрузки.КаталогДанных + Идентификатор + "-storages" + ПолучитьРазделительПути() + ИмяФайла;
	
	Если СтрЗаканчиваетсяНа(ИмяФайла, ".bin") Тогда
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		Реквизит = Новый ХранилищеЗначения(ДвоичныеДанные);
		
	Иначе
		
		ЗаменитьСсылкиПриЗагрузкеИзФайлаXML(ПолноеИмяФайла, ПараметрыЗагрузки);
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		Значение = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Реквизит = Новый ХранилищеЗначения(Значение);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает настройки пользователей.
//
// Параметры:
//   ХранилищеНастроек - СтандартноеХранилищеНастроекМенеджер - хранилище, в которое загружаются настройки.
//   ИмяФайла - Строка - короткое имя файла.
//   ПараметрыЗагрузки - см. ПараметрыЗагрузки
//
Процедура ЗагрузитьНастройкиПользователей(ХранилищеНастроек, ИмяФайла, ПараметрыЗагрузки)
	
	Если ТипЗнч(ХранилищеНастроек) <> Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка всех настроек.
	ХранилищеНастроек.Удалить(Неопределено, Неопределено, Неопределено);
	
	Файл = Новый Файл(ПараметрыЗагрузки.КаталогЗагрузки + ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьСсылкиПриЗагрузкеИзФайлаXML(Файл.ПолноеИмя, ПараметрыЗагрузки);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогЗагрузки + ИмяФайла);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Настройки" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Настройки"".'"));
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Настройка = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Если ТипЗнч(Настройка) = Тип("ХранилищеЗначения") Тогда
			Настройка = Настройка.Получить();
		КонецЕсли;
		
		Если ТипЗнч(Настройка.Настройки) = Тип("ИзбранноеРаботыПользователя") Тогда
			НовоеИзбранное = Новый ИзбранноеРаботыПользователя;
			Для Каждого Элемент Из Настройка.Настройки Цикл // ЭлементИзбранногоРаботыПользователя
				НавигационнаяСсылкаСтруктура = ПреобразоватьНавигационнуюСсылкуВСтруктуру(Элемент.НавигационнаяСсылка);
				Если НавигационнаяСсылкаСтруктура <> Неопределено Тогда
					Для Каждого ЭлементЗамены Из НавигационнаяСсылкаСтруктура.Замена Цикл
						НовоеЗначение = УникальныйИдентификаторВСтроку32(ПолучитьСсылкуПриЗагрузку(ТипЗнч(ЭлементЗамены.Значение), Строка(ЭлементЗамены.Значение.УникальныйИдентификатор()), ПараметрыЗагрузки));
						НавигационнаяСсылкаСтруктура.НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылкаСтруктура.НавигационнаяСсылка, ЭлементЗамены.Ключ, НовоеЗначение);
					КонецЦикла;
					Элемент.НавигационнаяСсылка = НавигационнаяСсылкаСтруктура.НавигационнаяСсылка;
				КонецЕсли;
				НовыйЭлемент = Новый ЭлементИзбранногоРаботыПользователя;
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				НовоеИзбранное.Добавить(НовыйЭлемент);
			КонецЦикла;
			Настройка.Настройки = НовоеИзбранное;
		КонецЕсли;
		
		ОписаниеНастроек = Новый ОписаниеНастроек;
		ОписаниеНастроек.Представление = Настройка.Представление;
		ХранилищеНастроек.Сохранить(Настройка.КлючОбъекта, Настройка.КлючНастроек, Настройка.Настройки, ОписаниеНастроек, Настройка.Пользователь);
	КонецЦикла;
		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Загружает границы последовательности из файла.
//
// Параметры:
// 	ПараметрыЗагрузки - см. ПараметрыЗагрузки
Процедура ЗагрузитьГраницыПоследовательностей(ПараметрыЗагрузки)
	
	Файл = Новый Файл(ПараметрыЗагрузки.КаталогЗагрузки + "SequenceBounds.xml");
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьСсылкиПриЗагрузкеИзФайлаXML(Файл.ПолноеИмя, ПараметрыЗагрузки);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогЗагрузки + "SequenceBounds.xml");
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		ИмяПоследовательности = ЧтениеXML.Имя;
		Границы = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Отбор = Новый Структура;
		Для Каждого Измерение Из Метаданные.Последовательности[ИмяПоследовательности].Измерения Цикл
			Отбор.Вставить(ИмяОбъектаМетаданных(Измерение));
		КонецЦикла;
		
		Для Каждого Граница Из Границы Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Граница);
			МоментВремени = Новый МоментВремени(Граница.Период, Граница.Регистратор);
			Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремени, Отбор);
		КонецЦикла;
		
	КонецЦикла;
		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Загружает состав стандартного интерфейса.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога.
//
Процедура ЗагрузитьСоставСтандартногоИнтерфейсаOData(КаталогЗагрузки)
	
	Файл = Новый Файл(КаталогЗагрузки + "StandardODataInterfaceContent.xml");
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Состав = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "StandardODataInterfaceContent.xml");
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из Состав Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
		
	УстановитьСоставСтандартногоИнтерфейсаOData(ОбъектыМетаданных);
	
КонецПроцедуры

// Загружает версии подсистем.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога.
//
Процедура ЗагрузитьВерсииПодсистем(КаталогЗагрузки)
	
	ВерсииПодсистем = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "SubsystemsVersions.xml");
	
	Для Каждого ВерсияПодсистемы Из ВерсииПодсистем Цикл
		ОбновлениеИнформационнойБазыСлужебный.УстановитьВерсиюИБ(ВерсияПодсистемы.Ключ, ВерсияПодсистемы.Значение, (ВерсияПодсистемы.Ключ = Метаданные.Имя));
		ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ПриОтметкеРегистрацииОтложенныхОбработчиковОбновления(ВерсияПодсистемы.Ключ, Истина, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Записывает данные в файл, данные при этом сериализуются в XML.
//
// Параметры:
//   Данные - Произвольный - любой сериализуемый в XML тип.
//   ИмяФайла - Строка - полное имя файла.
//
Процедура ЗаписатьДанныеВФайл(Данные, ИмяФайла) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные, НазначениеТипаXML.Явное);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Читает данные из файла.
//
// Параметры:
//   ИмяФайла - Строка - полное имя файла.
//
// Возвращаемое значение:
//   Произвольный - любой сериализуемый в XML тип.
//
Функция ПрочитатьДанныеИзФайла(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат Данные;
	
КонецФункции

// Проверяет использование разделения сеанса, если разделение не используется, то вызывается исключение.
//
Процедура ПроверитьИспользованиеРазделениеСеанса()
	
	Если Не РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение возможно только в разделенном сеансе.'");
	КонецЕсли;
	
КонецПроцедуры

// Очищает очередь загрузки.
//
// Параметры:
//
Процедура УдалитьОчередь()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МиграцияПриложенийОчередьЗагрузки.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(Выборка.ИмяФайла);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(Выборка.ИмяФайла);
			Исключение
				РаботаВМоделиСервиса.ЗапланироватьУдалениеФайла(Выборка.ИмяФайла, 0);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.МиграцияПриложенийОчередьЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Конструктор таблицы данных.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ОбъектМетаданных - Строка - полное имя метаданного.
//     * Идентификатор - Строка - идентификатор объекта, порядковый номер приведенный к строковому представлению.
//     * КоличествоЗаписей - Число - количество выгруженных объектов.
//
Функция ТаблицаДанных() Экспорт
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ОбъектМетаданных", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("КоличествоЗаписей", Новый ОписаниеТипов("Число"));
	
	Возврат Данные;
	
КонецФункции

Процедура ДобавитьВспомогательныеДанныеИзФайлаXML(ИмяФайла, ПараметрыВыгрузки) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ДобавитьВспомогательныеДанныеИзXML(ЧтениеXML, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ДобавитьВспомогательныеДанныеИзСтрокиXML(Строка, ПараметрыВыгрузки)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Строка);
	
	ДобавитьВспомогательныеДанныеИзXML(ЧтениеXML, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ДобавитьВспомогательныеДанныеИзXML(ЧтениеXML, ПараметрыВыгрузки)
	
	ТипЗначения = Неопределено;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТипЗначения = Неопределено;
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				Если ЧтениеXML.ЛокальноеИмя = "type" 
					И ЧтениеXML.URIПространстваИмен = "http://www.w3.org/2001/XMLSchema-instance"  Тогда
					Части = СтрРазделить(ЧтениеXML.Значение, ":");
					Если Части.Количество() = 1 Тогда
						Префикс = "";
						ИмяТипа = Части[0];
					Иначе
						Префикс = Части[0];
						ИмяТипа = Части[1];
					КонецЕсли;
					
					Если Не ЧтениеXML.НайтиURIПространстваИмен(Префикс) = "http://v8.1c.ru/8.1/data/enterprise/current-config" 
						Или (ПараметрыВыгрузки.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска.Получить(Тип(ИмяТипа)) = Неопределено 
						И ПараметрыВыгрузки.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени.Получить(Тип(ИмяТипа)) = Неопределено) Тогда
						ТипЗначения = Неопределено;
					Иначе
						ТипЗначения = Тип(ИмяТипа);	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗначения <> Неопределено И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ПараметрыТипа = Новый Массив;
			ПараметрыТипа.Добавить(Новый УникальныйИдентификатор(ЧтениеXML.Значение));
			Значение = Новый(ТипЗначения, ПараметрыТипа);
			Если Не Значение.Пустая() Тогда
				ПараметрыВыгрузки.СсылкиОбщихДанных.Вставить(Значение, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Формирует имя файла с учетом подкаталога, согласно правилу, что в каталоге должно быть не больше 1000 файлов.
//
// Параметры:
//   Каталог - Строка - полное имя каталога, используется для создания подкаталога.
//   КоличествоФайлов - Число - переменная в которой накапливается количество файлов в каталоге.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция СформироватьИмяФайла(Каталог, КоличествоФайлов) Экспорт
	
	ИмяФайла = Формат(КоличествоФайлов % 1000, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
	НомерКаталога = Цел(КоличествоФайлов / 1000);
	Подкаталог = ?(НомерКаталога = 0, "", Формат(НомерКаталога, "ЧГ=0") + ПолучитьРазделительПути());
	
	Если КоличествоФайлов % 1000 = 0 Тогда
		СоздатьКаталог(Каталог + ПолучитьРазделительПути() + Подкаталог);
	КонецЕсли;
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
	Возврат Подкаталог + ИмяФайла;
	
КонецФункции

// Записывает соответствие часто используемых пространств имен, это немного уменьшает размер xml.
//
// Параметры:
//   ЗаписьXML - ЗаписьXML -
//
Процедура ЗаписатьСоответствиеПространствИмен(ЗаписьXML) Экспорт
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("en", "http://v8.1c.ru/8.1/data/enterprise");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("cc", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
КонецПроцедуры

// Возвращает все типы узлов обмена.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - коллекция типов узлов:
//   * Ключ - Тип
//   * Значение - Булево
//
Функция ТипыУзловОбмена() Экспорт
	
	Типы = Новый Соответствие;
	
	Для Каждого ПланОбмена Из ПланыОбмена Цикл
		Типы.Вставить(ТипЗнч(ПланОбмена.ПустаяСсылка()), Истина);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

// Возвращает коллекцию узлов планов обмена, у которых ЭтотУзел = Истина;
//
// Возвращаемое значение:
//   Массив из ПланОбменаСсылка
//
Функция ВсеЭтиУзлы() Экспорт
	
	Узлы = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыОбмена Цикл
		Узлы.Добавить(ПланыОбмена[ОбъектМетаданных.Имя].ЭтотУзел());
	КонецЦикла;
	
	Возврат Узлы;
	
КонецФункции

// Возвращает коллекцию имен реквизитов, которые содержат тип ХранилищеЗначений.
//
// Параметры:
//   Реквизиты - КоллекцияОбъектовМетаданных - коллекция реквизитов.
//
// Возвращаемое значение:
//   Массив из Строка - массив реквизитов с типом ХранилищеЗначения.
//
Функция РеквизитыСХранилищем(Реквизиты) Экспорт
	
	РеквизитыСХранилищем = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			РеквизитыСХранилищем.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыСХранилищем;
	
КонецФункции

// Ищет соответствие для каждой ссылки общих данных по предопределенному имени.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхПланВидовХарактеристик - 
//					  - ОбъектМетаданныхПланВидовРасчета - объект метаданных, для которого необходимо выполнить сопоставление.
//   Объекты - Массив - массив ссылок, для которых необходимо выполнить сопоставление.
//   ОбщиеДанные - Соответствие - коллекция куда помещается соответствие ссылок.
//
Процедура СопоставитьОбщиеДанныеПоПредопределенномуИмени(ОбъектМетаданных, Объекты, ОбщиеДанные) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Для Каждого Объект Из Объекты Цикл
		Ссылка = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Объект.ПолучитьСсылкуНового());
		ОбщиеДанные.Вставить(Ссылка, МенеджерОбъекта[Объект.ИмяПредопределенныхДанных]);
	КонецЦикла;
	
КонецПроцедуры

// Ищет соответствие для каждой ссылки общих данных по ключевым полям поиска.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданныхСправочник, ОбъектМетаданныхПланВидовХарактеристик - 
//					  - ОбъектМетаданныхПланВидовРасчета - объект метаданных, для которого необходимо выполнить сопоставление.
//  Объекты - Массив - массив ссылок, для которых необходимо выполнить сопоставление.
//  ОбщиеДанные - Соответствие из КлючИЗначение - коллекция, куда помещается соответствие ссылок:
//   * Ключ - ЛюбаяСсылка
//   * Значение - ЛюбаяСсылка
//
Процедура СопоставитьОбщиеДанныеПоПолямПоиска(ОбъектМетаданных, Объекты, ОбщиеДанные) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Поля = МенеджерОбъекта.ПоляЕстественногоКлюча();
	ПоляОбъектов = СтрСоединить(Поля, ", ");
	УсловияСоединения = Новый Массив;
	ПоляЗамены = Новый Массив;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Ссылка", ТипСсылочногоОбъекта(ОбъектМетаданных));
	Для Каждого Поле Из Поля Цикл
		ТипПоля = ТипПоляПоиска(ОбъектМетаданных, Поле);
		ТаблицаОбъектов.Колонки.Добавить(Поле, ТипПоля);
		УсловияСоединения.Добавить(СтрШаблон("%1.%3 = %2.%3", "ТаблицаОбъектов", "ТаблицаСправочника", Поле));
		// Замены ссылки
		Для Каждого Тип Из ТипПоля.Типы() Цикл
			Если Метаданные.НайтиПоТипу(Тип) <> Неопределено Тогда
				ПоляЗамены.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Объект Из Объекты Цикл
		Для Каждого Поле Из ПоляЗамены Цикл
			НовоеЗначение = ОбщиеДанные[Объект[Поле]];
			Если НовоеЗначение <> Неопределено Тогда
				Объект[Поле] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = ТаблицаОбъектов.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Ссылка) Тогда
			НоваяСтрока.Ссылка = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЦикла;
	
	// Поле ИмяПредопределенныхДанных нельзя использовать в условиях соединения
	Если Поля.Найти("ИмяПредопределенныхДанных") = Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Ссылка КАК Ссылка,
		|	&ПоляОбъектов
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Ссылка КАК СтараяСсылка,
		|	ТаблицаСправочника.Ссылка КАК НоваяСсылка
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСправочника КАК ТаблицаСправочника
		|		ПО &УсловияСоединения";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСправочника", ОбъектМетаданных.ПолноеИмя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОбъектов", ПоляОбъектов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияСоединения", СтрСоединить(УсловияСоединения, " И "));

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщиеДанные.Вставить(Выборка.СтараяСсылка, Выборка.НоваяСсылка);
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	&ПоляОбъектов
		|ИЗ
		|	&ТаблицаСправочника КАК ТаблицаСправочника";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСправочника", ОбъектМетаданных.ПолноеИмя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОбъектов", ПоляОбъектов);
		ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
		ТаблицаСправочника.Индексы.Добавить(ПоляОбъектов);

		Для Каждого Объект Из ТаблицаОбъектов Цикл
			Поиск = Новый Структура(ПоляОбъектов);
			ЗаполнитьЗначенияСвойств(Поиск, Объект);
			НайденныеСтроки = ТаблицаСправочника.НайтиСтроки(Поиск);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОбщиеДанные.Вставить(Объект.Ссылка, НайденныеСтроки[0].Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает порядок сопоставления общих данных.
//
// Возвращаемое значение:
//   Массив - массив объектов метаданных
//
Функция ПорядокСопоставленияОбщихДанных()
	
	ТипыОбщихДанных = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке();
		
	Граф = Новый Соответствие;
	
	// Заполнение вершин графа.
	Для Каждого ОбъектМетаданных Из ТипыОбщихДанных Цикл
		Граф.Вставить(ОбъектМетаданных, Новый Структура("Объект, Зависимости, Цвет", ОбъектМетаданных, Новый Массив, 0));
	КонецЦикла;
	Для Каждого Тип Из МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип.Ключ);
		Граф.Вставить(ОбъектМетаданных, Новый Структура("Объект, Зависимости, Цвет", ОбъектМетаданных, Новый Массив, 0));
	КонецЦикла;
	
	// Заполнение ребер графа.
	Для Каждого ОбъектМетаданных Из ТипыОбщихДанных Цикл
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Для Каждого ПолеПоиска Из МенеджерОбъекта.ПоляЕстественногоКлюча() Цикл
			Для Каждого Тип Из ТипПоляПоиска(ОбъектМетаданных, ПолеПоиска).Типы() Цикл
				НайденныйОбъект = Метаданные.НайтиПоТипу(Тип);
				Если НайденныйОбъект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗависимостиОбъектов = Граф[ОбъектМетаданных].Зависимости; // Массив
				ЗависимостиОбъектов.Добавить(НайденныйОбъект);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Топологическая сортировка.
	Порядок = Новый Массив;
	Для Каждого Вершина Из Граф Цикл
		ПоискВГлубину(Граф, Вершина.Значение, Порядок);
	КонецЦикла;
	
	Возврат Порядок;
	
КонецФункции

// Алгоритм "Поиск в глубину" (рекурсивный).
//
// Параметры:
//   Граф - Соответствие из КлючИЗначение- коллекция объектов, их зависимостей и цвета:
//     * Ключ - Произвольный - ключ используется для быстрого поиска.
//     * Значение - Структура:
//         ** Объект - Произвольный - объект, для которого строится зависимость.
//         ** Зависимости - Массив - массив объектов, которые используются в Объект.
//         ** Цвет - Число - 0,1,2 - белый, серый, черный.
//   Вершина - Структура - описание см. параметр Граф.Значение.
//   Порядок - Массив Из ОбъектМетаданных - массив объектов метаданных, после выполнения будет содержать результат.
//
Процедура ПоискВГлубину(Граф, Вершина, Порядок) Экспорт
	
	// Если вершина "серая", значит найден цикл, топологическая сортировка невозможна.
	Если Вершина.Цвет = 1 Тогда
		
		ВызватьИсключение НСтр("ru = 'Рекурсивная зависимость.'");
		
	ИначеЕсли Вершина.Цвет = 0 Тогда
		
		// При входе вершина становится "серой".
		Вершина.Цвет = 1;
		
		// Из каждой вершины проводим обход в глубину.
		Для Каждого Объект Из Вершина.Зависимости Цикл
			НоваяВершина = Граф[Объект];
			Если НоваяВершина <> Неопределено Тогда
				ПоискВГлубину(Граф, НоваяВершина, Порядок);
			КонецЕсли;
		КонецЦикла;
		
		// При выходе вершина становится "черной".
		Вершина.Цвет = 2;
		// И одновременно заносится в окончательный список.
		Порядок.Добавить(Вершина.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает тип поля по имени.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных - объект, поле которого нужно проанализировать.
//   ИмяПоля - Строка - имя поля.
//
// Возвращаемое значение:
//   ОписаниеТипов - тип поля.
//
Функция ТипПоляПоиска(ОбъектМетаданных, ИмяПоля) Экспорт
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяПоля Тогда
			Возврат Реквизит.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Реквизит = ОбъектМетаданных.Реквизиты.Найти(ИмяПоля);
	Если Реквизит <> Неопределено Тогда
		Возврат Реквизит.Тип;
	КонецЕсли;
	
	ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяПоля);
	Если ОбщийРеквизит <> Неопределено И ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать Тогда
		ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
			Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто 
			И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать Тогда
			Возврат ОбщийРеквизит.Тип;			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Поле %1 не может использоваться в качестве поля естественного ключа объекта %2:
		|поле объекта не обнаружено'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ИмяПоля,
		ОбъектМетаданных.ПолноеИмя());
	
КонецФункции

// Удаляет все записи указанных объектов из базы данных.
//
// Параметры:
//   ОбъектыДляОчистки - Соответствие - в качестве ключа ОбъектМетаданных, который нужно очистить.
//
Процедура ОчиститьПользовательскиеДанные(ОбъектыДляОчистки) Экспорт
	
	Для Каждого КлючИЗначение Из ОбъектыДляОчистки Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(КлючИЗначение.Ключ);
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			МенеджерЗначения = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = Неопределено;
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			МенеджерЗначения.Записать();
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			ОчиститьСсылочныйТип(ОбъектМетаданных);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			ОчиститьНаборЗаписей(ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыДляОчистки.Очистить();
	
КонецПроцедуры

Процедура ЗаменитьСсылкиПриЗагрузкеИзФайлаXML(ИмяФайла, ПараметрыЗагрузки)
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ВремФайл);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ЗаменитьСсылкиПриЗагрузкеИзXML(ЧтениеXML, ЗаписьXML, ПараметрыЗагрузки);
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(ВремФайл, ИмяФайла);
	
КонецПроцедуры

Процедура ЗаменитьСсылкиПриЗагрузкеИзXML(ЧтениеXML, ЗаписьXML, ПараметрыЗагрузки)
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			
			ТипЗначения = Неопределено;
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				
				Если ЧтениеXML.ЛокальноеИмя = "type" И ЧтениеXML.URIПространстваИмен = "http://www.w3.org/2001/XMLSchema-instance" Тогда
					Части = СтрРазделить(ЧтениеXML.Значение, ":");
					Если Части.Количество() = 1 Тогда
						Префикс = "";
						ИмяТипа = Части[0];
					Иначе
						Префикс = Части[0];
						ИмяТипа = Части[1];
					КонецЕсли;
					Если ЧтениеXML.НайтиURIПространстваИмен(Префикс) = "http://v8.1c.ru/8.1/data/enterprise/current-config" Тогда
						ТипЗначения = Тип(ИмяТипа);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ТипЗначения = Неопределено Тогда
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			Иначе
				НовоеЗначение = ПолучитьСсылкуПриЗагрузку(ТипЗначения, ЧтениеXML.Значение, ПараметрыЗагрузки);
				ЗаписьXML.ЗаписатьТекст(НовоеЗначение);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСсылкуПриЗагрузку(ТипЗначения, СтароеЗначение, ПараметрыЗагрузки)
	
	НовоеЗначение = СтароеЗначение;
	
	Если ПараметрыЗагрузки.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска[ТипЗначения] <> Неопределено Тогда
		
		ПараметрыТипа = Новый Массив;
		ПараметрыТипа.Добавить(Новый УникальныйИдентификатор(СтароеЗначение));
		СтараяСсылка = Новый(ТипЗначения, ПараметрыТипа);
		
		Если ЗначениеЗаполнено(СтараяСсылка) Тогда
			НоваяСсылка = ПараметрыЗагрузки.ОбщиеДанные[СтараяСсылка];
			Если НоваяСсылка <> Неопределено Тогда
				НовоеЗначение = Строка(НоваяСсылка.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли
		
	ИначеЕсли ПараметрыЗагрузки.ТипыПересоздаваемыхСсылок[ТипЗначения] <> Неопределено Тогда
		
		ПараметрыТипа = Новый Массив;
		ПараметрыТипа.Добавить(Новый УникальныйИдентификатор(СтароеЗначение));
		СтараяСсылка = Новый(ТипЗначения, ПараметрыТипа);
		
		Если ЗначениеЗаполнено(СтараяСсылка) Тогда
			НоваяСсылка = ПараметрыЗагрузки.СоответствиеСсылок[СтараяСсылка];
			Если НоваяСсылка = Неопределено Тогда
				ПараметрыТипа = Новый Массив;
				ПараметрыТипа.Добавить(Новый УникальныйИдентификатор);
				НоваяСсылка = Новый(ТипЗначения, ПараметрыТипа);
				ПараметрыЗагрузки.СоответствиеСсылок.Вставить(СтараяСсылка, НоваяСсылка);
			КонецЕсли;
			НовоеЗначение = Строка(НоваяСсылка.УникальныйИдентификатор());
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени[ТипЗначения] <> Неопределено Тогда
		
		ПараметрыТипа = Новый Массив;
		ПараметрыТипа.Добавить(Новый УникальныйИдентификатор(СтароеЗначение));
		СтараяСсылка = Новый(ТипЗначения, ПараметрыТипа);
		
		Если ЗначениеЗаполнено(СтараяСсылка) Тогда
			НоваяСсылка = ПараметрыЗагрузки.ОбщиеДанные[СтараяСсылка];
			Если НоваяСсылка <> Неопределено Тогда
				НовоеЗначение = Строка(НоваяСсылка.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.ТипыУзловОбмена[ТипЗначения] <> Неопределено Тогда
		
		ПараметрыТипа = Новый Массив;
		ПараметрыТипа.Добавить(Новый УникальныйИдентификатор(СтароеЗначение));
		СтараяСсылка = Новый(ТипЗначения, ПараметрыТипа);
		
		Если ЗначениеЗаполнено(СтараяСсылка) Тогда
			НоваяСсылка = ПараметрыЗагрузки.СоответствиеСсылок[СтараяСсылка];
			Если НоваяСсылка <> Неопределено Тогда
				НовоеЗначение = Строка(НоваяСсылка.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.ЗапрещенныеТипыОбщихДанных[ТипЗначения] <> Неопределено Тогда
		
		ПараметрыТипа = Новый Массив;
		ПараметрыТипа.Добавить(Новый УникальныйИдентификатор(СтароеЗначение));
		СтараяСсылка = Новый(ТипЗначения, ПараметрыТипа);
		
		Если ЗначениеЗаполнено(СтараяСсылка) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте обнаружена недопустимая ссылка. Тип данных: %1'"), СтараяСсылка.Метаданные().ПолноеИмя());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции


// Добавляет в переданную коллекцию прочитанные из файла ссылки.
//
// Параметры:
//  СоответствиеСсылок - Соответствие из КлючИЗначение - коллекция соответствия ссылок:
//   * Ключ - ЛюбаяСсылка
//   * Значение - ЛюбаяСсылка
//  КаталогЗагрузки - Строка - полное имя каталога, откуда выполняется загрузка.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ЛюбаяСсылка
//   * Значение - ЛюбаяСсылка
//
Функция ПрочитатьСоответствиеСсылок(Знач СоответствиеСсылок, КаталогЗагрузки) Экспорт
	
	Файл = Новый Файл(КаталогЗагрузки + "ThisNodes.xml");
	Если Файл.Существует() Тогда
		
		ЭтиУзлы = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "ThisNodes.xml"); // Массив Из ПланОбменаСсылка
		
		Для Каждого СтарыйУзел Из ЭтиУзлы Цикл
			СоответствиеСсылок.Вставить(СтарыйУзел, ПланыОбмена[СтарыйУзел.Метаданные().Имя].ЭтотУзел());
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеСсылок;
	
КонецФункции

// Разбирает навигационную ссылку и представляет в виде объекта XDTO.
//
// Параметры:
//   НавигационнаяСсылка - Строка - навигационная ссылка.
//
// Возвращаемое значение:
//   Структура - сериализованный объект Структура с ключами:
//     * НавигационнаяСсылка - Строка - преобразованная навигационная ссылка, от исходной навигационной ссылки
//                                      отличается тем, что выделены ссылки и заменены на параметры.
//     * Замена - Соответствие - соответствие параметров и ссылок.
//
Функция ПреобразоватьНавигационнуюСсылкуВСтруктуру(Знач НавигационнаяСсылка)
	
	Если Не СтрНачинаетсяС(НавигационнаяСсылка, "e1cib/data/") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НавигационнаяСсылка = РаскодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.КодировкаURL);
	
	НачалоПараметров = СтрНайти(НавигационнаяСсылка, "?");
	ПутьКОбъектуМетаданных = Сред(НавигационнаяСсылка, 12, НачалоПараметров - 12);
	ЧастиПути = СтрРазделить(ПутьКОбъектуМетаданных, ".");
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЧастиПути[0] + "." + ЧастиПути[1]);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоСсылочныйОбъект = ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ОбъектМетаданных);
	ЭтоНезависимыйРегистр = Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	
	Если Не ЭтоСсылочныйОбъект И Не ЭтоНезависимыйРегистр Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыПараметров = Новый Структура;
	Если ЭтоСсылочныйОбъект Тогда
		ТипыПараметров.Вставить("ref", ОбъектМетаданных.СтандартныеРеквизиты.Ссылка.Тип);
		ТипыПараметров.Вставить("index", Новый ОписаниеТипов("Число"));
	Иначе 
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ТипыПараметров.Вставить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		Для Каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
			ТипыПараметров.Вставить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыНавигационнойСсылки = Новый Массив;
	ЭлементИзбранного = Новый Структура("НавигационнаяСсылка, Замена", НавигационнаяСсылка, Новый Соответствие);
	
	СтрокаПараметров = Сред(НавигационнаяСсылка, НачалоПараметров + 1);
	Для Каждого Параметр Из СтрРазделить(СтрокаПараметров, "&") Цикл
		
		ЗнакРавно = СтрНайти(Параметр, "=");
		ИмяПараметра = Лев(Параметр, ЗнакРавно - 1);
		ЗначениеПараметра = Сред(Параметр, ЗнакРавно + 1);
		ТипПараметра = ТипыПараметров[ИмяПараметра];
		Если ТипПараметра.Типы().Количество() = 1 Тогда
			ТипСсылки = ТипПараметра.Типы()[0];
		Иначе
			// Составной тип.
			ТипСсылки = Тип(Лев(ЗначениеПараметра, СтрНайти(ЗначениеПараметра, ":") - 1));
		КонецЕсли;
		
		МетаданныеСсылки = Метаданные.НайтиПоТипу(ТипСсылки); 
		Если МетаданныеСсылки = Неопределено Тогда
			ПараметрыНавигационнойСсылки.Добавить(Параметр);
		Иначе
			Идентификатор = УникальныйИдентификаторИзСтроки32(Сред(ЗначениеПараметра, СтрНайти(ЗначениеПараметра, ":") + 1));
			ПараметрыКонструктора = Новый Массив;
			ПараметрыКонструктора.Добавить(Идентификатор);
			СсылкаПараметра = Новый (ТипСсылки, ПараметрыКонструктора);
			
			ИдентификаторЗамены = Строка(Новый УникальныйИдентификатор);
			НовоеЗначениеПараметра = Лев(ЗначениеПараметра, СтрНайти(ЗначениеПараметра, ":")) + ИдентификаторЗамены;
			ПараметрыНавигационнойСсылки.Добавить(ИмяПараметра + "=" + КодироватьСтроку(НовоеЗначениеПараметра, СпособКодированияСтроки.КодировкаURL));
			ЭлементИзбранного.Замена.Вставить(ИдентификаторЗамены, СсылкаПараметра);
		КонецЕсли;
			
	КонецЦикла;
	
	НоваяНавигационнаяСсылка = "e1cib/data/" + ПутьКОбъектуМетаданных + "?" + СтрСоединить(ПараметрыНавигационнойСсылки, "&");
	ЭлементИзбранного.НавигационнаяСсылка = НоваяНавигационнаяСсылка;
	
	Возврат ЭлементИзбранного;
	
КонецФункции

// Преобразует представление уникального идентификатора для навигационной ссылки в уникальный идентификатор.
//
// Параметры:
//   Отображение - Строка - представление уникального идентификатора.
//
// Возвращаемое значение:
//   УникальныйИдентификатор - полученный идентификатор.
//
Функция УникальныйИдентификаторИзСтроки32(Знач Отображение)
	
	Часть1 = Сред(Отображение, 25, 8);
	Часть2 = Сред(Отображение, 21, 4);
	Часть3 = Сред(Отображение, 17, 4);
	Часть4 = Сред(Отображение, 1,  4);
	Часть5 = Сред(Отображение, 5,  12);
	
	Возврат Новый УникальныйИдентификатор(Часть1 + "-" + Часть2 + "-" + Часть3 + "-" + Часть4 + "-" + Часть5);
	
КонецФункции

// Преобразует уникальный идентификатор в формат идентификатора навигационной ссылки.
//
// Параметры:
//   Идентификатор - УникальныйИдентификатор - который требуется преобразовать.
//
// Возвращаемое значение:
//   Строка - строковое представление.
//
Функция УникальныйИдентификаторВСтроку32(Знач Идентификатор)
	
	ИдентификаторСсылки = Строка(Идентификатор);
	
	Возврат Сред(ИдентификаторСсылки, 20, 4) + Сред(ИдентификаторСсылки, 25) + Сред(ИдентификаторСсылки, 15, 4) + Сред(ИдентификаторСсылки, 10, 4) + Сред(ИдентификаторСсылки, 1, 8);
	
КонецФункции

// Добавляет все пользователей с ролью ПолныеПрава в группу доступа Администраторы.
//
Процедура ДобавитьПолноправныхПользователейВГруппуАдминистраторыИОбновитьРолиОстальнымПользователям()
	
	ИдентификаторыПользователей = Новый Массив;
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			ИдентификаторыПользователей.Добавить(Пользователь.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПользователей", ИдентификаторыПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователей)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СпрОбъект = УправлениеДоступом.ГруппаДоступаАдминистраторы().ПолучитьОбъект();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// В новой области у пользователя только два вида КИ.
			Для Каждого СтрокаКИ Из ПользовательОбъект.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
					СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
				ИначеЕсли  СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
					СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
				КонецЕсли;
			КонецЦикла;
			
			Если СпрОбъект.Пользователи.Найти(Выборка.Ссылка, "Пользователь") = Неопределено Тогда
				ПользовательОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора", НСтр("ru = 'Создание администратора области данных при миграции приложения.'"));
				СпрОбъект.Пользователи.Добавить().Пользователь = Выборка.Ссылка;
			КонецЕсли;
			
			ПользовательОбъект.Записать();
			
		КонецЦикла;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
	КонецЕсли;
	
	УправлениеДоступом.ОбновитьРолиПользователей();
	
КонецПроцедуры

// Добавляет источнику в получатели все узлы плана обмена МиграцияПриложений.
//
// Параметры:
//   Источник - СправочникОбъект, ДокументОбъект, РегистрСведенийНаборЗаписей - объект, который регистрируется в плане обмена.
//
Процедура ЗарегистрироватьИзменения(Источник)
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ТипИсключаемыйИзВыгрузкиЗагрузки") Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	Если ДоступноИспользованиеРазделенныхДанных И Не ПолучитьФункциональнуюОпцию("ИспользуетсяМиграцияПриложений") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты().Получить(Источник.Метаданные()) <> Неопределено Тогда
		
		Если НЕ ОбъектРасширенияВходитВСоставПланаОбмена(Источник.Метаданные()) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если ДоступноИспользованиеРазделенныхДанных Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МиграцияПриложений.Ссылка КАК Ссылка
			|ИЗ
			|	ПланОбмена.МиграцияПриложений КАК МиграцияПриложений
			|ГДЕ
			|	НЕ МиграцияПриложений.ЭтотУзел";
		Иначе
			Если Метаданные.РегистрыСведений.Содержит(Источник.Метаданные()) Тогда
				// @skip-warning СвойствоНеОбнаружено - ошибка проверки.
				Запрос.УстановитьПараметр("ОбластьДанных", Источник.Отбор.ОбластьДанныхВспомогательныеДанные.Значение);
			Иначе
				Запрос.УстановитьПараметр("ОбластьДанных", Источник.ОбластьДанныхВспомогательныеДанные);
			КонецЕсли;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МиграцияПриложений.Ссылка КАК Ссылка
			|ИЗ
			|	ПланОбмена.МиграцияПриложений КАК МиграцияПриложений
			|ГДЕ
			|	НЕ МиграцияПриложений.ЭтотУзел
			|	И МиграцияПриложений.ОбластьДанныхОсновныеДанные = &ОбластьДанных";
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник.ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сортированный порядок выборки объектов метаданных с учетом последнего выгруженного объекта.
//
// Параметры:
//   ПоследнийОбъект - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//   Массив - массив полных имен объектов метаданных.
//
Функция ПорядокВыборкиМетаданных(ПоследнийОбъект)
	
	Объекты = Новый СписокЗначений;
	
	Для Каждого КлючИЗначение Из МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты() Цикл
		
		ОбъектМетаданных = КлючИЗначение.Ключ;
		
		Порядок = "12";
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			Порядок = "00";
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Порядок = "01";
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
			Порядок = "02";
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
			Порядок = "03";
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
			Порядок = "04";
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			Порядок = "05";
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Порядок = "06";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			Порядок = "07";
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
			Порядок = "08";
		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
			Порядок = "09";
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			Порядок = "10";
		ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
			Порядок = "11";
		ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			Порядок = "12";
		КонецЕсли;
		
		Объекты.Добавить(ОбъектМетаданных, Порядок + ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	Объекты.СортироватьПоПредставлению();
	НайденныйЭлемент = Объекты.НайтиПоЗначению(Метаданные.НайтиПоПолномуИмени(ПоследнийОбъект));
	
	Если НайденныйЭлемент <> Неопределено Тогда
		Смещение = Объекты.Количество() - 1;
		Для КоличествоПовторов = 0 По Объекты.Индекс(НайденныйЭлемент) - 1 Цикл
			Объекты.Сдвинуть(0, Смещение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Объекты.ВыгрузитьЗначения();
	
КонецФункции

// Заполняет состояние выгрузки с учетом статуса загрузки. 
//
// Параметры:
//   СостояниеВыгрузки - РегистрСведенийЗапись.МиграцияПриложенийСостояниеВыгрузки - запись, которую нужно обновить.
//   СостояниеЗагрузки - Структура - описание см. СостояниеЗагрузки().
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел по которому выполняется выборка изменений.
//
Процедура ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена)
	
	СостояниеВыгрузки.ДатаСостоянияЗагрузки = ТекущаяУниверсальнаяДата();
	СостояниеВыгрузки.ЗагруженоОбъектов = СостояниеЗагрузки.ЗагруженоОбъектов;
	СостояниеВыгрузки.ИзмененоОбъектов = КоличествоИзмененных(УзелОбмена);
	Если СостояниеЗагрузки.ЗавершеноСОшибками Тогда
		СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ЗавершенаСОшибкой;
		СостояниеВыгрузки.Комментарий = НСтр("ru = 'При загрузке сообщения возникла ошибка:'") + Символы.ПС + СостояниеЗагрузки.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает максимальную длину очереди.
//
// Возвращаемое значение:
//   Число - длина очереди.
//
Функция МаксимальнаяОчередьЗагрузки() Экспорт
	
	Возврат 3;
	
КонецФункции

// Подсчитывает количество зарегистрированных изменений по узлу.
//
// Параметры:
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел по которому выполняется выборка изменений.
//
// Возвращаемое значение:
//   Число - количество изменений.
//
Функция КоличествоИзмененных(Узел) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	
	Для Каждого Состав Из МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты() Цикл
		
		Если НЕ ОбъектРасширенияВходитВСоставПланаОбмена(Состав.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = СтрЗаменить(Состав.Ключ.ПолноеИмя(), ".Перерасчет.", ".") + "." + "Изменения";
		
		ТекстЗапроса = СтрЗаменить(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	ИмяТаблицы
		|ГДЕ
		|	Узел = &Узел
		|	И НомерСообщения ЕСТЬ NULL", "ИмяТаблицы", ИмяТаблицы);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст = "ВЫБРАТЬ СУММА(Количество) КАК Количество" + " " + "ИЗ (" + 
		СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + ") КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Проверяет состоит ли объект метаданных в составе плана обмена Миграция приложений
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных - объект метаданных который необходимо проверить.
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектРасширенияВходитВСоставПланаОбмена(ОбъектМетаданных)
	
	Если ОбъектМетаданных.РасширениеКонфигурации() = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Метаданные.ПланыОбмена.МиграцияПриложений.Состав.Содержит(ОбъектМетаданных);
	
КонецФункции

// Возвращает поля отбора для набора записей.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных
//
// Возвращаемое значение:
//   Массив из Строка - массив имен полей.
//
Функция ПоляОтбораНабораЗаписей(ОбъектМетаданных) Экспорт
	
	ПоляОтбора = Новый Массив;
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
			И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
			ПоляОтбора.Добавить("Период");
		КонецЕсли;
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				ПоляОтбора.Добавить(Измерение.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) Тогда
		ПоляОтбора.Добавить("ОбъектПерерасчета");
	Иначе
		ПоляОтбора.Добавить("Регистратор");
	КонецЕсли;
	
	Возврат ПоляОтбора;
	
КонецФункции

// Возвращает недоступные роли пользователям.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//   * Значение - Булево
Функция НедоступныеРоли() Экспорт
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли();
	ИменаРолей = Новый Массив;
	Для Каждого НедоступнаяРоль Из НедоступныеРоли Цикл
		ИменаРолей.Добавить("Роль." + НедоступнаяРоль.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИменаРолей", ИменаРолей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя В(&ИменаРолей)";
	
	НедоступныеРоли = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НедоступныеРоли.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	Возврат НедоступныеРоли;
	
КонецФункции

// Проверяет, что объект соответствует указанному объекту метаданных, если не совпадает, то вызывается исключение.
//
// Параметры:
//   Объект - Произвольный - загружаемый объект.
//   ОбъектМетаданных - ОбъектМетаданных - 
//
Процедура ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных) Экспорт
	
	Если ОбъектМетаданных <> Объект.Метаданные() Тогда
		ВызватьИсключение НСтр("ru = 'Тип прочитанного объекта не соответствует объявленному.'");
	КонецЕсли;
	
КонецПроцедуры

// Завершает выгрузку и регистрирует ошибку в журнале регистрации.
//
// Параметры:
//   ПодробноеПредставлениеОшибки - Строка - ошибка которая записывается в журнал регистрации.
//   КраткоеПредставлениеОшибки - Строка - сохраняется в регистре, будет показано пользователю.
//
Процедура ЗавершитьВыгрузкуСОшибкой(СостояниеВыгрузки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки)
	
	РегистрацияОшибки(НСтр("ru = 'Выгрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки);
	
	НачатьТранзакцию();
	Попытка
		СостояниеВыгрузки.Состояние = Перечисления.СостоянияМиграцииПриложения.ЗавершенаСОшибкой;
		СостояниеВыгрузки.Комментарий = КраткоеПредставлениеОшибки;
		СостояниеВыгрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
		СостояниеВыгрузки.Записать();
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
		Если ЗначениеЗаполнено(СостояниеВыгрузки.УзелОбмена) Тогда
			УзелОбъект = СостояниеВыгрузки.УзелОбмена.ПолучитьОбъект();
			Если УзелОбъект <> Неопределено Тогда
				УзелОбъект.Удалить();
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Завершает выгрузку и регистрирует ошибку в журнале регистрации.
//
// Параметры:
//   ПодробноеПредставлениеОшибки - Строка - ошибка которая записывается в журнал регистрации.
//   КраткоеПредставлениеОшибки - Строка - сохраняется в регистре, будет показано пользователю.
//
Процедура ЗавершитьЗагрузкуСОшибкой(СостояниеЗагрузки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки)
	
	РегистрацияОшибки(НСтр("ru = 'Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки);
	
	НачатьТранзакцию();
	Попытка
		ТипСообщения = СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОшибкаПодготовкиОбластиДанных();
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(ТипСообщения);
		Сообщение.Body.Zone = ПараметрыСеанса.ОбластьДанныхЗначение;
		Сообщение.Body.ErrorDescription = КраткоеПредставлениеОшибки;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(Сообщение, РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(), Истина);
		
		СостояниеЗагрузки.ЗавершеноСОшибками = Истина;
		СостояниеЗагрузки.ОписаниеОшибки = КраткоеПредставлениеОшибки;
		СостояниеЗагрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
		СостояниеЗагрузки.Записать();
		
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		
		УдалитьОчередь();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Завершает загрузку.
//
// Параметры:
//   СостояниеЗагрузки - РегистрСведенийЗапись.МиграцияПриложенийСостояниеЗагрузки -
//
Процедура ЗавершитьЗагрузку(СостояниеЗагрузки)
	
	РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
	
	НаборЗаписейОбластиДанных = РегистрыСведений.ОбластиДанных.СоздатьНаборЗаписей();
	НаборЗаписейОбластиДанных.Прочитать();
	НаборЗаписейОбластиДанных[0].Статус = Перечисления.СтатусыОбластейДанных.Используется;
	НаборЗаписейОбластиДанных.Записать();
	
	ЗагружаемыеПользователи = СостояниеЗагрузки.Пользователи.Получить(); // Массив Из см. Пользователи.НовоеОписаниеПользователяИБ
	Для Каждого ОписаниеПользователя Из ЗагружаемыеПользователи Цикл
		
		ПользовательОбъект = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеПользователя.Идентификатор) Тогда
			ПользовательОбъект = Справочники.Пользователи.ПолучитьСсылку(ОписаниеПользователя.Идентификатор).ПолучитьОбъект();
		КонецЕсли;
		Если ПользовательОбъект = Неопределено Тогда
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		КонецЕсли;
		
		ПользовательОбъект.ИдентификаторПользователяСервиса = ОписаниеПользователя.ИдентификаторПользователяСервиса;
		ПользовательОбъект.Наименование = ОписаниеПользователя.ПолноеИмя;
		
		СтруктураАдресаЭП = РаботаВМоделиСервисаБТС.СоставПочтовогоАдреса(ОписаниеПользователя.Почта);
		РаботаВМоделиСервисаБТС.ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, ОписаниеПользователя.Почта, СтруктураАдресаЭП);
		
		РаботаВМоделиСервисаБТС.ОбновитьТелефон(ПользовательОбъект, ОписаниеПользователя.Телефон);
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = ОписаниеПользователя.Имя;
		ОписаниеПользователяИБ.АутентификацияСтандартная = ОписаниеПользователя.АутентификацияСтандартная;
		ОписаниеПользователяИБ.АутентификацияOpenID = ОписаниеПользователя.АутентификацияOpenID;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = ОписаниеПользователя.ПоказыватьВСпискеВыбора;
		ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = ОписаниеПользователя.СохраняемоеЗначениеПароля;
		ОписаниеПользователяИБ.Язык = РаботаВМоделиСервисаБТС.ЯзыкПоКоду(ОписаниеПользователя.КодЯзыка);
		ОписаниеПользователяИБ.АутентификацияОС = ОписаниеПользователя.АутентификацияОС;
		ОписаниеПользователяИБ.ПользовательОС   = ОписаниеПользователя.ПользовательОС;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
		
		ЭтоНовый = ПользовательОбъект.ЭтоНовый();
		
		Если ЭтоНовый Тогда
			
			Если ОписаниеПользователя.Право = "ЗапускИАдминистрирование" Тогда
				ОписаниеПользователяИБ.Роли = Новый Массив;
				ОписаниеПользователяИБ.Роли.Добавить("ПолныеПрава");
			КонецЕсли;
			
		КонецЕсли;
		
		ПользовательОбъект.Записать();
		
		Если ЭтоНовый Тогда
			
			Если ОписаниеПользователя.Право = "ЗапускИАдминистрирование" Тогда
				Если ПользователиСлужебный.ЗапретРедактированияРолей()
					И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
					
					МодульУправлениеДоступомСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебныйВМоделиСервиса");
					МодульУправлениеДоступомСлужебныйВМоделиСервиса.УстановитьПринадлежностьПользователяКГруппеАдминистраторы(ПользовательОбъект.Ссылка, Истина);
				КонецЕсли;
			ИначеЕсли ОписаниеПользователя.Право = "Запуск" Тогда
				РаботаВМоделиСервисаПереопределяемый.УстановитьПраваПоУмолчанию(ПользовательОбъект.Ссылка);
				РаботаВМоделиСервисаБТСПереопределяемый.УстановитьПраваПоУмолчанию(ПользовательОбъект.Ссылка, Истина);
			ИначеЕсли ОписаниеПользователя.Право = "ДоступКAPI" Тогда
				РаботаВМоделиСервисаБТСПереопределяемый.УстановитьДоступКAPIОбластиДанных(ПользовательОбъект.Ссылка, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеДоступом.ОбновитьРолиПользователей();
	
	Наименование = Константы.ПредставлениеОбластиДанных.Получить();
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СтрШаблон("%1(%2)", Метаданные.Синоним, РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	РаботаВМоделиСервисаБТС.ОбновитьСвойстваПредопределенныхУзлов(Наименование);
	
	ОчередьЗаданийСлужебныйРазделениеДанных.ПослеЗагрузкиДанных(Неопределено);
	
	ТипСообщения = СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОбластьДанныхГотоваКИспользованию();
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(ТипСообщения);
	Сообщение.Body.Zone = ПараметрыСеанса.ОбластьДанныхЗначение;
	
	СообщенияВМоделиСервиса.ОтправитьСообщение(Сообщение, РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(), Истина);
	
КонецПроцедуры

// Регистрирует ошибку в журнале регистраций.
//
// Параметры:
//   Событие - Строка - 
//   Комментарий - Строка -
//   ОбъектМетаданных - ОбъектМетаданных -
//   Данные - Произвольный - 
//
Процедура РегистрацияОшибки(Событие, Комментарий, ОбъектМетаданных = Неопределено, Данные = Неопределено)
	
	ИмяСобытия = СтрШаблон(НСтр("ru = 'Миграция приложений.%1'", ОбщегоНазначения.КодОсновногоЯзыка()), Событие);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

// Регистрирует примечание в журнале регистраций.
//
// Параметры:
//   Событие - Строка - 
//   Комментарий - Строка - 
//
Процедура РегистрацияПримечания(Событие, Комментарий)
	
	ИмяСобытия = СтрШаблон(НСтр("ru = 'Миграция приложений.%1'", ОбщегоНазначения.КодОсновногоЯзыка()), Событие);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание, , , Комментарий);
	
КонецПроцедуры

// Проверяет выполнение загрузки, если не выполняется, то будет вызвано исключение.
//
Процедура ПроверитьВыполняетсяЗагрузка()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МиграцияПриложенийСостояниеЗагрузки.ДатаЗавершения КАК ДатаЗавершения
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийСостояниеЗагрузки КАК МиграцияПриложенийСостояниеЗагрузки";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Выборка.Следующий() Или ЗначениеЗаполнено(Выборка.ДатаЗавершения) Тогда
		ВызватьИсключение НСтр("ru = 'Загрузка сообщений не выполняется.'");
	КонецЕсли;
	
КонецПроцедуры

// Сериализует объект в JSON
//
// Параметры:
//   Объект - Произвольный - любой сериализуемый объект.
//
// Возвращаемое значение:
//   Строка - результат сериализации.
//
Функция ОбъектВJSON(Объект)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Десериализует из JSON в соответствие.
//
// Параметры:
//   JSON - Строка - строка в формате JSON
//
// Возвращаемое значение:
//   Структура - результат десериализации.
//
Функция JSONВОбъект(JSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	Объект = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

// Вызывает исключение с указанием объекта метаданных.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных -
//
Процедура ВызватьИсключениеНеизвестныйОбъектМетаданных(Знач ОбъектМетаданных) Экспорт
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный объект метаданных: %1'"), ОбъектМетаданных.ПолноеИмя());
	
КонецПроцедуры

// Включает или выключает использование итого всех регистров.
//
// Параметры:
//   Использование - Булево -
//
Процедура УстановитьИспользованиеИтоговРегистров(Использование)
	
	Модель = МиграцияПриложенийПовтИсп.МодельДанныхОбласти();
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыНакопления Цикл
		Если Модель.Получить(ОбъектМетаданных) <> Неопределено Тогда
			РегистрыНакопления[ОбъектМетаданных.Имя].УстановитьИспользованиеИтогов(Использование);
			Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				РегистрыНакопления[ОбъектМетаданных.Имя].УстановитьИспользованиеТекущихИтогов(Использование);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
		Если Модель.Получить(ОбъектМетаданных) <> Неопределено Тогда
			РегистрыБухгалтерии[ОбъектМетаданных.Имя].УстановитьИспользованиеИтогов(Использование);
			РегистрыБухгалтерии[ОбъектМетаданных.Имя].УстановитьИспользованиеТекущихИтогов(Использование);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует повторно изменения, которые ранее были пронумерованы.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений -
//   НомерСообщения - Число - изменения ограничены этим номером.
//
Процедура ЗарегистрироватьИзмененияПовторно(УзелОбмена, НомерСообщения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Для Каждого Состав Из МиграцияПриложенийПовтИсп.ВыгружаемыеОбъекты() Цикл
		
		ОбъектМетаданных = Состав.Ключ;
		ИмяТаблицы = СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".Перерасчет.", ".") + "." + "Изменения";
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			Запрос.Текст = СтрЗаменить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Проверка
			|ИЗ
			|	ИмяТаблицы КАК Изменения
			|ГДЕ
			|	Изменения.Узел = &Узел
			|	И Изменения.НомерСообщения <= &НомерСообщения", "ИмяТаблицы", ИмяТаблицы);
			
			Если Не Запрос.Выполнить().Пустой() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ОбъектМетаданных);
			КонецЕсли;
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			Запрос.Текст = СтрЗаменить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ 
			|	Ссылка КАК Ссылка
			|ИЗ
			|	ИмяТаблицы КАК Изменения
			|ГДЕ
			|	Изменения.Узел = &Узел
			|	И Изменения.НомерСообщения <= &НомерСообщения", "ИмяТаблицы", ИмяТаблицы);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
			КонецЦикла;
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			
			ПоляОтбора = ПоляОтбораНабораЗаписей(ОбъектМетаданных);
			
			Если ПоляОтбора.Количество() = 0 Тогда
				Запрос.Текст = СтрЗаменить(
				"ВЫБРАТЬ ПЕРВЫЕ 1 
				|	ИСТИНА КАК Проверка
				|ИЗ
				|	ИмяТаблицы КАК Изменения
				|ГДЕ
				|	Изменения.Узел = &Узел
				|	И Изменения.НомерСообщения <= &НомерСообщения", "ИмяТаблицы", ИмяТаблицы);
			Иначе
				Запрос.Текст = СтрЗаменить(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|	&Поля
				|ИЗ
				|	ИмяТаблицы КАК Изменения
				|ГДЕ
				|	Изменения.Узел = &Узел
				|	И Изменения.НомерСообщения <= &НомерСообщения", "ИмяТаблицы", ИмяТаблицы);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрСоединить(ПоляОтбора, ","))
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
				Для Каждого ПолеОтбора Из ПоляОтбора Цикл
					ЭлементОтбора = НаборЗаписей.Отбор[ПолеОтбора]; // ЭлементОтбора
					ЭлементОтбора.Установить(Выборка[ПолеОтбора]);
				КонецЦикла;
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
				
			КонецЦикла;
			
		Иначе
			ВызватьИсключениеНеизвестныйОбъектМетаданных(ОбъектМетаданных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбрасывает признак повторной отправки в приложении-назначении.
//
Процедура ПодтвердитьПовторнуюЗагрузку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьВыполняетсяЗагрузка();
	
	СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	СостояниеЗагрузки.Прочитать();
	СостояниеЗагрузки.ТребуетсяПовторнаяОтправка = Ложь;
	СостояниеЗагрузки.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает имя переданного объекта метаданных.
// 
// Параметры:
// 	ОбъектМетаданных - ОбъектМетаданных - объект метаданных.
// Возвращаемое значение:
// 	Строка - имя объекта метаданных.
Функция ИмяОбъектаМетаданных(ОбъектМетаданных) Экспорт

	Возврат ОбъектМетаданных.Имя;
	
КонецФункции

// Возвращает объект метаданных с именем "Ссылка" из СтандартныхРеквизитов.
// 
// Параметры:
// 	ОбъектМетаданных - ОбъектМетаданных - объект ссылочного типа
// 					 - Структура - описание:
// 						* СтандартныеРеквизиты - ОписанияСтандартныхРеквизитов - описание реквизитов.
// 												- Структура - стандартные реквизиты объекта:
// 													** Ссылка - ОписаниеСтандартногоРеквизита - реквизит "Ссылка".
// Возвращаемое значение:
//  ОписаниеТипов - тип объекта.
Функция ТипСсылочногоОбъекта(ОбъектМетаданных)
	
	Возврат ОбъектМетаданных.СтандартныеРеквизиты.Ссылка.Тип;
	
КонецФункции

Функция МетодВАдресеПоддерживается(ПараметрыДоступа)

	Возврат ПараметрыДоступа.ВерсияПрограммногоИнтерфейса >=19;

КонецФункции

// Получить параметры доступа.
// 
// Параметры:
//  Источник - Структура, ФормаКлиентскогоПриложения - источник параметров
// 
// Возвращаемое значение:
// Структура - Параметры доступа:
// * АдресПрограммногоИнтерфейса - Строка - Адрес ExtAPI менеджера сервиса
// * ВерсияПрограммногоИнтерфейса - Число - Версия ExtAPI менеджера сервиса
// * Логин - Строка
// * Пароль - Строка
// * КодАбонента - Число
Функция ПолучитьПараметрыДоступа(Источник)
	
	Результат = Новый Структура();
	Результат.Вставить("АдресПрограммногоИнтерфейса", "");
	Результат.Вставить("ВерсияПрограммногоИнтерфейса", 0);
	Результат.Вставить("Логин", "");
	Результат.Вставить("Пароль", "");
	Результат.Вставить("КодАбонента", 0);
	
	ЗаполнитьЗначенияСвойств(Результат, Источник);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак необходимости открыть форму миграции приложения.
//
// Возвращаемое значение:
//   Булево - Истина если нужно открыть форму.
//
Функция НужноОткрытьФорму()
	
	Если Не РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных()
		Или Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияМиграцииПриложения.Выполняется);
	Состояния.Добавить(Перечисления.СостоянияМиграцииПриложения.ОжиданиеЗагрузки);
	Состояния.Добавить(Перечисления.СостоянияМиграцииПриложения.ЗавершенаУспешно);
	Состояния.Добавить(Перечисления.СостоянияМиграцииПриложения.ЗавершенаСОшибкой);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Инициатор", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Состояния", Состояния);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Проверка
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийСостояниеВыгрузки КАК МиграцияПриложенийСостояниеВыгрузки
	|ГДЕ
	|	МиграцияПриложенийСостояниеВыгрузки.Инициатор = &Инициатор
	|	И МиграцияПриложенийСостояниеВыгрузки.Состояние В(&Состояния)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти
