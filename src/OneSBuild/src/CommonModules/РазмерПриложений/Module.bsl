
#Область ПрограммныйИнтерфейс

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
// 
// Параметры:
// 	Типы - См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.Типы
// 
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.РазмерПриложений);
	Типы.Добавить(Метаданные.РегистрыСведений.РазмерОбъектовМетаданныхПриложений);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Поддерживается расчет размера приложений.
// 
// Возвращаемое значение:
//  Булево
Функция ПоддерживаетсяРасчетРазмераПриложений() Экспорт
	
	Инфо = Новый СистемнаяИнформация;
	МинимальнаяВерсия = МинимальноНеобходимаяВерсияПлатформы();
	 
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
		Инфо.ВерсияПриложения, МинимальнаяВерсия) < 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьПоддержкуРасчетаРазмераПриложений() Экспорт
	
	Если Не ПоддерживаетсяРасчетРазмераПриложений() Тогда
		ВызватьИсключение(НСтр("ru = 'Функциональность расчета размера приложений не поддерживается'"));
	КонецЕсли;
	
КонецПроцедуры

// @skip-warning ПустойМетод - особенность реализации.
Процедура ЗапланироватьРасчетРазмераПриложения(ОбластьДанных = Неопределено) Экспорт

КонецПроцедуры

Процедура РассчитатьРазмерПриложения() Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение(НСтр("ru = 'Недостаточно прав для выполнения операции'"));
	КонецЕсли;
	
	ПроверитьПоддержкуРасчетаРазмераПриложений();
	
	МодельДанных = РаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти();
	РазмерМетаданных = РазмерМетаданныхПриложения();
	ПараметрыРасчета = Константы.НастройкиРасчетаРазмераПриложений.Получить().Получить();
	
	РазмерПриложения = 0;
	МинимальныйШагИзменений = ЗначениеНастройкиРасчета("МинимальныйШагИзменений", 0, ПараметрыРасчета);
	СписокОбъектов = Новый Массив(1);
	
	Для Каждого ЭлементМодели Из МодельДанных Цикл
		
		ОбъектМетаданных = ЭлементМодели.Ключ;
		СписокОбъектов[0] = ОбъектМетаданных;
		
		Размер = Вычислить("ПолучитьРазмерДанныхБазыДанных(, СписокОбъектов)");
		ЗаписанныйРазмер = ЗаписатьРазмерМетаданныхПриложения(
			РазмерМетаданных, ОбъектМетаданных, Размер, МинимальныйШагИзменений);
		
		РазмерМетаданных.Удалить(ОбъектМетаданных);
		РазмерПриложения = РазмерПриложения + ЗаписанныйРазмер; 
		
	КонецЦикла;
	
	Для Каждого ЭлементМетаданные Из РазмерМетаданных Цикл
		ЗаписатьРазмерМетаданныхПриложения(РазмерМетаданных, ЭлементМетаданные.Ключ);
	КонецЦикла;
	
	ЗаписатьРазмерПриложения(РазмерПриложения);
		
КонецПроцедуры

// Возвращает часть полного имени объекта метаданных
// 
// Параметры:
// 	ОбъектМетаданных - Строка - полное имя объекта метаданных
// 	НомерЧасти - Число - номер части имени объекта метаданных (0 - вид метаданных, 1 - имя)
// Возвращаемое значение:
// 	Строка - Часть полного имени объекта метаданных
Функция ЧастьПолногоИмениОбъектаМетаданных(ОбъектМетаданных, НомерЧасти) Экспорт
	
	ЧастиПолногоИмени = СтрРазделить(ОбъектМетаданных, ".", Ложь);
	Если ЧастиПолногоИмени.Количество() < НомерЧасти Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ЧастиПолногоИмени[НомерЧасти - 1];
	
КонецФункции

// Возвращает текущую дату расчета размера приложения
// 
// Возвращаемое значение:
// 	Дата - Текущая дата расчета размера приложения
Функция АктуальностьРасчетаРазмераПриложения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПриложений.ДатаРасчета КАК ДатаРасчета
	|ИЗ
	|	РегистрСведений.РазмерПриложений КАК РазмерПриложений";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	ВыборкаРезультат = Результат.Выбрать();
	ВыборкаРезультат.Следующий();
	
	Возврат ВыборкаРезультат.ДатаРасчета;
	
КонецФункции

// Проверяет наличие задания по расчету размера приложения
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
// 	ОбластьДанных - Число - номер области данных
// Возвращаемое значение:
// 	Булево - Истина, если есть запланированные задания расчета размера приложения
Функция ЕстьЗапланированноеЗаданиеРасчетаРазмераПриложения(ОбластьДанных = Неопределено) Экспорт

КонецФункции

// Получает значение настройки расчета размера приложений
// 
// Параметры:
// 	ИмяНастройки - Строка - имя настройки
// 	ЗначениеПоУмолчанию - Строка, Число, Дата - значение возвращаемое, если настройка не найдена 
// 	Настройки - ФиксированнаяСтруктура - настройки расчета размера приложений 
// Возвращаемое значение:
// 	Строка, Число, Дата - значение настройки
Функция ЗначениеНастройкиРасчета(ИмяНастройки, ЗначениеПоУмолчанию = Неопределено, Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Настройки = Константы.НастройкиРасчетаРазмераПриложений.Получить().Получить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ТипЗнч(Настройки) <> Тип("ФиксированнаяСтруктура")
		Или Не Настройки.Свойство(ИмяНастройки) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Настройки[ИмяНастройки];
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаписатьРазмерМетаданныхПриложения(РазмерМетаданных,
										   ОбъектМетаданных,
										   Размер = Неопределено,
										   МинимальныйШагИзменений = Неопределено)
	
	ВыполнятьЗапись = Ложь;
	ЗаписанныйРазмер = 0;
	ПредыдущийРазмер = РазмерМетаданных.Получить(ОбъектМетаданных);
	
	Если ПредыдущийРазмер = Неопределено Тогда
		ВыполнятьЗапись = Размер <> Неопределено И Размер > 0;
	ИначеЕсли Размер = Неопределено Тогда
		 Размер = 0;
		 ВыполнятьЗапись = Истина;
	Иначе
		
		РазницаВРазмере = Размер - ПредыдущийРазмер;
		Если РазницаВРазмере < 0 Тогда
			РазницаВРазмере = -1 * РазницаВРазмере;
		КонецЕсли;
		
		Если МинимальныйШагИзменений = Неопределено Тогда
			МинимальныйШагИзменений = 0;
		КонецЕсли;
		
		Если РазницаВРазмере > 0 И РазницаВРазмере >= МинимальныйШагИзменений Тогда
			ВыполнятьЗапись = Истина;
		КонецЕсли;
		
		ЗаписанныйРазмер = ПредыдущийРазмер;
		
	КонецЕсли;
	
	Если ВыполнятьЗапись Тогда
		
		Запись = РегистрыСведений.РазмерОбъектовМетаданныхПриложений.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДатаСеанса();
		Запись.ОбъектМетаданных = ОбъектМетаданных;
		Запись.Размер = Размер;
		Запись.Записать();
		
		ЗаписанныйРазмер = Размер;
		
	КонецЕсли;
	
	Возврат ЗаписанныйРазмер;
	
КонецФункции

Процедура ЗаписатьРазмерПриложения(Размер, ТекстОшибки = Неопределено)
	
	Запись = РегистрыСведений.РазмерПриложений.СоздатьМенеджерЗаписи();
	Запись.Размер = Размер;
	Запись.ДатаРасчета = ТекущаяДатаСеанса();
	
	Если ТекстОшибки <> Неопределено Тогда
		Запись.ОшибкаОбработки = Истина;
		Запись.ТекстОшибки = ТекстОшибки;
	Иначе
		Запись.ОповеститьОбИзменении = Истина;
	КонецЕсли;
	 
	 Запись.Записать();
	
КонецПроцедуры

Функция РазмерМетаданныхПриложения()
	
	РазмерМетаданных = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерОбъектовМетаданных.ОбъектМетаданных,
	|	РазмерОбъектовМетаданных.Размер
	|ИЗ
	|	РегистрСведений.РазмерОбъектовМетаданныхПриложений.СрезПоследних КАК РазмерОбъектовМетаданных";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат РазмерМетаданных;
	КонецЕсли;
	
	ВыборкаРезультат = Результат.Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		РазмерМетаданных.Вставить(ВыборкаРезультат.ОбъектМетаданных, ВыборкаРезультат.Размер);
	КонецЦикла;
	
	Возврат РазмерМетаданных;
	
КонецФункции

Функция МинимальноНеобходимаяВерсияПлатформы()
	
	Возврат "8.3.15.1000";
	
КонецФункции

#КонецОбласти
