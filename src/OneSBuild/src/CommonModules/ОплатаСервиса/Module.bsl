
#Область ПрограммныйИнтерфейс

// Возвращает версию интерфейса биллинга (версии нумеруются простым натуральным числом).
// 
// Возвращаемое значение:
//  Число - версия интерфейса.
//
Функция ВерсияИнтерфейса() Экспорт

	Возврат 1;
		
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске
// @skip-check module-empty-method - особенность реализации.
// @skip-warning
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
КонецПроцедуры

// Возвращает состояния истечения сроков подписок на тарифы поданным менеджера сервиса.
// Данные возвращаются только для пользователей с ролью "Владелец абонента".
// @skip-check module-empty-method - особенность реализации.
// @skip-warning
// 
// Возвращаемое значение:
//  Структура:
//   * ЗавершаетсяТестовых - Число
//   * ЗавершаетсяБесплатных - Число
//   * ЗавершаетсяПлатных - Число
//   * ЗавершаетсяВсего - Число
//   * НеЗавершаетсяТестовых - Число
//   * НеЗавершаетсяБесплатных - Число
//   * НеЗавершаетсяПлатных - Число
//   * НеЗавершаетсяВсего - Число
//
Функция СостоянияЗавершенияПодписокНаТарифы() Экспорт
КонецФункции

// Возвращает признак поддержки загрузки тарифов сервиса в данные информационной базы.
// 
// Возвращаемое значение:
//  Булево - если Истина, то загрузка поддерживается.
//
Функция ПоддерживаетсяЗагрузкаТарифов() Экспорт
	
	Результат = Ложь;
	ОплатаСервисаПереопределяемый.ПриОпределенииПоддержкиЗагрузкиТарифов(Результат);
	
	Возврат Результат;
	
КонецФункции

// Отправляет ответ в учетную систему биллинга на адрес счета на оплату.
//
// Параметры:
//  ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета на оплату.
//  Данные - Структура - отправляемые данные, см. ОплатаСервиса.ШаблонДанныхОтвета. Состав полей может быть расширен.
//
// Возвращаемое значение:
//  HTTPОтвет - ответ менеджера сервиса.
//
// Пример:
//  ...
//  Данные = ОплатаСервиса.ШаблонДанныхОтвета();
//  Данные.Вставить("paid", Истина); // Признак оплаты счета.
//  ОплатаСервиса.ОтправитьЗапросВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
//
Функция ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		АдресСервиса = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса();
	Иначе
		АдресСервиса = ПрограммныйИнтерфейсСервисаСлужебный.АдресСервисаИзЛокальнойБазы();
	КонецЕсли;
	
	АдресСчета = СтрШаблон("%1/%2/%3", АдресСервиса, АдресСчетовНаОплатуУчетнойСистемыБиллинга(), ИдентификаторСчета);
	ДанныеСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСчета);
	ИмяПользователяУчетнойСистемы = Константы.ИмяПользователяУчетнойСистемы.Получить();
	ПарольПользователяУчетнойСистемы = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ВладелецПароляАвторизацииВУчетнойСистеме());
		
	Если Не ЗначениеЗаполнено(ИмяПользователяУчетнойСистемы) Тогда
		ТекстОшибки = НСтр("ru = 'Не настроены параметры подключения к учетной системе биллинга. 
								 |Нужно установить настройки по ссылке: 
								 |%1'");
		СсылкаНаНастройку = "e1cib/data/Обработка.ПанельАдминистрированияБТС.Форма.НастройкиБиллингаСервиса1СФреш";
		ВызватьИсключение СтрШаблон(ТекстОшибки, СсылкаНаНастройку); 
	КонецЕсли;
	
	СхемаSSL = "https";
	Если НРег(ДанныеСервера.Схема) = СхемаSSL Тогда
		ЗащищенноеСоединение =  Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ДанныеСервера.Хост, ДанныеСервера.Порт,
		ИмяПользователяУчетнойСистемы, ПарольПользователяУчетнойСистемы, , 5, ЗащищенноеСоединение);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = ДанныеСервера.ПутьНаСервере;
	ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON(Данные));
	Ответ = Соединение.ВызватьHTTPМетод("PUT", ЗапросHTTP);
	
	// По объекту может не успеть зафиксироваться транзакция.
	Если Ответ.КодСостояния = 404 Тогда
		Для Счетчик = 1 По 3 Цикл
			ОбщегоНазначенияБТС.Пауза(1);
			Ответ = Соединение.ВызватьHTTPМетод("PUT", ЗапросHTTP);
			Если Не Ответ.КодСостояния = 404 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 500 Тогда
		ЛогироватьHTTPЗапрос(ЗапросHTTP, Ответ);
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка отправки ответа по счету %1 по причине: %2'"),
			ИдентификаторСчета, Ответ.ПолучитьТелоКакСтроку());
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

// Возвращает шаблон данных при отправке информации о состоянии счета на оплату.
//
// Параметры:
//  КодОтвета - Число - код ответа. Если параметр не передается, устанавливается 10200.
//              Для установки можно использовать методы:
//               - КодВозвратаОшибкаДанных() - соответствует коду 10400 - используется при обработке известных ошибок.
//               - КодВозвратаВнутренняяОшибка() - соответствует коду 10500 - используется при возникновении непредвиденных ошибок.
//  Сообщение - Строка - сообщение об ошибке. Может быть установлен текст ошибки, который будет возвращен пользователю.
// 
// Возвращаемое значение:
//  Структура:
//   * response - Число - код ответа.
//   * error - Булево - признак ошибки. Взводится, если передан код ответа отличный от 102xx.
//   * message - Строка - сообщение об ошибке.
//
Функция ШаблонДанныхОтвета(КодОтвета = 10200, Сообщение = "") Экспорт
	
	ДанныеОтвета = Новый Структура;
	ДанныеОтвета.Вставить("response", КодОтвета);
	ДанныеОтвета.Вставить("error", ?(КодОтвета >= 10200 И КодОтвета <= 10299, Ложь, Истина));
	ДанныеОтвета.Вставить("message", Сообщение);
	
	Возврат ДанныеОтвета;
	
КонецФункции

// Возвращает код ошибки данных.
// 
// Возвращаемое значение:
//   Число - код возврата ошибки данных - 10400.
//
Функция КодВозвратаОшибкаДанных() Экспорт
	
	Возврат 10400;
	
КонецФункции

// Возвращает код внутренней ошибки.
// 
// Возвращаемое значение:
//   Число - код возврата внутренней ошибки - 10500.
//
Функция КодВозвратаВнутренняяОшибка() Экспорт
	
	Возврат 10500;
	
КонецФункции

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Загрузка тарифов в справочники информационной базы из менеджера сервиса.
// 
Процедура ЗагрузитьТарифыСервиса() Экспорт
	
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		ДанныеАвторизации = ПрограммныйИнтерфейсСервисаСлужебный.ДанныеАвторизацииВСервисе();
		КодАбонента = ДанныеАвторизации.КодАбонента;
	Иначе
		КодАбонента = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения().Код;
	КонецЕсли; 
	
	ПараметрыПолучения = Новый Массив;
	ПараметрыПолучения.Добавить(ПрограммныйИнтерфейсСервиса.ПараметрПолученияПериодыДействия());
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("ТарифыОбслуживающейОрганизации", 
		ПрограммныйИнтерфейсСервиса.ТарифыОбслуживающейОрганизации(КодАбонента, ПараметрыПолучения));
		
	ПараметрыПолучения.Добавить(ПрограммныйИнтерфейсСервиса.ПараметрПолученияТолькоПлатные());
	
	ИсходныеДанные.Вставить("ТарифыПровайдера", ПрограммныйИнтерфейсСервиса.ТарифыСервиса(ПараметрыПолучения));
	
	ОплатаСервисаПереопределяемый.ПриЗагрузкеТарифов(ИсходныеДанные);
	
КонецПроцедуры
 
// Обработчик фонового задания подготовки счета на оплату.
//
// Параметры:
//  ДанныеЗапроса - Структура - см. ДанныеЗапросаСчетаНаОплату
//
Процедура ПодготовитьСчетНаОплату(ДанныеЗапроса) Экспорт
	
	Попытка	
        ИдентификаторСчета = Новый УникальныйИдентификатор(ДанныеЗапроса.ИдентификаторСчета);
		
		// Создание счета на оплату по данным запроса.
		РезультатОбработки = НовыйРезультатОбработки();
		СчетНаОплату = СоздатьСчетНаОплату(ДанныеЗапроса, РезультатОбработки);
		Если РезультатОбработки.Ошибка Тогда
			Данные = ШаблонДанныхОтвета(КодВозвратаОшибкаДанных(), РезультатОбработки.Сообщение);
			ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
			Возврат;
		КонецЕсли; 
		
		// Получение печатной формы счета на оплату.
		РезультатОбработки = НовыйРезультатОбработки();
        ПечатнаяФорма = ПечатнаяФормаСчетаНаОплату(ДанныеЗапроса, СчетНаОплату, РезультатОбработки);
		Если Не ПечатнаяФорма = Неопределено Тогда
			Поток = Новый ПотокВПамяти;
			ПечатнаяФорма.Записать(Поток, ТипФайлаТабличногоДокумента.MXL);
			ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
			ПоместитьФайлВСчет(ИдентификаторСчета, ДвоичныеДанные, "bill.mxl");
		ИначеЕсли РезультатОбработки.Ошибка Тогда
			Данные = ШаблонДанныхОтвета(КодВозвратаОшибкаДанных(), РезультатОбработки.Сообщение);
			ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
			Возврат;
		КонецЕсли;
		
		// Получение двоичных данных счета на оплату.
		РезультатОбработки = НовыйРезультатОбработки();
		ДанныеСчета = ДанныеСчетаНаОплату(ДанныеЗапроса, СчетНаОплату, РезультатОбработки);
		Если Не ДанныеСчета = Неопределено Тогда
			ПоместитьФайлВСчет(ИдентификаторСчета, ДанныеСчета, "bill.zip");
		ИначеЕсли РезультатОбработки.Ошибка Тогда
			Данные = ШаблонДанныхОтвета(КодВозвратаОшибкаДанных(), РезультатОбработки.Сообщение);
			ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
			Возврат;
		КонецЕсли;
		
		Если ПечатнаяФорма = Неопределено И ДанныеСчета = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru 'Не заданы или не возвращают данных переопределяемые методы %1 и %2. '"),
				"ОплатаСервисаПереопределяемый.ПриПолученииПечатнойФормыСчетаНаОплату",
				"ОплатаСервисаПереопределяемый.ПриПолученииДанныхСчетаНаОплату");
		КонецЕсли;
			
		РезультатОбработки = НовыйРезультатОбработки();
		ПлатежнаяСсылка = ПлатежнаяСсылкаСчетаНаОплату(ДанныеЗапроса, СчетНаОплату, РезультатОбработки);
		Если РезультатОбработки.Ошибка Тогда
			Данные = ШаблонДанныхОтвета(КодВозвратаОшибкаДанных(), РезультатОбработки.Сообщение);
			ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
			Возврат;
		КонецЕсли;
		
		Данные = ШаблонДанныхОтвета();
		Данные.Вставить("payment_link", ПлатежнаяСсылка);
		
		ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Данные = ШаблонДанныхОтвета(КодВозвратаВнутренняяОшибка(), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОтправитьОтветВУчетнуюСистемуБиллинга(ИдентификаторСчета, Данные);
		
	КонецПопытки;		
	
КонецПроцедуры

// Возвращает данные запроса счета на оплату в структурированном виде.
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - запрос счета на оплату из менеджера сервиса.
//
// Возвращаемое значение:
//  Структура - данные запроса:
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета на оплату
//   * КодПродавца - Число - код абонента-продавца
//   * ПочтаПродавца - Срока - адрес электронной почты абонента-продавца
//   * КодПокупателя - Число - код абонента-покупателя
//   * НаименованиеПокупателя - Строка - наименование абонента-покупателя
//   * ПубличныйИдентификаторПокупателя - Строка - публичный налоговый идентификатор (ИНН) абонента-покупателя
//   * ПочтаПокупателя - Строка - адрес электронной почты абонента-покупателя
//   * ТелефонПокупателя - Строка - телефон абонента-покупателя
//   * ДополнительнаяИнформация - Строка - дополнительная информация по счету на оплату
//   * Продление - Булево - признак продления платного периода 
//   * ПлатежнаяСсылка - Строка - платежная ссылка счета на оплату
//   * Сумма - Число - сумма счета на оплату (разрядность 31.2)
//   * Тарифы - ТаблицаЗначений:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации, переопределяющего тариф провайдера
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов (разрядность 10.0)
//     ** Сумма - Число (разрядность 31.2) - стоимость указанного периода действия тарифа
//     ** НомерОснования - Строка - номер подписки на тариф, по которой был отправлен запрос на счет
//   * Услуги - ТаблицаЗначений:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги (разрядность 31.2).
//
Функция ДанныеЗапросаСчетаНаОплату(Запрос) Экспорт
	
	Данные = ДанныеJSON(Запрос.ПолучитьТелоКакСтроку());
		
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Результат = Служебный.ПереименоватьСвойства(Данные, ПереименованияПолейЗапроса());
	Результат.Тарифы = Служебный.МассивСтруктурВТаблицуЗначений(Результат.Тарифы, Служебный.ПереименованияСчетТарифы());
	Результат.Услуги = Служебный.МассивСтруктурВТаблицуЗначений(Результат.Услуги, Служебный.ПереименованияСчетУслуги());
	
	Возврат Результат;

КонецФункции

// Преобразует переданное значение в JSON-строку.
//
// Параметры:
//  Данные - Структура - данные.
// 
// Возвращаемое значение:
//  Строка - строка в формате JSON.
//
Функция СтрокаJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные,, "ПреобразованиеДанныхJSON", ОплатаСервиса);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Преобразует строку JSON в структуру.
//
// Параметры:
//	Строка - Строка - строка в формате JSON
//	ИменаСвойствСоЗначениямиДата - Массив - имена свойств для преобразования в значения типа Дата.
// 
// Возвращаемое значение:
//	Структура - данные из переданной строки.
//
Функция ДанныеJSON(Строка, ИменаСвойствСоЗначениямиДата = Неопределено) Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Новый Структура;
	КонецЕсли; 
	
	Если ИменаСвойствСоЗначениямиДата = Неопределено Тогда
		ИменаСвойствСоЗначениямиДата = Новый Массив;
	КонецЕсли; 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	
	Если ИменаСвойствСоЗначениямиДата.Количество() = 0 Тогда
		Ответ = ПрочитатьJSON(ЧтениеJSON); 
	Иначе
		Ответ = ПрочитатьJSON(ЧтениеJSON, , , , 
			"ВосстановлениеЗначенияДата", ОплатаСервиса, ,
			ИменаСвойствСоЗначениямиДата);
	КонецЕсли;
	
	Возврат Ответ
	
КонецФункции

// Cм. метод глобального контекста - ЗаписатьJSON, параметр ИмяФункцииПреобразования.
//
Функция ПреобразованиеДанныхJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Null") Тогда
		Отказ = Истина;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Строка(Значение.УникальныйИдентификатор());
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	КонецЕсли; 
	
КонецФункции

// Обработчик восстановления значения типа Дата при чтении JSON-строки.
//
// Параметры:
//	Свойство - Строка - имя свойства объекта.
//	Значение - Строка, Число - значение, полученное из JSON-строки.
//	ДополнительныеПараметры - Произвольный - дополнительные параметры обработчика.
// 
Функция ВосстановлениеЗначенияДата(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	// Проверка стандартных значений 2018-01-01T00:00:00, 2018-01-01T00:00:00Z, 2018-01-01T00:00:00+0000
	Если СтрДлина(Значение) <= 24 И Сред(Значение, 5, 1) = "-" И Сред(Значение, 8, 1) = "-" И Сред(Значение, 11, 1) = "T" Тогда
		Возврат XMLЗначение(Тип("Дата"), Значение);
	КонецЕсли; 
	
	// Восстановление даты в формате дд.ММ.гггг
	ЧастиЗначенияДаты = СтрРазделить(Значение, ".");
	Если ЧастиЗначенияДаты.Количество() >= 3 Тогда
		Возврат Дата(Число(ЧастиЗначенияДаты[2]), Число(ЧастиЗначенияДаты[1]), Число(ЧастиЗначенияДаты[0]));
	КонецЕсли;
	
	// Восстановление даты в формате ММ/дд/гггг
	ЧастиЗначенияДаты = СтрРазделить(Значение, "/");
	Если ЧастиЗначенияДаты.Количество() >= 3 Тогда
		Возврат Дата(Число(ЧастиЗначенияДаты[2]), Число(ЧастиЗначенияДаты[0]), Число(ЧастиЗначенияДаты[1]));
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПереименованияПолейЗапроса() Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", Служебный.ОписаниеКолонки("ИдентификаторСчета", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("seller_id", Служебный.ОписаниеКолонки("КодПродавца", ОбщегоНазначения.ОписаниеТипаСтрока(12)));
	Переименования.Вставить("seller_email", Служебный.ОписаниеКолонки("ПочтаПродавца", Новый ОписаниеТипов("Строка")));
	Переименования.Вставить("client_id", Служебный.ОписаниеКолонки("КодПокупателя", ОбщегоНазначения.ОписаниеТипаСтрока(12)));
	Переименования.Вставить("client_name", Служебный.ОписаниеКолонки("НаименованиеПокупателя", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	Переименования.Вставить("client_public_id", Служебный.ОписаниеКолонки("ПубличныйИдентификаторПокупателя", ОбщегоНазначения.ОписаниеТипаСтрока(36)));
	Переименования.Вставить("client_email", Служебный.ОписаниеКолонки("ПочтаПокупателя", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	Переименования.Вставить("client_phone", Служебный.ОписаниеКолонки("ТелефонПокупателя", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	Переименования.Вставить("client_info", Служебный.ОписаниеКолонки("ДополнительнаяИнформация", Новый ОписаниеТипов("Строка")));
	Переименования.Вставить("renewal", Служебный.ОписаниеКолонки("Продление", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("payment_link",  Служебный.ОписаниеКолонки("ПлатежнаяСсылка", ОбщегоНазначения.ОписаниеТипаСтрока(1024)));
	Переименования.Вставить("total_cost",  Служебный.ОписаниеКолонки("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("tariffs", "Тарифы");
	Переименования.Вставить("services", "Услуги");
	
	Возврат Переименования;
	
КонецФункции

Процедура ЛогироватьHTTPЗапрос(Запрос, Ответ, ДвоичныеДанные = Ложь) Экспорт
	
    Описание = ОписаниеЗапроса(Запрос, ДвоичныеДанные) + Символы.ПС + "---" + Символы.ПС + ОписаниеОтвета(Ответ, ДвоичныеДанные);
    ЗаписьЖурналаРегистрации(СобытиеHTTPЗапрос(), УровеньЖурналаРегистрации.Информация,
        Метаданные.HTTPСервисы.Биллинг, , Описание);
	
КонецПроцедуры

Функция ИмяСобытия(ВложенноеСобытие) Экспорт
	
	Возврат Метаданные.HTTPСервисы.Биллинг.Синоним + ". " + ВложенноеСобытие;
	
КонецФункции

Процедура ДобавитьЗаголовкиДанных(Ответ) Экспорт
	
	Заголовки = Ответ.Заголовки;
	
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Accept-Charset", "utf-8");
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");	
	Заголовки.Вставить("Cache-Control", "no-cache");
	
КонецПроцедуры

Функция ВладелецПароляАвторизацииВСервисе(Пользователь) Экспорт
	
	Возврат РегистрыСведений.АвторизацияВСервисе1СФреш.ВладелецБезопасногоХранилища(Пользователь);

КонецФункции

Функция ВладелецПароляАвторизацииВУчетнойСистеме() Экспорт

	Возврат Метаданные.Константы.ИмяПользователяУчетнойСистемы.ПолноеИмя();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйРезультатОбработки()
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Ошибка", Ложь);
	РезультатОбработки.Вставить("Сообщение", "");
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция АдресСчетовНаОплатуУчетнойСистемыБиллинга()
	
	Возврат "hs/ui/bills";
	
КонецФункции
 
Функция СоздатьСчетНаОплату(ДанныеЗапроса, РезультатОбработки)

	СчетНаОплату = Неопределено;
	
	ОплатаСервисаПереопределяемый.ПриСозданииСчетаНаОплату(
		ДанныеЗапроса, СчетНаОплату, РезультатОбработки);
		
	Возврат СчетНаОплату;

КонецФункции

Функция ПечатнаяФормаСчетаНаОплату(ДанныеЗапроса, СчетНаОплату, РезультатОбработки)

	ПечатнаяФорма = Неопределено;
	
	ОплатаСервисаПереопределяемый.ПриПолученииПечатнойФормыСчетаНаОплату(
		ДанныеЗапроса, СчетНаОплату, ПечатнаяФорма, РезультатОбработки);
		
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ДанныеСчетаНаОплату(ДанныеЗапроса, СчетНаОплату, РезультатОбработки)
	
	Данные = Неопределено;
	
	ОплатаСервисаПереопределяемый.ПриПолученииДанныхСчетаНаОплату(
		ДанныеЗапроса, СчетНаОплату, Данные, РезультатОбработки);
	
	Возврат Данные;
	
КонецФункции

Функция ПлатежнаяСсылкаСчетаНаОплату(ДанныеЗапроса, СчетНаОплату, РезультатОбработки)
	
	ПлатежнаяСсылка = "";
	
	ОплатаСервисаПереопределяемый.ПриПолученииПлатежнойСсылки(
			ДанныеЗапроса, СчетНаОплату, ПлатежнаяСсылка, РезультатОбработки);	
	
	Возврат ПлатежнаяСсылка;
	
КонецФункции
 
Функция ПоместитьФайлВСчет(ИдентификаторСчета, ДвоичныеДанные, ИмяФайла)
	
	ПараметрыТокена = ПрограммныйИнтерфейсСервиса.НовыйПараметрыПолученияТалонаНаЗагрузкуФайла();
	ПараметрыТокена.ИдентификаторСчета = ИдентификаторСчета;
	ПараметрыТокена.Размер = ДвоичныеДанные.Размер();
	ПараметрыТокена.ИмяФайла = ИмяФайла;
	ДанныеТокена = ПрограммныйИнтерфейсСервиса.СчетНаОплатуФайлыТалонНаЗагрузку(ПараметрыТокена);
	Адрес = СтрШаблон("hs/dt/upload/%1", ДанныеТокена.ТалонНаЗагрузкуФайла);
	УстановитьПривилегированныйРежим(Истина);
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		АдресСервиса = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса();
	Иначе
		АдресСервиса = ПрограммныйИнтерфейсСервисаСлужебный.АдресСервисаИзЛокальнойБазы();
	КонецЕсли;
	
	ПолныйАдрес = СтрШаблон("%1/%2", АдресСервиса, Адрес);
	ДанныеСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдрес);
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Соединение = РаботаВМоделиСервисаБТС.СоединениеСМенеджеромСервиса(ДанныеСервера);
	Иначе
		Соединение = ПрограммныйИнтерфейсСервисаСлужебный.СоединениеСМенеджеромСервисаИзЛокальнойБазы(ДанныеСервера);
	КонецЕсли; 
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = ДанныеСервера.ПутьНаСервере;
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	ЗапросHTTP.Заголовки.Вставить("IBSession", "start");
	ЗапросHTTP.Заголовки.Вставить("Content-Range", 
		СтрШаблон("bytes 0-%1/%2", Формат(ПараметрыТокена.Размер - 1, "ЧГ=0"), 
		Формат(ПараметрыТокена.Размер, "ЧГ=0")));
	
	Ответ = Соединение.ВызватьHTTPМетод("PUT", ЗапросHTTP);
	
	Если Ответ.КодСостояния = 500 Тогда
		Для Счетчик = 1 По 3 Цикл
			ОбщегоНазначенияБТС.Пауза(Счетчик * 3);
			Ответ = Соединение.ВызватьHTTPМетод("PUT", ЗапросHTTP);
			Если Не Ответ.КодСостояния = 201 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Не Ответ.КодСостояния = 201 Тогда
		ЛогироватьHTTPЗапрос(ЗапросHTTP, Ответ, Истина);
		Если Ответ.КодСостояния = 500 Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка помещения файла в счет на оплату %1 по причине: %2'"),
				ИдентификаторСчета, Ответ.ПолучитьТелоКакСтроку());
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#Область Логирование

Функция БазовыйURL(HTTPСервисЗапрос)
	
	БазовыйURL = HTTPСервисЗапрос.Заголовки.Получить("X-Forwarded-Path");
	Если БазовыйURL = Неопределено Тогда
		Возврат НормализоватьАдрес(HTTPСервисЗапрос.БазовыйURL);
	Иначе
		ЧастиАдреса = СтрРазделить(НормализоватьАдрес(HTTPСервисЗапрос.БазовыйURL), "/", Ложь);
		Возврат ЧастиАдреса[0] + "//" + ЧастиАдреса[1] + БазовыйURL;
	КонецЕсли;
	
КонецФункции

Функция НормализоватьАдрес(Адрес)
	
	ЧастиАдреса = СтрРазделить(Адрес, "/", Ложь);
	
	Протокол = СокрЛП(ЧастиАдреса[0]) + "//";
	ЧастиАдреса.Удалить(0);
	
	ЧастиИмени = СтрРазделить(СокрЛП(ЧастиАдреса[0]), ":");
	ЧастиАдреса.Удалить(0);
	ИмяСервера = ЧастиИмени[0];
	ПортСервера = ?(ЧастиИмени.Количество() = 1, "", СокрЛП(ЧастиИмени[1]));
	Если Протокол = "http://" Тогда
		ПортСервера = ?(ПустаяСтрока(ПортСервера) Или ПортСервера = "80", "", ":" + ПортСервера);
	ИначеЕсли Протокол = "https://" Тогда
		ПортСервера = ?(ПустаяСтрока(ПортСервера) Или ПортСервера = "443", "", ":" + ПортСервера);
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный протокол: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), Протокол);
	КонецЕсли;
	
	Путь = "/" + СтрСоединить(ЧастиАдреса, "/");
	
	Возврат Протокол + ИмяСервера + ПортСервера + Путь;
    
КонецФункции

Функция ОписаниеЗапроса(Запрос, ДвоичныеДанные = Ложь)
	
	ПараметрыЗапроса = Неопределено;
	Если ТипЗнч(Запрос) = Тип("HTTPСервисЗапрос") Тогда
		Если Запрос.ПараметрыЗапроса.Количество() Тогда
			ПараметрыЗапроса = Новый Массив;
			Для Каждого КлючИЗначение Из Запрос.ПараметрыЗапроса Цикл
				ПараметрыЗапроса.Добавить(КлючИЗначение.Ключ + "=" + КодироватьСтроку(
					КлючИЗначение.Значение, СпособКодированияСтроки.КодировкаURL));
			КонецЦикла;
			ПараметрыЗапроса = "?" + СтрСоединить(ПараметрыЗапроса, "&");
		КонецЕсли;
		Адрес = Запрос.HTTPМетод + " " + БазовыйURL(Запрос) + Запрос.ОтносительныйURL + ПараметрыЗапроса;
	Иначе
		Адрес = Запрос.АдресРесурса;
	КонецЕсли;
	
	Заголовки = Новый Массив;
    Для Каждого Заголовок  Из Запрос.Заголовки Цикл
    	Заголовки.Добавить( СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
	КонецЦикла;
	
	Если ДвоичныеДанные Тогда
		ТелоЗапроса = ПолучитьBase64СтрокуИзДвоичныхДанных(Запрос.ПолучитьТелоКакДвоичныеДанные());
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли; 
	
	Если СтрДлина(ТелоЗапроса) > 1000 Тогда
		ТелоЗапроса = СтрШаблон(НСтр("ru = '%1...'"), Лев(ТелоЗапроса, 1000));
	КонецЕсли; 
    
    Возврат СтрШаблон(
        "%1
        |%2
        |
        |%3", Адрес, 
        СтрСоединить(Заголовки, Символы.ПС), ТелоЗапроса);
    
КонецФункции

Функция ОписаниеОтвета(Ответ, ДвоичныеДанные = Ложь)
    
    Заголовки = Новый Массив;
    Для Каждого Заголовок  Из Ответ.Заголовки Цикл
    	Заголовки.Добавить(СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
    КонецЦикла; 
	
	Если ТипЗнч(Ответ) = Тип("HTTPСервисОтвет") Тогда
		КодСостояния = СтрШаблон("%1 %2", Ответ.КодСостояния, Ответ.Причина);
	Иначе
		КодСостояния = Ответ.КодСостояния
	КонецЕсли; 
	
	Если ДвоичныеДанные Тогда
		ТелоОтвета = ПолучитьBase64СтрокуИзДвоичныхДанных(Ответ.ПолучитьТелоКакДвоичныеДанные());
	Иначе
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли; 

	Если СтрДлина(ТелоОтвета) > 1000 Тогда
		ТелоОтвета = СтрШаблон(НСтр("ru = '%1...'"), Лев(ТелоОтвета, 1000));
	КонецЕсли; 
	
	
	Возврат СтрШаблон(
        "%1
        |%2
        |
        |%3", 
        КодСостояния,
        СтрСоединить(Заголовки, Символы.ПС), Ответ.ПолучитьТелоКакСтроку());
	
КонецФункции

Функция СобытиеHTTPЗапрос()
	
	Возврат ИмяСобытия(НСтр("ru = 'HTTP-запрос'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

#КонецОбласти

#КонецОбласти
