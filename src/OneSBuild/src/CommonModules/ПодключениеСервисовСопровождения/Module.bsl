///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ПодключениеСервисовСопровождения.
//
// Серверные процедуры и функции подключения тестовых периодов:
//  - для работы с сервисов подключения тестовых периодов;
//  - для обработки кэша тестовых периодов;
//  - для регистрации сервисов сопровождения;
//  - для заполнения текущих дел;
//  - для обработки регламентных заданий;
//  - обработки событий Библиотеки стандартных подсистем;
//  - обработки событий Библиотеки технологии сервиса.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПодключениеТестовыхПериодов

// Создает описатель сервиса сопровождения, который используется
// при подключении тестового периода.
//
// Возвращаемое значение:
//   Структура - содержит перечень значений необходимых для  подключения тестового периода:
//     *Идентификатор - Строка - идентификатор сервиса в системе Портал 1С:ИТС. Поле обязательно для заполнения,
//                      если передана пустая строка, при переходе на новую версию будет вызвано исключение.
//                      Длина не более 255 символов;
//     *Картинка      - Метаданные.ОбщиеКартинки, Неопределено - картинка сервиса  Если значение не будет
//                      передано, видимость элемента формы отключается. Рекомендуемый размер картинки 48х48 пикселей;
//     *Наименование  - Строка - наименование сервиса. Поле обязательно для заполнения,
//                      если передана пустая строка, при переходе на новую версию будет вызвано исключение.
//                      Длина не более 150 символов;
//     *Описание      - Строка - краткое описание сервиса. Поле обязательно для заполнения,
//                      если передана пустая строка, при переходе на новую версию будет вызвано исключение.
//                      Длина не более 150 символов.
//
Функция НовыйОписательСервиса() Экспорт
	
	ОписательСервиса = Новый Структура;
	ОписательСервиса.Вставить("Идентификатор", "");
	ОписательСервиса.Вставить("Картинка",      Неопределено);
	ОписательСервиса.Вставить("Наименование",  "");
	ОписательСервиса.Вставить("Описание",      "");
	
	Возврат ОписательСервиса;
	
КонецФункции

// Выполняет проверку возможности подключения тестового периода для пользователя.
// Перед запросом доступных тестовых периодов происходит проверка кэша, если данные
// о доступных тестовых периодах были получены в течение 24 часов, используется информация
// из кэша. В противном случае производится запрос на получение обновленной информации
// из сервисов Портала 1С:ИТС. Функцию необходимо использовать для определения
// потребности в отображении элемента управления подключения тестового периода.
// Функцию следует использовать, если целевой сервис не подключен.
//
// Параметры:
//  Идентификаторы - Массив - содержит идентификаторы сервисов в системе Портал 1С:ИТС.
//
// Возвращаемое значение:
//  Структура - содержит информацию о доступных тестовых периодах сервисов сопровождения:
//    *Ошибка - Булево - Истина, если при обновлении кэша были ошибки;
//              Ошибка может возникнуть в случае:
//               - на текущий момент существую запросы на подключение тестового периода;
//               - ошибка при получении данных из сервиса;
//               - передан некорректный идентификатор сервиса;
//    *СообщениеОбОшибке - Строка - информация об ошибке для пользователя;
//    *СервисыСопровождения - Соответствие - информация о доступности подключения сервисов:
//      **Ключ - Строка - идентификатор сервиса;
//      **Значение - Строка - содержит результат проверки возможности подключения. Возможны значения:
//                    - "Подключение" если в текущий момент обрабатываются запросы
//                      на подключение тестового периода.
//                    - "Доступно" если подключение тестового периода доступно;
//                    - "Недоступно" если подключение тестового периода недоступно;
//                      Подключение может быть недоступно:
//                       - пользователь уже использовал тестовый период;
//                       - у сервиса отсутствуют тестовые периоды периода;
//                       - у пользователя нет прав для подключения тестового периода.
//
// Пример:
//
//  ИдентификаторСервиса = СПАРКРискиКлиентСервер.ИдентификаторСервиса();
//  Идентификаторы       = Новый Массив;
//  Идентификаторы.Добавить(ИдентификаторСервиса);
//  РезультатПроверки = ПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
//  СтатусПодключения = РезультатПроверки.СервисыСопровождения.Получить(ИдентификаторСервиса);
//  Если СтатусПодключения = "Подключение" Тогда
//    Элементы.ДекорацияПодключить.Видимость  = Ложь;
//    Элементы.ДекорацияПодключение.Видимость = Истина;
//  ИначеЕсли СтатусПодключения = "Доступно" Тогда
//    Элементы.ДекорацияПодключить.Видимость  = Истина;
//    Элементы.ДекорацияПодключение.Видимость = Ложь;
//  ИначеЕсли СтатусПодключения = "Недоступно" Тогда
//    Элементы.ДекорацияПодключить.Видимость  = Ложь;
//    Элементы.ДекорацияПодключение.Видимость = Ложь;
//  КонецЕсли;
//
Функция ДоступноПодключениеТестовогоПериода(Идентификаторы) Экспорт
	
	ОписательДоступности = Новый Структура;
	ОписательДоступности.Вставить("Ошибка",               Ложь);
	ОписательДоступности.Вставить("СообщениеОбОшибке",    "");
	ОписательДоступности.Вставить("СервисыСопровождения", Новый Соответствие);
	
	// Подключение может быть недоступно если:
	//  - у пользователя нет прав для подключения тестового периода,
	//    считается, что тестовые периоды недоступны для всех сервисов;
	//  - конфигурация работает в модели сервиса.
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ОписательДоступности.СервисыСопровождения.Вставить(Идентификатор, "Недоступно");
		КонецЦикла;
		Возврат ОписательДоступности;
	КонецЕсли;
	
	// Подключение может быть недоступно, если существуют необработанные
	// запросы на подключение,т.к. невозможно определить доступные тестовые периоды;
	ЗапросыНаПодключение = АктивныеЗапросыНаПодключение(Идентификаторы);
	Если ЗапросыНаПодключение.Количество() > 0 Тогда
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ОписательДоступности.СервисыСопровождения.Вставить(Идентификатор, "Подключение");
		КонецЦикла;
		Возврат ОписательДоступности;
	КонецЕсли;
	
	// Если при обновлении данных кэша тестовых периодах были ошибки,
	// считается, что недоступны все сервисы.
	РезультатОбновления = ОбновитьКэшТестовыхПериодов(Идентификаторы);
	Если РезультатОбновления.Ошибка Тогда
		ОписательДоступности.Ошибка            = РезультатОбновления.Ошибка;
		ОписательДоступности.СообщениеОбОшибке = РезультатОбновления.ИнформацияОбОшибке;
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ОписательДоступности.СервисыСопровождения.Вставить(Идентификатор, "Недоступно");
		КонецЦикла;
		Возврат ОписательДоступности;
	КонецЕсли;
	
	ОписательДоступности.СервисыСопровождения = СервисыСопровожденияДоступныеДляПодключения(Идентификаторы);
	
	Возврат ОписательДоступности;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
//
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
	Обработчики.Добавить(МодульПодключениеСервисовСопровождения);
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                      дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДела = "ПодключениеТестовогоПериода";
	
	РезультатЗапроса = ОбработанныеЗапросыНаПодключение();
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ПодключениеТестовогоПериода";
	Дело.ЕстьДела       = Ложь;
	Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;
	Дело.Важное         = Ложь;
	Дело.Представление  = НСтр("ru = 'Подключение тестового периода'");
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Дело.ЕстьДела       = Истина;
	Дело.Представление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подключение тестового периода (%1)'"),
		ВыборкаДетальныеЗаписи.Количество());
	
	ИндексДела =  1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Подключен Тогда
			СостояниеЗапроса = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен");
			Представление    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подключен %1'"),
				ВыборкаДетальныеЗаписи.НаименованиеТестовогоПериода);
		Иначе
			СостояниеЗапроса = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.ОшибкаПодключения");
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подключить %1'"),
				ВыборкаДетальныеЗаписи.НаименованиеТестовогоПериода);
		КонецЕсли;
		
		Идентификатор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ПодключениеТестовогоПериода%1",
			ИндексДела);
		
		ДелоПодключение = ТекущиеДела.Добавить();
		ДелоПодключение.Идентификатор = Идентификатор;
		ДелоПодключение.ЕстьДела      = Истина;
		ДелоПодключение.Владелец      = "ПодключениеТестовогоПериода";
		ДелоПодключение.Важное        = Не ВыборкаДетальныеЗаписи.Подключен;
		ДелоПодключение.Представление = Представление;
		ДелоПодключение.Форма         = "Обработка.ПодключениеСервисовСопровождения.Форма.ПодключениеТестовогоПериода";
		
		ПараметрыФормы = ПодключениеСервисовСопровожденияКлиентСервер.НовыйПараметрыФормыОтобразитьРезультат(
			ВыборкаДетальныеЗаписи.ИдентификаторТестовогоПериода,
			ВыборкаДетальныеЗаписи.НаименованиеТестовогоПериода,
			ВыборкаДетальныеЗаписи.Идентификатор,
			ВыборкаДетальныеЗаписи.ИдентификаторЗапроса,
			ВыборкаДетальныеЗаписи.ОписаниеОшибки,
			СостояниеЗапроса);
		
		ДелоПодключение.ПараметрыФормы = ПараметрыФормы;
		ИндексДела = ИндексДела + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаПодключенияТестовыхПериодов(0),
		443,
		НСтр("ru = 'Сервис подключения тестовых периодов (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаПодключенияТестовыхПериодов(1),
		443,
		НСтр("ru = 'Сервис подключения тестовых периодов (eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОчередьЗаданий

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПодключениеТестовыхПериодов.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область БСПНастройкиПрограммы

// После отключения от ИПП, должны быть очищена информация о тестовых периодах.
// Очищаются регистры сведений "КэшТестовыхПериодов" и "ИдентификаторыЗапросовНаПодключение"
// и удаляются регламентные задания.
//
Процедура ОтключитьИнтернетПоддержкуПользователей() Экспорт
	
	Если Не ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки() Тогда
		ВызватьИсключение НСтр("ru = 'Отключение интернет поддержки пользователей не доступно.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Кэш = РегистрыСведений.КэшТестовыхПериодов.СоздатьНаборЗаписей();
	Кэш.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыЗапросовНаПодключение.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИдентификаторыЗапросовНаПодключение КАК ИдентификаторыЗапросовНаПодключение
		|ГДЕ
		|	ИдентификаторыЗапросовНаПодключение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПодключенияСервисов.Подключение)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УдалитьРегламентноеЗаданиеПроверкиПодключения(
			ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	ЗапросыПодключения = РегистрыСведений.ИдентификаторыЗапросовНаПодключение.СоздатьНаборЗаписей();
	ЗапросыПодключения.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ИдентификаторыСервисовСопровождения);
	Типы.Добавить(Метаданные.РегистрыСведений.КэшТестовыхПериодов);
	Типы.Добавить(Метаданные.РегистрыСведений.ИдентификаторыЗапросовНаПодключение);
	
КонецПроцедуры

// См. процедуру
// ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных().
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	ОбновитьДанныеСервисовСопровождения();
	
КонецПроцедуры

#КонецОбласти

#Область ОповещенияДляПользователей

// Формирует массив данных для вывода оповещений.
//
Функция ДанныеОповещенийОбОбработкеЗапросов() Экспорт
	
	Оповещения = Новый Массив;
	
	ДанныеОповещений = Новый Структура;
	ДанныеОповещений.Вставить("ЕстьНеОбработанныеЗапросы", Ложь);
	ДанныеОповещений.Вставить("Оповещения",                Оповещения);
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		Возврат ДанныеОповещений;
	КонецЕсли;
	
	ДанныеОповещений.ЕстьНеОбработанныеЗапросы = НеОбработанныеЗапросыПользователя();
	РезультатЗапроса                           = ОбработанныеЗапросыНаПодключение();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеОповещений;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Подключен Тогда
			СостояниеЗапроса = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен");
			Представление    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подключен %1'"),
				ВыборкаДетальныеЗаписи.НаименованиеТестовогоПериода);
		Иначе
			СостояниеЗапроса = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.ОшибкаПодключения");
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подключить %1'"),
				ВыборкаДетальныеЗаписи.НаименованиеТестовогоПериода);
		КонецЕсли;
		
		ПараметрыФормы = ПодключениеСервисовСопровожденияКлиентСервер.НовыйПараметрыФормыОтобразитьРезультат(
			ВыборкаДетальныеЗаписи.ИдентификаторТестовогоПериода,
			ВыборкаДетальныеЗаписи.НаименованиеТестовогоПериода,
			ВыборкаДетальныеЗаписи.Идентификатор,
			ВыборкаДетальныеЗаписи.ИдентификаторЗапроса,
			ВыборкаДетальныеЗаписи.ОписаниеОшибки,
			СостояниеЗапроса);
		
		ОписательОповещения = Новый Структура;
		ОписательОповещения.Вставить("ПараметрыФормы", ПараметрыФормы);
		ОписательОповещения.Вставить("Представление",  Представление);
		
		Оповещения.Добавить(ОписательОповещения);
		
		УдалитьИнформациюОЗапросеНаПодключение(
			ВыборкаДетальныеЗаписи.Идентификатор,
			ВыборкаДетальныеЗаписи.ИдентификаторЗапроса);
		
	КонецЦикла;
	
	Возврат ДанныеОповещений;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "*";
		Обработчик.Процедура           = "ПодключениеСервисовСопровождения.ОбновитьДанныеСервисовСопровождения";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка разделенных данных.'");
		Обработчик.РежимВыполнения     = "Оперативно";
	КонецЕсли;
	
КонецПроцедуры

// Определяет список модулей библиотек и конфигурации, которые предоставляют
// основные сведения о сервисах: идентификатор, наименование, описание и картинка
// и обновляет данные справочника "ИдентификаторыСервисовСопровождения".
//
Процедура ОбновитьДанныеСервисовСопровождения() Экспорт
	
	// В модели сервиса подключение не доступно.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление данных идентификаторов сервисов сопровождения. Начало обновления.'"),
		Ложь);
	
	МодулиСервисов = Новый Массив;
	ИнтернетПоддержкаПользователей.ПриОпределенииСервисовСопровождения(МодулиСервисов);
	МодулиСервисов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МодулиСервисов);
	
	СервисыСопровождения = Новый Массив;
	
	// Сервисы Интернет поддержки-пользователей.
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// Сервисы поставляемые другими библиотеками и конфигурациями.
	Для каждого Модуль Из МодулиСервисов Цикл
		МодульСервиса = ОбщегоНазначения.ОбщийМодуль(Модуль);
		МодульСервиса.ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения);
	КонецЦикла;
	
	Справочники.ИдентификаторыСервисовСопровождения.ОбновитьДанныеСервисовСопровождения(
		СервисыСопровождения);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление данных идентификаторов сервисов сопровождения. Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ПодключениеТестовыхПериодов"
//
// Параметры:
//  СервисСопровождения - Справочник.ИдентификаторыСервисовСопровождения - сервис,
//                   для которого необходимо проверить состояние запроса
//                   на подключение;
//  ИдентификаторЗапроса - Строка - уникальный идентификатор запроса на подключение
//                         тестового периода в сервисе;
//  ИдентификаторТестовогоПериода - Строка - уникальный идентификатор тестового периода.
//
Процедура ПодключениеТестовыхПериодов(
		СервисСопровождения,
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода) Экспорт
	
	// Регламентные задания блокируются на время служебных
	// операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПодключениеТестовыхПериодов);
	
	РезультатОперации = СостояниеЗапросаНаПодключение(
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода,
		Истина);
	
	Если РезультатОперации.Ошибка Тогда
		УдалитьРегламентноеЗаданиеПроверкиПодключения(
			ИдентификаторЗапроса);
		ИзменитьИнформациюОЗапросеПодключения(
			СервисСопровождения,
			ИдентификаторЗапроса,
			ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.ОшибкаПодключения"),
			РезультатОперации.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	РезультатПодключения = РезультатОперации.РезультатПодключения;
	
	Если РезультатПодключения.Ошибка Тогда
		УдалитьРегламентноеЗаданиеПроверкиПодключения(
			ИдентификаторЗапроса);
		ИзменитьИнформациюОЗапросеПодключения(
			СервисСопровождения,
			ИдентификаторЗапроса,
			ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.ОшибкаПодключения"),
			РезультатПодключения.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если РезультатПодключения.Подключен Тогда
		УдалитьРегламентноеЗаданиеПроверкиПодключения(
			ИдентификаторЗапроса);
		ИзменитьИнформациюОЗапросеПодключения(
			СервисСопровождения,
			ИдентификаторЗапроса,
			ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен"),
			"");
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ПодключениеТестовыхПериодов" и
// записывает информацию в регистр сведений "ИдентификаторыЗапросовНаПодключение".
//
// Параметры:
//  СервисСопровождения           - Справочник.ИдентификаторыСервисовСопровождения - сервис,
//                                для которого необходимо проверить состояние запроса
//                                на подключение;
//  ИдентификаторЗапроса          - УникальныйИдентификатор - идентификатор запроса по которому будет
//                                произведена проверка;
//  ИдентификаторТестовогоПериода - Строка - уникальный идентификатор тестового периода;
//  НаименованиеТестовогоПериода  - Строка - наименование подключаемого тестового периода.
//
Процедура СоздатьРегламентноеЗаданиеПроверкиПодключения(
		СервисСопровождения,
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода,
		НаименованиеТестовогоПериода) Экспорт
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		ВызватьИсключение НСтр("ru = 'Подключение тестового периода недоступно.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПроцедуры = Новый Массив;
	ПараметрыПроцедуры.Добавить(СервисСопровождения);
	ПараметрыПроцедуры.Добавить(ИдентификаторЗапроса);
	ПараметрыПроцедуры.Добавить(ИдентификаторТестовогоПериода);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = 3600;
	Расписание.ПериодПовтораДней        = 1;
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подключение тестового периода: %1'"),
		НаименованиеТестовогоПериода);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ПодключениеТестовыхПериодов);
	ПараметрыЗадания.Вставить("Параметры",     ПараметрыПроцедуры);
	ПараметрыЗадания.Вставить("Ключ",          ИдентификаторЗапроса);
	ПараметрыЗадания.Вставить("Расписание",    Расписание);
	ПараметрыЗадания.Вставить("Наименование",  НаименованиеЗадания);
	
	НачатьТранзакцию();
	
	Попытка
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
		ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Создано регламентное задание для проверки запроса на подключение: %1'"),
			ИдентификаторЗапроса);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ТекстЖурналРегистрации,
			Ложь);
		
		ИдентификаторыЗапросовНабор = РегистрыСведений.ИдентификаторыЗапросовНаПодключение.СоздатьНаборЗаписей();
		ИдентификаторыЗапросовНабор.Отбор.ИдентификаторСервисаСопровождения.Установить(СервисСопровождения);
		ИдентификаторыЗапросовНабор.Отбор.Идентификатор.Установить(ИдентификаторЗапроса);
		
		Запись = ИдентификаторыЗапросовНабор.Добавить();
		Запись.ИдентификаторСервисаСопровождения = СервисСопровождения;
		Запись.Идентификатор                     = ИдентификаторЗапроса;
		Запись.Состояние                         = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключение");
		Запись.Пользователь                      = Пользователи.ТекущийПользователь();
		Запись.НаименованиеТестовогоПериода      = НаименованиеТестовогоПериода;
		Запись.ИдентификаторТестовогоПериода     = ИдентификаторТестовогоПериода;
		
		ИдентификаторыЗапросовНабор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при создании регламентного задания проверки подключения тестовых периодов:
			|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет регламентное задание проверки подключения тестовых периодов.
//
// Параметры:
//  ИдентификаторЗапроса  - Строка - ключ регламентного задания.
//
Процедура УдалитьРегламентноеЗаданиеПроверкиПодключения(ИдентификаторЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Ключ", ИдентификаторЗапроса);
	Задания    = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	ТипЗадания = ТипЗнч(Задания);
	Если ТипЗадания = Тип("Массив") Тогда
		Если Задания.Количество() > 0 Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли ТипЗадания = Тип("ТаблицаЗначений") Тогда
		Если Задания.Количество() > 0 Тогда
			Если Задания.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].УникальныйИдентификатор);
			ИначеЕсли Задания.Колонки.Найти("Идентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Удалено регламентное задание проверки запроса на подключение: %1'"),
		ИдентификаторЗапроса);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемТестовыхПериодов

// Получает информацию о тестовых периодах предварительно обновляя кэш тестовых период,
// если данные устарели.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор сервиса в системе Портал 1С:ИТС.
//
// Возвращаемое значение:
//  Структура - информация о тестовых периодах:
//    *ПодключениеДоступно               - Булево - признак возможности подключения;
//    *ПодключениеСервиса                - Булево - выполняется обработка запросов
//                                         на подключение;
//    *ИнформацияОбОшибке                - Строка - информация об ошибках выявленных при
//                                         обновлении данных кэша;
//    *ИдентификаторСервисаСопровождения - Строка - идентификатор сервиса в системе Портал 1С:ИТС;
//    *ТестовыеПериоды                   - Массив - доступные тестовые периоды. Содержит
//                                         элементы типа Структура:
//      **Идентификатор                  - Строка - уникальный идентификатор тестового периода;
//      **Наименование                   - Строка - наименование тестового периода;
//      **Описание                       - Строка - описание тестового периода.
//    *ДанныеОтображения                 - Структура - содержит о запросах на подключение:
//      **РежимРегламентногоЗадания      - Булево - если истина, регламентное задание проверки запроса будет удалено;
//      **НаименованиеПодключаемого      - Строка - наименование тестового периода, который сейчас подключается;
//      **ИдентификаторЗапроса           - Строка - идентификатор запроса на подключение.
//
Функция ТестовыеПериодыСервисаСопровождения(Идентификатор) Экспорт
	
	ДанныеОтображения = Новый Структура;
	ДанныеОтображения.Вставить("РежимРегламентногоЗадания",     Ложь);
	ДанныеОтображения.Вставить("НаименованиеПодключаемого",     "");
	ДанныеОтображения.Вставить("ИдентификаторЗапроса",          "");
	ДанныеОтображения.Вставить("ИдентификаторТестовогоПериода", "");
	
	ОписательПодключения = Новый Структура;
	ОписательПодключения.Вставить("Ошибка",              Ложь);
	ОписательПодключения.Вставить("ПодключениеСервиса",  Ложь);
	ОписательПодключения.Вставить("ПодключениеДоступно", Истина);
	ОписательПодключения.Вставить("ИнформацияОбОшибке",  "");
	ОписательПодключения.Вставить("ДанныеОтображения",   ДанныеОтображения);
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		ОписательПодключения.ПодключениеДоступно = Ложь;
		Возврат ОписательПодключения;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Идентификатор);
	
	ЗапросыНаПодключение = АктивныеЗапросыНаПодключение(Идентификаторы, Истина);
	Если ЗапросыНаПодключение.Количество()>0 Тогда
		ОписательПодключения.ПодключениеСервиса = Истина;
		
		// Если в данный момент производится подключение тестового периода,
		// необходимо заполнить информацию о подключении.
		Пользователь = Пользователи.ТекущийПользователь();
		Для Каждого ПараметрыЗапроса Из ЗапросыНаПодключение Цикл
			ДанныеОтображения.НаименованиеПодключаемого     = ПараметрыЗапроса.Наименование;
			ДанныеОтображения.ИдентификаторЗапроса          = ПараметрыЗапроса.ИдентификаторЗапроса;
			ДанныеОтображения.ИдентификаторТестовогоПериода = ПараметрыЗапроса.ИдентификаторТестовогоПериода;
			Если ПараметрыЗапроса.Пользователь = Пользователь Тогда
				ДанныеОтображения.РежимРегламентногоЗадания = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат ОписательПодключения;
	КонецЕсли;
	
	РезультатОбновления = ОбновитьКэшТестовыхПериодов(Идентификаторы);
	Если РезультатОбновления.Ошибка Тогда
		ОписательПодключения.ПодключениеДоступно = Ложь;
		ОписательПодключения.Ошибка              = Истина;
		ОписательПодключения.ИнформацияОбОшибке  = РезультатОбновления.ИнформацияОбОшибке;
		Возврат ОписательПодключения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыСервисовСопровождения.Ссылка КАК СервисаСопровождения,
		|	КэшТестовыхПериодов.Идентификатор КАК Идентификатор,
		|	КэшТестовыхПериодов.Наименование КАК Наименование,
		|	КэшТестовыхПериодов.Описание КАК Описание
		|ИЗ
		|	Справочник.ИдентификаторыСервисовСопровождения КАК ИдентификаторыСервисовСопровождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшТестовыхПериодов КАК КэшТестовыхПериодов
		|		ПО (КэшТестовыхПериодов.ИдентификаторСервисаСопровождения = ИдентификаторыСервисовСопровождения.Ссылка)
		|			И (ИдентификаторыСервисовСопровождения.ИдентификаторСервиса = &Идентификатор)
		|ГДЕ
		|	ИдентификаторыСервисовСопровождения.ИдентификаторСервиса = &Идентификатор
		|ИТОГИ ПО
		|	СервисаСопровождения";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОписательПодключения.ПодключениеДоступно = Ложь;
		Возврат ОписательПодключения;
	КонецЕсли;
	
	ВыборкаИдентификатор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИдентификатор.Следующий() Тогда
		
		ОписательПодключения.Вставить("СервисаСопровождения", ВыборкаИдентификатор.СервисаСопровождения);
		ВыборкаДетальныеЗаписи = ВыборкаИдентификатор.Выбрать();
		
		ТестовыеПериоды = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Если в выборке существует, хотя бы один тестовый период
			// с не заполненным идентификатором, считается, что сервис
			// не имеет доступных для подключения тестовых периодов.
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Идентификатор) Тогда
				ОписательПодключения.ПодключениеДоступно = Ложь;
				ТестовыеПериоды                          = Новый Массив;
				Прервать;
			КонецЕсли;
			ОписательТестовогоПериода = Новый Структура;
			ОписательТестовогоПериода.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
			ОписательТестовогоПериода.Вставить("Наименование",  ВыборкаДетальныеЗаписи.Наименование);
			ОписательТестовогоПериода.Вставить("Описание",      ВыборкаДетальныеЗаписи.Описание);
			ТестовыеПериоды.Добавить(ОписательТестовогоПериода);
		КонецЦикла;
		
		Если ТестовыеПериоды.Количество() = 0 Тогда
			ОписательПодключения.ПодключениеДоступно = Ложь;
		КонецЕсли;
		
		ОписательПодключения.Вставить("ТестовыеПериоды", ТестовыеПериоды);
		
	КонецЕсли;
	
	Возврат ОписательПодключения;
	
КонецФункции

// Проверяет актуальность данных кэша тестовых периодов и обновляет
// его при необходимости.
//
// Параметры:
//  Идентификаторы  - Массив - идентификаторы сервисов в системе Портал 1С:ИТС.
//
// Возвращаемое значение:
//  Структура - результаты обновления кэша тестовых периодов;
//    *Ошибка - Булево - признак наличия ошибок;
//    *ИнформацияОбОшибке - информация об ошибке для пользователя;
//    *ОбновляемыеИдентификаторы - идентификаторы сервисов для которых был обновлен кэш.
//
Функция ОбновитьКэшТестовыхПериодов(Знач Идентификаторы)
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("Ошибка",             Ложь);
	РезультатОбновления.Вставить("ИнформацияОбОшибке", "");
	
	ИдентификаторСсылка = Справочники.ИдентификаторыСервисовСопровождения.СервисыСопровожденияПоИдентификаторам(
		Идентификаторы);
	
	НеКорректныеИдентификаторы = "";
	Для Каждого Идентификатор Из Идентификаторы Цикл
		Если ИдентификаторСсылка.Получить(Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НеКорректныеИдентификаторы) Тогда
			НеКорректныеИдентификаторы = Идентификатор;
		Иначе
			НеКорректныеИдентификаторы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, %2'"),
				НеКорректныеИдентификаторы,
				Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НеКорректныеИдентификаторы) Тогда
		РезультатОбновления.Ошибка = Истина;
		РезультатОбновления.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Описания сервисов: %1, не добавлены.'"),
			НеКорректныеИдентификаторы);
		Возврат РезультатОбновления;
	КонецЕсли;
	
	ОбновляемыеИдентификаторы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИдентификаторыСервисовСопровождения.ИдентификаторСервиса КАК Идентификатор,
		|	ИдентификаторыСервисовСопровождения.Ссылка КАК Ссылка,
		|	КэшТестовыхПериодов.ИдентификаторСервисаСопровождения КАК ИдентификаторСервисаСопровождения
		|ИЗ
		|	Справочник.ИдентификаторыСервисовСопровождения КАК ИдентификаторыСервисовСопровождения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшТестовыхПериодов КАК КэшТестовыхПериодов
		|		ПО (КэшТестовыхПериодов.ИдентификаторСервисаСопровождения = ИдентификаторыСервисовСопровождения.Ссылка)
		|			И (ИдентификаторыСервисовСопровождения.ИдентификаторСервиса В (&Идентификаторы))
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(КэшТестовыхПериодов.ДатаОбновления, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ) < &ДатаАктуальных
		|	И ИдентификаторыСервисовСопровождения.ИдентификаторСервиса В(&Идентификаторы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИдентификаторыСервисовСопровождения.ИдентификаторСервиса,
		|	ИдентификаторыСервисовСопровождения.Ссылка,
		|	ЕСТЬNULL(КэшТестовыхПериодов.ИдентификаторСервисаСопровождения, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСервисовСопровождения.ПустаяСсылка))
		|ИЗ
		|	Справочник.ИдентификаторыСервисовСопровождения КАК ИдентификаторыСервисовСопровождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшТестовыхПериодов КАК КэшТестовыхПериодов
		|		ПО (КэшТестовыхПериодов.ИдентификаторСервисаСопровождения = ИдентификаторыСервисовСопровождения.Ссылка)
		|			И (ИдентификаторыСервисовСопровождения.ИдентификаторСервиса В (&Идентификаторы))
		|ГДЕ
		|	КэшТестовыхПериодов.ИдентификаторСервисаСопровождения ЕСТЬ NULL
		|	И ИдентификаторыСервисовСопровождения.ИдентификаторСервиса В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("ДатаАктуальных", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	// Обработка не актуальных данных кэша.
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Перед обновлением устаревший кэш будет удален.
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторСервисаСопровождения) Тогда
			Набор = РегистрыСведений.КэшТестовыхПериодов.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторСервисаСопровождения.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			Набор.Записать();
		КонецЕсли;
		ОбновляемыеИдентификаторы.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	// Кэш актуальный, обновление не требуется.
	Если ОбновляемыеИдентификаторы.Количество() = 0 Тогда
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// Запрос информации у сервиса подключения тестовых периодов.
	РезультатОперации = ИнформацияОДоступныхТестовыхПериодах(ОбновляемыеИдентификаторы);
	
	// При работе с сервисом были ошибки.
	Если РезультатОперации.Ошибка Тогда
		РезультатОбновления.Ошибка            = Истина;
		РезультатОбновления.ИнформацияОбОшибке = РезультатОперации.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Производится обработка запросов на подключение.
	Если Не РезультатОперации.СодержаниеОтвета.ПодключениеДоступно Тогда
		РезультатОбновления.Ошибка             = Истина;
		РезультатОбновления.ИнформацияОбОшибке = НСтр("ru = 'Подключение тестовых периодов временно недоступно,
		|выполняется обработка запроса. Повторите попытку позже.'");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	ДанныеСервисовСопровождения = РезультатОперации.СодержаниеОтвета.ДанныеСервисовСопровождения;
	
	// Если передан некорректный идентификатор, обновление не производится.
	НеКорректныеИдентификаторы = "";
	Для каждого ОписательСервиса Из ДанныеСервисовСопровождения Цикл
		Если Не ЗначениеЗаполнено(ОписательСервиса.УникальныйИдентификатор) Тогда
			РезультатОбновления.Ошибка = Истина;
			Если Не ЗначениеЗаполнено(НеКорректныеИдентификаторы) Тогда
				НеКорректныеИдентификаторы = ОписательСервиса.Идентификатор;
			Иначе
				НеКорректныеИдентификаторы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, %2'"),
					НеКорректныеИдентификаторы,
					ОписательСервиса.Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатОбновления.Ошибка Тогда
		РезультатОбновления.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обнаружены некорректные идентификаторы сервисов:
				|%1'"),
			НеКорректныеИдентификаторы);
		Возврат РезультатОбновления;
	КонецЕсли;
	
	ЗаписатьДанныеКэшаТестовыхПериодов(ДанныеСервисовСопровождения, ИдентификаторСсылка);
	
	Возврат РезультатОбновления;
	
КонецФункции

// Обновляет данные справочника "ИдентификаторыСервисовСопровождения" и регистра сведений
// "КэшТестовыхПериодов".
//
// Параметры:
//  ДанныеСервисовСопровождения - ТаблицаЗначений - см функцию
//                                НовыйОписательДанныхСервисовСопровождения();
//  ИдентификаторСсылка         - Соответствие - содержит соответствие идентификатора
//                                и ссылки на справочник "ИдентификаторыСервисовСопровождения".
//
Процедура ЗаписатьДанныеКэшаТестовыхПериодов(ДанныеСервисовСопровождения, ИдентификаторСсылка)
	
	// Обновление данных идентификаторов сервисов сопровождения.
	Справочники.ИдентификаторыСервисовСопровождения.ОбновитьДанныеСсылокСервисовСопровождения(
		ДанныеСервисовСопровождения);
	
	Для Каждого ОписательСервиса Из ДанныеСервисовСопровождения Цикл
		ОписательСервиса.ИдентификаторСервисаСопровождения = ИдентификаторСсылка.Получить(
			ОписательСервиса.Идентификатор);
	КонецЦикла;
	
	// Обновление данных кэша тестовых периодов.
	РегистрыСведений.КэшТестовыхПериодов.ОбновитьДанныеТестовыхПериодов(
		ДанныеСервисовСопровождения);
	
КонецПроцедуры

// Определяет возможность подключения тестового периода для Сервисов сопровождения
// по списку идентификаторов.
//
// Параметры:
//  Идентификаторы  - Массив - идентификаторы сервисов в системе Портал 1С:ИТС.
//
// Возвращаемое значение:
//  Соответствие - содержит информацию о возможности подключения:
//   Ключ       - Строка - идентификатор сервиса в системе Портал 1С:ИТС;
//   Значение   - Булево - если истина подключение возможно.
//
Функция СервисыСопровожденияДоступныеДляПодключения(Идентификаторы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА КэшТестовыхПериодов.Идентификатор = """"
		|					ИЛИ КэшТестовыхПериодов.Идентификатор ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ПодключениеДоступно,
		|	ИдентификаторыСервисовСопровождения.ИдентификаторСервиса КАК Идентификатор
		|ИЗ
		|	Справочник.ИдентификаторыСервисовСопровождения КАК ИдентификаторыСервисовСопровождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшТестовыхПериодов КАК КэшТестовыхПериодов
		|		ПО (КэшТестовыхПериодов.ИдентификаторСервисаСопровождения = ИдентификаторыСервисовСопровождения.Ссылка)
		|			И (ИдентификаторыСервисовСопровождения.ИдентификаторСервиса В (&Идентификаторы))
		|ГДЕ
		|	ИдентификаторыСервисовСопровождения.ИдентификаторСервиса В(&Идентификаторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИдентификаторыСервисовСопровождения.ИдентификаторСервиса";
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СервисовСопровождения = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПодключениеДоступно = ?(ВыборкаДетальныеЗаписи.ПодключениеДоступно = 1, "Доступно", "Недоступно");
		СервисовСопровождения.Вставить(ВыборкаДетальныеЗаписи.Идентификатор, ПодключениеДоступно);
	КонецЦикла;
	
	Возврат СервисовСопровождения;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросамиНаПодключение

// Изменяет состояние запроса на подключение в регистре сведений 
// "ИдентификаторыЗапросовНаПодключение".
//
// Параметры:
//  СервисСопровождения  - Справочник.ИдентификаторыСервисовСопровождения - сервис,
//                         для которого необходимо изменить состояние запроса
//                          на подключение;
//  ИдентификаторЗапроса - Строка - идентификатор запроса на подключение;
//  Состояние            - Перечисление.СостоянияПодключенияСервисов - новое состояние;
//  ОписаниеОшибки       - Строка - представление ошибки.
//
Процедура ИзменитьИнформациюОЗапросеПодключения(
		СервисСопровождения,
		ИдентификаторЗапроса,
		Состояние,
		ОписаниеОшибки)
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		ВызватьИсключение НСтр("ru = 'Подключение тестового периода недоступно.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ИдентификаторыЗапросовНаПодключение");
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторСервисаСопровождения", СервисСопровождения);
		ЭлементБлокировкиДанных.УстановитьЗначение("Идентификатор", ИдентификаторЗапроса);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ИдентификаторыЗапросовНабор = РегистрыСведений.ИдентификаторыЗапросовНаПодключение.СоздатьНаборЗаписей();
		ИдентификаторыЗапросовНабор.Отбор.ИдентификаторСервисаСопровождения.Установить(СервисСопровождения);
		ИдентификаторыЗапросовНабор.Отбор.Идентификатор.Установить(ИдентификаторЗапроса);
		ИдентификаторыЗапросовНабор.Прочитать();
		
		Если ИдентификаторыЗапросовНабор.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен идентификатор запроса на подключение.
					|Сервис сопровождения: %1
					|Идентификатор: %2'"),
				СервисСопровождения,
				ИдентификаторЗапроса);
			
			ЗаписатьИнформациюВЖурналРегистрации(ТекстОшибки , Истина);
		Иначе
			Запись = ИдентификаторыЗапросовНабор[0];
			Запись.ОписаниеОшибки       = ОписаниеОшибки;
			Запись.Состояние            = Состояние;
			ИдентификаторыЗапросовНабор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		
		ВызватьИсключение ИнформацияОбОшибке;
	
	КонецПопытки;
	
КонецПроцедуры

// Удаляет обработанные идентификаторы запросов.
//
// Параметры:
//  СервисСопровождения  - Справочник.ИдентификаторыСервисовСопровождения - сервис,
//                         для которого необходимо удалить запросы на подключение;
//  ИдентификаторЗапроса - Строка - идентификатор запроса который уже обработан.
//
Процедура УдалитьИнформациюОЗапросеНаПодключение(СервисСопровождения, ИдентификаторЗапроса) Экспорт
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		ВызватьИсключение НСтр("ru = 'Подключение тестового периода недоступно.'");
	КонецЕсли;
	
	ИдентификаторыЗапросовНабор = РегистрыСведений.ИдентификаторыЗапросовНаПодключение.СоздатьНаборЗаписей();
	ИдентификаторыЗапросовНабор.Отбор.ИдентификаторСервисаСопровождения.Установить(СервисСопровождения);
	ИдентификаторыЗапросовНабор.Отбор.Идентификатор.Установить(ИдентификаторЗапроса);
	ИдентификаторыЗапросовНабор.Записать();
	
КонецПроцедуры

// Определяет обработанные запросы на подключение тестовых периодов.
//
// Возвращаемое значение:
//  РезультатЗапроса - данные подключенных тестовых периодов.
//
Функция ОбработанныеЗапросыНаПодключение()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыЗапросовНаПодключение.ИдентификаторСервисаСопровождения КАК Идентификатор,
		|	ИдентификаторыЗапросовНаПодключение.Идентификатор КАК ИдентификаторЗапроса,
		|	ИдентификаторыЗапросовНаПодключение.НаименованиеТестовогоПериода КАК НаименованиеТестовогоПериода,
		|	ИдентификаторыЗапросовНаПодключение.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ИдентификаторыЗапросовНаПодключение.Состояние КАК Состояние,
		|	ИдентификаторыЗапросовНаПодключение.ИдентификаторТестовогоПериода КАК ИдентификаторТестовогоПериода,
		|	ИСТИНА КАК Подключен
		|ИЗ
		|	РегистрСведений.ИдентификаторыЗапросовНаПодключение КАК ИдентификаторыЗапросовНаПодключение
		|ГДЕ
		|	ИдентификаторыЗапросовНаПодключение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПодключенияСервисов.Подключен)
		|	И ИдентификаторыЗапросовНаПодключение.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИдентификаторыЗапросовНаПодключение.ИдентификаторСервисаСопровождения,
		|	ИдентификаторыЗапросовНаПодключение.Идентификатор,
		|	ИдентификаторыЗапросовНаПодключение.НаименованиеТестовогоПериода,
		|	ИдентификаторыЗапросовНаПодключение.ОписаниеОшибки,
		|	ИдентификаторыЗапросовНаПодключение.Состояние,
		|	ИдентификаторыЗапросовНаПодключение.ИдентификаторТестовогоПериода,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.ИдентификаторыЗапросовНаПодключение КАК ИдентификаторыЗапросовНаПодключение
		|ГДЕ
		|	ИдентификаторыЗапросовНаПодключение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПодключенияСервисов.ОшибкаПодключения)
		|	И ИдентификаторыЗапросовНаПодключение.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Определяет наличие обрабатываемых запрос на подключение тестовых периодов.
//
// Параметры:
//  Идентификаторы - Массив - содержит идентификаторы сервисов сопровождения.
//  ДобавитьДанныеПодключения - Булево - если истина, в возвращаемое значение будет добавлен пользователь,
//                              который отправил запрос, наименование тестового периода и идентификатор запроса.
//
// Возвращаемое значение:
//  Массив - идентификаторы сервисов сопровождения, которые находятся в обработке.
//
Функция АктивныеЗапросыНаПодключение(Идентификаторы = Неопределено, ДобавитьДанныеПодключения = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыЗапросовНаПодключение.ИдентификаторСервисаСопровождения.ИдентификаторСервиса КАК Идентификатор%1
		|	%2
		|ИЗ
		|	РегистрСведений.ИдентификаторыЗапросовНаПодключение КАК ИдентификаторыЗапросовНаПодключение
		|ГДЕ
		|	ИдентификаторыЗапросовНаПодключение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПодключенияСервисов.Подключение)
		|	%3";
	
	ТекстУсловия = ?(ЗначениеЗаполнено(Идентификаторы),
		"И ИдентификаторыЗапросовНаПодключение.ИдентификаторСервисаСопровождения.ИдентификаторСервиса В(&Идентификаторы)",
		"");
	
	ПолеПользователь = ?(ДобавитьДанныеПодключения,
		"ИдентификаторыЗапросовНаПодключение.Пользователь КАК Пользователь,
		|ИдентификаторыЗапросовНаПодключение.НаименованиеТестовогоПериода КАК НаименованиеТестовогоПериода,
		|ИдентификаторыЗапросовНаПодключение.Идентификатор КАК ИдентификаторЗапроса,
		|ИдентификаторыЗапросовНаПодключение.ИдентификаторТестовогоПериода КАК ИдентификаторТестовогоПериода",
		"");
	
	Запятая =  ?(ДобавитьДанныеПодключения, ",", "");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		Запятая,
		ПолеПользователь,
		ТекстУсловия);
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();
	
	ЗапросыНаПодключение = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если ДобавитьДанныеПодключения Тогда
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("Идентификатор",                 Выборка.Идентификатор);
			ПараметрыЗапроса.Вставить("Пользователь",                  Выборка.Пользователь);
			ПараметрыЗапроса.Вставить("Наименование",                  Выборка.НаименованиеТестовогоПериода);
			ПараметрыЗапроса.Вставить("ИдентификаторЗапроса",          Выборка.ИдентификаторЗапроса);
			ПараметрыЗапроса.Вставить("ИдентификаторТестовогоПериода", Выборка.ИдентификаторТестовогоПериода);
			ЗапросыНаПодключение.Добавить(ПараметрыЗапроса);
		Иначе
			ЗапросыНаПодключение.Добавить(Выборка.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗапросыНаПодключение;
	
КонецФункции

// Определяет наличие обрабатываемых запросов для текущего пользователя.
//
// Возвращаемое значение:
//  Булево - если истина существуют запросы в обработке.
//
Функция НеОбработанныеЗапросыПользователя(Знач Пользователь = Неопределено)
	
	Пользователь = ?(Пользователь = Неопределено,
		Пользователи.ТекущийПользователь(),
		Пользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыЗапросовНаПодключение.ИдентификаторСервисаСопровождения.ИдентификаторСервиса КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИдентификаторыЗапросовНаПодключение КАК ИдентификаторыЗапросовНаПодключение
		|ГДЕ
		|	ИдентификаторыЗапросовНаПодключение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПодключенияСервисов.Подключение)
		|	И ИдентификаторыЗапросовНаПодключение.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область ОперацииСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции trial/ping

// Проверяет доступность сервиса подключения тестовых периодов.
//
// Параметры:
//  РезультатОперации  - Структура - описатель результата операции;
//  ПараметрыПодключения  - Структура - см. функцию
//                          ИнициализироватьПараметрыПодключенияТестовыхПериод().
//
Функция ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения)
	
	// Проверка доступности сервиса.
	URLОперацииPing = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/ping",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(
		URLОперацииPing,
		ПараметрыПодключения.НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.ИнформацияОбОшибке = РезультатПроверки.СообщениеОбОшибке;
		ПодробнаяИнформацияОбОшибке          = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса тестовых периодов:
				|%1.
				|Причина:
				|%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробнаяИнформацияОбОшибке, Истина);
		Возврат РезультатПроверки;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /trial/services/available/list

// Возвращает список сервисов, у которых существуют тестовые периоды
// доступные пользователю на текущий момент.
//
Функция ИнформацияОДоступныхТестовыхПериодах(ИдентификаторыСервисов)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало обновление кэша для сервисов: %1'"),
		СтрСоединить(ИдентификаторыСервисов, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключенияТестовыхПериод();
	
	// Вызов операции ping.
	ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения);
	Если РезультатОперации.Ошибка Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/services/available/list",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации(URLОперации);
	Если Результат.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "Ошибка, ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = availableList(
		ИдентификаторыСервисов,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении доступных тестовых периодов:
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
			
		ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить доступные тестовые периоды.
				|При получении информации о доступных тестовых периодах сервис вернул ошибку: %1.
				|Причина:
				|%2'"),
			URLОперации,
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	СодержаниеОтвета = ПрочитатьДанные_availableList(РезультатОтправки.Содержимое);
	РезультатОперации.Вставить("СодержаниеОтвета", СодержаниеОтвета);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено обновление кэша для сервисов: %1'"),
		СтрСоединить(ИдентификаторыСервисов, ","));
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// trial/services/available/list.
//
Функция availableList(Идентификаторы, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//        "login": "User",
	//         "password": "UserPassword"
	//        },
	// "applicationNicks": ["SPARK"],
	// "additionalParams":{...}
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("applicationNicks");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого Идентификатор Из Идентификаторы Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/services/available/list.
//
Функция ПрочитатьДанные_availableList(ТелоJSON)
	
	// Данные ответа:
	// isProcessingTrialRequestPresent - флаг, обозначающий наличие или отсутствие обрабатываемых запросов,
	//                                   на подключение тестовых периодов. Принимает значения false или true
	//                                   соответственно. Не может быть true, если список сервисов не пустой;
	// services - список сервисов:
	//  nick - внешний идентификатор сервиса;
	//  descriptionUrl - ссылка на страницу сервиса на Портале 1С:ИТС;
	//  conditionsAchor - якорь для перехода на условия подключения;
	//  tarifs - список доступных тестовых периодов:
	//   ueid - уникальный идентификатор тестового периода;
	//   name - наименование тестового периода;
	//   description - описание тестового периода.
	// 
	// {
	//   "isProcessingTrialRequestPresent": "",
	//   "services": [
	//     {
	//       "ueid": "",
	//       "nick": "",
	//       "applicationsUrl": "",
	//       "applicationsSoftwareUrl": "",
	//       "conditionsAchor": "",
	//       "tariffs": [
	//         {
	//           "ueid": "",
	//           "name": "",
	//           "description": ""
	//         }
	//       ]
	//     }
	//   ]
	// }.
	
	ПодключениеДоступно         = Истина;
	ДанныеСервисовСопровождения = НовыйОписательДанныхСервисовСопровождения();
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "isProcessingTrialRequestPresent" Тогда
			ПодключениеДоступно = Не ЗначениеСвойстваJSON(ЧтениеОтвета, Истина);
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "services" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			ПрочитатьДанные_availableList_services(
				ЧтениеОтвета,
				ДанныеСервисовСопровождения,
				ТекущийУровень);
				
		КонецЕсли;
		
	КонецЦикла;
	
	СодержаниеОтвета = Новый Структура;
	СодержаниеОтвета.Вставить("ПодключениеДоступно",         ПодключениеДоступно);
	СодержаниеОтвета.Вставить("ДанныеСервисовСопровождения", ДанныеСервисовСопровождения);
	
	Возврат СодержаниеОтвета;
	
КонецФункции

// Чтение ответа операции trial/services/available/list.
// Обработка раздела "services".
//
Процедура ПрочитатьДанные_availableList_services(
		ЧтениеОтвета,
		ДанныеСервисовСопровождения,
		ТекущийУровень)
		
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
			И ТекущийУровень = 1 Тогда
			// Закончено чтение объектов из "services".
			Прервать;
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			Если ТекущийУровень > 2 Тогда
				Продолжить;
			Иначе
				ДанныеСервисаСопровождения = Новый Структура;
				ДанныеСервисаСопровождения.Вставить("УникальныйИдентификатор",  "");
				ДанныеСервисаСопровождения.Вставить("Идентификатор",            "");
				ДанныеСервисаСопровождения.Вставить("URLОписание",              "");
				ДанныеСервисаСопровождения.Вставить("URLУсловияПолучения",      "");
				ДанныеСервисаСопровождения.Вставить("ТестовыеПериоды",          Неопределено);
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			Если ТекущийУровень = 1 Тогда
				// Прочитан очередной объект из "services".
				ЗаполнитьЗначенияСвойств(ДанныеСервисовСопровождения.Добавить(), ДанныеСервисаСопровождения);
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 2 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "nick" Тогда
				ДанныеСервисаСопровождения.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "ueid" Тогда
				ДанныеСервисаСопровождения.УникальныйИдентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "applicationsUrl" Тогда
				ДанныеСервисаСопровождения.URLОписание = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "conditionsAnchor" Тогда
				ДанныеСервисаСопровождения.URLУсловияПолучения = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "tariffs" Тогда
				ДанныеСервисаСопровождения.ТестовыеПериоды = ПрочитатьДанные_availableList_services_tariffs(
					ЧтениеОтвета,
					ТекущийУровень);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Чтение ответа операции trial/services/available/list.
// Обработка раздела "tariffs".
//
Функция ПрочитатьДанные_availableList_services_tariffs(
		ЧтениеОтвета,
		ТекущийУровень)
	
	ТестовыеПериоды = Новый Массив;
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
			И ТекущийУровень = 2 Тогда
			// Закончено чтение объектов из "tariffs".
			Прервать;
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			Если ТекущийУровень > 3 Тогда
				Продолжить;
			Иначе
				ДанныеТестовогоПериода = Новый Структура;
				ДанныеТестовогоПериода.Вставить("Идентификатор", "");
				ДанныеТестовогоПериода.Вставить("Наименование",  "");
				ДанныеТестовогоПериода.Вставить("Описание",      "");
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			Если ТекущийУровень = 2 Тогда
				// Прочитан очередной объект из "tariffs".
				ТестовыеПериоды.Добавить(ДанныеТестовогоПериода);
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 3 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "ueid" Тогда
				ДанныеТестовогоПериода.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "name" Тогда
				ДанныеТестовогоПериода.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "description" Тогда
				ДанныеТестовогоПериода.Описание = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТестовыеПериоды;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /trial/tariffs/activate

// Выполняет отправку запроса на подключение тестового периода, предварительно проверяя
// возможность назначения. Активация тестового периода происходит в асинхронном режиме.
//
Процедура ПодключитьТестовыйПериод(ПараметрыЗапроса, АдресХранилища) Экспорт
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		ВызватьИсключение НСтр("ru = 'Подключение тестового периода недоступно.'");
	КонецЕсли;
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подключение тестового периода:
			|Сервис сопровождения: %1
			|Идентификатор тестового периода: %2'"),
		Строка(ПараметрыЗапроса.СервисСопровождения),
		ПараметрыЗапроса.Идентификатор);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);

	ИдентификаторТестовогоПериода = ПараметрыЗапроса.Идентификатор;
	СервисСопровождения           = ПараметрыЗапроса.СервисСопровождения;
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключенияТестовыхПериод();
	
	// Вызов операции ping.
	ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения);
	Если РезультатОперации.Ошибка Тогда
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/tariffs/activate",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации(URLОперации);
	Если Результат.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			Результат,
			"Ошибка, ИнформацияОбОшибке");
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = tariffsActivate(
		ИдентификаторТестовогоПериода,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при подключении тестового периода:
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
			
		ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить тестовый период.
				|При активации тестового периода сервис вернул ошибку: %1.
				|Причина:
				|%2'"),
			URLОперации,
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторЗапроса = ПрочитатьДанные_tariffsActivate(РезультатОтправки.Содержимое);
	РезультатОперации.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	// Активация тестового периода может повлиять на правила предоставления
	// тестовых периодов, поэтому необходимо принудительно обновлять кэш.
	Если Не РезультатОперации.Ошибка Тогда
		РегистрыСведений.КэшТестовыхПериодов.ОчиститьКэшТестовыхПериодов(СервисСопровождения);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресХранилища);
	
КонецПроцедуры

// Формирует параметры запроса для операции
// trial/tariffs/activate.
//
Функция tariffsActivate(Идентификатор, ДанныеАутентификации, ДополнительныеПараметры)
	
	//{
	//  "tariffUeid": "b65e14f2-1465-471a-b0da-eaf541ca361e"
	//  "authenticationInfo": {
	//    "login": "User",
	//    "password": "UserPassword",
	//    "authToken": "someToken"
	//  },
	//  "additionalParameters": {
	//  }
	//}.
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("tariffUeid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/tariffs/activate.
//
Функция ПрочитатьДанные_tariffsActivate(ТелоJSON)
	
	// trialRequestUuid - идентификатор запроса на подключение подключения периода.
	//
	// { 
	//  "trialRequestUuid" : ""
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИдентификаторЗапроса = "";
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "trialRequestUuid" Тогда
			ИдентификаторЗапроса = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый УникальныйИдентификатор(ИдентификаторЗапроса);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /trial/tariffs/activate/{uid}

// Выполняет проверку статуса запроса на подключение тестового периода пользователю.
// Используется для вызова фоновым заданием.
//
Процедура ПроверитьСостояниеЗапросаНаПодключение(ПараметрыЗапроса, АдресХранилища) Экспорт
	
	Если Не РазрешеноПодключениеТестовыхПериодов() Тогда
		ВызватьИсключение НСтр("ru = 'Подключение тестового периода недоступно.'");
	КонецЕсли;
	
	РезультатОперации = СостояниеЗапросаНаПодключение(
		ПараметрыЗапроса.Идентификатор,
		ПараметрыЗапроса.ИдентификаторТестовогоПериода);
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресХранилища);
	
	Если ПараметрыЗапроса.РежимРегламентногоЗадания Тогда
		
		ЗапросОбработан = Ложь;
		Если РезультатОперации.Ошибка Тогда
			ЗапросОбработан = Истина;
		Иначе
			РезультатПодключения = РезультатОперации.РезультатПодключения;
			Если РезультатПодключения.Ошибка Тогда
				ЗапросОбработан = Истина;
			КонецЕсли;
			Если РезультатПодключения.Подключен Тогда
				ЗапросОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗапросОбработан Тогда
			УдалитьРегламентноеЗаданиеПроверкиПодключения(
				ПараметрыЗапроса.Идентификатор);
			УдалитьИнформациюОЗапросеНаПодключение(
				ПараметрыЗапроса.СервисСопровождения,
				ПараметрыЗапроса.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку статуса запроса на подключение тестового периода пользователю.
//
// Параметры:
//  ИдентификаторЗапроса          - Строка - идентификатор запроса по которому будет
//                                произведена проверка;
//  ИдентификаторТестовогоПериода - Строка - уникальный идентификатор тестового периода;
//  ПроверитьДоступность - Булево - если истина, будет вызвана операция ping.
//
// Возвращаемое значение:
//  Структура - результат проверки запроса на подключение.
//
Функция СостояниеЗапросаНаПодключение(
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода,
		ПроверитьДоступность = Ложь)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка состояния запроса на подключение тестового периода:
			|Идентификатор запроса: %1
			|Идентификатор тестового периода: %2'"),
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПараметрыПодключения = ИнициализироватьПараметрыПодключенияТестовыхПериод();
	
	// Вызов операции ping необходимо производить только при проверке запроса
	// на подключение тестового периода регламентным заданием, в других случаях
	// проверять не имеет смысла, т.к. операция парная:
	//   1. trial/tariffs/activate
	//   2. trial/tariffs/activate/{uid}.
	Если ПроверитьДоступность Тогда
		ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения);
		Если РезультатОперации.Ошибка Тогда
			Возврат РезультатОперации;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов операции сервиса.
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"/trial/tariffs/request/status/%1",
		Строка(ИдентификаторЗапроса));
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		Операция,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = requestStatus(
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке запроса на подключение:
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить состояние запроса на подключение.
				|При проверке запроса на подключение тестовых периодов сервис вернул ошибку: %1.
				|Причина:
				|%2'"),
			URLОперации,
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатПодключения = ПрочитатьДанные_requestStatus(РезультатОтправки.Содержимое);
	
	ОбработатьРезультатПроверкиПодключения(
		РезультатПодключения,
		ИдентификаторТестовогоПериода,
		ПараметрыПодключения);
	
	РезультатОперации.Вставить("РезультатПодключения", РезультатПодключения);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// trial/tariffs/activate/{uid}.
//
Функция requestStatus(ДополнительныеПараметры)
	
	// {
	//   "additionalParameters": {
	//   }
	// }.
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/tariffs/activate/{uid}.
//
Функция ПрочитатьДанные_requestStatus(ТелоJSON)
	
	// Данные ответа:
	// status - статус заявки на подключение бесплатного периода,
	//          может принимать значения: "processing", "done";
	// result - результат обработки:
	//    code - код результата, допустимые значения success, rejected;
	//    cause - причина отклонения, в наличии, только если код имеет значение "rejected":
	//       code - код ошибки;
	//       text - описание ошибки.
	//
	// {
	//  "status" : "",
	//  "result" : {
	//   "code" : "",
	//   "cause": {
	//    "code": "",
	//    "text": ""
	//    }
	//  }
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Подключен",          Ложь);
	РезультатПодключения.Вставить("Ошибка",             Ложь);
	РезультатПодключения.Вставить("КодОшибки",          "");
	РезультатПодключения.Вставить("ИнформацияОбОшибке", "");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "status" Тогда
			
			Значение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Если Значение = "done" Тогда
				РезультатПодключения.Подключен = Истина;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 2
			И ЧтениеОтвета.ТекущееЗначение = "code" Тогда
			
			Значение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Если Значение <> "success" Тогда
				РезультатПодключения.Ошибка = Истина;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 3 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "code" Тогда
				РезультатПодключения.КодОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "text" Тогда
				РезультатПодключения.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПодключения;
	
КонецФункции

// Обрабатывает ошибку подключения тестового периода.
//
Процедура ОбработатьРезультатПроверкиПодключения(
		РезультатПодключения,
		ИдентификаторТестовогоПериода,
		ПараметрыПодключения)
	
	// Если запрос на подключение еще не обработан,
	// результат проверки не отображается.
	Если Не РезультатПодключения.Подключен Тогда
		Возврат;
	КонецЕсли;
	
	// Если тестовый период успешно подключен,
	// нет необходимости обрабатывать ошибку.
	Если Не РезультатПодключения.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	ПодробноеПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при проверке статуса запроса на подключение тестового периода:
			|Код ошибки: %1
			|Информация об ошибке: %2'"),
		РезультатПодключения.КодОшибки,
		РезультатПодключения.ИнформацияОбОшибке);
	
	ЗаписатьИнформациюВЖурналРегистрации(ПодробноеПредставлениеОшибки, Истина);
	
	Если РезультатПодключения.КодОшибки = "HAS_ACTIVE_OPTION_PACKAGES_BY_APPLICATION"
		Или РезультатПодключения.КодОшибки = "HAS_ANY_OPTION_PACKAGES_BY_APPLICATION"
		Или РезультатПодключения.КодОшибки = "HAS_ACTIVE_OPTION_PACKAGES_BY_TARIFF"
		Или РезультатПодключения.КодОшибки = "HAS_ANY_OPTION_PACKAGES_BY_TARIFF" Тогда
		
		// Группа ошибок, которые могут возникнуть при одновременном подключении несколькими
		// пользователями тестового периода. Перед выводом сообщения об ошибке будет проверена
		// доступность тестового периода.
		Подключен = ТестовыйПериодПодключен(ИдентификаторТестовогоПериода, ПараметрыПодключения);
		
		Если Подключен Тогда
			// Не смотря на ошибку тестовый период подключен, вероятно подключение было произведено
			// из другого сеанса, либо напрямую на Портале 1С:ИТС.
			РезультатПодключения.Подключен          = Истина;
			РезультатПодключения.Ошибка             = Ложь;
			РезультатПодключения.ИнформацияОбОшибке = "";
		Иначе
			// Тестовый период не подключен.
			РезультатПодключения.ИнформацияОбОшибке = НСтр("ru = 'Не удалось подключить тестовый период.
				|Подробнее см. в журнале регистрации.'");
		КонецЕсли;
		
	ИначеЕсли РезультатПодключения.КодОшибки = "UNKNOWN_CAUSE" Тогда
		РезультатПодключения.ИнформацияОбОшибке = НСтр("ru = 'Неизвестная ошибка при обработке запроса.
			|Подробнее см. в журнале регистрации.'");
	Иначе
		РезультатПодключения.ИнформацияОбОшибке = НСтр("ru = 'Внутренняя ошибка при обработке запроса.
			|Подробнее см. в журнале регистрации.'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции trial/tariffs/active/check

// Выполняет проверку активности тестового периода сервиса.
//
Функция ТестовыйПериодПодключен(ИдентификаторТестовогоПериода, ПараметрыПодключения)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка активности тестового периода:
		|%1'"),
		ИдентификаторТестовогоПериода);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
		
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/tariffs/active/check",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации(URLОперации);
	Если Результат.Ошибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = tariffActiveCheck(
		ИдентификаторТестовогоПериода, ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить активность тестового периода.
				|При проверке активности тестового периода сервис вернул ошибку: %1.
				|Причина:
				|%2'"),
			URLОперации,
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ПрочитатьДанные_tariffActiveCheck(РезультатОтправки.Содержимое);
	
КонецФункции

// Формирует параметры запроса для операции
// trial/tariffs/active/check.
//
Функция tariffActiveCheck(ИдентификаторТестовогоПериода, ДанныеАутентификации)
	
	// {
	//   "additionalParameters": {
	//   }
	// }.
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("tariffUeid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторТестовогоПериода);
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/tariffs/active/check.
//
Функция ПрочитатьДанные_tariffActiveCheck(ТелоJSON)
	
	// active - true или false, если тестовый период подключен или нет.
	//
	// {
	// "active": "true"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "active" Тогда
			Возврат ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Проверяет права доступа на подключение тестового периода.
// Подключение может быть недоступно если:
//  - у пользователя нет прав для подключения тестового периода,
//    считается, что тестовые периодов недоступны для всех сервисов;
//  - конфигурация работает в модели сервиса.
//
// Возвращаемое значение:
//   Булево - если истина, пользователь может подключить тестовый период.
//
Функция РазрешеноПодключениеТестовыхПериодов()
	
	Возврат (Не ОбщегоНазначения.РазделениеВключено()
		И ПравоПодключенияСервисовСопровождения());
	
КонецФункции

// Проверяет права на подключение тестовых периодов.
//
// Возвращаемое значение:
//  Булево - если "Истина" у пользователя есть права на подключение сервисов сопровождения.
//
Функция ПравоПодключенияСервисовСопровождения()
	
	Возврат РольДоступна("ПодключениеСервисовСопровождения")
		Или Пользователи.ЭтоПолноправныйПользователь(Неопределено, Ложь, Ложь);
	
КонецФункции

// Создает таблицу с описанием данных сервисов сопровождения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит информацию, которая используется
//                    для обновления данных справочника "ИдентификаторыСервисовСопровождения"
//   *УникальныйИдентификатор - Строка - уникальный идентификатор сервиса сопровождения;
//   *Идентификатор           - Строка - идентификатор сервиса сопровождения;
//   *URLОписание             - Строка - URL для перехода на страницу с описанием сервиса;
//   *URLУсловияПолучения     - Строка - якорь для перехода к условиям получения;
//   *ТестовыйПериод          - Массив - описание тестовых периодов.
//
Функция НовыйОписательДанныхСервисовСопровождения()
	
	ОписательСервисовСопровождения = Новый ТаблицаЗначений;
	ОписательСервисовСопровождения.Колонки.Добавить("УникальныйИдентификатор",             ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписательСервисовСопровождения.Колонки.Добавить("Идентификатор",                       ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ОписательСервисовСопровождения.Колонки.Добавить("URLОписание",                         ОбщегоНазначения.ОписаниеТипаСтрока(2000));
	ОписательСервисовСопровождения.Колонки.Добавить("URLУсловияПолучения",                 ОбщегоНазначения.ОписаниеТипаСтрока(2000));
	ОписательСервисовСопровождения.Колонки.Добавить("ИдентификаторСервисаСопровождения", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСервисовСопровождения"));
	ОписательСервисовСопровождения.Колонки.Добавить("ТестовыеПериоды",                     Новый ОписаниеТипов("Массив"));
	
	Возврат ОписательСервисовСопровождения;
	
КонецФункции

// Создает структуру настроек подключения к сервису подключения
// тестовых периодов.
//
Функция ИнициализироватьПараметрыПодключенияТестовыхПериод()
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыЗагрузки.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Возвращает логин и пароль, либо тикет аутентификации пользователя
// Интернет-поддержки в зависимости от режима работы.
//
// Параметры:
//  URLОперации - Строка - URL, для которого необходимо получить параметры аутентификации;
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибки = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для использования тестовых периодов, необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавлен в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	Если ДанныеАутентификации.Свойство("Тикет") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	КонецЕсли;
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Определяет URL для вызова сервиса подключения тестовых периодов.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу;
//  Домен     - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервисаПодключенияТестовыхПериодов(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаПодключенияТестовыхПериодов(Домен)
		+ "/external-api"
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса подключения тестовых периодов.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаПодключенияТестовыхПериодов(Домен)
	
	
	Возврат "sales-manager.1c.ru";
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке, Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Подключение тестовых периодов.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ЧтениеОбъектаJSON    - ЧтениеJSON - чтение JSON для определения значения;
//  ЗначениеПоУмолчанию  - Неопределено, Строка, Число, Булево - определяет
//                         значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
		Возврат СокрЛП(ЧтениеОбъектаJSON.ТекущееЗначение);
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1.
				|Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
