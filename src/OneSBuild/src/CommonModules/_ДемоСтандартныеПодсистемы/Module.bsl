///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы БазоваяФункциональность.

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	// 2.4.1.1
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.4.1.1",
		"Роль._ДемоИнтеграция1СБухфон", "Роль._ДемоВызовОнлайнПоддержки");
	
	// 3.0.1.21
	ОбщегоНазначения.ДобавитьПереименование(Итог, "3.0.1.21",
		"Роль._ДемоБазовыеПраваПользователяБСП", "Роль._ДемоБазовыеПраваБСП");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	ОбщиеПараметры.ИмяФормыПерсональныхНастроек = "ОбщаяФорма._ДемоМоиНастройки";
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОтключенныхПодсистем.
Процедура ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы) Экспорт
	
	ОтключенныеПодсистемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"БазоваяФункциональность", "ОтключенныеПодсистемы", Новый Соответствие);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы БизнесПроцессыИЗадачи.

// См. БизнесПроцессыИЗадачиПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаБизнесПроцессов(Объект, Таблица) Экспорт
	
	Если ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Задание") Тогда
		// Логика ограничения для
		// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
		// - изменения: Автор.
		
		// Если предмет не задан (т.е. бизнес-процесс без основания),
		// тогда предмет не участвует в логике ограничения.
		
		// Чтение, Изменение: набор № 1.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 1;
		Строка.Чтение          = Истина;
		Строка.Изменение       = Истина;
		Строка.ЗначениеДоступа = Объект.Автор;
		
		// Чтение: набор № 2.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 2;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Объект.ГруппаИсполнителейЗадач;
		
		// Чтение: набор № 3.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 3;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Объект.ГруппаИсполнителейЗадачПроверяющий;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы Взаимодействия.

// См. ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаДляОбъектаВзаимодействия(Объект, Таблица) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.Встреча") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляВстречи(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗапланированноеВзаимодействие") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляЗапланированногоВзаимодействия(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляСообщенияSMS(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляТелефонногоЗвонка(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаВходящего(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаИсходящего(Объект, Таблица);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ДатыЗапретаИзменения.

// См. ДатыЗапретаИзмененияПереопределяемый.НастройкаИнтерфейса.
Процедура НастройкаИнтерфейса(НастройкиРаботыИнтерфейса) Экспорт
	
	НастройкиРаботыИнтерфейса.ИспользоватьВнешнихПользователей = Истина;
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоБанк";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("4109a54a-f3ea-474c-9079-be08bf335668");
	Раздел.Представление = НСтр("ru = 'Демо: Банк'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка._ДемоБанковскиеСчета"));

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоНачислениеЗарплаты";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("100aba96-ea50-4f82-a06c-2e3fdc39a9f1");
	Раздел.Представление = НСтр("ru = 'Демо: Начисление зарплаты'");

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоСкладскойУчет";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("dc05fcce-97da-4f78-8317-d9b2b7f1388d");
	Раздел.Представление = НСтр("ru = 'Демо: Складской учет'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка._ДемоМестаХранения"));

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоТорговля";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("7d63fbe5-db98-407e-89f5-c770e6a90cb2");
	Раздел.Представление = НСтр("ru = 'Демо: Торговля'");
	Раздел.ТипыОбъектов.Добавить(Тип("ПеречислениеСсылка._ДемоЮридическоеФизическоеЛицо"));
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "ПартнерыИКонтактныеЛица.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"СчетаНаОплату.Счет.Дата", "_ДемоТорговля", "Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"СчетаНаОплату.Счет.Дата", "_ДемоТорговля", "ПартнерыИКонтактныеЛица.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"СчетаНаОплату.Счет.Дата", "_ДемоТорговля", "СчетаНаОплату.Счет.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоНачислениеЗарплаты.ПолноеИмя(),
		"Дата", "_ДемоНачислениеЗарплаты", "");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоОприходованиеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПеремещениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХраненияИсточник");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПеремещениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХраненияПриемник");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоСписаниеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПоступлениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "Контрагент.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПоступлениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоРеализацияТоваров.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "Контрагент.Партнер.ВидПартнера");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоРеализацияТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоСписаниеБезналичныхДенежныхСредств.ПолноеИмя(),
		"ДатаПроведенияБанком", "_ДемоБанк", "БанковскийСчет");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоКорректировкаОстатковТоваровВМестахХранения.ПолноеИмя(),
		"Дата", "", "");

	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.РегистрыСведений._ДемоЗаведующиеМестамиХранения.ПолноеИмя(),
		"Период", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя(),
		"Период", "", "");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.РегистрыНакопления._ДемоОстаткиТоваровВМестахХранения.ПолноеИмя(),
		"Период", "_ДемоСкладскойУчет", "МестоХранения");

	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПередПроверкойЗапретаИзменения.
Процедура ПередПроверкойЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект._ДемоЗаказПокупателя") Тогда
		Если Объект.ЭтоНовый() Тогда
			ЗаказЗакрытСтараяВерсия = Ложь;
		Иначе
			СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "СтатусЗаказа");
			ЗаказЗакрытСтараяВерсия = (СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.Закрыт);
		КонецЕсли;
		ЗаказЗакрытНоваяВерсия = (Объект.СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.Закрыт);
		
		Если Не ЗаказЗакрытСтараяВерсия И Не ЗаказЗакрытНоваяВерсия Тогда
			ПроверкаЗапретаИзменения = Ложь;
			УзелПроверкиЗапретаЗагрузки = Неопределено;
			
		ИначеЕсли Не ЗаказЗакрытНоваяВерсия Тогда
			ВерсияОбъекта = "СтараяВерсия"; // Проверить только старую версию объекта.
		
		ИначеЕсли Не ЗаказЗакрытСтараяВерсия Тогда
			ВерсияОбъекта = "НоваяВерсия"; // Проверить только новую версию объекта.
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект._ДемоСписаниеБезналичныхДенежныхСредств") Тогда
		// Отказ от проверки с учетом того, что ДатаПроведенияБанком, используемая в проверке не указывается,
		// если документ не проведен банком, а указывается позже после проведения документа банком.
		Если Объект.ЭтоНовый() Тогда
			ПроведеноБанкомСтараяВерсия = Ложь;
		Иначе
			ПроведеноБанком = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПроведеноБанком");
			ПроведеноБанкомСтараяВерсия = ?(ТипЗнч(ПроведеноБанком) <> Тип("Булево"), Ложь, ПроведеноБанком);
		КонецЕсли;
		ПроведеноБанкомНоваяВерсия = Объект.ПроведеноБанком;
		
		Если Не ПроведеноБанкомНоваяВерсия И Не ПроведеноБанкомСтараяВерсия Тогда
			ПроверкаЗапретаИзменения = Ложь;
			УзелПроверкиЗапретаЗагрузки = Неопределено;
			
		ИначеЕсли Не ПроведеноБанкомНоваяВерсия Тогда
			ВерсияОбъекта = "СтараяВерсия"; // Проверить только старую версию объекта.
		
		ИначеЕсли Не ПроведеноБанкомСтараяВерсия Тогда
			ВерсияОбъекта = "НоваяВерсия"; // Проверить только новую версию объекта.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЗапретРедактированияРеквизитовОбъектов.

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	// _Демо начало примера
	Объекты.Вставить(Метаданные.Справочники._ДемоКассыККМ.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.Справочники._ДемоНоменклатура.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.ПланыСчетов._ДемоОсновной.ПолноеИмя(), "");
	// _Демо конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы КонтрольВеденияУчета.

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование                 = НСтр("ru = 'Демонстрационные проверки'");
	ГруппаПроверок.Идентификатор                = "_ДемоПроверкиВеденияУчета";
	ГруппаПроверок.КонтекстПроверокВеденияУчета = "_ДемоПроверкиВеденияУчета";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы          = ГруппаПроверок.Идентификатор;
	Проверка.Наименование                 = НСтр("ru = 'Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
	Проверка.Причины                      = НСтр("ru = 'Не введен комментарий в документе.'");
	Проверка.Рекомендация                 = НСтр("ru = 'Ввести комментарий в документе.'");
	Проверка.Идентификатор                = "Демо.ПроверитьКомментарийВПоступленииТоваров";
	Проверка.ОбработчикПроверки           = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
	Проверка.ДатаНачалаПроверки           = Дата('20140101000000');
	Проверка.ЛимитПроблем                 = 3;
	Проверка.ЗапрещеноИзменениеВажности   = Ложь;
	Проверка.КонтекстПроверокВеденияУчета = "_ДемоПроверкиВеденияУчета";
	Проверка.Комментарий                  = НСтр("ru = 'Демонстрационная проверка.'");
	Проверка.ПоддерживаетВыборочнуюПроверку = Истина;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы          = ГруппаПроверок.Идентификатор;
	Проверка.Наименование                 = НСтр("ru = 'Проверка проведения документа ""Демо: Счет фактура полученный""'");
	Проверка.Причины                      = НСтр("ru = 'Документ не проведен.'");
	Проверка.Рекомендация                 = НСтр("ru = 'Провести документ.'");
	Проверка.Идентификатор                = "Демо.ПроверитьПроведенностьСчетаФактурыПолученного";
	Проверка.ОбработчикПроверки           = "_ДемоСтандартныеПодсистемы.ПроверитьПроведенностьСчетаФактурыПолученного";
	Проверка.ОбработчикПереходаКИсправлению = "_ДемоСтандартныеПодсистемыКлиент.ПровестиСчетаФактурыПоПроблемнымКонтрагентам";
	Проверка.ЗапрещеноИзменениеВажности   = Истина;
	Проверка.КонтекстПроверокВеденияУчета = "_ДемоПроверкиВеденияУчета";
	Проверка.ПоддерживаетВыборочнуюПроверку = Ложь;
	
КонецПроцедуры

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровГруппыИндикации
Процедура ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, Знач ТипПроблемногоОбъекта) Экспорт
	
	Если ТипПроблемногоОбъекта = Тип("ДокументСсылка._ДемоНачислениеЗарплаты") Тогда
		ПараметрыГруппыИндикации.ВыводитьСнизу = Истина;
	ИначеЕсли ТипПроблемногоОбъекта = Тип("ДокументСсылка._ДемоСчетФактураПолученный") Тогда
		ПараметрыГруппыИндикации.ДетальныйВид = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровКолонкиИндикации.
Процедура ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ПолноеИмя) Экспорт
	Если ПолноеИмя = Метаданные.Документы._ДемоНачислениеЗарплаты.ПолноеИмя() Тогда
		ПараметрыКолонкиИндикации.ВыводитьПоследней = Истина;
	КонецЕсли;
КонецПроцедуры

// См. КонтрольВеденияУчетаПереопределяемый.ПередЗаписьюПроблемы.
Процедура ПередЗаписьюПроблемы(Проблема, СсылкаНаОбъект, Реквизиты) Экспорт
	Если Реквизиты.Найти("Организация") <> Неопределено Тогда
		Проблема.Вставить("_ДемоОрганизация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Организация"));
	КонецЕсли;
КонецПроцедуры

// Выполняет проверку заполненности комментария в документе _ДемоПоступлениеТоваров.
// Демонстрирует реализацию просто прикладной проверки ведения учета.
//
// Параметры:
//   Проверка            - СправочникСсылка.ПравилаПроверкиУчета
//   ПараметрыПроверки   - см. КонтрольВеденияУчета.ОписаниеПроблемы.ПараметрыПроверки
//
Процедура ПроверитьКомментарийВПоступленииТоваров(Проверка, ПараметрыПроверки) Экспорт
	
	ПроверяемыеОбъекты = Неопределено;
	ПараметрыПроверки.Свойство("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	Запрос = Новый Запрос;
	ОбщийТекстЗапроса = 
	"ВЫБРАТЬ
	|	_ДемоПоступлениеТоваров.Ссылка КАК ПроблемныйОбъект,
	|	_ДемоПоступлениеТоваров.Ответственный КАК Ответственный,
	|	_ДемоПоступлениеТоваров.Комментарий КАК Комментарий,
	|	_ДемоПоступлениеТоваров.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ._ДемоПоступлениеТоваров КАК _ДемоПоступлениеТоваров
	|ГДЕ
	|	&Условие
	|	И _ДемоПоступлениеТоваров.Комментарий ПОДОБНО """"
	|	И &ОграничениеПоДате";
	
	Если ПроверяемыеОбъекты <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылка", ПроверяемыеОбъекты);
		Условие = "_ДемоПоступлениеТоваров.Ссылка В (&Ссылка)";
	Иначе
		Условие = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДатаНачалаПроверки) Тогда
		ОграничениеПоДате = "_ДемоПоступлениеТоваров.Дата >= &ДатаНачалаПроверки";
	Иначе
		ОграничениеПоДате = "Истина";
	КонецЕсли;
	
	ОбщийТекстЗапроса = СтрЗаменить(ОбщийТекстЗапроса, "&Условие", Условие);
	ОбщийТекстЗапроса = СтрЗаменить(ОбщийТекстЗапроса, "&ОграничениеПоДате", ОграничениеПоДате);
	
	Запрос.Текст = ОбщийТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Проблема = КонтрольВеденияУчета.ОписаниеПроблемы(Результат.ПроблемныйОбъект, ПараметрыПроверки);
		
		Проблема.УточнениеПроблемы = ?(ЗначениеЗаполнено(Результат.Комментарий), НСтр("ru = 'В комментарии введены пробелы или табуляции.'"), НСтр("ru = 'Не введен комментарий в документе.'"));
		Проблема.Ответственный     =  Результат.Ответственный;
		
		КонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку проведенности документов _ДемоСчетФактураПолученный в "разрезе" контрагентов.
// Демонстрирует работу с несколькими видами проверок и их свойствами.
//
// Параметры:
//   Проверка            - СправочникСсылка.ПравилаПроверкиУчета
//   ПараметрыПроверки   - см. КонтрольВеденияУчета.ОписаниеПроблемы.ПараметрыПроверки
//
Процедура ПроверитьПроведенностьСчетаФактурыПолученного(Проверка, ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	_ДемоСчетФактураПолученный.Ссылка КАК ПроблемныйОбъект,
		|	_ДемоСчетФактураПолученный.МоментВремени КАК МоментВремени,
		|	_ДемоСчетФактураПолученный.Проведен КАК Проведен,
		|	_ДемоСчетФактураПолученный.Контрагент КАК Контрагент
		|ИЗ
		|	Документ._ДемоСчетФактураПолученный КАК _ДемоСчетФактураПолученный
		|ГДЕ
		|	&Условие
		|	И НЕ _ДемоСчетФактураПолученный.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ
		|ИТОГИ ПО
		|	Контрагент";
	
	ПараметрыЗапроса = Новый Структура;
	Контрагенты = Новый Массив;
	Для Каждого ПараметрВыполнения Из ПараметрыПроверки.ПараметрыВыполненияПроверки Цикл
		ПроверяемыйКонтрагент = Неопределено;
		Если ПараметрВыполнения.Свойство("Свойство2", ПроверяемыйКонтрагент) Тогда
			Контрагенты.Добавить(ПроверяемыйКонтрагент);
		КонецЕсли;
	КонецЦикла;
	
	Если Контрагенты.Количество() > 0 Тогда
		Условие = "_ДемоСчетФактураПолученный.Контрагент В (&Контрагенты)";
		ПараметрыЗапроса.Вставить("Контрагенты", Контрагенты);
	Иначе
		Условие = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", Условие);
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДатаНачалаПроверки) Тогда
		ОграничениеПоДате = "_ДемоСчетФактураПолученный.Дата >= &ДатаНачалаПроверки";
	Иначе
		ОграничениеПоДате = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОграничениеПоДате", ОграничениеПоДате);
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДатаНачалаПроверки) Тогда
		ПараметрыЗапроса.Вставить("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Результат.Следующий() Цикл
		
		// Очистить результаты предыдущих проверок по указанному контрагенту.
		ПараметрыВыполненияПроверки = КонтрольВеденияУчета.ПараметрыВыполненияПроверки("_ДемоПроверкиВеденияУчета", Результат.Контрагент);
		КонтрольВеденияУчета.ОчиститьРезультатыПредыдущихПроверок(Проверка, ПараметрыВыполненияПроверки);
		
		ВидПроверки = КонтрольВеденияУчета.ВидПроверки(ПараметрыВыполненияПроверки);
		
		ДетальныйРезультат = Результат.Выбрать();
		Пока ДетальныйРезультат.Следующий() Цикл
		
			Если ДетальныйРезультат.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			// Обнаружен непроведенный документ.
			Проблема = КонтрольВеденияУчета.ОписаниеПроблемы(ДетальныйРезультат.ПроблемныйОбъект, ПараметрыПроверки);
			Проблема.ВидПроверки = ВидПроверки;
			Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По контрагенту ""%1"" имеется непроведенный документ ""%2""'"),
				Результат.Контрагент, ДетальныйРезультат.ПроблемныйОбъект);
			
			КонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ОбновлениеВерсииИБ.
// Начальное заполнение.
//

// Вызывается из модуля менеджера справочника РолиИсполнителей при начальном заполнении
// ролей исполнителей в прикладном решении.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов 
//                                 справочника РолиИсполнителей.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииРолейИсполнителей(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоГлавныйБухгалтер";
	Элемент.ИспользуетсяБезОбъектовАдресации = Ложь;
	Элемент.ИспользуетсяСОбъектамиАдресации  = Истина;
	Элемент.ТипыОсновногоОбъектаАдресации    = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоОрганизация;
	Элемент.ВнешняяРоль                      = Ложь;
	Элемент.Код                              = "000000005";
	Элемент.КраткоеПредставление             = НСтр("ru = '000000005'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Демо: Главный бухгалтер'", КодыЯзыков); // @НСтр-1
	
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Комментарий",
		"ru = 'Доступна внешним пользователям'",КодыЯзыков); // @НСтр-1
	
	Назначение = ТабличныеЧасти.Назначение.Скопировать(); // ТаблицаЗначений
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники._ДемоПартнеры.ПустаяСсылка();
	ЭлементТЧ = Назначение.Добавить();
	ЭлементТЧ.ТипПользователей = Справочники._ДемоКонтактныеЛицаПартнеров.ПустаяСсылка();
	Элемент.Назначение = Назначение;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоРуководительКомпании";
	Элемент.ИспользуетсяБезОбъектовАдресации = Истина;
	Элемент.ИспользуетсяСОбъектамиАдресации  = Ложь;
	Элемент.ВнешняяРоль                      = Ложь;
	Элемент.Код                              = "000000002";
	Элемент.КраткоеПредставление             = НСтр("ru = '000000002'", ОбщегоНазначения.КодОсновногоЯзыка());
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Демо: Руководитель компании'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоРуководительПодразделения";
	Элемент.ИспользуетсяБезОбъектовАдресации = Ложь;
	Элемент.ИспользуетсяСОбъектамиАдресации  = Истина;
	Элемент.ТипыОсновногоОбъектаАдресации    = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоПодразделение;
	Элемент.ВнешняяРоль                      = Ложь;
	Элемент.Код                              = "000000003";
	Элемент.КраткоеПредставление             = НСтр("ru = '000000003'", ОбщегоНазначения.КодОсновногоЯзыка());
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Демо: Руководитель подразделения'", КодыЯзыков); // @НСтр-1
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоРуководительПроекта";
	Элемент.ИспользуетсяБезОбъектовАдресации = Ложь;
	Элемент.ИспользуетсяСОбъектамиАдресации  = Истина;
	Элемент.ТипыОсновногоОбъектаАдресации    = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач._ДемоПроект;
	Элемент.ВнешняяРоль                      = Ложь;
	Элемент.Код                              = "000000004";
	Элемент.КраткоеПредставление             = НСтр("ru = '000000004'", ОбщегоНазначения.КодОсновногоЯзыка());
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru = 'Демо: Руководитель проекта'", КодыЯзыков); // @НСтр-1
	
КонецПроцедуры

// Вызывается из модуля менеджера справочника РолиИсполнителей при начальном заполнении
// элемента роль исполнителя в прикладном решении.
//
// Параметры:
//  Объект                  - СправочникОбъект.РолиИсполнителей - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура
//
Процедура ПриНачальномЗаполненииРолиИсполнителя(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается из модуля менеджера ПВХ ОбъектыАдресацииЗадач при начальном заполнении
// объектов адресации задача в прикладном решении.
// Стандартный реквизит ТипЗначения следует заполнять в процедуре ПриНачальномЗаполненииЭлементаОбъектаАдресацииЗадачи.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов объекта ПВХ ОбъектыАдресацииЗада.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииОбъектовАдресацииЗадач(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоОрганизация";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru='Демо: Организация'", КодыЯзыков); // @НСтр-2
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка._ДемоОрганизации"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ДопустимыеТипы;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоПодразделение";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru='Демо: Подразделение'", КодыЯзыков); // @НСтр-2
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка._ДемоПодразделения"));
	
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ДопустимыеТипы;
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "_ДемоПроект";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование",
		"ru='Демо: Проект'", КодыЯзыков); // @НСтр-2
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка._ДемоПроекты"));
	
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ДопустимыеТипы;
	
КонецПроцедуры

// Вызывается из модуля менеджера ПВХ ОбъектыАдресацииЗадач при начальном заполнении
// элемента адресации задача в прикладном решении.
//
// Параметры:
//  Объект                  - ПланВидовХарактеристикОбъект.ОбъектыАдресацииЗадач - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура
//
Процедура ПриНачальномЗаполненииЭлементаОбъектаАдресацииЗадачи(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Если Объект.ИмяПредопределенныхДанных = "ВсеОбъектыАдресации" Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка._ДемоПодразделения"));
		МассивТипов.Добавить(Тип("СправочникСсылка._ДемоОрганизации"));
		МассивТипов.Добавить(Тип("СправочникСсылка._ДемоПроекты"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
		Объект.ТипЗначения = ДопустимыеТипы;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ОтчетОДвиженияхДокумента.

// См. ОтчетОДвиженияхДокументаПереопределяемый.ПриОпределенииРегистровСДвижениями.
Процедура ПриОпределенииРегистровСДвижениями(Документ, РегистрыСДвижениями) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		РегистрыСДвижениями.Вставить(Метаданные.РегистрыСведений.ВерсииОбъектов, "Объект");
	КонецЕсли;
	
КонецПроцедуры

// См. ОтчетОДвиженияхДокументаПереопределяемый.ПриРасчетеКоличестваЗаписей.
Процедура ПриРасчетеКоличестваЗаписей(Документ, РассчитанноеКоличество) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка._ДемоПоступлениеТоваров")
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ВерсииОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Документ");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	РассчитанноеКоличество.Вставить(
		СтрЗаменить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя(), ".", "_"),
		?(Выборка.Следующий(), Выборка.Количество, 0));
	
КонецПроцедуры

// См. ОтчетОДвиженияхДокументаПереопределяемый.ПриПодготовкеНабораДанных.
Процедура ПриПодготовкеНабораДанных(Документ, НаборыДанных) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.РегистрыСведений.ВерсииОбъектов;
	ПолноеИмяРегистра = СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "_");
	
	#Область ИнициализацияТекстаЗапросаНабораДанных
	
	СтандартныеРеквизиты = ИменаПредставленияПолей(ОбъектМетаданных.СтандартныеРеквизиты);
	ИзмеренияРегистра = ИменаПредставленияПолей(ОбъектМетаданных.Измерения);
	РесурсыРегистра = ИменаПредставленияПолей(ОбъектМетаданных.Ресурсы);
	РеквизитыРегистра = ИменаПредставленияПолей(ОбъектМетаданных.Реквизиты);
	
	ПоляВыбора = "";
	ДобавитьПоля(ПоляВыбора, СтандартныеРеквизиты);
	ДобавитьПоля(ПоляВыбора, ИзмеренияРегистра);
	ДобавитьПоля(ПоляВыбора, РесурсыРегистра);
	ДобавитьПоля(ПоляВыбора, РеквизитыРегистра);
	
	МаксимумПолей = Макс(СтандартныеРеквизиты.Количество(),
		ИзмеренияРегистра.Количество(),
		РесурсыРегистра.Количество(),
		РеквизитыРегистра.Количество());
	
	ДобавитьНомераПолей(ПоляВыбора, НомераПолей(МаксимумПолей));
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК КоличествоЗаписейРегистра,
	|	""&ИмяРегистра"" КАК ИмяРегистра,
	|	&Поля
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ТекущаяТаблица
	|ГДЕ
	|	ТекущаяТаблица.Объект = &ДокументВладелец
	|{ГДЕ
	|	(&УсловиеКомпоновки)}";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", ПолноеИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", ПоляВыбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКомпоновки", """" + ПолноеИмяРегистра + """ В (&СписокРегистров)");
	
	#КонецОбласти
	
	#Область ПереопределениеТекстаЗапросаНабораДанных
	
	ГраницаНаборовДанных = НаборыДанных.ВГраница();
	ИндексТекущегоНабораДанных = -1;
	ТекущийНаборДанных = Неопределено;
	
	Для Индекс = 0 По ГраницаНаборовДанных Цикл
		НаборДанных = НаборыДанных[Индекс];
		Если НаборДанных.ПолноеИмяРегистра <> ПолноеИмяРегистра Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДанных.ТекстЗапроса = ТекстЗапроса;
		
		ИндексТекущегоНабораДанных = Индекс;
		ТекущийНаборДанных = НаборДанных;
		
		Прервать;
	КонецЦикла;
	
	Если ИндексТекущегоНабораДанных < 0
		Или ИндексТекущегоНабораДанных = ГраницаНаборовДанных Тогда 
		Возврат;
	КонецЕсли;
	
	НаборыДанных.Удалить(ИндексТекущегоНабораДанных);
	НаборыДанных.Добавить(ТекущийНаборДанных);
	
	#КонецОбласти
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ПодключаемыеКоманды.

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыОтправкиПриглашения", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПодключенныйОбъект.Менеджер.ДобавитьКомандыОтправкиПриглашения(Команды, НастройкиФормы);
	КонецЦикла;
	
КонецПроцедуры

// См. СозданиеНаОснованииПереопределяемый.ПриДобавленииКомандСозданияНаОсновании.
Процедура ПриДобавленииКомандСозданияНаОсновании(Объект, КомандыСозданияНаОсновании, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Объект = Метаданные.Справочники.Пользователи
		Или Объект = Метаданные.Справочники.Файлы Тогда
		
		БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	ИначеЕсли Объект = Метаданные.Документы.Встреча 
		Или Объект = Метаданные.Документы.ТелефонныйЗвонок
		Или Объект = Метаданные.Документы.ЭлектронноеПисьмоВходящее
		Или Объект = Метаданные.Документы.ЭлектронноеПисьмоИсходящее Тогда
		
		Документы._ДемоЗаказПокупателя.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЕсли;
	
КонецПроцедуры

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Документы._ДемоЗаказПокупателя);
	Объекты.Добавить(Метаданные.Документы._ДемоПоступлениеТоваров);
	Объекты.Добавить(Метаданные.Документы._ДемоРеализацияТоваров);
	Объекты.Добавить(Метаданные.Документы._ДемоСписаниеТоваров);
	Объекты.Добавить(Метаданные.Документы._ДемоСчетНаОплатуПокупателю);
	Объекты.Добавить(Метаданные.БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ПоискИУдалениеДублей.

// См. ПоискИУдалениеДублейПереопределяемый.ПриОпределенииПараметровПоискаДублей.
Процедура ПриОпределенииПараметровПоискаДублей(Знач ИмяОбъектаМетаданных, ПараметрыПоиска, Знач ДополнительныеПараметры,
	СтандартнаяОбработка) Экспорт
	
	Если ИмяОбъектаМетаданных = Метаданные.Справочники._ДемоПартнеры.ПолноеИмя() 
		Или ИмяОбъектаМетаданных = Метаданные.Справочники._ДемоОрганизации.ПолноеИмя() Тогда
		ПараметрыПоиска.СравнениеСтрокНаПодобие.СловаИсключения = СокращенияОрганизационноПравовыхФорм();
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы Пользователи.

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляВнешнихПользователей.
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоОплатаСчетовВнешнимиПользователями.Имя);
	
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоЧтениеДанныхОбъектовАвторизации.Имя);
	
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоЧтениеДополнительныхОтчетовИОбработок.Имя);
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоЧтениеДанныхДляОтветовНаВопросыАнкет.Имя);
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек.
Процедура ПриУстановкеНачальныхНастроек(НачальныеНастройки) Экспорт
	
	ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	
	ГруппаСверху = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияРежимаСовместимости(), "8.3.15.0") < 0 Тогда 
		ГруппаСверху.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	КонецЕсли;
	
	ГруппаСверху.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	НастройкиСостава.Верх.Добавить(ГруппаСверху);
	
	НачальныеНастройки.НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	НачальныеНастройки.НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаИТекст;
	НачальныеНастройки.НастройкиТакси.УстановитьСостав(НастройкиСостава);
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриПолученииПрочихНастроек.
Процедура ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Получение значения настройки ЗапрашиватьПодтверждениеПриЗавершенииПрограммы.
	ЗначениеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",,,
			СведенияОПользователе.ИмяПользователяИнформационнойБазы);
	
	Если ЗначениеНастройки <> Неопределено Тогда
		
		СписокЗначенийНастройки = Новый СписокЗначений;
		СписокЗначенийНастройки.Добавить(ЗначениеНастройки);
		
		ИнформацияОНастройке    = Новый Структура;
		ИнформацияОНастройке.Вставить("НазваниеНастройки", НСтр("ru = 'Подтверждение при закрытии программы'"));
		ИнформацияОНастройке.Вставить("КартинкаНастройки", "");
		ИнформацияОНастройке.Вставить("СписокНастроек", СписокЗначенийНастройки);
		
		Настройки.Вставить("ЗапрашиватьПодтверждениеОЗакрытии", ИнформацияОНастройке);
	КонецЕсли;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриСохраненииПрочихНастроек.
Процедура ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	Если Настройки.ИдентификаторНастройки = "ЗапрашиватьПодтверждениеОЗакрытии" Тогда
		ЗначениеНастройки = Настройки.ЗначениеНастройки[0];
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			ЗначениеНастройки.Значение,, СведенияОПользователе.ИмяПользователяИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриУдаленииПрочихНастроек.
Процедура ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	Если Настройки.ИдентификаторНастройки = "ЗапрашиватьПодтверждениеОЗакрытии" Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
			"ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			СведенияОПользователе.ИмяПользователяИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ТекущиеДела.

// Параметры:
//   ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не КонтрольВеденияУчета.ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ВидПроверки = КонтрольВеденияУчета.ВидПроверки("_ДемоПроверкиВеденияУчета");
	Проблемы    = КонтрольВеденияУчета.СводнаяИнформацияПоВидамПроверок(ВидПроверки, , Истина);
	Разделы     = ТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Отчеты.РезультатыПроверкиУчета.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "_ДемоПроверкиВеденияУчета" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = Проблемы.Количество > 0;
		Дело.Важное         = Проблемы.ЕстьОшибки;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Некорректные документы'");
		Дело.Подсказка      = НСтр("ru = 'Незаполненные комментарии в документах поступления товаров, непроведенные счета-фактуры и другие проблемы ведения учета.'");
		Дело.Количество     = Проблемы.Количество;
		Дело.ПараметрыФормы = Новый Структура("ВидПроверки", ВидПроверки);
		Дело.Форма          = "Отчет.РезультатыПроверкиУчета.Форма";
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы РассылкаОтчетов.

// См. РассылкаОтчетовПереопределяемый.ОпределитьИсключаемыеОтчеты
Процедура ПриОпределенииИсключаемыхОтчетов(ИсключаемыеОтчеты) Экспорт
	
	ИсключаемыеОтчеты.Добавить(Метаданные.Отчеты.СтатистикаВыполненияОбработчиковОбновления);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы УправлениеДоступом.

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоГруппыНоменклатуры";
	ВидДоступа.Представление    = НСтр("ru = 'Демо: Группы номенклатуры'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка._ДемоНоменклатура");
	ВидДоступа.ТипГруппЗначений = Тип("СправочникСсылка._ДемоГруппыДоступаНоменклатуры");
	УправлениеДоступом.ДобавитьДополнительныеТипыВидаДоступа(ВидДоступа,
		Тип("СправочникСсылка._ДемоВидыНоменклатуры"),
		Тип("СправочникСсылка._ДемоГруппыДоступаНоменклатуры"));
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоКассы";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Кассы'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоКассы");
	УправлениеДоступом.ДобавитьДополнительныеТипыВидаДоступа(ВидДоступа,
		Тип("СправочникСсылка._ДемоКассыККМ"));
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоМестаХранения";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Места хранения'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоМестаХранения");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоГруппыПартнеров";
	ВидДоступа.Представление    = НСтр("ru = 'Демо: Группы партнеров'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка._ДемоПартнеры");
	ВидДоступа.ТипГруппЗначений = Тип("СправочникСсылка._ДемоГруппыДоступаПартнеров");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоФизическиеЛица";
	ВидДоступа.Представление    = НСтр("ru = 'Демо: Физические лица'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка._ДемоФизическиеЛица");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоХозяйственныеОперации";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Хозяйственные операции'");
	ВидДоступа.ТипЗначений   = Тип("ПеречислениеСсылка._ДемоХозяйственныеОперации");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоОрганизации";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Организации'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоОрганизации");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоПодразделения";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Подразделения'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоПодразделения");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ЗаполнитьПрофильПользователь(ОписанияПрофилей);
	ЗаполнитьПрофильМенеджер(ОписанияПрофилей);
	ЗаполнитьПрофильКладовщик(ОписанияПрофилей);
	ЗаполнитьПрофильРуководитель(ОписанияПрофилей);
	ЗаполнитьПрофильБухгалтер(ОписанияПрофилей);
	ЗаполнитьПрофильРасчетчикЗарплаты(ОписанияПрофилей);
	ЗаполнитьПрофильАудитор(ОписанияПрофилей);
	ЗаполнитьПрофильПартнер(ОписанияПрофилей);
	
	// Дополнительные профили, которые не используются самостоятельно при настройке
	// прав пользователя, а дополняют основные профили, перечисленные выше.
	
	ЗаполнитьПрофильОтветственныйЗаНормативноСправочнуюИнформацию(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаВедениеНоменклатуры(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаВедениеВзаимодействий(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаСписокПользователей(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаСписокВнешнихПользователей(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаСоставыУчастниковГруппДоступа(ОписанияПрофилей);
	ЗаполнитьПрофильНастройкаСинхронизацииФайловСОблачнымСервисом(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаДатыЗапретаИзмененияДанных(ОписанияПрофилей);
	ЗаполнитьПрофильИспользованиеЭлектроннойПочты(ОписанияПрофилей);
	ЗаполнитьПрофильПечатьНепроведенныхДокументов(ОписанияПрофилей);
	ЗаполнитьПрофильРаботаСПапкамиФайлов(ОписанияПрофилей);
	ЗаполнитьПрофильРедактированиеСогласийНаОбработкуПерсональныхДанных(ОписанияПрофилей);
	ЗаполнитьПрофильПросмотрСогласийНаОбработкуПерсональныхДанных(ОписанияПрофилей);
	
	УправлениеПечатью.ЗаполнитьПрофильРедактированиеПечатныхФорм(ОписанияПрофилей);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииЗависимостейПравДоступа.
Процедура ПриЗаполненииЗависимостейПравДоступа(ЗависимостиПрав) Экспорт
	
	// Для задач бизнес-процесса "Демо: Задание с ролевой адресацией".
	Строка = ЗависимостиПрав.Добавить();
	Строка.ПодчиненнаяТаблица = Метаданные.Задачи.ЗадачаИсполнителя.ПолноеИмя();
	Строка.ВедущаяТаблица     = Метаданные.БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией.ПолноеИмя();
	
	// Для присоединенных файлов справочника "Демо: Проекты".
	Строка = ЗависимостиПрав.Добавить();
	Строка.ПодчиненнаяТаблица = Метаданные.Справочники._ДемоПроектыПрисоединенныеФайлы.ПолноеИмя();
	Строка.ВедущаяТаблица     = Метаданные.Справочники._ДемоПроекты.ПолноеИмя();
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ВидДоступа, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидДоступа = "_ДемоГруппыНоменклатуры" Тогда
		Использование = Константы._ДемоОграничиватьДоступПоНоменклатуре.Получить();
		
	ИначеЕсли ВидДоступа = "_ДемоГруппыПартнеров" Тогда
		Использование = Константы._ДемоОграничиватьДоступПоПартнерам.Получить();
		
	ИначеЕсли ВидДоступа = "_ДемоФизическиеЛица" Тогда
		Использование = Константы._ДемоОграничиватьДоступПоФизическимЛицам.Получить();
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// _ДемоБизнесПроцессыИЗадачи
	Описание = Описание + "
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Изменение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|Задача.ЗадачаИсполнителя.Чтение.ВнешниеПользователи
	|Задача.ЗадачаИсполнителя.Изменение.ВнешниеПользователи
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Чтение.ВнешниеПользователи
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Изменение.ВнешниеПользователи
	|РегистрСведений.ИсполнителиЗадач.Чтение.ВнешниеПользователи
	|РегистрСведений.ИсполнителиЗадач.Чтение._ДемоОрганизации
	|РегистрСведений.ИсполнителиЗадач.Изменение._ДемоОрганизации
	|";
	// _ДемоОрганизации
	Описание = Описание + "
	|Справочник._ДемоОрганизации.Чтение._ДемоОрганизации
	|Справочник._ДемоОрганизацииПрисоединенныеФайлы.Чтение._ДемоОрганизации
	|";
	
	// КонтрольВеденияУчета
	Описание = Описание + "
	|РегистрСведений.РезультатыПроверкиУчета.Чтение._ДемоОрганизации
	|";
	
	// _ДемоУправлениеДоступом
	Описание = Описание + "
	|Справочник._ДемоВидыНоменклатуры.Изменение._ДемоГруппыНоменклатуры
	|Справочник._ДемоНоменклатура.Изменение._ДемоГруппыНоменклатуры
	|Справочник._ДемоНоменклатураПрисоединенныеФайлы.Изменение._ДемоГруппыНоменклатуры
	|";
	
	// Другие демо-объекты.
	Описание = Описание + "
	|Справочник._ДемоБанковскиеСчета.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоБанковскиеСчета.Чтение._ДемоОрганизации
	|Справочник._ДемоБанковскиеСчета.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоБанковскиеСчета.Изменение._ДемоОрганизации
	|Справочник._ДемоБанковскиеСчета.Чтение.ВнешниеПользователи
	|Справочник._ДемоГруппыДоступаПартнеров.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоДоговорыКонтрагентов.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоДоговорыКонтрагентов.Чтение._ДемоОрганизации
	|Справочник._ДемоДоговорыКонтрагентов.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоДоговорыКонтрагентов.Изменение._ДемоОрганизации
	|Справочник._ДемоМестаХранения.Чтение._ДемоМестаХранения
	|Справочник._ДемоКассы.Изменение._ДемоОрганизации
	|Справочник._ДемоКассыККМ.Изменение._ДемоОрганизации
	|Справочник._ДемоКонтактныеЛицаПартнеров.Чтение.ВнешниеПользователи
	|Справочник._ДемоКонтактныеЛицаПартнеров.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтактныеЛицаПартнеров.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтрагенты.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтрагенты.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтрагенты.Чтение.ВнешниеПользователи
	|Справочник._ДемоПартнеры.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоПартнеры.Чтение.ВнешниеПользователи
	|Справочник._ДемоПартнеры.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоПодразделения.Чтение._ДемоПодразделения
	|Справочник._ДемоПроекты.Чтение._ДемоОрганизации
	|Справочник._ДемоПроекты.Изменение._ДемоОрганизации
	|Справочник._ДемоПроекты.Изменение.Пользователи
	|Справочник._ДемоПроектыПрисоединенныеФайлы.Чтение.Объект.Справочник._ДемоПроекты
	|Справочник._ДемоПроектыПрисоединенныеФайлы.Изменение.Объект.Справочник._ДемоПроекты
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Чтение._ДемоОрганизации
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Изменение._ДемоОрганизации
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Чтение.ВнешниеПользователи
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Изменение.ВнешниеПользователи
	|Документ._ДемоНачислениеЗарплаты.Чтение.Объект.Документ._ДемоНачислениеЗарплаты
	|Документ._ДемоНачислениеЗарплаты.Изменение.Объект.Документ._ДемоНачислениеЗарплаты
	|Документ._ДемоЗаказПокупателя.Чтение._ДемоОрганизации
	|Документ._ДемоЗаказПокупателя.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоЗаказПокупателя.Изменение._ДемоОрганизации
	|Документ._ДемоЗаказПокупателя.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоОприходованиеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоОприходованиеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоОприходованиеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоОприходованиеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоОприходованиеТоваров.Изменение.Пользователи
	|Документ._ДемоПеремещениеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоПеремещениеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоПеремещениеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоПеремещениеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоПеремещениеТоваров.Изменение.Пользователи
	|Документ._ДемоПоручениеЭкспедитору.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоПоручениеЭкспедитору.Чтение._ДемоМестаХранения
	|Документ._ДемоПоручениеЭкспедитору.Чтение._ДемоФизическиеЛица
	|Документ._ДемоПоручениеЭкспедитору.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоПоручениеЭкспедитору.Изменение._ДемоМестаХранения
	|Документ._ДемоПоручениеЭкспедитору.Изменение._ДемоФизическиеЛица
	|Документ._ДемоПоступлениеТоваров.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоПоступлениеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоПоступлениеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоПоступлениеТоваров.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоПоступлениеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоПоступлениеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоРасходныйКассовыйОрдер.Чтение._ДемоОрганизации
	|Документ._ДемоРасходныйКассовыйОрдер.Чтение._ДемоКассы
	|Документ._ДемоРасходныйКассовыйОрдер.Чтение._ДемоХозяйственныеОперации
	|Документ._ДемоРасходныйКассовыйОрдер.Изменение._ДемоОрганизации
	|Документ._ДемоРасходныйКассовыйОрдер.Изменение._ДемоКассы
	|Документ._ДемоРасходныйКассовыйОрдер.Изменение._ДемоХозяйственныеОперации
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоПодразделения
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоПодразделения
	|Документ._ДемоСписаниеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоСписаниеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоСписаниеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоСписаниеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоСписаниеТоваров.Изменение.Пользователи
	|Документ._ДемоСчетНаОплатуПокупателю.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоСчетНаОплатуПокупателю.Чтение._ДемоОрганизации
	|Документ._ДемоСчетНаОплатуПокупателю.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоСчетНаОплатуПокупателю.Изменение._ДемоОрганизации
	|Документ._ДемоСчетНаОплатуПокупателю.Чтение.ВнешниеПользователи
	|Документ._ДемоСчетФактураПолученный.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоСчетФактураПолученный.Изменение._ДемоГруппыПартнеров
	|ЖурналДокументов._ДемоСкладскиеДокументы.Чтение.Объект.Документ._ДемоОприходованиеТоваров
	|ЖурналДокументов._ДемоСкладскиеДокументы.Чтение.Объект.Документ._ДемоПеремещениеТоваров
	|ЖурналДокументов._ДемоСкладскиеДокументы.Чтение.Объект.Документ._ДемоСписаниеТоваров
	|РегистрСведений._ДемоЗагружаемыеПоступленияОтЮридическихЛиц.Чтение._ДемоГруппыПартнеров
	|РегистрСведений._ДемоЗагружаемыеПоступленияОтЮридическихЛиц.Изменение._ДемоГруппыПартнеров
	|РегистрСведений._ДемоРаботникиОрганизаций.Чтение._ДемоФизическиеЛица
	|РегистрСведений._ДемоРаботникиОрганизаций.Чтение._ДемоОрганизации
	|РегистрСведений._ДемоРаботникиОрганизаций.Изменение._ДемоФизическиеЛица
	|РегистрСведений._ДемоРаботникиОрганизаций.Изменение._ДемоОрганизации
	|РегистрСведений._ДемоРеестрСкладскихДокументов.Чтение._ДемоМестаХранения
	|РегистрСведений._ДемоРеестрСкладскихДокументов.Чтение._ДемоОрганизации
	|РегистрСведений._ДемоЦеныНоменклатуры.Изменение._ДемоГруппыНоменклатуры
	|РегистрНакопления._ДемоОстаткиТоваровВМестахХранения.Чтение._ДемоМестаХранения
	|РегистрНакопления._ДемоОстаткиТоваровВМестахХранения.Чтение._ДемоОрганизации
	|РегистрНакопления._ДемоОстаткиТоваровВМестахХранения.Чтение._ДемоГруппыНоменклатуры
	|";
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа.
Процедура ПриИзмененииНаборовЗначенийДоступа(Ссылка, СсылкиНаЗависимыеОбъекты) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
		
		// Зависимые типы объектов:
		
		//  БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_ДемоЗаданиеСРолевойАдресацией.Ссылка
		|ИЗ
		|	БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией КАК _ДемоЗаданиеСРолевойАдресацией
		|ГДЕ
		|	_ДемоЗаданиеСРолевойАдресацией.Предмет = &Предмет");
		Запрос.УстановитьПараметр("Предмет", Ссылка);
		СсылкиНаЗависимыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники._ДемоБанковскиеСчета, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоВидыНоменклатуры, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоГруппыДоступаПартнеров, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоДоговорыКонтрагентов, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКассы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКассыККМ, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКонтактныеЛицаПартнеров, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКонтрагенты, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоМестаХранения, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоНоменклатура, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоНоменклатураПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоОрганизации, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоОрганизацииПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПартнеры, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПодразделения, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПроекты, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПроектыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоЗаказПокупателя, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоНачислениеЗарплаты, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоОприходованиеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоПеремещениеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоПоручениеЭкспедитору, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоПоступлениеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоРасходныйКассовыйОрдер, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоРеализацияТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоСписаниеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоСчетНаОплатуПокупателю, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоСчетФактураПолученный, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов._ДемоСкладскиеДокументы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений._ДемоЗагружаемыеПоступленияОтЮридическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений._ДемоРаботникиОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений._ДемоРеестрСкладскихДокументов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений._ДемоЦеныНоменклатуры, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления._ДемоОстаткиТоваровВМестахХранения, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией, Истина);
	
	// Переопределение ограничения списков подсистемы БизнесПроцессы.
	Списки.Вставить(Метаданные.РегистрыСведений.ИсполнителиЗадач, Ложь);
	
	// Переопределение ограничения списков подсистемы Взаимодействия.
	Списки.Вставить(Метаданные.Документы.Встреча, Ложь);
	Списки.Вставить(Метаданные.Документы.ЗапланированноеВзаимодействие, Ложь);
	Списки.Вставить(Метаданные.Документы.СообщениеSMS, Ложь);
	Списки.Вставить(Метаданные.Документы.ТелефонныйЗвонок, Ложь);
	Списки.Вставить(Метаданные.Документы.ЭлектронноеПисьмоВходящее, Ложь);
	Списки.Вставить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее, Ложь);
	
	// Переопределение ограничения списков подсистемы КонтрольВеденияУчета.
	Списки.Вставить(Метаданные.РегистрыСведений.РезультатыПроверкиУчета, Ложь);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	Если Список = Метаданные.РегистрыСведений.ИсполнителиЗадач Тогда
		
		// Типы реквизитов ОсновнойОбъектАдресации и ДополнительныйОбъектАдресации:
		//  СправочникСсылка._ДемоПодразделения,
		//  СправочникСсылка._ДемоОрганизации,
		//  СправочникСсылка._ДемоПроекты.
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ОсновнойОбъектАдресации ТОЛЬКО Справочник._ДемоОрганизации)
		|	ИЛИ ЗначениеРазрешено(ДополнительныйОбъектАдресации ТОЛЬКО Справочник._ДемоОрганизации)
		|	ИЛИ (ТипЗначения(ОсновнойОбъектАдресации) <> Тип(Справочник._ДемоОрганизации) И ОсновнойОбъектАдресации <> Неопределено)
		|	ИЛИ (ТипЗначения(ДополнительныйОбъектАдресации) <> Тип(Справочник._ДемоОрганизации) И ДополнительныйОбъектАдресации <> Неопределено)";
		
		Ограничение.ТекстДляВнешнихПользователей =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Выразить(Исполнитель КАК Справочник.ВнешниеПользователи))";
		
	ИначеЕсли Список = Метаданные.Документы.Встреча Тогда
		ПриЗаполненииОграниченияДоступаДляВстречи(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ЗапланированноеВзаимодействие Тогда
		ПриЗаполненииОграниченияДоступаДляЗапланированногоВзаимодействия(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.СообщениеSMS Тогда
		ПриЗаполненииОграниченияДоступаДляСообщенияSMS(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ТелефонныйЗвонок Тогда
		ПриЗаполненииОграниченияДоступаДляТелефонногоЗвонка(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ЭлектронноеПисьмоВходящее Тогда
		ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаВходящего(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ЭлектронноеПисьмоИсходящее Тогда
		ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаИсходящего(Ограничение);
		
	// Локализация
	ИначеЕсли Список = Метаданные.РегистрыСведений.РезультатыПроверкиУчета Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЧтениеСпискаРазрешено(ПроблемныйОбъект)
		|	И ЗначениеРазрешено(_ДемоОрганизация)";
	// Конец Локализация
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЭлектроннаяПодпись.

// См. ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		ОрганизацияПоУмолчанию = Справочники._ДемоОрганизации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Параметры.Организация = ОрганизацияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		Возврат; // Реквизиты организации нельзя заполнить, если организация не выбрана.
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Организация) <> Тип("СправочникСсылка._ДемоОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Организация,
		"НаименованиеСокращенное, НаименованиеПолное,
		|ИндивидуальныйПредприниматель, ИНН, КПП, ОГРН,
		|РасчетныйСчет,БИК,КорреспондентскийСчет");
	
	Параметры.НаименованиеСокращенное = Реквизиты.НаименованиеСокращенное;
	Параметры.НаименованиеПолное      = Реквизиты.НаименованиеПолное;
	Параметры.ЭтоИндивидуальныйПредприниматель = ЗначениеЗаполнено(Реквизиты.ИндивидуальныйПредприниматель);
	Параметры.ИНН  = Реквизиты.ИНН;
	Параметры.КПП  = Реквизиты.КПП;
	Параметры.ОГРН = Реквизиты.ОГРН;
	Параметры.РасчетныйСчет         = Реквизиты.РасчетныйСчет;
	Параметры.БИК                   = Реквизиты.БИК;
	Параметры.КорреспондентскийСчет = Реквизиты.КорреспондентскийСчет;
	
	Объекты = Новый Массив;
	Объекты.Добавить(Параметры.Организация);
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации"));
	ВидыКИ.Добавить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонОрганизации"));
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, , ВидыКИ, ТекущаяДатаСеанса());
	
	Строка = КонтактнаяИнформация.Найти(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации"), "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.ЮридическийАдрес = Строка.Значение;
	КонецЕсли;
	
	Строка = КонтактнаяИнформация.Найти(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонОрганизации"), "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.Телефон = Строка.Значение;
	КонецЕсли;
	
КонецПроцедуры

// См. ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат(Параметры) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка._ДемоФизическиеЛица"));
	Параметры.ТипВладельца = Новый ОписаниеТипов(МассивТипов);
	
	Если ЗначениеЗаполнено(Параметры.Организация)
	   И ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
		
		// Владельца сертификата и варианты его выбора можно заполнить, когда организация выбрана.
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Организация,
			"Директор, ГлавныйБухгалтер, ИндивидуальныйПредприниматель");
		
		Если ЗначениеЗаполнено(Реквизиты.ИндивидуальныйПредприниматель) Тогда
			Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
				Параметры.Сотрудник = Реквизиты.ИндивидуальныйПредприниматель;
			КонецЕсли;
		Иначе
			Параметры.Директор         = Реквизиты.Директор;
			Параметры.ГлавныйБухгалтер = Реквизиты.ГлавныйБухгалтер;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
			// Начальное значение для владельца сертификата.
			Если ЗначениеЗаполнено(Параметры.Директор) Тогда
				Параметры.Сотрудник = Параметры.Директор;
				
			ИначеЕсли ЗначениеЗаполнено(Параметры.ГлавныйБухгалтер) Тогда
				Параметры.Сотрудник = Параметры.ГлавныйБухгалтер;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
		Возврат; // Реквизиты сотрудника нельзя заполнить, если сотрудник не выбран.
	КонецЕсли;
	
	Если Параметры.Сотрудник = Параметры.Директор Тогда
		Параметры.Должность = НСтр("ru = 'Генеральный директор'");
		
	ИначеЕсли Параметры.Сотрудник = Параметры.ГлавныйБухгалтер Тогда
		Параметры.Должность = НСтр("ru = 'Главный бухгалтер'");
	Иначе
		Параметры.Должность = НСтр("ru = 'Менеджер'");
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Сотрудник) = Тип("СправочникСсылка._ДемоФизическиеЛица") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Сотрудник,
			"ЭтоГруппа, Наименование, ДатаРождения, Пол, МестоРождения, Гражданство, СНИЛС, ИНН, СерияДокумента,
			|НомерДокумента, КемВыданДокумент, КодПодразделенияДокумента, ДатаВыдачиДокумента");
		Если Реквизиты.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Сотрудник, "Наименование");
	КонецЕсли;
	
	Массив = СтрРазделить(Реквизиты.Наименование, " ", Ложь);
	Если Массив.Количество() > 0 Тогда
		Параметры.Фамилия = Массив[0];
	КонецЕсли;
	Если Массив.Количество() > 1 Тогда
		Параметры.Имя = Массив[1];
	КонецЕсли;
	Если Массив.Количество() > 2 Тогда
		Параметры.Отчество = Массив[2];
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Сотрудник) <> Тип("СправочникСсылка._ДемоФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.Пол = Перечисления._ДемоПолФизическогоЛица.Мужской Тогда
		Параметры.Пол = "Мужской";
		
	ИначеЕсли Реквизиты.Пол = Перечисления._ДемоПолФизическогоЛица.Женский Тогда
		Параметры.Пол = "Женский";
	КонецЕсли;
	
	Параметры.ДатаРождения             = Реквизиты.ДатаРождения;
	Параметры.МестоРождения            = Реквизиты.МестоРождения;
	Параметры.Гражданство              = Реквизиты.Гражданство;
	Параметры.СтраховойНомерПФР        = Реквизиты.СНИЛС;
	Параметры.ДокументВид              = "21";
	Параметры.ДокументНомер            = Реквизиты.СерияДокумента + Реквизиты.НомерДокумента;
	Параметры.ДокументКемВыдан         = Реквизиты.КемВыданДокумент;
	Параметры.ДокументКодПодразделения = Реквизиты.КодПодразделенияДокумента;
	Параметры.ДокументДатаВыдачи       = Реквизиты.ДатаВыдачиДокумента;
	
	Объекты = Новый Массив;
	Объекты.Добавить(Параметры.Сотрудник);
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailФизическогоЛица"));
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, , ВидыКИ);
	
	Строка = КонтактнаяИнформация.Найти(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailФизическогоЛица"), "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.ЭлектроннаяПочта = Строка.Значение;
	КонецЕсли;
	
	Параметры.ИНН = Реквизиты.ИНН;
	
	Если Не Параметры.ЭтоФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресФизическогоЛица"));
	ВидыКИ.Добавить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонФизическогоЛица"));
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, , ВидыКИ);
	
	Строка = КонтактнаяИнформация.Найти(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресФизическогоЛица"), "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.АдресРегистрации = Строка.Значение;
	КонецЕсли;
	
	Строка = КонтактнаяИнформация.Найти(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонФизическогоЛица"), "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.Телефон = Строка.Значение;
	КонецЕсли;
	
КонецПроцедуры

// См. ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовРуководителяВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовРуководителяВЗаявленииНаСертификат(Параметры) Экспорт
	
	Параметры.ТипРуководителя = Новый ОписаниеТипов("СправочникСсылка._ДемоФизическиеЛица");
	
	Если ЗначениеЗаполнено(Параметры.Организация)
	   И ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
		// Руководителя можно заполнить, когда организация выбрана.
		Директор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Организация, "Директор");
		Если Не ЗначениеЗаполнено(Параметры.Руководитель) Тогда
			Параметры.Руководитель = Директор;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Руководитель) Тогда
		Возврат; // Реквизиты руководителя нельзя заполнить, если руководитель не выбран.
	КонецЕсли;
	
	Если Параметры.Руководитель = Директор Тогда
		Параметры.Должность = НСтр("ru = 'Генеральный директор'");
		Параметры.Основание = НСтр("ru = 'Устав'");
	КонецЕсли;
	
КонецПроцедуры

// См. ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовПартнераВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовПартнераВЗаявленииНаСертификат(Параметры) Экспорт
	
	Параметры.ТипПартнера = Новый ОписаниеТипов("СправочникСсылка._ДемоКонтрагенты");
	
	Если Параметры.ЭтоФизическоеЛицо Тогда
		Если Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
			Параметры.Партнер = Константы._ДемоОсновнойПартнерВЗаявленииНаСертификат.Получить();
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Организация)
	        И ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
		// Партнера можно заполнить, когда организация выбрана.
		Если Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
			Параметры.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Организация,
				"ИнформационноеОбслуживание");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
		Возврат; // Реквизиты партнера нельзя заполнить, если партнер не выбран.
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Партнер) <> Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Партнер, "ИНН, КПП, ВидКонтрагента");
	
	Параметры.ЭтоИндивидуальныйПредприниматель =
		Реквизиты.ВидКонтрагента <> Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Параметры.ИНН = Реквизиты.ИНН;
	Параметры.КПП = Реквизиты.КПП;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПередНачаломРедактированияСертификатаКлюча
Процедура ПередНачаломРедактированияСертификатаКлюча(Ссылка, Сертификат, ПараметрыРеквизитов) Экспорт
	
	// Локализация
	Свойства = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
	Если Не ЗначениеЗаполнено(Свойства.Организация)
	 Или Не ЗначениеЗаполнено(Свойства.ИНН) И Не ЗначениеЗаполнено(Свойства.ИННЮЛ) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитОрганизация = ПараметрыРеквизитов.Добавить();
	РеквизитОрганизация.ИмяРеквизита = "Организация";
	РеквизитОрганизация.Видимость = Истина;
	РеквизитОрганизация.ПроверкаЗаполнения = Истина;
	Если ЗначениеЗаполнено(Свойства.ИННЮЛ) Тогда
		ИНН = Свойства.ИННЮЛ;
	Иначе
		ИНН = Свойства.ИНН;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИНН, "00") Тогда
		ИНН = Сред(ИНН, 3);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._ДемоОрганизации КАК _ДемоОрганизации
	|ГДЕ
	|	_ДемоОрганизации.ИНН = &ИНН";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		РеквизитОрганизация.ЗначениеЗаполнения = Выборка.Ссылка;
	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата
Процедура ПриСозданииФормыПроверкаСертификата(Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок,
	СтандартныеПроверки, ВводитьПароль) Экспорт
	
	НоваяПроверка = ДополнительныеПроверки.Добавить();
	НоваяПроверка.Имя = "ТестСвязиСОператором";
	НоваяПроверка.Представление = НСтр("ru = 'Дополнительная проверка сертификата (пример)'");
	НоваяПроверка.Подсказка     = НСтр("ru = 'Подсказка к дополнительной проверке сертификата (пример)'");
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриДополнительнойПроверкеСертификата.
Процедура ПриДополнительнойПроверкеСертификата(Параметры) Экспорт
	
	Если Параметры.Проверка = "ТестСвязиСОператором" Тогда
		Параметры.ОписаниеОшибки = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЗащитаПерсональныхДанных.

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, Отказ) Экспорт
	
	Отказ = Ложь;
	ПричинаОтменыСкрытия = НСтр("ru = 'субъект оформлен по ТК РФ'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субъекты", Субъекты); 
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_ДемоНачислениеЗарплатыЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ._ДемоНачислениеЗарплаты.Зарплата КАК _ДемоНачислениеЗарплатыЗарплата
	|ГДЕ
	|	_ДемоНачислениеЗарплатыЗарплата.ФизическоеЛицо В (&Субъекты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовоеИсключение = ТаблицаИсключений.Добавить();
		НовоеИсключение.Субъект = Выборка.ФизическоеЛицо;
		НовоеИсключение.ПричинаОтменыСкрытия = ПричинаОтменыСкрытия;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Печать

//  См. УправлениеПечатьюПереопределяемый.ПриОпределенииИсточниковДанныхПечати
Процедура ПриОпределенииИсточниковДанныхПечати(Объект, ИсточникиДанныхПечати) Экспорт
	
	// Локализация
	Если Объект = "Справочник._ДемоФизическиеЛица.Наименование" Тогда
		СклонениеПредставленийОбъектов.ПодключитьИсточникДанныхПечатиСклоненияСтрок(ИсточникиДанныхПечати);
	КонецЕсли;
	// Конец Локализация

	Если Объект = "Документ._ДемоСчетНаОплатуПокупателю.СуммаОплаты" Тогда
		РаботаСКурсамиВалют.ПодключитьИсточникДанныхПечатиЧислоПрописью(ИсточникиДанныхПечати);
	КонецЕсли;
	
	Если Объект = "Справочник._ДемоФизическиеЛица.Наименование" Тогда
		ИсточникиДанныхПечати.Добавить(СхемаДанныеПечатиФамилияИнициалы(), "ДанныеПечатиФамилияИнициалы");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати
Процедура ПриПодготовкеДанныхПечати(ИсточникиДанных, ВнешниеНаборыДанных, ИдентификаторСхемыКомпоновкиДанных, КодЯзыка,
	ДополнительныеПараметры) Экспорт
	
	// Локализация
	Если ИдентификаторСхемыКомпоновкиДанных = "ДанныеПечатиФамилияИнициалы" Тогда
		ВнешниеНаборыДанных.Вставить("Данные", ДанныеПечатиФамилияИнициалы(ИсточникиДанных));
		Возврат;
	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Реализация события ПриЗаполненииПоставляемыхПрофилейГруппДоступа.

// Основные профили.

Процедура ЗаполнитьПрофильПользователь(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПользователь";
	ОписаниеПрофиля.Идентификатор = "09e56dbf-90a0-11de-862c-001d600d9ad2";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Пользователь'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Общие разрешенные действия для большинства пользователей.
		           |Как правило, это права на просмотр данных информационной системы.'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСертификатовКлючейЭлектроннойПодписиИШифрования");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписей");
	ОписаниеПрофиля.Роли.Добавить("ШифрованиеИРасшифровкаДанных");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЭлектроннойПодписиВМоделиСервиса");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	// Локализация
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхСервисаDSS");
	// Конец Локализация
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаметок");
	ОписаниеПрофиля.Роли.Добавить("_ДемоИспользованиеОбработкиЖурналУчетаОригиналовПервичныхДокументов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНапоминаний");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаданий");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеЗаданийСРолевойАдресацией");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеВыполнениеЗадач");
	
	// Анкетирование
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоПодразделения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеОтчетыИОбработки", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	
	// Использование онлайн-поддержки
	ОписаниеПрофиля.Роли.Добавить("ВызовОнлайнПоддержки");
	ОписаниеПрофиля.Роли.Добавить("_ДемоВызовОнлайнПоддержки");
	ОписаниеПрофиля.Роли.Добавить("ПодключениеИнтернетПоддержки");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	// Использование подсистемы учета оригиналов первичных документов
	УчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляИзмененияСостоянийОригиналовДокументов(ОписаниеПрофиля);
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	// Проверка, что указание роли дважды допустимо.
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	
КонецПроцедуры

Процедура ЗаполнитьПрофильМенеджер(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоМенеджер";
	ОписаниеПрофиля.Идентификатор = "c7e34f11-9890-11df-b54f-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для настройки групп доступа, демонстрирующих
		           |работу пользователей по вводу и изменению данных различных подсистем в разрезе различных
		           |видов доступа. В частности:
		           |- проведение и анализ результатов опросов (подсистема ""Анкетирование"");
		           |- ведение дополнительных сведений (подсистема ""Свойства"");
		           |- редактирование проектов и их присоединенных файлов (подсистема ""Присоединенные файлы"").
		           |
		           |Кроме того, в отличие от профилей ""Руководитель"" и ""Бухгалтер"", менеджерам вообще
		           |не доступны документы ""Демо: Расходный кассовый ордер"".'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАнкетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСертификатовКлючейЭлектроннойПодписиИШифрования");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписей");
	ОписаниеПрофиля.Роли.Добавить("ШифрованиеИРасшифровкаДанных");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЭлектроннойПодписиВМоделиСервиса");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	// Локализация
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхСервисаDSS");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейСерверовDSS");
	// Конец Локализация
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеДокументовПокупателей");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоИспользованиеОбработкиЖурналУчетаОригиналовПервичныхДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеОтпусков");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоПечатьСчетаНаОплатуНаПринтер");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОпросов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоПодразделения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеСведения", "ВначалеВсеЗапрещены");
		
	УчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляИзмененияСостоянийОригиналовДокументов(ОписаниеПрофиля);
		
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильКладовщик(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоКладовщик";
	ОписаниеПрофиля.Идентификатор = "17a7b55d-4f89-11e4-9e14-005056c00008";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кладовщик'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для настройки групп доступа, демонстрирующих
		           |работу пользователей по вводу и изменению данных различных подсистем в разрезе различных
		           |видов доступа. В частности:
		           |- ведение дополнительных сведений (подсистема ""Свойства"");
		           |- редактирование проектов и их присоединенных файлов (подсистема ""Присоединенные файлы"").
		           |
		           |Кроме того, в отличие от профилей ""Руководитель"" и ""Бухгалтер"", кладовщикам вообще
		           |не доступны документы ""Демо: Расходный кассовый ордер"".'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеПеремещенийТоваров");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДокументовПокупателей");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации", "ВначалеВсеЗапрещены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоПодразделения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеСведения", "ВначалеВсеЗапрещены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРуководитель(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРуководитель";
	ОписаниеПрофиля.Идентификатор = "75fa0ecb-98aa-11df-b54f-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Руководитель'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для создания групп доступа, демонстрирующих
		           |использование предустановленных видов доступа. Например, в отличие от профиля ""Бухгалтер""
		           |руководителю разрешено редактировать документы ""Демо: Расходный кассовый ордер"" с типом 
		           |хозяйственной операции - ""Выдача зарплаты"", а персональные данные физических лиц - только просматривать.'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрЖурналаРегистрации");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАнкетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаДвиженияДокумента");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрограммЭлектроннойПодписиИШифрования");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСертификатовКлючейЭлектроннойПодписиИШифрования");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписей");
	ОписаниеПрофиля.Роли.Добавить("ШифрованиеИРасшифровкаДанных");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЭлектроннойПодписиВМоделиСервиса");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	// Локализация
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхСервисаDSS");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейСерверовDSS");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСерверовDSS");
	// Конец Локализация
	
	// Административные возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеРеквизитовОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеУниверсальногоОтчета");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеБанковскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеКассовыхДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеОтпусков");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗарплаты");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхРеспондентов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗаданийСРолевойАдресацией");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДокументовПокупателей");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеИсполнителейРолейПоОбъектамАдресации");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРассылокОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРолейИсполнителей");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеМакетовПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("НастройкаИОценкаПроизводительности");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаданий");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗадач");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВнешнихПользователей");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВерсийОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ОтправкаSMS");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВзаимодействий");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновСообщений");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоХозяйственныеОперации", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "ВначалеВсеЗапрещены");
	ОписаниеПрофиля.ЗначенияДоступа.Добавить("_ДемоХозяйственныеОперации",
		"Перечисление._ДемоХозяйственныеОперации.ВыдачаЗарплаты");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	УчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляЧтенияСостоянийОригиналовДокументов(ОписаниеПрофиля);
	УчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляНастройкиСостоянийОригиналовДокументов(ОписаниеПрофиля);
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильБухгалтер(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоБухгалтер";
	ОписаниеПрофиля.Идентификатор = "75fa0eca-98aa-11df-b54f-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Бухгалтер'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Демонстрирует использование
		           |- предустановленных видов доступа. Например, в отличие от профиля ""Руководитель""
		           |бухгалтерам разрешено редактировать документы ""Демо: Расходный кассовый ордер"" с типом
		           |хозяйственной операции - ""Выдача денежных средств подотчет"".
		           |- изменение как правило недоступных свойств объекта (на примере персональных данных физического лица).'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("_ДемоИспользованиеОбработкиЖурналУчетаОригиналовПервичныхДокументов");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеБанковскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеКассовыхДокументов");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения",         "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации",                "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоКассы",                 "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров",       "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеОтчетыИОбработки", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи",               "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоХозяйственныеОперации", "Предустановленный");
	ОписаниеПрофиля.ЗначенияДоступа.Добавить("_ДемоХозяйственныеОперации",
		"Перечисление._ДемоХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику");
	ОписаниеПрофиля.ЗначенияДоступа.Добавить("_ДемоХозяйственныеОперации",
		"Перечисление._ДемоХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника");
	
	УчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляИзмененияСостоянийОригиналовДокументов(ОписаниеПрофиля);
		
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРасчетчикЗарплаты(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРасчетчикЗарплаты";
	ОписаниеПрофиля.Идентификатор = "11851213-0f5f-11e0-96c1-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Расчетчик зарплаты'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеЗарплаты");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоФизическиеЛица", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеОтчетыИОбработки", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеСведения", "ВначалеВсеЗапрещены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильАудитор(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоАудитор";
	ОписаниеПрофиля.Идентификатор = "bfd56f51-313d-11e5-b1ac-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Аудитор'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание      = НСтр("ru = 'Позволяет просматривать любые данные.'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАнкетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("РасшифровкаДанных");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЭлектроннойПодписиВМоделиСервиса");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	// Локализация
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхСервисаDSS");
	// Конец Локализация
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеБанковскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхРеспондентов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДокументовПокупателей");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗаданийСРолевойАдресацией");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗарплаты");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеКассовыхДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеПеремещенийТоваров");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВерсийОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВнешнихПользователей");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаданий");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗадач");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииОВерсияхОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРассылокОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновСообщений");
	
	// Использование онлайн-поддержки
	ОписаниеПрофиля.Роли.Добавить("ВызовОнлайнПоддержки");
	ОписаниеПрофиля.Роли.Добавить("_ДемоВызовОнлайнПоддержки");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПартнер(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПартнер";
	ОписаниеПрофиля.Идентификатор = "67b8f689-ee30-11de-a1c1-005056c00008";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Партнер'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Переопределение назначения.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПрофиля.Назначение,
		Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы());
	
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для партнеров (внешних пользователей), работающих с программой.'");
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	
	// Использование программы.
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваВнешнихПользователейБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоОплатаСчетовВнешнимиПользователями");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхДляОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхОбъектовАвторизации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтветовНаВопросыАнкет");
	
	// Работа с файлами
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайловВнешнимиПользователями");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("ВнешниеПользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеОтчетыИОбработки");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// Дополнительные профили.

Процедура ЗаполнитьПрофильОтветственныйЗаНормативноСправочнуюИнформацию(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаНСИ";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "09e56dbf-90a0-11de-862c-001d600d9fe2";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за нормативно-справочную информацию (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Ведение и обновление классификаторов, различной нормативно-справочной информации.'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГрафиковРаботы");
	// Локализация
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАдресныхСведений");
	// Конец Локализация
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеБанков");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКалендарныхГрафиков");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеНСИ");
	ОписаниеПрофиля.Роли.Добавить("ПолучениеОбновленийКлассификаторов");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаВедениеНоменклатуры(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаВедениеНоменклатуры";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "d348b8f5-1437-11e2-bb53-005056c00008";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за ведение номенклатуры (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Назначается тем пользователям, которые будут добавлять или изменять номенклатуру.'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеНоменклатуры");
	// Работа с НСИ только в части стран мира.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры", "ВначалеВсеРазрешены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаВедениеВзаимодействий(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаВедениеВзаимодействий";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "62e89fcd-9a4c-11df-8c0e-0011d8570cdf";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за ведение взаимодействий (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Ведение взаимодействий с клиентами, поставщиками, партнерами и т.п. по электронной почте и телефону,
		           |а также планирование встреч (подсистема ""Взаимодействия"").'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУчетныхЗаписейЭлектроннойПочты");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВзаимодействий");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("УчетныеЗаписиЭлектроннойПочты");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаСписокПользователей(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаСписокПользователей";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "71ab566d-313b-11e5-b1ac-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за список пользователей (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна возможность добавления и изменения пользователей,
		           |настройка свойств пользователей информационной базы (без разрешения входа)
		           |(подсистема ""Пользователи"").'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПользователей");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАдминистрирование");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаСписокВнешнихПользователей(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаСписокВнешнихПользователей";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "14401b24-3591-11df-863c-001d600d9ad2";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за список внешних пользователей (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна возможность добавления и изменения внешних пользователей,
		           |настройка свойств пользователей информационной базы (без разрешения входа)
		           |(подсистема ""Пользователи"").'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВнешнихПользователей");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАдминистрирование");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаСоставыУчастниковГруппДоступа(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаСоставыУчастниковГруппДоступа";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "588438ff-e954-11de-8634-001d600d9ad2";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за составы участников групп доступа (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Назначается тем пользователям, у которых должна быть
		           |возможность изменять состав участников своих групп доступа
		           |(подсистема ""Управление доступом"").'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ИзменениеУчастниковГруппДоступа");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАдминистрирование");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильНастройкаСинхронизацииФайловСОблачнымСервисом(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоНастройкаСинхронизацииФайловСОблачнымСервисом";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "3b9c663c-496d-11e5-9e02-50465da19b8f";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Настройка синхронизации файлов с облачным сервисом (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна настройка синхронизации файлов с облачными сервисами.'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("НастройкаСинхронизацииФайлов");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаДатыЗапретаИзмененияДанных(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаДатыЗапретаИзмененияДанных";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "170b789c-3065-11e5-b1ac-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за даты запрета изменения данных (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна возможность работы с датами запрета изменения данных
		           |(подсистема ""Даты запрета изменения"").'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДатЗапретаИзменения");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильИспользованиеЭлектроннойПочты(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоИспользованиеЭлектроннойПочты";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "588438ff-e854-11de-8634-001d600d9ad1";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Использование электронной почты (дополнительно)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должны быть
		           |доступны различные функции получения и отправки электронной почты,
		           |имеющиеся в системе.'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСПочтовымиСообщениями");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("УчетныеЗаписиЭлектроннойПочты");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПечатьНепроведенныхДокументов(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПечатьНепроведенныхДокументов";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "c944ca49-dfee-11de-8632-001d600d9ad2";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Печать непроведенных документов (дополнительно)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна печать непроведенных документов.
		           |Демонстрирует использование функции %1.'"), "ЕстьРоль");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоПечатьНепроведенныхДокументов");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРаботаСПапкамиФайлов(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРаботаСПапкамиФайлов";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "a8f63f6c-ced9-11de-862f-001d600d9ad2";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Работа с папками файлов (дополнительно)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым разрешено
		           |работать с папками файлов (подсистема ""Работа с файлами"").'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРедактированиеСогласийНаОбработкуПерсональныхДанных(Знач ОписанияПрофилей)
 
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРедактированиеСогласийНаОбработкуПерсональныхДанных";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "3d09f30d-0d95-403c-b2ab-c39780da6a95";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Редактирование согласий на обработку персональных данных (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Добавление и изменение согласий на обработку персональных данных.'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеСогласийНаОбработкуПерсональныхДанных");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПросмотрСогласийНаОбработкуПерсональныхДанных(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПросмотрСогласийНаОбработкуПерсональныхДанных";
	ОписаниеПрофиля.Родитель      = "ДополнительныеПрофили";
	ОписаниеПрофиля.Идентификатор = "53c4eecf-9401-450b-9c15-15872be591e5";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Просмотр согласий на обработку персональных данных (дополнительно)'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание = НСтр("ru = 'Просмотр согласий на обработку персональных данных.'");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеСогласийНаОбработкуПерсональныхДанных");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// Для процедур ЗаполнитьПрофиль*.
Процедура ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(Знач ОписаниеПрофиля)
	
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоБизнесПроцессыИЗадачи");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоИнтегрируемыеПодсистемы");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоИнтегрируемыеПодсистемыПродолжение");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоНормативноСправочнаяИнформация");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоОрганайзер");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоСервисныеПодсистемы");
	// Локализация
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоСинхронизацияДанных");
	// Конец Локализация
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоУправлениеДоступом");
	
КонецПроцедуры

// Заполнение значений наборов доступа.

Процедура ПриЗаполненииНаборовЗначенийДоступаДляВстречи(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	КонтактныеЛица = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Участники Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			КонтактныеЛица.Добавить(СтрокаТаблицы.Контакт);

		КонецЕсли;

	КонецЦикла;

	Если КонтактныеЛица.Количество() > 0 Тогда

		Выборка = ВыбратьПартнеров(КонтактныеЛица);
		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляЗапланированногоВзаимодействия(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	КонтактныеЛица = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Участники Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			КонтактныеЛица.Добавить(СтрокаТаблицы.Контакт);

		КонецЕсли;

	КонецЦикла;

	Если КонтактныеЛица.Количество() > 0 Тогда

		Выборка = ВыбратьПартнеров(КонтактныеЛица);
		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;	

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляСообщенияSMS(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	КонтактныеЛица = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			КонтактныеЛица.Добавить(СтрокаТаблицы.Контакт);

		КонецЕсли;

	КонецЦикла;

	Если КонтактныеЛица.Количество() > 0 Тогда

		Выборка = ВыбратьПартнеров(КонтактныеЛица);
		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляТелефонногоЗвонка(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.
	
	// Ограничение по "Автор".
	НомерНабора = 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Ответственный;

	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда

		Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы.НомерНабора     = НомерНабора;
			СтрокаТаблицы.ЗначениеДоступа = Объект.АбонентКонтакт;

		ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			КонтактныеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.АбонентКонтакт);
			Выборка = ВыбратьПартнеров(КонтактныеЛица);
			Пока Выборка.Следующий() Цикл

				НомерНабора = НомерНабора + 1;

				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.НомерНабора     = НомерНабора;
				СтрокаТаблицы.ЗначениеДоступа = Выборка.Партнер;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаВходящего(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Ответственный" или "Учетная запись".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.УчетнаяЗапись;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	КонтактныеЛица = Новый Массив;

	МассивТабличныхЧастей = Новый Массив;
	МассивТабличныхЧастей.Добавить("ПолучателиПисьма");
	МассивТабличныхЧастей.Добавить("ПолучателиКопий");
	МассивТабличныхЧастей.Добавить("ПолучателиОтвета");
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл

		Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл

			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

				НомерНабора = НомерНабора + 1;

				СтрокаТаб = Таблица.Добавить();
				СтрокаТаб.НомерНабора     = НомерНабора;
				СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

				КонтактныеЛица.Добавить(СтрокаТаблицы.Контакт);

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Если КонтактныеЛица.Количество() > 0 Тогда

		Выборка = ВыбратьПартнеров(КонтактныеЛица);
		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаИсходящего(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Ответственный" или "Учетная запись"
	// или "Автор".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	НомерНабора = 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.УчетнаяЗапись;

	НомерНабора = НомерНабора + 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Автор;

	НомерНабора = НомерНабора + 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Ответственный;

	КонтактныеЛица = Новый Массив;

	МассивТабличныхЧастей = Новый Массив;
	МассивТабличныхЧастей.Добавить("ПолучателиПисьма");
	МассивТабличныхЧастей.Добавить("ПолучателиКопий");
	МассивТабличныхЧастей.Добавить("ПолучателиОтвета");
	МассивТабличныхЧастей.Добавить("ПолучателиСкрытыхКопий");
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл

		Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл

			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

				НомерНабора = НомерНабора + 1;

				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.НомерНабора     = НомерНабора;
				НоваяСтрока.ЗначениеДоступа = СтрокаТаблицы.Контакт;

			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

				КонтактныеЛица.Добавить(СтрокаТаблицы.Контакт);

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Если КонтактныеЛица.Количество() > 0 Тогда

		Выборка = ВыбратьПартнеров(КонтактныеЛица);
		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.НомерНабора     = НомерНабора;
			НоваяСтрока.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ВыбратьПартнеров(КонтактныеЛица)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
	|ИЗ
	|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактныхЛиц)
	|");
	Запрос.УстановитьПараметр("МассивКонтактныхЛиц", КонтактныеЛица);
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// Заполнение ограничения доступа.

Процедура ПриЗаполненииОграниченияДоступаДляВстречи(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Участники.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(Участники.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляЗапланированногоВзаимодействия(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Участники.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(Участники.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляСообщенияSMS(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Адресаты.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(Адресаты.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляТелефонногоЗвонка(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(АбонентКонтакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(АбонентКонтакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаВходящего(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(УчетнаяЗапись, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиПисьма.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиПисьма.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиКопий.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиКопий.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиОтвета.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиОтвета.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаИсходящего(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(УчетнаяЗапись, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиПисьма.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиПисьма.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиКопий.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиКопий.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиОтвета.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиОтвета.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиСкрытыхКопий.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиСкрытыхКопий.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ПриПодготовкеНабораДанных.

Функция ИменаПредставленияПолей(ПоляРегистра)
	
	Результат = Новый Структура;
	
	ИсключаемыйТип = Тип("ХранилищеЗначения");
	Для Каждого ЕдиницаМетаданных Из ПоляРегистра Цикл
		Если Не ЕдиницаМетаданных.Тип.СодержитТип(ИсключаемыйТип) Тогда 
			Результат.Вставить(ЕдиницаМетаданных.Имя, ЕдиницаМетаданных.Представление());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПоля(ТекстПолейВыбора, ИменаПредставленияПолей)
	
	Для Каждого Поле Из ИменаПредставленияПолей Цикл
		ТекстПолейВыбора = ТекстПолейВыбора + ?(ЗначениеЗаполнено(ТекстПолейВыбора), ", ", "") + Поле.Ключ;
	КонецЦикла;
	
КонецПроцедуры

Функция НомераПолей(МаксимальныйНомер)
	
	Результат = Новый Структура;
	
	Для Индекс = 1 По МаксимальныйНомер Цикл
		ИндексСтрокой = Формат(Индекс, "ЧГ=0");
		Результат.Вставить("ГруппаЭлементаВыводаСКДТекущегоДокумента" + ИндексСтрокой, ИндексСтрокой);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьНомераПолей(ТекстНомеровПолей, НомераПолей)
	
	Для Каждого НомерПоля Из НомераПолей Цикл
		ТекстНомеровПолей = ТекстНомеровПолей + ?(ЗначениеЗаполнено(ТекстНомеровПолей), ", ", "") + НомерПоля.Значение + " КАК "
			+ НомерПоля.Ключ;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ПриОпределенииПараметровПоискаДублей.

// Краткие обозначения организационно-правовых форм, применяемые в сокращенном наименовании 
// юридического лица, его обособленного подразделения, и общепринятые аббревиатуры.
// Согласно "Инструкции о порядке учета юридических лиц, их обособленных подразделений 
// в едином государственном регистре предприятий и организаций. Часть i" 
// (утвержден Госкомстатом рф 22.12.99 № ас-1-24/6483, ред. от 07.12.2001).
//
Функция СокращенияОрганизационноПравовыхФорм()
	Сокращения = Новый Массив();
	Сокращения.Добавить("ГУП");
	Сокращения.Добавить("ФКП");
	Сокращения.Добавить("МУУП");
	Сокращения.Добавить("ДУП");
	Сокращения.Добавить("ДП");
	Сокращения.Добавить("ПК");
	Сокращения.Добавить("Арт");
	Сокращения.Добавить("СХК");
	Сокращения.Добавить("ПТ");
	Сокращения.Добавить("ТВ");
	Сокращения.Добавить("ООО");
	Сокращения.Добавить("ОДО");
	Сокращения.Добавить("ОАО");
	Сокращения.Добавить("ЗАО");
	Сокращения.Добавить("ФЛ");
	Сокращения.Добавить("ПРЕД");
	Сокращения.Добавить("ОО");
	Сокращения.Добавить("РО");
	Сокращения.Добавить("ООБ");
	Сокращения.Добавить("РОБ");
	Сокращения.Добавить("НП");
	Сокращения.Добавить("Уч");
	Сокращения.Добавить("ГУЧ");
	Сокращения.Добавить("МУЧ");
	Сокращения.Добавить("ОУЧ");
	Сокращения.Добавить("АНО");
	Сокращения.Добавить("АС");
	Сокращения.Добавить("ТСЖ");
	Сокращения.Добавить("ПТК");
	Сокращения.Добавить("ОД");
	Сокращения.Добавить("ОФ");
	Сокращения.Добавить("ООС");
	Сокращения.Добавить("ДОУч");
	Сокращения.Добавить("ОПРОФ");
	Сокращения.Добавить("ТОПРОФ");
	Сокращения.Добавить("ППО");
	Сокращения.Добавить("АО");
	Сокращения.Добавить("АОЗТ");
	Сокращения.Добавить("АООТ");
	Сокращения.Добавить("ТОО");
	Сокращения.Добавить("МП");
	Сокращения.Добавить("ИЧП");
	Сокращения.Добавить("СЕМ");
	Сокращения.Добавить("КФХ");
	Сокращения.Добавить("КХ");
	Сокращения.Добавить("СП");
	Сокращения.Добавить("ГП");
	Сокращения.Добавить("МУП");
	Сокращения.Добавить("ПОО");
	Сокращения.Добавить("ППКООП");
	Сокращения.Добавить("УОО");
	Сокращения.Добавить("УЧПТК");
	Сокращения.Добавить("СМТ");
	Сокращения.Добавить("СТ");
	Сокращения.Добавить("КЛХ");
	Сокращения.Добавить("СВХ");
	Сокращения.Добавить("ЖСК");
	Сокращения.Добавить("ГСК");
	Сокращения.Добавить("НПО");
	Сокращения.Добавить("ПО");
	Сокращения.Добавить("СКБ");
	Сокращения.Добавить("КБ");
	Сокращения.Добавить("УПТК");
	Сокращения.Добавить("СМУ");
	Сокращения.Добавить("ХОЗУ");
	Сокращения.Добавить("НТЦ");
	Сокращения.Добавить("ФИК");
	Сокращения.Добавить("НПП");
	Сокращения.Добавить("ЧИФ");
	Сокращения.Добавить("ЧОП");
	Сокращения.Добавить("РЭУ");
	Сокращения.Добавить("ПИФ");
	Сокращения.Добавить("ГКООП");
	Сокращения.Добавить("ПОБ");
	Сокращения.Добавить("ПС");
	Сокращения.Добавить("КС");
	Сокращения.Добавить("ФФ");
	Сокращения.Добавить("ФПГ");
	Сокращения.Добавить("МХП");
	Сокращения.Добавить("ЛПХ");
	Сокращения.Добавить("АП");
	Сокращения.Добавить("ОП");
	Сокращения.Добавить("НПФ");
	Сокращения.Добавить("ПКФ");
	Сокращения.Добавить("ПКП");
	Сокращения.Добавить("ПКК");
	Сокращения.Добавить("КФ");
	Сокращения.Добавить("ТФ");
	Сокращения.Добавить("ТД");
	Сокращения.Добавить("Д(С)У");
	Сокращения.Добавить("ТФПГ");
	Сокращения.Добавить("МФПГ");
	Сокращения.Добавить("Д/С");
	Сокращения.Добавить("Б-ЦА");
	Сокращения.Добавить("П-КА");
	Сокращения.Добавить("А-КА");
	Сокращения.Добавить("З-Д");
	Сокращения.Добавить("АДОК");
	Сокращения.Добавить("РедСМИ");
	Сокращения.Добавить("ПрТ");
	Сокращения.Добавить("АПАООТ");
	Сокращения.Добавить("АПАОЗТ");
	Сокращения.Добавить("АПТОО");
	Сокращения.Добавить("АПСТ");
	Сокращения.Добавить("АППТ");
	Сокращения.Добавить("ОПАООТ");
	Сокращения.Добавить("ОПАОЗТ");
	Сокращения.Добавить("ОПТОО");
	Сокращения.Добавить("ОПСТ");
	Сокращения.Добавить("ОППТ");
	Сокращения.Добавить("АСКФХ");
	Сокращения.Добавить("СОЮЗКФХ");
	Сокращения.Добавить("СОЮЗПОБ");
	Сокращения.Добавить("Ин-т");
	Сокращения.Добавить("РСУ");
	Сокращения.Добавить("Корп");
	Сокращения.Добавить("Комп");
	Сокращения.Добавить("Б-ка");
	Сокращения.Добавить("БСП");
	Сокращения.Добавить("ЦРБ");
	Сокращения.Добавить("МУУЧ");
	Сокращения.Добавить("МСЧ");
	Сокращения.Добавить("ЦРБУХ");
	Сокращения.Добавить("ЦБУХ");
	Сокращения.Добавить("ФИНОТДЕЛ");
	Сокращения.Добавить("КЦ");
	Сокращения.Добавить("ПРОФКОМ");
	Сокращения.Добавить("АТП");
	Сокращения.Добавить("ПАТП");
	Сокращения.Добавить("ЦДН");
	Сокращения.Добавить("НОТП");
	Сокращения.Добавить("НОТК");
	Сокращения.Добавить("Я/С");
	Сокращения.Добавить("ОТД");
	Сокращения.Добавить("ЖД");
	Сокращения.Добавить("КООП");
	Возврат Сокращения;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Реализация события ПриОпределенииДополнительныхСведенийОрганизации

Функция КартинкаИзФайла(ФайлСсылка) Экспорт
	
	ДвоичныеДанные = Неопределено;
	
	Если ЗначениеЗаполнено(ФайлСсылка) И Не ФайлСсылка.Пустая() Тогда
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка, Ложь);
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Новый Картинка;
	КонецЕсли;
	
	Возврат Новый Картинка(ДвоичныеДанные, Истина);
	
КонецФункции

// Вызывается из события ОбработкаЗаполнения модулей объектов демонстрационных документов.
//
// Параметры:
//  Объект - СправочникОбъект
//         - ДокументОбъект - заполняемый объект;
//  ИмяРеквизита - Строка - имя реквизита Организация.
//
Процедура ПриВводеНовогоЗаполнитьОрганизацию(Объект, ИмяРеквизита = "Организация") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник._ДемоОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа._ДемоОсновнаяОрганизация КАК _ДемоОсновнаяОрганизация
	|		ПО Организации.Ссылка = _ДемоОсновнаяОрганизация.Значение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект[ИмяРеквизита] = Выборка.Организация;
	КонецЕсли;
КонецПроцедуры

Функция СхемаДанныеПечатиФамилияИнициалы()
	
	СписокПолей = УправлениеПечатью.ТаблицаПолейДанныхПечати();
	
	Поле = СписокПолей.Добавить();
	Поле.Идентификатор = "Ссылка";
	Поле.Представление = НСтр("ru = 'Ссылка'");
	Поле.ТипЗначения = Новый ОписаниеТипов();	

	Поле = СписокПолей.Добавить();
	Поле.Идентификатор = "ФамилияИнициалы";
	Поле.Представление = НСтр("ru = 'Фамилия И. О.'");
	Поле.ТипЗначения = Новый ОписаниеТипов("Строка");
	
	Возврат УправлениеПечатью.СхемаКомпоновкиДанныхПечати(СписокПолей);
	
КонецФункции

// Локализация
Функция ДанныеПечатиФамилияИнициалы(Объекты)
	
	ДанныеПечати = Новый ТаблицаЗначений();
	ДанныеПечати.Колонки.Добавить("Ссылка");
	ДанныеПечати.Колонки.Добавить("ФамилияИнициалы");
	
	Для Каждого Объект Из Объекты Цикл
		СтрокаТаблицы = ДанныеПечати.Добавить();
		СтрокаТаблицы.Ссылка = Объект;
		СтрокаТаблицы.ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Объект);
	КонецЦикла;
	
	Возврат ДанныеПечати;
	
КонецФункции
// Конец Локализация

#КонецОбласти
