////////////////////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейсСервиса: выполнение штатных функций МС прикладным кодом
// через внешний API 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает свойства версии программного интерфейса менеджера сервиса.
// 
// Возвращаемое значение:
//  Структура - свойства версии внешнего программного интерфейса:
//   * Версия - Число - номер версии внешнего программного интерфейса.
//   * ВерсияМенеджераСервиса - Строка - номер версии менеджера сервиса.
//   * ЧасовойПоясМенеджераСервиса - Строка - часовой пояс менеджера сервиса.
//
Функция СвойстваВерсииИнтерфейса() Экспорт

	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.СвойстваВерсииИнтерфейса();

КонецФункции

#Область Account

// Возвращает список абонентов текущего пользователя.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список абонентов:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль текущего пользователя абонента.
//
Функция Абоненты() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Служебный.ПереименованияАбонент();
	Переименования.Вставить("role", Служебный.ОписаниеКолонки("РольПользователя", 
		Новый ОписаниеТипов("ПеречислениеСсылка.РолиПользователейАбонентов")));

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.account, Переименования);

КонецФункции

// Возвращает дополнительные сведения (реквизиты и свойства) абонента этого приложения.
// Реализует метод внешнего программного интерфейса - account/attached_info.
// 
// Параметры:
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Структура - дополнительные реквизиты и свойства абонента:
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента:
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
//
Функция ДополнительныеСведенияАбонента(ВызыватьИсключениеПриОшибке = Истина,
		КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/attached_info";

	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Абонент.Код);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Переименования = Служебный.ПереименованияДополнительныхСведений();
	Если ДанныеОтвета <> Неопределено Тогда
		Свойства = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.properties, Переименования);
		Реквизиты = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.fields, Переименования);
	Иначе
		Свойства = Служебный.НовыйДополнительныеСведения();
		Реквизиты = Служебный.НовыйДополнительныеСведения();
	КонецЕсли;

	Возврат Новый Структура("Свойства, Реквизиты", Свойства, Реквизиты);
	
КонецФункции

// Обновляет дополнительные сведения (реквизиты и свойства) абонента.
// Реализует метод внешнего программного интерфейса - account/update_attached_info.
//
// Параметры:
//  ДопСведения - см. НовыйДопСведенияАбонента
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Булево - установка доп. сведений: Истина - установлено, Ложь - произошла ошибка.
//
Функция ОбновитьДопСведенияАбонента(ДопСведения, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/update_attached_info";
	
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", ДопСведения.КодАбонента);

	Если ДопСведения.Свойство("ПубличныйИдентификатор") Тогда
		ДанныеЗапроса.Вставить("public_id", ДопСведения.ПубличныйИдентификатор);
	КонецЕсли;
	Переименования = Служебный.ПереименованияДополнительныхСведений(Ложь);
	Если ДопСведения.Свойство("Реквизиты") Тогда
		ДанныеЗапроса.Вставить("fields", Служебный.ТаблицаЗначенийВМассивСтруктур(
			ДопСведения.Реквизиты, Переименования));
	КонецЕсли;
	Если ДопСведения.Свойство("Свойства") Тогда
		ДанныеЗапроса.Вставить("properties", Служебный.ТаблицаЗначенийВМассивСтруктур(
			ДопСведения.Свойства, Переименования));
	КонецЕсли;

	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, 
		ОсновныеСвойстваОтвета.КодОтвета, 
		ОсновныеСвойстваОтвета.Сообщение);

	Если ОсновныеСвойстваОтвета.КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает дополнительные сведения (реквизиты и свойства) указанного абонента,
// необходимые для оформления платной подписки.
// Реализует метод внешнего программного интерфейса - account/attached_info_for_subscribing
//
// Параметры:
//  КодАбонента - Число - код абонента, для которого нужно получить доп. сведения.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура - дополнительные реквизиты и свойства абонента:
//   * ЕстьОшибки - Булево - признак наличия ошибок заполнения.
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Заголовок - Строка - заголовок дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//     ** ЗаполнятьОбязательно - Булево - признак обяз 
//     ** Подсказка - Строка - подсказка заполнения
//     ** Ошибка - Булево - признак ошибки заполнения
//     ** Сообщение - Строка - сообщение об ошибке.
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента:
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Заголовок - Строка - заголовок дополнительного реквизита
//     ** Тип - Строка - тип значения
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
//     ** ЗаполнятьОбязательно - Булево - признак обяз 
//     ** Подсказка - Строка - подсказка заполнения
//     ** Ошибка - Булево - признак ошибки заполнения
//     ** Сообщение - Строка - сообщение об ошибке.
//
Функция ОбязательныеСведенияДляОформленияПодписки(КодАбонента, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/attached_info_for_subscribing";

	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодАбонента);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);

	Переименования = Служебный.ПереименованияДополнительныхСведений();
	Переименования.Вставить("required", Служебный.ОписаниеКолонки(
		"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("tooltip", Служебный.ОписаниеКолонки(
		"Подсказка", Новый ОписаниеТипов("Строка")));
	Переименования.Вставить("error", Служебный.ОписаниеКолонки(
		"Ошибка", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("message", Служебный.ОписаниеКолонки(
		"Сообщение", Новый ОписаниеТипов("Строка")));
		
	Если ДанныеОтвета <> Неопределено Тогда
		Свойства = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.properties, Переименования);
		Реквизиты = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.fields, Переименования);
	Иначе
		Свойства = Служебный.НовыйДополнительныеСведения();
		Реквизиты = Служебный.НовыйДополнительныеСведения();
	КонецЕсли;

	Возврат Новый Структура("ЕстьОшибки, Свойства, Реквизиты", ДанныеОтвета.errors, Свойства, Реквизиты);

КонецФункции

// Возвращает значения дополнительного сведения.
// 
// Параметры:
//  ИмяСведения - Строка - имя сведения, для которого нужно получить значения.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - значения дополнительного сведения:
//   * Наименование - Строка - длина 100
//   * Вес - Число - точность 10,2  
Функция ЗначенияДополнительногоСведения(ИмяСведения, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "attached_info_values";

	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("key", ИмяСведения);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод, , Ложь);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);

	Переименования = Новый Соответствие;
	Переименования.Вставить("name", Служебный.ОписаниеКолонки(
		"Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	Переименования.Вставить("weight", Служебный.ОписаниеКолонки(
		"Вес", ОбщегоНазначения.ОписаниеТипаЧисло(10, 2)));
	
	Если ДанныеОтвета <> Неопределено Тогда
		Значения = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.values, Переименования);
	Иначе 
		Значения = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат Значения;

КонецФункции

#КонецОбласти

#Область Account_Users

// Возвращает список пользователей абонента этого приложения.
// Реализует метод внешнего программного интерфейса - account/users/list.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи абонента:
//   * Логин - Строка - логин (имя) пользователя
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Почта - Строка - электронная почта пользователя
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль пользователя
//   * РазрешенноеКоличествоСеансов - Число - разрешенное количество сеансов
//   * ВременныйДоступ - Булево - временный доступ
//
Функция ПользователиАбонента() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/users/list";
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Абонент.Код);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);
	Переименования = Служебный.ПереименованияПользователиАбонента();

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.user, Переименования);

КонецФункции

// Возвращает свойства пользователя абонента по логину.
// Реализует метод внешнего программного интерфейса - account/users/info.
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
// 
// Возвращаемое значение:
//  Структура - свойства пользователя абонента:
//   * Логин - Строка - логин (имя) пользователя
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Почта - Строка - электронная почта пользователя
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роли пользователя
//   * РазрешенноеКоличествоСеансов - Число - разрешенное количество сеансов
//   * ВременныйДоступ - Булево - временный доступ
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты пользователя абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
Функция СвойстваПользователяАбонента(Логин) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/users/info";
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Абонент.Код);
	ДанныеЗапроса.Вставить("login", Логин);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);
	Переименования = Служебный.ПереименованияПользователиАбонента();
	
	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета.user, Переименования);
	Если Результат.Свойство("fields") Тогда
		Переименования = Служебный.ПереименованияДополнительныхСведений();
		ДополнительныеРеквизиты = Служебный.МассивСтруктурВТаблицуЗначений(Результат.fields, Переименования);
		Результат.Удалить("fields");
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	Иначе
		Результат.Вставить("ДополнительныеРеквизиты", Служебный.НовыйДополнительныеСведения());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Создает новую учетную запись пользователя сервиса и подключает созданного пользователя к абоненту этого приложения. 
//
// Параметры:
//  ПараметрыСоздания - см. НовыйПараметрыСозданияПользователя
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - признак создания учетной записи Истина - создана, Ложь - произошла ошибка.
//
Функция СоздатьПользователяАбонента(ПараметрыСоздания,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/users/create";
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Абонент.Код);
	ДанныеЗапроса.Вставить("role", Перечисления.РолиПользователейАбонентов.ИмяПоЗначению(ПараметрыСоздания.РольПользователя));
	ДанныеЗапроса.Вставить("login", ПараметрыСоздания.Логин);
	ДанныеЗапроса.Вставить("password", ПараметрыСоздания.Пароль);
	ДанныеЗапроса.Вставить("email", ПараметрыСоздания.Почта);
	ДанныеЗапроса.Вставить("email_required", ПараметрыСоздания.ПочтаОбязательна);
	ДанныеЗапроса.Вставить("name", ПараметрыСоздания.ПолноеИмя);
	ДанныеЗапроса.Вставить("phone", ПараметрыСоздания.Телефон);
	ДанныеЗапроса.Вставить("timezone", ПараметрыСоздания.ЧасовойПояс);
	Если ПараметрыСоздания.Свойство("ДополнительныеРеквизиты") 
	   И ПараметрыСоздания.ДополнительныеРеквизиты.Количество() > 0 Тогда
	   	ДополнительныеРеквизиты = Новый Массив; // Массив из Структура
		Для Каждого Строка Из ПараметрыСоздания.ДополнительныеРеквизиты Цикл
			ИмяЗначение = Новый Структура("key, value", Строка.Ключ, Строка.Значение);
			ДополнительныеРеквизиты.Добавить(ИмяЗначение);
		КонецЦикла;
		ДанныеЗапроса.Вставить("fields", ДополнительныеРеквизиты);
	КонецЕсли;
	   	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устанавливает указанному пользователю абонента этого приложения указанную роль.
// Реализует метод внешнего программного интерфейса - account/users/set_role.
// 
// Параметры:
//  Логин - Строка - логин (имя) пользователя. 
//  Роль - ПеречислениеСсылка.РолиПользователейАбонентов - устанавливаемая роль пользователя.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Булево - установки роли Истина - установлено, Ложь - произошла ошибка.
//
Функция УстановитьРольПользователяАбонента(Логин, Роль,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
		
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/users/set_role";
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Абонент.Код);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("role", Перечисления.РолиПользователейАбонентов.ИмяПоЗначению(Роль));
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

// Обновляет дополнительные реквизиты пользователя абонента
// Реализует метод внешнего программного интерфейса - account/users/update_attached_info.
// 
// Параметры:
//  Логин - Строка - логин (имя) пользователя. 
//  ДопРеквизиты - ТаблицаЗначений - дополнительные реквизиты пользователя абонента:
//     * Ключ - Строка - имя дополнительного реквизита
//     * Тип - Строка - тип значения 
//     * Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Булево - установка доп. реквизитов: Истина - установлено, Ложь - произошла ошибка.
Функция ОбновитьДопРеквизитыПользователяАбонента(Логин, ДопРеквизиты,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/users/update_attached_info";
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Абонент.Код);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("fields", Новый Массив);
	
	Для Каждого Строка Из ДопРеквизиты Цикл
		Данные = Новый Структура;
		Данные.Вставить("key", Строка.Ключ);
		Данные.Вставить("value", Строка.Значение);
		Если ЗначениеЗаполнено(Строка.Тип) Тогда
			Данные.Вставить("type", Строка.Тип);
		КонецЕсли;
		ДанныеЗапроса.fields.Добавить(Данные);
	КонецЦикла;

	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Возвращает шаблон параметров создания пользователя для метода ПрограммныйИнтерфейсСервиса.СоздатьПользователяАбонента.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания пользователя:
//	 * Логин - Строка - логин (имя пользователя)
//	 * Пароль - Строка - пароль пользователя
//   * ПочтаОбязательна - Булево - признак обязательной установки почты (по умолчанию = Истина)
//   * Почта - Строка - электронная почта
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль (по умолчанию = ПользовательАбонента)
//   * ПолноеИмя - Строка - полное имя (наименование) пользователя
//   * Телефон - Строка - телефон пользователя
//   * ЧасовойПояс - Строка - рабочий часовой пояс пользователя
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты пользователя абонента:
//     ** Ключ - Строка - имя реквизита
//     ** Тип - Строка - тип реквизита. 
//              Простые: string, decimal, date, boolean
//              Ссылочные: user, subscriber, tariff, service_provider_tariff, tariff_period, 
//                         subscription, service, additional_value, additional_value_group.
//     ** Значение - Строка, Число, Дата, Булево - значение реквизита.
//
Функция НовыйПараметрыСозданияПользователя() Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("ПочтаОбязательна", Истина);
	Параметры.Вставить("Почта");
	Параметры.Вставить("РольПользователя", Перечисления.РолиПользователейАбонентов.ПользовательАбонента);
	Параметры.Вставить("ПолноеИмя");
	Параметры.Вставить("Телефон");
	Параметры.Вставить("ЧасовойПояс");
	
	Параметры.Вставить("ДополнительныеРеквизиты", Служебный.НовыйДополнительныеСведения());
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти 

#Область Account_Servants

// Возвращает список обслуживающих организаций абонента этого приложения.
// Реализует метод внешнего программного интерфейса - account/servants/list
//
// Возвращаемое значение:
//  ТаблицаЗначений - обслуживающие организации абонента:
//   * Код - Число - код (номер) обслуживающей организации
//   * Наименование - Строка - наименование обслуживающей организации
//   * Идентификатор - Строка - идентификатор абонента
//   * Город - Строка - город
//   * Сайт - Строка - сайт
//   * Почта - Строка - электронная почта
//   * Телефон - Строка - телефон
//   * РазрешеноПодписыватьНаТарифы - Булево - разрешено подписывать на тарифы
//   * РазрешеноАвтоматическоеВыставлениеСчетов - Булево - разрешено автоматическое выставление счетов
//   * РазрешеноПереопределениеТарифов - Булево - разрешено переопределение тарифов
//   * ТолькоСтраницаВыбораТарифа - Булево - отображать только страницу выбора тарифа в форме оплаты
//
Функция ОбслуживающиеОрганизацииАбонента() Экспорт

	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.ОбслуживающиеОрганизацииАбонента();

КонецФункции

// Возвращает HTML-страницу выбора тарифа обслуживающей организации абонента этого приложения.
// Реализует метод внешнего программного интерфейса -  account/servants/tariff_selection_page
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Строка - HTML-страница выбора тарифа обслуживающей организации.
//
Функция СтраницаВыбораТарифаОбслуживающейОрганизации(КодОО,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/servants/tariff_selection_page";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("servant", КодОО);

	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(
		Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если ДанныеОтвета <> Неопределено Тогда
		Возврат ДанныеОтвета.html;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает список рекомендуемых тарифов, определенных обслуживающей организацией.
// Реализует метод внешнего программного интерфейса - account/servants/recommended_tariffs
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов:
//   * КодТарифаПровайдера - Строка - код тарифа провайдера
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации.
Функция РекомендуемыеТарифы(КодОО) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/servants/recommended_tariffs";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("servant", КодОО);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);
	
	Переименования = Служебный.ПереименованияРекомендуемыеТарифы();
	
	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.recommended_tariffs, Переименования);

КонецФункции

// Возвращает список тарифов обслуживающей организации.
// Реализует метод внешнего программного интерфейса - account/servant_tariffs/list
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  ПараметрыПолучения - Массив из Строка - может содержать параметры получения данных, возвращаемые методами:
//     - ПараметрПолученияПериодыДействия()
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодБазовогоТарифа - Строка - код базового тарифа
//   * КраткоеОписание - Строка - краткое описание тарифа
//   * ПериодыДействия - ТаблицаЗначений - периоды действия. Заполняется если передан параметр получения ПараметрПолученияПериодыДействия:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость тарифа с этим периодом действия
//     ** Рекомендуемый - Булево - признак, что период действия является рекомендуемым 
//     ** Комментарий - Строка - комментарий к периоду действия.
//
Функция ТарифыОбслуживающейОрганизации(КодОО, ПараметрыПолучения = Неопределено, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Массив;
	КонецЕсли; 
	
	Метод = "account/servant_tariffs/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("servant", КодОО);
	ВерсияИнтерфейса = СвойстваВерсииИнтерфейса().Версия;
	
	Если ВерсияИнтерфейса >= 19 Тогда
		ДанныеЗапроса.Вставить("scope", ПараметрыПолучения);
	КонецЕсли;
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
	
	ПереименованияПериодыДействия = Служебный.ПереименованияТарифОбслуживающейОрганизацииПериодыДействия();
	ПолеПериодыДействия = "validity_periods";
	ПолеТариф = "servant_tariff";
	
	Если ВерсияИнтерфейса >= 19	И Не ПараметрыПолучения.Найти(ПараметрПолученияПериодыДействия()) = Неопределено Тогда
		Для Каждого Элемент Из ДанныеОтвета[ПолеТариф] Цикл
			Элемент[ПолеПериодыДействия] = Служебный.МассивСтруктурВТаблицуЗначений(Элемент[ПолеПериодыДействия], ПереименованияПериодыДействия);
		КонецЦикла;
	КонецЕсли;
	
	Переименования = Служебный.ПереименованияТарифОбслуживающейОрганизации(Метод);
	Результат = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета[ПолеТариф], Переименования);

	Возврат Результат;

КонецФункции

// Возвращает информацию о тарифе обслуживающей организаций.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  КодТарифа - Строка - код тарифа обслуживающей организации. 
// 
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодТарифаПровайдера - Строка - код тарифа провайдера
//   * КраткоеОписание - Строка - краткое описание тарифа
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Рекомендуемый - Булево - признак того, что период является рекомендуемым к покупке
//     ** Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифОбслуживающейОрганизации(КодОО, КодТарифа) Экспорт
	
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.ТарифОбслуживающейОрганизации(КодОО, КодТарифа);
	
КонецФункции
    
#КонецОбласти 

#Область Customers

// Возвращает список обслуживаемых абонентов.
// Реализует метод внешнего программного интерфейса - account/customers/list
//
// Параметры:
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Наименование - Строка - наименование абонента (длина - 64)
//   * Код - Строка - код (номер) обслуживаемого абонента (длина - 12).
Функция ОбслуживаемыеАбоненты(КодОО = Неопределено, 
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customers/list";
	Если КодОО = Неопределено Тогда
		КодОО = АбонентЭтогоПриложения().Код;
	КонецЕсли; 
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодОО);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	
	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.customer, Служебный.ПереименованияАбонент());

КонецФункции

// Возвращает свойства обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customers/info
//
// Параметры:
//  КодАбонента - Число - код (номер) обслуживаемого абонента.
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура:
//   * Наименование - Строка - наименование абонента (длина - 64)
//   * Код - Строка - код (номер) обслуживаемого абонента (длина - 12)
//   * Сайт - Строка - сайт из КИ (длина - 500)
//   * Город - Строка - город из КИ (длина - 500)
//   * Почта - Строка - почта из КИ (длина - 500)
//   * Телефон - Строка - телефон из КИ (длина - 500)
//
Функция СвойстваОбслуживаемогоАбонента(КодАбонента, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customers/info";
	Если КодОО = Неопределено Тогда
		КодОО = АбонентЭтогоПриложения().Код;
	КонецЕсли; 
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодОО);
	ДанныеЗапроса.Вставить("account", КодАбонента);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	
	Возврат Служебный.ПереименоватьСвойства(ДанныеОтвета.customer, Служебный.ПереименованияАбонент(Истина));
	
КонецФункции

// Возвращает дополнительные сведения (реквизиты и свойства) обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customers/attached_info
//
// Параметры:
//  КодАбонента - Число - код (номер) обслуживаемого абонента.
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Структура - дополнительные реквизиты и свойства абонента:
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента:
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
Функция ДопСведенияОбслуживаемогоАбонента(КодАбонента, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customers/attached_info";
	Если КодОО = Неопределено Тогда
		КодОО = АбонентЭтогоПриложения().Код;
	КонецЕсли; 
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодОО);
	ДанныеЗапроса.Вставить("account", КодАбонента);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	ДанныеОтвета.Удалить("general");

	Переименования = Новый Соответствие;
	Переименования.Вставить("public_id", Служебный.ОписаниеКолонки(
		"ПубличныйИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36)));
	Переименования.Вставить("properties", "Свойства");
	Переименования.Вставить("fields", "Реквизиты");
	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета, Переименования);
	
	Результат.Свойства = Служебный.МассивСтруктурВТаблицуЗначений(
		Результат.Свойства, Служебный.ПереименованияДополнительныхСведений());
	Результат.Реквизиты = Служебный.МассивСтруктурВТаблицуЗначений(
		Результат.Реквизиты, Служебный.ПереименованияДополнительныхСведений());

	Возврат Результат;

КонецФункции

// Обновляет дополнительные сведения (реквизиты и свойства) обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customers/update_attached_info.
//
// Параметры:
//  ДопСведения - см. НовыйДопСведенияАбонента
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Булево - установка доп. сведений: Истина - установлено, Ложь - произошла ошибка.
//
Функция ОбновитьДопСведенияОбслуживаемогоАбонента(ДопСведения, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customers/update_attached_info";
	Если КодОО = Неопределено Тогда
		КодОО = АбонентЭтогоПриложения().Код;
	КонецЕсли; 
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодОО);
	ДанныеЗапроса.Вставить("account", ДопСведения.КодАбонента);
	ДанныеЗапроса.Вставить("public_id", ДопСведения.ПубличныйИдентификатор);
	
	Переименования = Служебный.ПереименованияДополнительныхСведений(Ложь);
	Если ДопСведения.Свойство("Реквизиты") Тогда
		ДанныеЗапроса.Вставить("fields", Служебный.ТаблицаЗначенийВМассивСтруктур(
			ДопСведения.Реквизиты, Переименования));
	КонецЕсли;
	Если ДопСведения.Свойство("Свойства") Тогда
		ДанныеЗапроса.Вставить("properties", Служебный.ТаблицаЗначенийВМассивСтруктур(
			ДопСведения.Свойства, Переименования));
	КонецЕсли;

	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	

КонецФункции

// Возвращает шаблон дополнительных сведений абонента.
// 
// Возвращаемое значение:
//  Структура:
//   * КодАбонента - Число - код абонента
//   * ПубличныйИдентификатор - Строка - публичный идентификатор абонента (длина - 36), может отсутствовать.
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента: 
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента: 
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения (не обязательно, если у доп. свойства один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
//
Функция НовыйДопСведенияАбонента() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	
	Результат = Новый Структура;
	Результат.Вставить("КодАбонента", 0);
	Результат.Вставить("ПубличныйИдентификатор", "");
	Результат.Вставить("Реквизиты", Служебный.НовыйДополнительныеСведения());
	Результат.Вставить("Свойства", Служебный.НовыйДополнительныеСведения());
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область CustomerSubscriptions

// Возвращает список подписок на тарифы обслуживаемых абонентов.
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/list
//
// Параметры:
//  Отбор - см. НовыйОтборПодписокНаТарифы
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - существующие подписки на тарифы:
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия
//   * Количество - Число - количество тарифов в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
//
Функция ПодпискиНаТарифы(Отбор, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customer_subscriptions/list";
	Если КодОО = Неопределено Тогда
		КодОО = АбонентЭтогоПриложения().Код;
	КонецЕсли; 
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("servant", КодОО);
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		ПоляОтбора = Новый Соответствие;
		ПоляОтбора.Вставить("КодОбслуживаемогоАбонента", "account");
		ПоляОтбора.Вставить("ТолькоАктивные", "active");
		ПоляОтбора.Вставить("ТолькоОсновные", "basic");
		ПоляОтбора.Вставить("НачалоПериода", "start_date");
		ПоляОтбора.Вставить("КонецПериода", "end_date");
		Для Каждого Элемент Из ПоляОтбора Цикл
			Если Отбор.Свойство(Элемент.Ключ) И ЗначениеЗаполнено(Отбор[Элемент.Ключ]) Тогда
				ДанныеЗапроса.Вставить(Элемент.Значение, Отбор[Элемент.Ключ]);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Отбор = ПрограммныйИнтерфейсСервиса.НовыйОтборПодписокНаТарифы();
	КонецЕсли; 
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
		
	Переименования = Служебный.ПереименованияПодпискаНаТариф(Истина);
	
	Результат = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.subscription, Переименования);
	Результат.Сортировать("Дата");
	ВерсияИнтерфейса = ПрограммныйИнтерфейсСервиса.СвойстваВерсииИнтерфейса().Версия;
	Для Индекс = 1 По Результат.Количество() Цикл
		Строка = Результат[Результат.Количество() - Индекс];
		Если Отбор.ТолькоОсновные И ВерсияИнтерфейса < 14 И Не ПустаяСтрока(Строка.НомерОсновнойПодписки) Тогда
			Результат.Удалить(Строка);
			Продолжить;
		КонецЕсли;
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
		КонецЕсли;
	КонецЦикла; 		
	
	Возврат Результат;

КонецФункции

// Возвращает свойства подписки на тариф обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/info
// 
// Параметры:
//  НомерПодписки - Строка - номер подписки.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Структура - свойства подписки на тариф:
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия
//   * Количество - Число - количество тарифов в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
Функция СвойстваПодпискиНаТариф(НомерПодписки,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customer_subscriptions/info";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", НомерПодписки);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	Переименования = Служебный.ПереименованияПодпискаНаТариф(Истина);

	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета.subscription, Переименования);
	Если Результат.Количество = 0 Тогда
		Результат.Количество = 1;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Создает новую подписку на основной тариф обслуживаемого абонента
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/create
//
// Параметры:
//  ДанныеПодписки - см. НовыйШаблонПодпискиНаОсновнойТариф
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Неопределено, Структура - если оформление подписки успешно выполнено:
//   * Номер - Строка - номер созданной подписки.
//   * ДатаОтключения - Дата - дата отключения созданной подписки.
Функция СоздатьПодпискуНаОсновнойТариф(ДанныеПодписки,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customer_subscriptions/create";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	
	ИменаСвойств = Служебный.ИменаСвойствСозданияПодписки();
	Для Каждого Элемент Из ИменаСвойств Цикл
		Если ДанныеПодписки.Свойство(Элемент.Ключ) И ЗначениеЗаполнено(ДанныеПодписки[Элемент.Ключ]) Тогда
			ДанныеЗапроса.Вставить(Элемент.Значение, ДанныеПодписки[Элемент.Ключ]);
		КонецЕсли; 
	КонецЦикла; 
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
		
	Если КодОтвета >=10200 И КодОтвета <= 10299 Тогда
		Переименования = Служебный.ПереименованияОтветСозданияПодпискиНаТариф();
		Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета, Переименования);
		Результат.Удалить("general");
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Метод создает новую подписку или несколько подписок на расширение тарифа обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/create_enhanced
//
// Параметры:
//  ДанныеРасширенияТарифа - см. НовыйШаблонПодпискиНаРасширениеТарифа
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - если оформление подписки успешно выполнено:
//   * Номер - Строка - номер созданной подписки.
//   * ДатаОтключения - Дата - дата отключения созданной подписки.
Функция СоздатьПодпискуНаРасширениеТарифа(ДанныеРасширенияТарифа,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "account/customer_subscriptions/create_enhanced";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	
	ИменаСвойств = Служебный.ИменаСвойствСозданияПодписки(Истина);
	Для Каждого Элемент Из ИменаСвойств Цикл
		Если ДанныеРасширенияТарифа.Свойство(Элемент.Ключ) И ЗначениеЗаполнено(ДанныеРасширенияТарифа[Элемент.Ключ]) Тогда
			ДанныеЗапроса.Вставить(Элемент.Значение, ДанныеРасширенияТарифа[Элемент.Ключ]);
		КонецЕсли; 
	КонецЦикла; 
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, 
		ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
		
	Если КодОтвета >=10200 И КодОтвета <= 10299 Тогда
		Переименования = Служебный.ПереименованияОтветСозданияПодпискиНаТариф();
		Результат = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.subscription_info, Переименования);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает шаблон новой подписки на основной тариф обслуживаемого абонента.
//
// Возвращаемое значение:
//  Структура:
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
Функция НовыйШаблонПодпискиНаОсновнойТариф() Экспорт

	Шаблон = Новый Структура;
	Шаблон.Вставить("КодВедущегоАбонента", 0);
	Шаблон.Вставить("КодОбслуживаемогоАбонента", 0);
	Шаблон.Вставить("КодТарифаОбслуживающейОрганизации", "");
	Шаблон.Вставить("КодТарифаПровайдера", "");
	Шаблон.Вставить("КодПериодаДействия", "");
	Шаблон.Вставить("ДатаПодключения", '00010101');
	Шаблон.Вставить("ДатаОтключения", '00010101');
	
	Возврат Шаблон;
	
КонецФункции

// Возвращает шаблон новой подписки на расширение тарифа обслуживаемого абонента.
//
// Возвращаемое значение:
//  Структура:
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * НомерОсновнойПодписки - Строка - номер подписки на основной тариф
//   * Количество - Число - количество тарифов в подписке.
Функция НовыйШаблонПодпискиНаРасширениеТарифа() Экспорт
	
	Шаблон = НовыйШаблонПодпискиНаОсновнойТариф();
	Шаблон.Вставить("НомерОсновнойПодписки", "");
	Шаблон.Вставить("Количество", 0);
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#Область AccountingSystem

// Возвращает список учетных систем, доступных абоненту.
// Реализует метод внешнего программного интерфейса - accounting_system/list
//
// Параметры:
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  ТаблицаЗначений - список учетных систем абонента:
//   * Код - Число - код учетной системы
//   * Наименование - Строка - наименование учетной системы
//   * КодВладельца - Число - код абонента-владельца учетной системы
//   * ЗагружатьДанные - Булево - признак загрузки данных
//   * ЛогинПользовательДляЗагрузки - Строка - логин пользователя для загрузки данных
//   * ВыгружатьДанные - Булево - признак выгрузки данных
//   * АдресДляВыгрузки - Строка - URL-адрес учетной системы для выгрузки данных
//   * ЛогинПользователяДляВыгрузки - Строка - логин пользователя для выгрузки данных
//
Функция СписокУчетныхСистем(ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "accounting_system/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
		
	Переименования = Служебный.ПереименованияУчетнаяСистема(Метод);
	
	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.accounting_system, Переименования);
	
КонецФункции

// Возвращает свойства учетной системы абонента по коду учетной системы.
// Реализует метод внешнего программного интерфейса - accounting_system/info
//
// Параметры:
//  Код - Число - код учетной системы абонента.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Структура - свойства учетной системы:
//   * Код - Число - код учетной системы абонента
//   * Наименование - Строка - наименование учетной системы
//   * Описание - Строка - описание учетной системы
//   * КодВладельца - Число - код абонента-владельца учетной системы
//   * ЗагружатьДанные - Булево - признак загрузки данных
//   * ЛогинПользователяДляЗагрузки - Строка - логин пользователя для загрузки данных в менеджер сервиса
//   * ПравилаЗагрузки - ТаблицаЗначений - правила загрузки данных:
//     ** КодПравила - Строка - код правила загрузки данных
//     ** Адрес - Строка - адрес объекта для загрузки данных
//   * ВыгружатьДанные - Булево - признак выгрузки данных
//   * АдресДляВыгрузки - Строка - URL-адрес учетной системы для выгрузки данных в учетную систему
//   * ЛогинПользователяДляВыгрузки - Строка - логин пользователя для выгрузки данных 
//   * ПравилаВыгрузки - ТаблицаЗначений - правила выгрузки данных:
//     ** КодПравила - Строка - код правила выгрузки данных
//     ** ИдентификаторСтроки - УникальныйИдентификатор - идентификатор строки правила выгрузки 
//     ** КодУсловия - Строка - код условия использования правила выгрузки
//     ** Адрес - Строка - адрес объекта для выгрузки данных
//     ** БыстраяОтправка - Булево - признак быстрой отправки
//     ** ВыгрузкаПоРасписанию - Булево - признак выгрузки по расписанию
//     ** ОтборПоПоставщику - Булево - признак отбора по поставщику
//   * ПравилаОбработкиОтветов - ТаблицаЗначений:
//     ** ИдентификаторСтрокиПравилаВыгрузки - УникальныйИдентификатор - идентификатор строки правила выгрузки
//     ** КодПравила - Строка - код правила обработки ответа
//     ** КодыОтветов - Массив Из Число - коды ответов для вызова правила обработки.
//   
Функция СвойстваУчетнойСистемы(Код, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "accounting_system/info";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", Код);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
		
	Переименования = Служебный.ПереименованияУчетнаяСистема(Метод);
	
	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета.accounting_system, Переименования);
	
	Результат.ПравилаВыгрузки = Служебный.МассивСтруктурВТаблицуЗначений(
		Результат.ПравилаВыгрузки, Служебный.ПереименованияУчетнаяСистемаПравилаВыгрузки());
		
	Результат.ПравилаЗагрузки = Служебный.МассивСтруктурВТаблицуЗначений(
		Результат.ПравилаЗагрузки, Служебный.ПереименованияУчетнаяСистемаПравилаЗагрузки());
		
	Результат.ПравилаОбработкиОтветов = Служебный.МассивСтруктурВТаблицуЗначений(
		Результат.ПравилаОбработкиОтветов, Служебный.ПереименованияУчетнаяСистемаПравилаОбработкиОтветов());
	
	Возврат Результат;
	
КонецФункции

// Создает новую или обновляет существующую учетную систему биллинга.
// Реализует метод внешнего программного интерфейса - accounting_system/create_update_billing
//
// Параметры:
//  ПараметрыСозданияОбновления - см. НовыйПараметрыСозданияОбновленияУчетнойСистемыБиллинга
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура - свойства учетной системы:
//   * Код - Число - код учетной системы абонента
//   * Наименование - Строка - наименование учетной системы
//
Функция СоздатьОбновитьУчетнуюСистемуБиллинга(ПараметрыСозданияОбновления, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "accounting_system/create_update_billing";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	Если ЗначениеЗаполнено(ПараметрыСозданияОбновления.КодУчетнойСистемы) Тогда
		ДанныеЗапроса.Вставить("id", ПараметрыСозданияОбновления.КодУчетнойСистемы);
	КонецЕсли; 
	ДанныеЗапроса.Вставить("import_login", ПараметрыСозданияОбновления.ЛогинПользователяДляЗагрузки);
	ДанныеЗапроса.Вставить("export_url", ПараметрыСозданияОбновления.АдресДляВыгрузки);
	ДанныеЗапроса.Вставить("export_login", ПараметрыСозданияОбновления.ЛогинПользователяДляВыгрузки);
	ДанныеЗапроса.Вставить("export_password", ПараметрыСозданияОбновления.ПарольДляВыгрузки);

	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
		
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", Служебный.ОписаниеКолонки(
		"Код", ОбщегоНазначения.ОписаниеТипаЧисло(9, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("name", Служебный.ОписаниеКолонки(
		"Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	
	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета, Переименования);
	Результат.Удалить("general");
	
	Возврат Результат;

КонецФункции

// Возвращает шаблон параметров создания\обновления учетной системы биллинга.
//
// Возвращаемое значение:
//  Структура - шаблон параметров:
//   * ЛогинПользователяДляЗагрузки - Строка - логин пользователя для загрузки данных в менеджер сервиса
//   * ЛогинПользователяДляВыгрузки - Строка - логин пользователя для выгрузки данных в учетную систему
//   * АдресДляВыгрузки - Строка - URL-адрес учетной системы для выгрузки данных в учетную систему
//   * ПарольДляВыгрузки - Строка - пароль пользователя для выгрузки данных в учетную систему 
//   * КодУчетнойСистемы - Число - код обновляемой учетной системы абонента.
//   								Если не указан, создается новая учетная система.
Функция НовыйПараметрыСозданияОбновленияУчетнойСистемыБиллинга() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("КодУчетнойСистемы", 0);
	Параметры.Вставить("ЛогинПользователяДляЗагрузки", "");
	Параметры.Вставить("АдресДляВыгрузки", "");
	Параметры.Вставить("ЛогинПользователяДляВыгрузки", "");
	Параметры.Вставить("ПарольДляВыгрузки", "");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти 

#Область Application

// Возвращает список прикладных конфигураций, доступных абоненту этого приложения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные конфигурации:
//    * Код - Строка - код конфигурации
//    * Наименование - Строка - синоним конфигурации 
//    * Имя - Строка - имя конфигурации (как оно задано в конфигураторе).
//    * Описание - Строка - описание конфигурации 
//    * КодАбонента - Число - код абонента. 
//
Функция Конфигурации() Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "application/list";
	Абонент = АбонентЭтогоПриложения();
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("account", Абонент.Код);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Новый Соответствие;
	Переименования.Вставить("id", Служебный.ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	Переименования.Вставить("name", Служебный.ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	Переименования.Вставить("sysname", Служебный.ОписаниеКолонки("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(255)));
	Переименования.Вставить("description", Служебный.ОписаниеКолонки("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0)));
	Переименования.Вставить("account", Служебный.ОписаниеКолонки("КодАбонента", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.application, Переименования);

	
КонецФункции

#КонецОбласти

#Область Bill

// Возвращает список счетов на оплату
// Реализует метод внешнего программного интерфейса - bill/list
// 
// Параметры:
//  Отбор - см. НовыйОтборСчетовНаОплату
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список счетов на оплату:
//	 * Номер - Строка - номер счета
//	 * Дата - Дата - дата создания счета
//	 * ДатаИзменения - Дата - дата изменения счета
//	 * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
Функция СписокСчетовНаОплату(Отбор = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "bill/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		ПоляОтбора = Новый Соответствие;
		ПоляОтбора.Вставить("Продавец", "seller_id");
		ПоляОтбора.Вставить("Покупатель", "customer_id");
		ПоляОтбора.Вставить("НачалоПериода", "start_date");
		ПоляОтбора.Вставить("КонецПериода", "end_date");
		Для Каждого Элемент Из ПоляОтбора Цикл
			Если Отбор.Свойство(Элемент.Ключ) И ЗначениеЗаполнено(Отбор[Элемент.Ключ]) Тогда
				ДанныеЗапроса.Вставить(Элемент.Значение, Отбор[Элемент.Ключ]);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
		
	Переименования = Служебный.ПереименованияСчет(Метод);
	
	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.bill, Переименования);
	
КонецФункции

// Возвращает данные счета на оплату по номеру или идентификатору счета.
// Реализует метод внешнего программного интерфейса - bill/info
//
// Параметры:
//  ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета (не указывается, если передан номер счета)
//  НомерСчета - Строка - номер счета (не указывается, если передан идентификатор счета)
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Структура - данные счета:
//	 * Номер - Строка - номер счета
//	 * Дата - Дата - дата создания счета
//	 * ДатаИзменения - Дата - дата изменения счета
//	 * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов в подписке
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//     ** НомерОснования - Строка - номер подписки-основания
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//	 * Состояние - Структура - данные состояния счета:
//     ** Ошибка - Булево - признак ошибки
//     ** Описание - Строка - описание состояния
//     ** Имя - Строка - имя состояния:
//         "created" - создан
//         "wait_sending" - ожидание отправки
//         "wait_registration" - ожидание оформления
//         "wait_payment" - ожидание оплаты
//         "paid" - оплачен
//         "billing_error" - ошибка выставления счета.
Функция ДанныеСчетаНаОплату(ИдентификаторСчета = Неопределено, НомерСчета = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "bill/info";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	Если Не ПустаяСтрока(НомерСчета) Тогда
		ДанныеЗапроса.Вставить("id", НомерСчета);
	ИначеЕсли ТипЗнч(ИдентификаторСчета) = Тип("УникальныйИдентификатор") 
		И ИдентификаторСчета <> ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
		ДанныеЗапроса.Вставить("bill_id", ИдентификаторСчета);
	КонецЕсли; 
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке,
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
	Переименования = Служебный.ПереименованияСчет(Метод);
	Переименования.Вставить("tariffs", "Тарифы");
	Переименования.Вставить("services", "Услуги");
	Переименования.Вставить("files", "Файлы");
	Переименования.Вставить("fields", "ДополнительныеРеквизиты");
	Переименования.Вставить("status", "Состояние");
	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета.bill, Переименования);
	Результат.Тарифы = Служебный.МассивСтруктурВТаблицуЗначений(Результат.Тарифы, Служебный.ПереименованияСчетТарифы());
	Результат.Услуги = Служебный.МассивСтруктурВТаблицуЗначений(Результат.Услуги, Служебный.ПереименованияСчетУслуги());
	Результат.Файлы = Служебный.МассивСтруктурВТаблицуЗначений(Результат.Файлы, Служебный.ПереименованияСчетФайлы());
	Результат.ДополнительныеРеквизиты = Служебный.МассивСтруктурВТаблицуЗначений(
		Результат.ДополнительныеРеквизиты, Служебный.ПереименованияДополнительныхСведений());
	Результат.Состояние = Служебный.ПереименоватьСвойства(Результат.Состояние, Служебный.ПереименованияСчетСостояние());
	
	Возврат Результат;

КонецФункции

// Создает новый счет на оплату.
// Реализует метод внешнего программного интерфейса - bill/create
// 
// Параметры:
//  ДанныеСчета - Структура:
//	 * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов в подписке
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//     ** НомерОснования - Строка - номер подписки-основания
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура:
//   * Номер - Строка - номер созданного счета на оплату
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор созданного счета на оплату.	
Функция СоздатьСчетНаОплату(ДанныеСчета,
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "bill/create";
	ДанныеЗапроса = Служебный.ДанныеЗапросаСозданияИзмененияСчетаНаОплату(ДанныеСчета, Метод);
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);

	Результат = Новый Структура;
	Результат.Вставить("Номер");
	Результат.Вставить("ИдентификаторСчета", ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор());
	
	Если ОсновныеСвойстваОтвета.КодОтвета = 10200 Тогда
		Переименования = Служебный.ПереименованияСчетРезультатСозданияИзменения();
		Служебный.ПереименоватьСвойства(ДанныеОтвета, Переименования);
		ЗаполнитьЗначенияСвойств(Результат, ДанныеОтвета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Изменяет существующий счет на оплату.
// Реализует метод внешнего программного интерфейса - bill/update
// 
// Параметры:
//  ДанныеСчета - Структура:
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//   * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов в подписке
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//     ** НомерОснования - Строка - номер подписки-основания
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура:
//   * Номер - Строка - номер измененного счета на оплату
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор измененного счета на оплату.	
Функция ИзменитьСчетНаОплату(ДанныеСчета,
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "bill/update";

    ДанныеЗапроса = Служебный.ДанныеЗапросаСозданияИзмененияСчетаНаОплату(ДанныеСчета, Метод) ;
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);

	Результат = Новый Структура;
	Результат.Вставить("Номер");
	Результат.Вставить("ИдентификаторСчета", ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор());
	
	Если ОсновныеСвойстваОтвета.КодОтвета = 10200 Тогда
		Переименования = Служебный.ПереименованияСчетРезультатСозданияИзменения();
		Служебный.ПереименоватьСвойства(ДанныеОтвета, Переименования);
		ЗаполнитьЗначенияСвойств(Результат, ДанныеОтвета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Возвращает талон на загрузку файла в существующий счет на оплату
// Реализует метод внешнего программного интерфейса - bill/file_token/upload
//
// Параметры:
//  ПараметрыПолучения - см. НовыйПараметрыПолученияТалонаНаЗагрузкуФайла
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Структура:
//  * НомерСчета - Строка - номер счета
//  * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//  * НаправлениеПередачиДанных - Строка - направление передачи файла = "upload"
//  * ТалонНаЗагрузкуФайла - Строка - талон на загрузку файла
//  * АдресДляЗагрузки - Строка - URL для загрузки файла методом PUT
Функция СчетНаОплатуФайлыТалонНаЗагрузку(ПараметрыПолучения,
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	
	Метод = "bill/file_token/upload";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	Если ПараметрыПолучения.Свойство("НомерСчета") Тогда
		НомерСчета = ПараметрыПолучения.НомерСчета;
	Иначе
		НомерСчета = "";
	КонецЕсли; 
	Если ПараметрыПолучения.Свойство("ИдентификаторСчета") Тогда
		ИдентификаторСчета = ПараметрыПолучения.ИдентификаторСчета;	
	Иначе
		ИдентификаторСчета = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли; 
	Если Не ПустаяСтрока(НомерСчета) Тогда
		ДанныеЗапроса.Вставить("id", НомерСчета);
	ИначеЕсли ТипЗнч(ИдентификаторСчета) = Тип("УникальныйИдентификатор") 
		И ИдентификаторСчета <> ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
		ДанныеЗапроса.Вставить("bill_id", ИдентификаторСчета);
	КонецЕсли; 
	ДанныеЗапроса.Вставить("name", ПараметрыПолучения.ИмяФайла);
	ДанныеЗапроса.Вставить("size", ПараметрыПолучения.Размер);
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
		
	Переименования = Служебный.ПереименованияСчетТалонНаЗагрузку();
	Результат = Служебный.ПереименоватьСвойства(ДанныеОтвета, Переименования);
	Результат.Удалить("general");
	
	Возврат Результат;
	
КонецФункции

// Возвращает шаблон отбора счетов на оплату.
// 
// Возвращаемое значение:
//  Структура:
//   * КодПородавца - Число - код абонента-продавца
//   * КодПокупателя - Число - код абонента-покупателя
//   * НачалоПериода - Дата - дата начала периода
//   * КонецПериода - Дата - дата конца периода 
//   
Функция НовыйОтборСчетовНаОплату() Экспорт

	ОтборСчетовНаОплату = Новый Структура;
	ОтборСчетовНаОплату.Вставить("Продавец", 0);
	ОтборСчетовНаОплату.Вставить("Покупатель", 0);
	ОтборСчетовНаОплату.Вставить("НачалоПериода", '00010101');
	ОтборСчетовНаОплату.Вставить("КонецПериода", '00010101');
	
	Возврат ОтборСчетовНаОплату;
	
КонецФункции

// Возвращает шаблон нового счета на оплату.
//
// Возвращаемое значение:
//  Структура:
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** НомерОснования - Строка - номер подписки-основания
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
Функция НовыйШаблонСчетаНаОплату() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("ИдентификаторСчета", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДанныеСчета.Вставить("КодПродавца", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеСчета.Вставить("КодПокупателя", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеСчета.Вставить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31, 2, ДопустимыйЗнак.Неотрицательный));
	ДанныеСчета.Вставить("Продление", Новый ОписаниеТипов("Булево"));
	ДанныеСчета.Вставить("ПлатежнаяСсылка", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ДанныеСчета.Вставить("Оплачен", Новый ОписаниеТипов("Булево"));
	ДанныеСчета.Вставить("ДополнительнаяИнформация", Новый ОписаниеТипов("Строка"));
	ДанныеСчета.Вставить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	ДанныеСчета.Вставить("Тарифы", НовыйТарифыСчетаНаОплату());
	ДанныеСчета.Вставить("Услуги", НовыйУслугиСчетаНаОплату());
	ДанныеСчета.Вставить("Файлы", НовыйФайлыСчетаНаОплату());
	ДанныеСчета.Вставить("ДополнительныеРеквизиты", Служебный.НовыйДополнительныеСведения());
	
	Возврат ДанныеСчета;
	
КонецФункции

// Возвращает шаблон параметров получения талона на загрузку файла.
// 
// Возвращаемое значение:
//  Структура:
//   * НомерСчета - Строка - номер счета (не указывается, если передан идентификатор счета)
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета (не указывается, если передан номер счета)
//   * ИмяФайла - Строка - имя файла с расширением
//   * Размер - Строка - размер файла в байтах.
Функция НовыйПараметрыПолученияТалонаНаЗагрузкуФайла() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("НомерСчета", "");
	Параметры.Вставить("ИдентификаторСчета", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Параметры.Вставить("ИмяФайла", "");
	Параметры.Вставить("Размер", 0);
	
	Возврат Параметры;

КонецФункции

// Возвращает шаблон табличной части "Тарифы" счета на оплату.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый тарифы счета на оплату:
// * КодТарифаПровайдера - Строка - длина 9
// * КодТарифаОбслуживающейОрганизации - Строка - длина 9
// * КодПериодаДействия - Строка - длина 10
// * Количество - Число - разрядность 10,0
// * Сумма  - Число - разрядность 31,2
// * НомерОснования - Строка - разрядность 9.
Функция НовыйТарифыСчетаНаОплату() Экспорт
	
 	Тарифы = Новый ТаблицаЗначений;
	Тарифы.Колонки.Добавить("КодТарифаПровайдера", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Тарифы.Колонки.Добавить("КодТарифаОбслуживающейОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Тарифы.Колонки.Добавить("КодПериодаДействия", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Тарифы.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	Тарифы.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2));
	Тарифы.Колонки.Добавить("НомерОснования", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	
	Возврат Тарифы;
	
КонецФункции

// Возвращает шаблон табличной части "Услуги" счета на оплату.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый услуги счета на оплату:
// * Услуга - Строка - длина 1000
// * Сумма - Число - разрядность 31,2.
Функция НовыйУслугиСчетаНаОплату() Экспорт
	
	Услуги = Новый ТаблицаЗначений;
	Услуги.Колонки.Добавить("Услуга", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Услуги.Колонки.Добавить("Сумма",ОбщегоНазначения.ОписаниеТипаЧисло(31,2));
	
	Возврат Услуги;

КонецФункции

// Возвращает шаблон табличной части "Файлы" счета на оплату.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый файлы счета на оплату:
// * Идентификатор - УникальныйИдентификатор
// * Описание - Строка -длина 150.
Функция НовыйФайлыСчетаНаОплату() Экспорт
	
	Файлы = Новый ТаблицаЗначений;
	Файлы.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Файлы.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат Файлы;

КонецФункции

#КонецОбласти

#Область Tenant

// Возвращает данные абонента этого приложения.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - пользователь абонента которого требуется определить. Если не указан, используется текущий.	
// 
// Возвращаемое значение:
//  Структура - данные абонента:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль текущего пользователя абонента.
//
Функция АбонентЭтогоПриложения(Знач Пользователь = Неопределено) Экспорт
	
	Возврат ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения(Пользователь);
	
КонецФункции

// Возвращает список приложений, доступных пользователю абонента этого приложения. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные приложения:
//   * Код - Число - код (номер) приложения
//   * Наименование - Строка - наименование
//   * КодАбонентаВладельца - Число - код абонента, владельца приложения
//   * КодКонфигурации - Число - код конфигурации
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * НаименованиеКонфигурации - Строка - наименование конфигурации
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения
//   * АдресПриложения - Строка - URL-адрес приложения
//   * ЧасовойПояс - Строка - часовой пояс приложения
//
Функция Приложения() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Служебный.ПереименованияПриложение();

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.tenant, Переименования);

КонецФункции

// Возвращает информацию об указанном приложении.
//
// Параметры:
//  КодПриложения - Строка - код приложения (номер области).
// 
// Возвращаемое значение:
//  Структура - свойства приложения:
//   * Код - Число - код (номер) приложения
//   * Наименование - Строка- наименование
//   * КодАбонентаВладельца - Число - код абонента, владельца приложения
//   * КодКонфигурации - Число - код конфигурации
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * НаименованиеКонфигурации - Строка - наименование конфигурации
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения
//   * АдресПриложения - Строка - URL-адрес приложения
//   * ЧасовойПояс - Строка - часовой пояс приложения
//
Функция СвойстваПриложения(КодПриложения) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/info";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодПриложения);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Служебный.ПереименованияПриложение();

	Возврат Служебный.ПереименоватьСвойства(ДанныеОтвета.tenant, Переименования);

КонецФункции

// Возвращает список пользователей, которым разрешен доступ к указанному приложению.
//
// Параметры:
//  КодПриложения - Число - код приложения (номер области)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи, которым разрешен доступ:
//   * Логин - Строка - логин (имя) пользователя
//   * Роль - ПеречислениеСсылка.ПраваПользователяПриложения - право пользователя на текущее приложение в менеджере сервиса 
//
Функция ПользователиПриложения(КодПриложения) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/users/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодПриложения);

	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Новый Соответствие;
	Переименования.Вставить("login", Служебный.ОписаниеКолонки("Логин", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("role", Служебный.ОписаниеКолонки("Право", Новый ОписаниеТипов("ПеречислениеСсылка.ПраваПользователяПриложения")));

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.user, Переименования);

КонецФункции

// Устанавливает пользователю с указанным логином доступ к указанному приложению 
// и назначает указанную роль для работы в приложении.
//
// Параметры:
//  ПараметрыДобавления - см. НовыйПараметрыДобавленияПользователяВПриложение
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат установки права доступа к приложению: Истина - право установлено, Ложь - произошла ошибка.
//
Функция ДобавитьПользователяВПриложение(ПараметрыДобавления,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/users/add";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", ПараметрыДобавления.КодПриложения);
	ДанныеЗапроса.Вставить("login", ПараметрыДобавления.Логин);
	ДанныеЗапроса.Вставить("role", Перечисления.ПраваПользователяПриложения.ИмяПоЗначению(ПараметрыДобавления.Право));
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Отменяет пользователю с указанным логином доступ к указанному приложению.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
//  КодПриложения - Число - код приложения (номер области)
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат отмены права доступа к приложению: Истина - право отменено, Ложь - произошла ошибка.
//
Функция УдалитьПользователяИзПриложения(Логин, КодПриложения,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/users/delete";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодПриложения);
	ДанныеЗапроса.Вставить("login", Логин);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Создает новое приложение с указанной прикладной конфигурацией.
//
// Параметры:
//  ПараметрыСоздания - см. НовыйПараметрыСозданияПриложения
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Структура - результат создания приложения:
//  * Код - Число - код созданного приложения (номер области)
//  * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения после создания.
//  * АдресПриложения - Строка - адрес созданного приложения.
//
Функция СоздатьПриложение(ПараметрыСоздания,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/create";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("application", ПараметрыСоздания.КодКонфигурации);
	ДанныеЗапроса.Вставить("name", ПараметрыСоздания.Наименование);
	ДанныеЗапроса.Вставить("timezone", ПараметрыСоздания.ЧасовойПояс);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Переименования = Новый Соответствие;
	Переименования.Вставить("id", Служебный.ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("status", Служебный.ОписаниеКолонки("СостояниеПриложения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПриложений")));
	Переименования.Вставить("url", Служебный.ОписаниеКолонки("АдресПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(500)));

	Если КодОтвета = 10200 Или КодОтвета = 10202 Тогда
		Результат = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОтвета.tenant);
		Результат = Служебный.ПереименоватьСвойства(Результат, Переименования);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Код", 0);
		Результат.Вставить("СостояниеПриложения", Перечисления.СостоянияПриложений.ПустаяСсылка());
		Результат.Вставить("АдресПриложения", "");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает список резервных копий приложения.
// Реализует метод внешнего программного интерфейса - tenant/backup/list.
//
// Возвращаемое значение:
//  ТаблицаЗначений - список резервных копий:
//   * ИдентификаторРК - Строка - идентификатор резервной копии, длина - 36
//   * МоментСозданияРК - Дата - момент создания резервной копии, ДатаВремя
//   * ДляТехПоддержки - Булево - признак создания резервной копии для тех. поддержки
//
Функция СписокРезервныхКопийПриложения() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "tenant/backup/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Служебный.ПереименованияРезервныеКопийПриложения();

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.backup, Переименования);

КонецФункции
 
// Возвращает шаблон параметров создания приложения для метода ПрограммныйИнтерфейсСервиса.СоздатьПриложение.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания приложения:
//	 * Наименование - Строка - наименование создаваемого приложения.
//	 * КодКонфигурации - Строка - кон конфигурации (вид приложения) 
//   * ЧасовойПояс - Строка - рабочий часовой пояс приложения
Функция НовыйПараметрыСозданияПриложения() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("КодКонфигурации", "");
	Параметры.Вставить("ЧасовойПояс", "");

	Возврат Параметры;

КонецФункции

// Возвращает шаблон параметров добавления пользователя в приложение для метода
// ПрограммныйИнтерфейсСервиса.ДобавитьПользователяВПриложение.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров добавления пользователя в приложение:
//	 * КодПриложения - Строка - наименование создаваемого приложения.
//	 * Логин - Строка - логин (имя пользователя) 
//   * Право - ПеречислениеСсылка.ПраваПользователяПриложения - право пользователя на приложение в менеджере сервиса 
//
Функция НовыйПараметрыДобавленияПользователяВПриложение() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КодПриложения", 0);
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Право", Перечисления.ПраваПользователяПриложения.ПустаяСсылка());

	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Tariff

// Возвращает информацию о тарифе сервиса по коду тарифа.
//
// Параметры:
//  КодТарифа - Строка - код тарифа.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является платным (содержит платные периоды действия)
//   * Тестовый - Булево - признак, что тариф является тестовым
//   * ЕстьУсловие - Булево - признак, что для использования тарифа требуется соблюдение условия использования.
//   * ПериодическаяОплата - Булево - признак, что тариф использует периодическую оплату
//   * ПериодичностьОплаты - Строка - код периода периодичности оплаты
//   * Услуги - ТаблицаЗначений - услуги тарифа:
//     ** Код - Строка - код услуги
//     ** Наименование - Строка - Наименование услуги
//     ** ТипУслуги - ПеречислениеСсылка.ТипыУслуг - тип услуги
//     ** Описание - Строка - Описание услуги
//     ** КоличествоЛицензий - Число - количество лицензий на услугу, включенное в тариф
//     ** КоличествоДопЛицензийРасширяющейПодписки - Число - количество лицензий на услугу, которое может быть предоставлено расширяющей подпиской
//     ** ИдентификаторПоставщика - Строка - идентификатор поставщика услуги
//     ** НаименованиеПоставщика - Строка - наименование поставщика услуги
//   * Расширения - ТаблицаЗначений - расширения тарифа:
//     ** Код - Строка - код тарифа-расширения
//     ** Наименование - Строка - наименование тарифа-расширения
//   * Конфигурации - ТаблицаЗначений - конфигурации тарифа:
//     ** Код - Строка - код конфигурации
//     ** Наименование - Строка - имя конфигурации
//     ** Описание - Строка - описание конфигурации
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Комментарий - Строка - комментарий к периоду действия
//   * ПериодыОповещенийОбОкончанииПодписки - ТаблицаЗначений - периоды оповещений об окончании подписки на тариф:
//     ** КоличествоДней - Число - количество дней, когда оповещать пользователя.
//
Функция ТарифСервиса(КодТарифа, ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = ПрограммныйИнтерфейсСервисаСлужебный.НовыйОсновныеСвойстваОтвета();
		ОсновныеСвойстваОтвета.КодСостояния = 200;
	КонецЕсли;
	
	Попытка
		Результат = ПрограммныйИнтерфейсСервисаПовтИсп.ТарифСервиса(КодТарифа);
		ОсновныеСвойстваОтвета.КодОтвета = 10200;
	Исключение
		Если ВызыватьИсключениеПриОшибке Тогда
			ВызватьИсключение;
		Иначе
			Результат = Неопределено;
			ОсновныеСвойстваОтвета.КодОтвета = 10404;
			//@skip-warning МетодУстарел - особенность реализации.
			ОсновныеСвойстваОтвета.Сообщение = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли; 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список тарифов сервиса, доступных абоненту этого приложения.
// Параметры:
//   ПараметрыПолучения - Массив из Строка - может содержать параметры получения данных, возвращаемые методами:
//     - ПараметрПолученияПериодыДействия()
//     - ПараметрПолученияТолькоПлатные()
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  ОсновныеСвойстваОтвета - Структура - возвращаемый параметр:
//   * КодСостояния - Число - код состояния ответа HTTP-сервиса.
//   * КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//   * Сообщение - Строка - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов сервиса:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является платным (содержит платные периоды действия)
//   * Тестовый - Булево - признак, что тариф является тестовым
//   * ЕстьУсловие - Булево - признак, что для использования тарифа требуется соблюдение условия использования.
//   * ПериодическаяОплата - Булево - признак, что тариф использует периодическую оплату
//   * ПериодичностьОплаты - Строка - код периода периодичности оплаты
//   * ПериодыДействия - ТаблицаЗначений - периоды действия. Заполняется если передан параметр получения ПараметрПолученияПериодыДействия:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифыСервиса(ПараметрыПолучения = Неопределено, 
	ВызыватьИсключениеПриОшибке = Истина, ОсновныеСвойстваОтвета = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Если ОсновныеСвойстваОтвета = Неопределено Тогда
		ОсновныеСвойстваОтвета = Служебный.НовыйОсновныеСвойстваОтвета();
	КонецЕсли;
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Массив;
	КонецЕсли; 
	
	Метод = "tariff/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ВерсияИнтерфейса = СвойстваВерсииИнтерфейса().Версия;
	
	Если ВерсияИнтерфейса >= 19 Тогда
		ДанныеЗапроса.Вставить("scope", ПараметрыПолучения);
	КонецЕсли;
	
	ПолеПериодыДействия = "validity_periods";
	ПолеТариф = "tariff";
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, 
		ОсновныеСвойстваОтвета.КодСостояния, ОсновныеСвойстваОтвета.КодОтвета, ОсновныеСвойстваОтвета.Сообщение);
		
	Если ВерсияИнтерфейса >= 19	И Не ПараметрыПолучения.Найти(ПараметрПолученияПериодыДействия()) = Неопределено Тогда
		ПереименованияПериодыДействия = Служебный.ПереименованияТарифПериодыДействия();
		Для Каждого Элемент Из ДанныеОтвета[ПолеТариф] Цикл
			Элемент[ПолеПериодыДействия] = Служебный.МассивСтруктурВТаблицуЗначений(Элемент[ПолеПериодыДействия], ПереименованияПериодыДействия);
		КонецЦикла; 
	КонецЕсли;

	Переименования = Служебный.ПереименованияТариф();
	Результат = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета[ПолеТариф], Переименования);
	
	Возврат Результат;

КонецФункции

// Возвращает параметр получения тарифов "Периоды действия"
// 
// Возвращаемое значение:
//  Строка 
//
Функция ПараметрПолученияПериодыДействия() Экспорт
	
	Возврат "validity_periods";
	
КонецФункции

// Возвращает параметр получения тарифов "Только платные"
// 
// Возвращаемое значение:
//  Строка 
//
Функция ПараметрПолученияТолькоПлатные() Экспорт
	
	Возврат "is_payable";
	
КонецФункции

#КонецОбласти

#Область Subscription

// Возвращает список существующих подписок абонента текущего приложения.
//
// Параметры:
//  Отбор - см. НовыйОтборПодписокНаТарифы
//
// Возвращаемое значение:
//  ТаблицаЗначений - существующие подписки абонента:
//   * КодАбонента - Число - код (номер) абонента
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
//   * КодОбслуживающейОрганизации - Число - код (номер) абонента обслуживающей организации
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодТарифа - Строка - код тарифа в подписке
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодПериодаДействия - Строка - код периода действия
//   * Количество - Число - количество тарифов в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//
Функция ПодпискиАбонента(Отбор = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "subscription/list";
	Абонент = АбонентЭтогоПриложения();
	КодАбонента = Абонент.Код;
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("account", КодАбонента);
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		ПоляОтбора = Новый Соответствие;
		ПоляОтбора.Вставить("ТолькоАктивные", "active");
		ПоляОтбора.Вставить("ТолькоОсновные", "basic");
		ПоляОтбора.Вставить("НачалоПериода", "start_date");
		ПоляОтбора.Вставить("КонецПериода", "end_date");
		Для Каждого Элемент Из ПоляОтбора Цикл
			Если Отбор.Свойство(Элемент.Ключ) И ЗначениеЗаполнено(Отбор[Элемент.Ключ]) Тогда
				ДанныеЗапроса.Вставить(Элемент.Значение, Отбор[Элемент.Ключ]);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Отбор = ПрограммныйИнтерфейсСервиса.НовыйОтборПодписокНаТарифы();
	КонецЕсли; 
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Служебный.ПереименованияПодпискаНаТариф(Ложь);
    Результат = Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.subscription, Переименования);
	
	ВерсияИнтерфейса = ПрограммныйИнтерфейсСервиса.СвойстваВерсииИнтерфейса().Версия;
	
	УстановленыОтборы = (Отбор.ТолькоОсновные 
						Или Отбор.ТолькоАктивные 
						Или ЗначениеЗаполнено(Отбор.НачалоПериода) 
						Или ЗначениеЗаполнено(Отбор.КонецПериода));
						 
	ДатаСеанса = ТекущаяДатаСеанса();
	Для Индекс = 1 По Результат.Количество() Цикл
		Строка = Результат[Результат.Количество() - Индекс];
		Если ВерсияИнтерфейса < 14 И УстановленыОтборы Тогда
			Если (Отбор.ТолькоОсновные И Не ПустаяСтрока(Строка.НомерОсновнойПодписки))
			 Или (Отбор.ТолькоАктивные И Строка.ДатаОтключения < ДатаСеанса) 
			 Или (ЗначениеЗаполнено(Отбор.НачалоПериода) И Строка.Дата < Отбор.НачалоПериода) 
			 Или (ЗначениеЗаполнено(Отбор.КонецПериода) И Строка.Дата > Отбор.КонецПериода) Тогда
				Результат.Удалить(Строка);
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
		КонецЕсли; 
	КонецЦикла; 		
	
	Возврат Результат;

КонецФункции

// Возвращает шаблон отбора подписок на тарифы обслуживаемых абонентов.
// 
// Возвращаемое значение:
//  Структура:
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента 
//										   (не используется, если вызывается для метода ПодпискиАбонента)
//   * ТолькоАктивные - Булево - получение только активных подписок
//   * ТолькоОсновные - Булево - получение только основных подписок
//   * НачалоПериода - Дата - дата начала периода
//   * КонецПериода - Дата - дата конца периода
Функция НовыйОтборПодписокНаТарифы() Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("КодОбслуживаемогоАбонента", 0);
	Отбор.Вставить("ТолькоАктивные", Ложь);
	Отбор.Вставить("ТолькоОсновные", Ложь);
	Отбор.Вставить("НачалоПериода", '00010101');
	Отбор.Вставить("КонецПериода", '00010101');
	
	Возврат Отбор;

КонецФункции

#КонецОбласти

#Область PromoCode

// Выполняет активацию указанного промо-кода для абонента текущего приложения.
//
// Параметры:
//  Промокод - Строка - используемый промокод.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат использования: Истина - промокод активирован, Ложь - произошла ошибка.
//
Функция ИспользоватьПромокод(Промокод, ВызыватьИсключениеПриОшибке = Истина,
		КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "promo_code/activate";
	Абонент = АбонентЭтогоПриложения();
	КодАбонента = Абонент.Код;
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("account", КодАбонента);
	ДанныеЗапроса.Вставить("code", ПромоКод);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Выполняет активацию указанного промо-кода для абонента текущего приложения.
//
// Параметры:
//  Промокод - Строка - используемый промокод.
//  Метка - Строка - дополнительная информация о промо-коде
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат использования: Истина - промокод активирован, Ложь - произошла ошибка.
//
Функция ИспользоватьПромокодСМеткой(Промокод, Метка, ВызыватьИсключениеПриОшибке = Истина,
		КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "promo_code/activate";
	Абонент = АбонентЭтогоПриложения();
	КодАбонента = Абонент.Код;
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("account", КодАбонента);
	ДанныеЗапроса.Вставить("code", ПромоКод);
	ДанныеЗапроса.Вставить("subid", Метка);
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);

	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область Sessions

// Выполняет завершение сеансов пользователей.
// 
// Параметры:
// 	НомераСеансов - Массив Из Число - номера сеансов, которые требуется завершить.
// 	Пользователь - СправочникСсылка.Пользователи - пользователь абонента, от имени которого выполняется операция.
// 
Процедура ЗавершитьСеансы(Знач НомераСеансов, Знач Пользователь = Неопределено) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "session/terminate";
	Абонент = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения(Пользователь);
	Адрес = Служебный.АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод);

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("account", Абонент.Код);
	ДанныеЗапроса.Вставить("tenant", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ДанныеЗапроса.Вставить("user", "ФиктивныйПользователь");
	ДанныеЗапроса.Вставить("id", НомераСеансов);
	ДанныеЗапроса.Вставить("auth", Служебный.СвойстваАвторизации(Абонент.Код, Пользователь));

	Результат = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	Служебный.РезультатВыполнения(Результат);

КонецПроцедуры

#КонецОбласти

#Область Task

// Возвращает список активных задач плользователя из МС, относящихся к текущей области пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//	* НомерЗадачи - Строка - номер задачи
//	* НаименованиеЗадачи - Строка - номер задачи
Функция Задачи() Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "task/list";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);

	Переименования = Служебный.ПереименованияЗадачаПользователя();

	Возврат Служебный.МассивСтруктурВТаблицуЗначений(ДанныеОтвета.task, Переименования);

КонецФункции

// Возвращает описание задачи пользователя.
// 
// Параметры:
//  НомерЗадачи - Строка - номер задачи, для которой требуется получить данные.
// Возвращаемое значение:
//  Структура:
//	* type - Строка - тип задачи
//	* author - Строка - автор задачи
//	* description - Строка - описание задачи
//	* tenant - Строка - Наименование приложения
//	* subscriber - Строка - Наименование ведущего абонента (Абонент ОО или ЛК)
//	* backup_type - Строка - вид запрашиваемой резервной копии (Для тех.поддержки или нет)
Функция СвойстваЗадачи(НомерЗадачи) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "task/info";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", НомерЗадачи);
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);
	
	Возврат ДанныеОтвета.task;

КонецФункции

// Выполнение задачи пользователя, отказ или согласование.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыДобавленияПользователяВПриложение
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат выполнения задачи: Истина - задача выполнена, Ложь - произошла ошибка.
Функция ВыполнитьЗадачу(ПараметрыЗапроса, 
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "task/execute";
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("result", ПараметрыЗапроса.ПолученоСогласие);
	ДанныеЗапроса.Вставить("id", ПараметрыЗапроса.НомерЗадачи);
	ДанныеЗапроса.Вставить("date_access", ПараметрыЗапроса.ДатаИстеченияДоступа);
	ДанныеЗапроса.Вставить("backup_id", ПараметрыЗапроса.ИдентификаторКопии);
	ДанныеЗапроса.Вставить("backup_existing", ПараметрыЗапроса.СуществующаяКопия);
	
	Результат = Служебный.ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса, Метод);
	Служебный.РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	
	Если КодОтвета = 10200 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает шаблон параметров подтвержения задачи.
//
// Возвращаемое значение:
//  Структура:
//   * ПолученоСогласие - Булево - признак получения согласия на предоставление доступа.
//   * НомерЗадачи - Строка - номер подтверждаемой задачи.
//   * ДатаИстеченияДоступа - Дата - дата прекращения доступа к копии.
//   * ИдентификаторКопии - Строка - идентификатор существующей копии
//   * СуществующаяКопия - Булево - признак использования существующей копии.
Функция НовыйПараметрыПодтвержденияЗадачи() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ПолученоСогласие", Ложь);
	Параметры.Вставить("НомерЗадачи", "");
	Параметры.Вставить("ДатаИстеченияДоступа");
	Параметры.Вставить("ИдентификаторКопии",);
	Параметры.Вставить("СуществующаяКопия",);

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область Srv

// Получает параметры для составной загрузки.
//
// Параметры:
//  ИмяФайла - Строка 
//  РазмерФайла - Число
//  ТипФайла - Строка
//  Владелец - Произвольный
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//    * ИдентитификаторФайла - Строка
//    * Тип - Строка
//    * Адрес - Строка
//    * Заголовки - Соответствие из КлючИЗначение:
//      ** Ключ - Строка
//      ** Значение - Строка
Функция НачатьСоставнуюЗагрузку(ИмяФайла, РазмерФайла, ТипФайла, Владелец) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "files/new_multipart";
	ТипИнтерфейса = "srv";

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод, ТипИнтерфейса);
	ДанныеЗапроса.Вставить("name", ИмяФайла);
	ДанныеЗапроса.Вставить("size", РазмерФайла);
	Если ТипФайла = "РезервнаяКопияОбласти" Тогда
		ДанныеЗапроса.Вставить("type", "tenant_backup");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизестный тип файла'");
	КонецЕсли;
	ДанныеЗапроса.Вставить("owner", Владелец);
	Адрес = Служебный.АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод, ТипИнтерфейса);
	Результат = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);
	
	Заголовки = Новый Соответствие;
	headers = Неопределено;
	Если ДанныеОтвета.Свойство("headers", headers) Тогда
		Для Каждого Заголовок Из ДанныеОтвета.headers Цикл
			Разделитель = СтрНайти(Заголовок, ":");
			Заголовки.Вставить(Лев(Заголовок, Разделитель - 1), Сред(Заголовок, Разделитель + 1));
		КонецЦикла;
	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("Тип", ДанныеОтвета.type);
	Ответ.Вставить("ИдентификаторФайла", ДанныеОтвета.file_id);
	Ответ.Вставить("Адрес", ДанныеОтвета.url);
	Ответ.Вставить("Заголовки", Заголовки);
	
	Возврат Ответ;
	
КонецФункции

// Получает параметры для новой части
//
// Параметры:
//  ИдентификаторФайла - Строка - 
//  НомерЧасти - Строка - 
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//    * Тип - Строка -
//    * Адрес - Строка - 
//    * Заголовки - Соответствие из КлючИЗначение:
//      ** Ключ - Строка
//      ** Значение - Строка
Функция НоваяЧасть(ИдентификаторФайла, НомерЧасти) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "files/new_part";
	ТипИнтерфейса = "srv";

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод, ТипИнтерфейса);
	ДанныеЗапроса.Вставить("file_id", ИдентификаторФайла);
	ДанныеЗапроса.Вставить("part_number", НомерЧасти);
	
	Адрес = Служебный.АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод, ТипИнтерфейса);
	Результат = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	ДанныеОтвета = Служебный.РезультатВыполнения(Результат);
	
	Заголовки = Новый Соответствие;
	Для Каждого Заголовок Из ДанныеОтвета.headers Цикл
		Разделитель = СтрНайти(Заголовок, ":");
		Заголовки.Вставить(Лев(Заголовок, Разделитель - 1), Сред(Заголовок, Разделитель + 1));
	КонецЦикла;
	
	Ответ = Новый Структура;
	Ответ.Вставить("Тип", ДанныеОтвета.type);
	Ответ.Вставить("Адрес", ДанныеОтвета.url);
	Ответ.Вставить("Заголовки", Заголовки);
	
	Возврат Ответ;
	
КонецФункции

// Завершает составную загрузку
//
// Параметры:
//  ИдентификаторФайла - Строка - 
//  Части - Массив из Строка -
Процедура ЗавершитьСоставнуюЗагрузку(ИдентификаторФайла, Части) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "files/complete_multipart"; 
	ТипИнтерфейса = "srv";

	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод, ТипИнтерфейса);
	ДанныеЗапроса.Вставить("file_id", ИдентификаторФайла);
	ДанныеЗапроса.Вставить("parts", Части);
	
	Адрес = Служебный.АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод, ТипИнтерфейса);
	РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса, , Части.Количество() * 60);
	
КонецПроцедуры

// Отменяет составную загрузку
//
// Параметры:
//  ИдентификаторФайла - Строка -
Процедура ОтменитьСоставнуюЗагрузку(ИдентификаторФайла) Экспорт
	
	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	Метод = "files/abort_multipart";
	ТипИнтерфейса = "srv";
	
	ДанныеЗапроса = Служебный.ШаблонЗапроса(Метод, ТипИнтерфейса);
	ДанныеЗапроса.Вставить("file_id", ИдентификаторФайла);
	
	Адрес = Служебный.АдресИсполненияВнешнегоПрограммногоИнтерфейса(Метод, ТипИнтерфейса);
	РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание типа значения дополнительного свойства по имени.
//
// Параметры:
//  ИмяТипа	- Строка - имя типа значения дополнительного свойства.
// 
// Возвращаемое значение:
//  ОписаниеТипов - описание типа значения.
Функция ТипЗначенияДополнительногоСвойстваПоИмени(ИмяТипа) Экспорт
	
	Если ИмяТипа = "string" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(1024);
	ИначеЕсли ИмяТипа = "decimal" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ИначеЕсли ИмяТипа = "date" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ИначеЕсли ИмяТипа = "boolean" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли ИмяТипа = "subscriber" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный);
	ИначеЕсли ИмяТипа = "service" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9);
	ИначеЕсли ИмяТипа = "additional_value" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(255);
	ИначеЕсли ИмяТипа = "additional_value_group" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(255);
	ИначеЕсли ИмяТипа = "tariff" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9);
	ИначеЕсли ИмяТипа = "service_provider_tariff" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9);
	ИначеЕсли ИмяТипа = "user" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(32);
	ИначеЕсли ИмяТипа = "tariff_period" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(10);
	ИначеЕсли ИмяТипа = "subscription" Тогда
		Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9);
	Иначе
		Возврат Тип("Неопределено");
	КонецЕсли;
	
КонецФункции

// Заполняет список выбора типов значений дополнительных свойств.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список выбора на форме.
Процедура ЗаполнитьСписокВыбораТиповЗначенийДополнительныхСвойств(СписокВыбора) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	ПредставленияТипов = Служебный.ПредставленияТиповЗначенийДополнительныхСведений();
	Для Каждого Строка Из ПредставленияТипов Цикл
		НоваяСтрока = СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла; 

КонецПроцедуры

// Заполняет условное оформление поля типа дополнительного свойства по значению.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//  ИмяРеквизита - Строка - имя реквизита формы
//  ИмяПоля - Строка - имя поля формы
//
Процедура УстановитьОформлениеПоляТипаДополнительногоСвойства(УсловноеОформление, ИмяРеквизита, ИмяПоля) Экспорт

	Служебный = ПрограммныйИнтерфейсСервисаСлужебный;
	ПредставленияТипов = Служебный.ПредставленияТиповЗначенийДополнительныхСведений();
	
	Для Каждого Элемент Из ПредставленияТипов Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить(); // ЭлементУсловногоОформления
		
		ЭлементТекст = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Text");
		ЭлементТекст.Значение = Элемент.Представление;
		ЭлементТекст.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
		ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Элемент.Значение;
		ЭлементОтбораДанных.Использование  = Истина;
		
		ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОформляемогоПоля.Использование = Истина;
		
	КонецЦикла; 

КонецПроцедуры
    
#КонецОбласти 
