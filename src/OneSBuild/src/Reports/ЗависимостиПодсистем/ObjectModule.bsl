///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ВидыСвойств;
Перем СвязиМеждуОбъектамиПодсистем; // см. ВыполнитьСозданиеТаблиц
Перем ЗависимостиПодсистем;
Перем КоллекцияКартинок;
Перем ПоискПоПолномуИмени;
Перем ТаблицаИсключений;
Перем ПроверяемыеНаАвтономностьОбъекты;
Перем СоответствиеРусскихИАнглийскихИмен;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Отчет предназначен для работы в файловом режиме работы.'");
	КонецЕсли;
	
	ОтчетПоЗависимостям();
	
	// Вывод зависимостей в отчет
	СтандартнаяОбработка = Ложь;
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	ВнешниеНаборыДанных = Новый Структура("СвязиМеждуОбъектамиПодсистем", СвязиМеждуОбъектамиПодсистем);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных);
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", СвязиМеждуОбъектамиПодсистем.Количество() = 0);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ОтчетПоЗависимостям(ПереданныйКаталогВыгрузкиМодулей = "") Экспорт
	
	ОчиститьКаталогВыгрузки = Ложь;
	КаталогВыгрузкиМодулей = ПереданныйКаталогВыгрузкиМодулей;
	СоответствиеРусскихИАнглийскихИмен = СоответствиеРусскихИАнглийскихИмен();
	// Подготовительные действия
	ВыполнитьПодготовительныеДействия();
	Если ПереданныйКаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML();
		ОчиститьКаталогВыгрузки = Истина;
	КонецЕсли;
	ЗаполнитьКоллекциюКартинок();
	ПринадлежностьОбъектаПодсистеме = СоответствиеОбъектовПодсистемам();
	ПроверяемыеСвойстваОбъектовМетаданных = ПроверяемыеСвойстваОбъектовМетаданных();
	
	// Поиск вызовов в модулях конфигурации.
	ПоискВызововВКодеМодулейИДинамическихСпискахФорм(ПринадлежностьОбъектаПодсистеме);
	
	// Поиск вызовов в метаданных конфигурации.
	
	ПоискВызововВМетаданныхКонфигурации(ПроверяемыеСвойстваОбъектовМетаданных, ПринадлежностьОбъектаПодсистеме);
	СвязиМеждуОбъектамиПодсистем.Сортировать("ВызывающаяПодсистема, ВызываемаяПодсистема");
	
	ПрименитьСписокИсключений();
	
	Если ОчиститьКаталогВыгрузки Тогда
		ОчиститьКаталогДляВыгрузки();
	КонецЕсли;
	
	Возврат СвязиМеждуОбъектамиПодсистем;
	
КонецФункции

// Подготовительные действия

Процедура ВыполнитьПодготовительныеДействия()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ЗаполнитьПараметрыЗапуска();
	КонецЕсли;
	ЗаполнитьПроверяемыеНаАвтономностьОбъекты();
	ВыполнитьСозданиеТаблиц();
	ЗависимостиПодсистем = Обработки.ПервоеВнедрениеБСП.Создать().ЗависимостиПодсистем();
	ЗаполнитьИсключения();
	
КонецПроцедуры

Функция СоответствиеОбъектовПодсистемам()
	
	ПринадлежностьОбъектаПодсистеме = Новый ТаблицаЗначений;
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("ПолноеИмяОМД");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("ИмяОМД");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("Подсистема");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("СтрокаОбращенияИзКода");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("ВозможенВызовПоПолномуИмени");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("СтрокаОбращенияКМетаданным");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("АльтернативнаяСтрокаОбращенияКМетаданным");
	ПринадлежностьОбъектаПодсистеме.Колонки.Добавить("ПоискПоТипу");
	
	Для Каждого СтандартнаяПодсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		
		Если СтандартнаяПодсистема.Имя = "РаботаВМоделиСервиса" Тогда
			// Перебор всех подсистем ВМоделиСервиса.
			Для Каждого ПодсистемаВМоделиСервиса Из СтандартнаяПодсистема.Подсистемы Цикл
				СоставПодсистемы = ПодсистемаВМоделиСервиса.Состав;
				Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
					ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
					Подсистема   = СтандартнаяПодсистема.Имя + "." + ПодсистемаВМоделиСервиса.Имя;
					ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
				КонецЦикла;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если СтандартнаяПодсистема.Имя = "Мультиязычность" Тогда
			// Перебор всех мультиязычных подсистем.
			Для Каждого МультиязычнаяПодсистема Из СтандартнаяПодсистема.Подсистемы Цикл
				СоставПодсистемы = МультиязычнаяПодсистема.Состав;
				Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
					ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
					Подсистема   = СтандартнаяПодсистема.Имя + "." + МультиязычнаяПодсистема.Имя;
					ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
				КонецЦикла;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
				
		СоставПодсистемы = СтандартнаяПодсистема.Состав;
		Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
			ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
			Подсистема   = СтандартнаяПодсистема.Имя;
			ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, "Отчет.ПроверкаВнедренияБСП", "ИнструментыРазработчика");
	ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, "Подсистема.Администрирование", "Администрирование");
	
	// Инструменты разработчика.
	Для Каждого СтандартнаяПодсистема Из Метаданные.Подсистемы._ДемоИнструментыРазработчика.Подсистемы Цикл
		СоставПодсистемы = СтандартнаяПодсистема.Состав;
		Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
			ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
			Если СтрНайти(ПолноеИмяОМД, "Обработка") = 0 Тогда
				Продолжить;
			КонецЕсли;
			Подсистема   = СтандартнаяПодсистема.Имя;
			Если Подсистема = "ПереходНаНовыеВерсии" Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
		КонецЦикла;
	КонецЦикла;
	
	// Технология сервиса.
	Для Каждого ПодсистемаТехнологииСервиса Из Метаданные.Подсистемы.ТехнологияСервиса.Подсистемы Цикл
		
		ПодсистемаКорневая = "ТехнологияСервиса";
		Если ПодсистемаТехнологииСервиса.Подсистемы.Количество() > 0 Тогда
			Для Каждого ДочерняяПодсистема Из ПодсистемаТехнологииСервиса.Подсистемы Цикл
				СоставПодсистемы = ДочерняяПодсистема.Состав;
				Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
					ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
					Подсистема = ПодсистемаКорневая + "." + ПодсистемаТехнологииСервиса.Имя + "." + ДочерняяПодсистема.Имя;
					ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
				КонецЦикла;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		СоставПодсистемы = ПодсистемаТехнологииСервиса.Состав;
		Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
			ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
			Подсистема = ПодсистемаКорневая + "." + ПодсистемаТехнологииСервиса.Имя;
			ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
		КонецЦикла;
	КонецЦикла;
	
	// Библиотека интернет поддержки.
	Для Каждого ПодсистемаБИП Из Метаданные.Подсистемы.ИнтернетПоддержкаПользователей.Подсистемы Цикл
		
		ПодсистемаКорневая = "ИнтернетПоддержкаПользователей";
		Если ПодсистемаБИП.Подсистемы.Количество() > 0 Тогда
			Для Каждого ДочерняяПодсистема Из ПодсистемаБИП.Подсистемы Цикл
				СоставПодсистемы = ДочерняяПодсистема.Состав;
				Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
					ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
					Подсистема = ПодсистемаКорневая + "." + ПодсистемаБИП.Имя + "." + ДочерняяПодсистема.Имя;
					ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
				КонецЦикла;
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		СоставПодсистемы = ПодсистемаБИП.Состав;
		Для Каждого ОбъектМетаданных Из СоставПодсистемы Цикл
			ПолноеИмяОМД = ОбъектМетаданных.ПолноеИмя();
			Подсистема = ПодсистемаКорневая + "." + ПодсистемаБИП.Имя;
			ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема);
		КонецЦикла;
	КонецЦикла;
	
	ПринадлежностьОбъектаПодсистеме.Сортировать("ПолноеИмяОМД");
	Возврат ПринадлежностьОбъектаПодсистеме;
	
КонецФункции

Процедура ЗаполнитьПринадлежностьОбъектаПодсистеме(ПринадлежностьОбъектаПодсистеме, ПолноеИмяОМД, Подсистема)
	
	ЭтоОбщийМодульИлиКартинка                = Ложь;
	ЭтоФункциональнаяОпция                   = Ложь;
	ЭтоЭлементСтиля                          = Ложь;
	СтрокаОбращенияКМетаданным               = "";
	АльтернативнаяСтрокаОбращенияКМетаданным = "";
	ПоискПоТипу = Новый Массив;
	
	Если СтрНайти(ПолноеИмяОМД, "Подсистема.СтандартныеПодсистемы.") > 0 Тогда
		
		Возврат;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщийМодуль.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщийМодуль.", "");
		ТипОбъекта                  = "";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоОбщийМодульИлиКартинка   = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПараметрСеанса.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПараметрСеанса.", "");
		ТипОбъекта                  = "ПараметрыСеанса";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Роль.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Роль.", "");
		ТипОбъекта                  = "Роли";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщийРеквизит.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщийРеквизит.", "");
		ТипОбъекта                  = "ОбщиеРеквизиты";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланОбмена.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланОбмена.", "");
		ТипОбъекта                  = "ПланыОбмена";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "КритерийОтбора.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "КритерийОтбора.", "");
		ТипОбъекта                  = "КритерииОтбора";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПодпискаНаСобытие.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПодпискаНаСобытие.", "");
		ТипОбъекта                  = "ПодпискиНаСобытия";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегламентноеЗадание.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегламентноеЗадание.", "");
		ТипОбъекта                  = "РегламентныеЗадания";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ФункциональнаяОпция.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ФункциональнаяОпция.", "");
		ТипОбъекта                  = "ФункциональныеОпции";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоФункциональнаяОпция      = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПараметрФункциональныхОпций.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПараметрФункциональныхОпций.", "");
		ТипОбъекта                  = "ПараметрыФункциональныхОпций";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОпределяемыйТип.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОпределяемыйТип.", "");
		ТипОбъекта                  = "ОпределяемыеТипы";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ХранилищеНастроек.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ХранилищеНастроек.", "");
		ТипОбъекта                  = "ХранилищаНастроек";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщаяФорма.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщаяФорма.", "");
		ТипОбъекта                  = "ОбщиеФормы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщаяКоманда.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщаяКоманда.", "");
		ТипОбъекта                  = "ОбщиеКоманды";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ГруппаКоманд.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ГруппаКоманд.", "");
		ТипОбъекта                  = "ГруппыКоманд";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщийМакет.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщийМакет.", "");
		ТипОбъекта                  = "ОбщиеМакеты";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ОбщаяКартинка.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ОбщаяКартинка.", "");
		ТипОбъекта                  = "БиблиотекаКартинок";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоОбщийМодульИлиКартинка   = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПакетXDTO.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПакетXDTO.", "");
		ТипОбъекта                  = "ПакетыXDTO";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "WebСервис.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "WebСервис.", "");
		ТипОбъекта                  = "WebСервисы";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "WSСсылка.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "WSСсылка.", "");
		ТипОбъекта                  = "WSСсылки";
		ВозможенВызовПоПолномуИмени = Ложь;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ЭлементСтиля.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ЭлементСтиля.", "");
		ТипОбъекта                  = "ЭлементыСтиля";
		
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ЭтоЭлементСтиля             = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Константа.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Константа.", "");
		ТипОбъекта                  = "Константы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Справочник.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Справочник.", "");
		ТипОбъекта                  = "Справочники";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Справочник.", "СправочникСсылка."));
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Справочник.", "СправочникОбъект."));
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Документ.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Документ.", "");
		ТипОбъекта                  = "Документы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Документ.", "ДокументСсылка."));
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Документ.", "ДокументОбъект."));
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ЖурналДокументов.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ЖурналДокументов.", "");
		ТипОбъекта                  = "ЖурналыДокументов";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Перечисление.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Перечисление.", "");
		ТипОбъекта                  = "Перечисления";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Перечисление.", "ПеречислениеСсылка."));
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Отчет.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Отчет.", "");
		ТипОбъекта                  = "Отчеты";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Обработка.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Обработка.", "");
		ТипОбъекта                  = "Обработки";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланВидовХарактеристик.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланВидовХарактеристик.", "");
		ТипОбъекта                  = "ПланыВидовХарактеристик";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "ПланВидовХарактеристик.", "ПланВидовХарактеристикСсылка."));
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "ПланВидовХарактеристик.", "ПланВидовХарактеристикОбъект."));
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланСчетов.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланСчетов.", "");
		ТипОбъекта                  = "ПланыСчетов";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "ПланВидовРасчета.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "ПланВидовРасчета.", "");
		ТипОбъекта                  = "ПланыВидовРасчета";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрСведений.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрСведений.", "");
		ТипОбъекта                  = "РегистрыСведений";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрНакопления.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрНакопления.", "");
		ТипОбъекта                  = "РегистрыНакопления";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрБухгалтерии.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрБухгалтерии.", "");
		ТипОбъекта                  = "РегистрыБухгалтерии";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "РегистрРасчета.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "РегистрРасчета.", "");
		ТипОбъекта                  = "РегистрыРасчета";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "БизнесПроцесс.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "БизнесПроцесс.", "");
		ТипОбъекта                  = "БизнесПроцессы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "БизнесПроцесс.", "БизнесПроцессСсылка."));
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "БизнесПроцесс.", "БизнесПроцессОбъект."));
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Задача.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Задача.", "");
		ТипОбъекта                  = "Задачи";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Задача.", "ЗадачаСсылка."));
		ПоискПоТипу.Добавить(СтрЗаменить(ПолноеИмяОМД, "Задача.", "ЗадачаОбъект."));
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "Подсистема.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "Подсистема.", "");
		ТипОбъекта                  = "Подсистемы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Истина;
		
	ИначеЕсли СтрНайти(ПолноеИмяОМД, "HTTPСервис.") > 0 Тогда
		
		ИмяОбъекта                  = СтрЗаменить(ПолноеИмяОМД, "HTTPСервис.", "");
		ТипОбъекта                  = "HTTPСервисы";
		ВозможенВызовПоПолномуИмени = Истина;
		МожноВызватьНапрямуюИзКода  = Ложь;
		
	КонецЕсли;
	
	// Подготовка параметров.
	Если МожноВызватьНапрямуюИзКода И Не ЭтоЭлементСтиля И Не ЭтоФункциональнаяОпция Тогда
		СтрокаОбращенияИзКода = ?(ТипОбъекта <> "", ТипОбъекта + ".","") + ИмяОбъекта;
	ИначеЕсли ЭтоЭлементСтиля Тогда
		ЭтоЦвет = (Метаданные.ЭлементыСтиля[ИмяОбъекта].Вид = Метаданные.СвойстваОбъектов.ВидЭлементаСтиля.Цвет);
		СтрокаОбращенияИзКода = ?(ЭтоЦвет, "ЦветаСтиля.", "ШрифтыСтиля.") + ИмяОбъекта;
	ИначеЕсли ЭтоФункциональнаяОпция Тогда
		СтрокаОбращенияИзКода = "ПолучитьФункциональнуюОпцию" + "(""" + ИмяОбъекта + """)";
	Иначе
		СтрокаОбращенияИзКода = "";
	КонецЕсли;
	
	Если Не ЭтоОбщийМодульИлиКартинка Тогда
		СтрокаОбращенияКМетаданным               = "Метаданные." + ТипОбъекта + "." + ИмяОбъекта;
		АльтернативнаяСтрокаОбращенияКМетаданным = "Метаданные." + ТипОбъекта + "[""" + ИмяОбъекта + """]";
	КонецЕсли;
	
	// Заполнение таблицы.
	СтрокаТаблицы                                          = ПринадлежностьОбъектаПодсистеме.Добавить();
	СтрокаТаблицы.ПолноеИмяОМД                             = ПолноеИмяОМД;
	СтрокаТаблицы.ИмяОМД                                   = ИмяОбъекта;
	СтрокаТаблицы.Подсистема                               = Подсистема;
	СтрокаТаблицы.СтрокаОбращенияИзКода                    = СтрокаОбращенияИзКода;
	СтрокаТаблицы.ВозможенВызовПоПолномуИмени              = ВозможенВызовПоПолномуИмени;
	СтрокаТаблицы.СтрокаОбращенияКМетаданным               = СтрокаОбращенияКМетаданным;
	СтрокаТаблицы.АльтернативнаяСтрокаОбращенияКМетаданным = АльтернативнаяСтрокаОбращенияКМетаданным;
	СтрокаТаблицы.ПоискПоТипу                              = ПоискПоТипу;
	
КонецПроцедуры

Функция КаталогИнформационнойБазы(СтрокаСоединения)
	
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	ПервыйСимволПути = ФайловаяБаза + 6;
	СтрокаСоединения = Сред(СтрокаСоединения, ПервыйСимволПути);
	ПоследнийСимволПути = СтрНайти(СтрокаСоединения, ";");
	СтрокаСоединения = Лев(СтрокаСоединения, ПоследнийСимволПути - 2);
	
	Возврат СтрокаСоединения;
	
КонецФункции

Функция ПроверяемыеСвойстваОбъектовМетаданных()
	
	ЗаполнитьВидыСвойств();
	
	ДеревоСвойствОбъектовМетаданных = Новый ДеревоЗначений;
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("ОбъектМетаданных");
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("ВидСвойства");
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("Свойство");
	ДеревоСвойствОбъектовМетаданных.Колонки.Добавить("Тип" );
	
	ТабличныйДокумент = Отчеты.ЗависимостиПодсистем.ПолучитьМакет("ПроверяемыеСвойства");
	ТекстСтроки = Неопределено;
	НомерСтроки   = 0;
	
	Пока ТекстСтроки <> "КонецТаблицы" Цикл
		
		ТекстСтроки = ТабличныйДокумент.Область(НомерСтроки,1).Текст;
		
		Если ПустаяСтрока(ТекстСтроки) Или ТекстСтроки = "ОМД / свойство" Тогда
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		СтрокаТипСвойства = Неопределено; // СтрокаДереваЗначений
		Если НачалоНовогоБлока(ТекстСтроки) Тогда
			
			Если СтрНайти(ТекстСтроки, "ОбъектМетаданных: ") > 0 Тогда
				ОбъектМетаданных = СтрЗаменить(ТекстСтроки, "ОбъектМетаданных: ", "");
				СтрокаОбъектыМетаданных = ДеревоСвойствОбъектовМетаданных.Строки.Добавить();
				СтрокаОбъектыМетаданных.ОбъектМетаданных = ОбъектМетаданных;
			Иначе
				ВидСвойства = СтрЗаменить(ТекстСтроки, ":", "");
				СтрокаТипСвойства = СтрокаОбъектыМетаданных.Строки.Добавить();
				СтрокаТипСвойства.ВидСвойства = ВидСвойства;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки+1;
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТипСвойства <> Неопределено Тогда
			СвойствоОбъекта         = СтрЗаменить(ТекстСтроки, ":", "");
			СтрокаСвойство          = СтрокаТипСвойства.Строки.Добавить();
			СтрокаСвойство.Свойство = СвойствоОбъекта;
			СтрокаСвойство.Тип      = ТабличныйДокумент.Область(НомерСтроки, 2).Текст;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
	Возврат ДеревоСвойствОбъектовМетаданных;
	
КонецФункции

Процедура ЗаполнитьКоллекциюКартинок()
	КоллекцияКартинок = Новый Соответствие;
	
	// картинки конфигурации
	Для Каждого Картинка Из Метаданные.ОбщиеКартинки Цикл
		ИмяКартинки = Картинка.Имя;
		КоллекцияКартинок.Вставить(XMLСтрока(БиблиотекаКартинок[ИмяКартинки].ПолучитьДвоичныеДанные()), Картинка.ПолноеИмя());
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсключения()
	
	ТаблицаИсключений = Новый ТаблицаЗначений;
	ТаблицаИсключений.Колонки.Добавить("ИсключаемыйОбъект");
	ТаблицаИсключений.Колонки.Добавить("ВызывающаяПодсистема");
	ТаблицаИсключений.Колонки.Добавить("ВызываемаяПодсистема");
	ТаблицаИсключений.Колонки.Добавить("ВызывающийОбъект");
	
	ТабличныйДокумент = Отчеты.ЗависимостиПодсистем.ПолучитьМакет("ОбъектыИсключения");
	ТекстСтроки = Неопределено;
	НомерСтроки   = 0;
	
	ПримерЗакончен = Ложь;
	
	Пока ТекстСтроки <> "КонецТаблицы" Цикл
		
		ТекстСтроки = ТабличныйДокумент.Область(НомерСтроки,1).Текст;
		
		Если Не ПримерЗакончен Тогда
			Если ТекстСтроки = "Список исключений при проверке:" Тогда
				ПримерЗакончен = Истина;
			Иначе
				НомерСтроки = НомерСтроки+1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстСтроки) Или ТекстСтроки = "Список исключений при проверке:"
			Или ТекстСтроки = "КонецТаблицы" Тогда
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ТекстСтроки, "ИсключаемыеОбъекты:") > 0 Тогда
			ТекущийБлокИсключений = "ИсключаемыеОбъекты";
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		ИначеЕсли СтрНайти(ТекстСтроки, "ИсключаемыеСвязи:") > 0 Тогда
			ТекущийБлокИсключений = "ИсключаемыеСвязи";
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		СтрокаИсключений = ТаблицаИсключений.Добавить();
		Если ТекущийБлокИсключений = "ИсключаемыеОбъекты" Тогда
			СтрокаИсключений.ИсключаемыйОбъект = ТекстСтроки;
		Иначе
			ИсключениеМассив = СтрРазделить(ТекстСтроки, "-", Ложь);
			СтрокаИсключений.ВызывающаяПодсистема = ИсключениеМассив[0];
			СтрокаИсключений.ВызываемаяПодсистема = ИсключениеМассив[1];
			СтрокаИсключений.ВызывающийОбъект     = ИсключениеМассив[2];
		КонецЕсли;
		
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
КонецПроцедуры

// Проверки

Процедура ПоискВызововВКодеМодулейИДинамическихСпискахФорм(ПринадлежностьОбъектаПодсистеме)
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*.bsl", Истина);
	МассивФайловФорм = НайтиФайлы(КаталогВыгрузкиМодулей, "Form.xml", Истина); 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФайлов, МассивФайловФорм);
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(Файл.ПолноеИмя, Файл.Имя);
		
		// Пропускаем демо-объекты.
		Если СтрНайти(ПолноеИмяСтруктура.ПолноеИмяМодуля, "_Демо") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение вызывающей подсистемы.
		ВызывающийОбъект = ПолноеИмяСтруктура.ПолноеИмяОбъекта;
		НайденнаяСтрока = ПринадлежностьОбъектаПодсистеме.Найти(ВызывающийОбъект, "ПолноеИмяОМД");
		ПолноеИмяВызывающегоОбъекта = ПолноеИмяСтруктура.ПолноеИмяМодуля;
		
		ПроверкаАвтономногоОбъекта = (ПроверяемыеНаАвтономностьОбъекты.Найти(ВызывающийОбъект) <> Неопределено);
		
		Если НайденнаяСтрока = Неопределено И Не ПроверкаАвтономногоОбъекта Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверкаАвтономногоОбъекта Тогда
			СтрокаВызывающаяПодсистема = Неопределено;
			ВызывающаяПодсистема = "УниверсальныеОбработки";
		Иначе
			ВызывающаяПодсистема = НайденнаяСтрока.Подсистема;
			// Данные объекта вызывающей подсистемы.
			СтрокаВызывающаяПодсистема = ЗависимостиПодсистем.Найти(ВызывающаяПодсистема, "Имя");
		КонецЕсли;
		
		Если СтрНачинаетсяС(ВызывающаяПодсистема, "ТехнологияСервиса.")
			Или СтрНачинаетсяС(ВызывающаяПодсистема, "ИнтернетПоддержкаПользователей.") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файл.Расширение = ".bsl" Тогда
			
			ТекстФайла = Новый ЧтениеТекста(Файл.ПолноеИмя);
			СтрокаТекста = ТекстФайла.Прочитать(); 
			
			СтруктураПоискаВызовов = ПолучитьСтруктуруПоискаВызовов(СтрокаТекста, ВызывающаяПодсистема, СтрокаВызывающаяПодсистема,
				ПринадлежностьОбъектаПодсистеме, ПроверкаАвтономногоОбъекта, ПолноеИмяВызывающегоОбъекта);
			ПоискВызоваВКодеМодулейИДинамическихСпискахФорм(СтруктураПоискаВызовов);
			
			ТекстФайла.Закрыть();
			
		ИначеЕсли Файл.Расширение = ".xml" Тогда
			
			ТаблицаЗапросов = ПолучитьТаблицуТекстовЗапросовИзДинамическихСписков(Файл.ПолноеИмя);
			Для Каждого СтрокаТаблицыЗапросов Из ТаблицаЗапросов Цикл
				
				СтрокаТекста = СтрокаТаблицыЗапросов.ТекстЗапроса;
				ИмяРеквизита = СтрокаТаблицыЗапросов.Реквизит;
				
				СтруктураПоискаВызовов = ПолучитьСтруктуруПоискаВызовов(СтрокаТекста, ВызывающаяПодсистема, СтрокаВызывающаяПодсистема,
					ПринадлежностьОбъектаПодсистеме, ПроверкаАвтономногоОбъекта, ПолноеИмяВызывающегоОбъекта, ИмяРеквизита);
				
				ПоискВызоваВКодеМодулейИДинамическихСпискахФорм(СтруктураПоискаВызовов);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ПоискВызоваВКодеМодулейИДинамическихСпискахФорм(СтруктураПоискаВызовов)
	
	// Блоки демо-примеров не анализируются.
	ВырезатьДемоПримерыИзКода(СтруктураПоискаВызовов.СтрокаТекста);
	
	Для Каждого ЭлементСоответствия Из СтруктураПоискаВызовов.ПринадлежностьОбъектаПодсистеме Цикл
		
		ВызываемаяПодсистема = ЭлементСоответствия.Подсистема;
		Если СтруктураПоискаВызовов.ВызывающаяПодсистема = ВызываемаяПодсистема Тогда
			Продолжить; // Вызов в пределах одной подсистемы.
		КонецЕсли;
		
		СтрокаВызываемаяПодсистема = ЗависимостиПодсистем.Найти(ВызываемаяПодсистема, "Имя");
		Если СтрокаВызываемаяПодсистема <> Неопределено
			И Не СтруктураПоискаВызовов.ПроверкаАвтономногоОбъекта И СтрокаВызываемаяПодсистема.Обязательная Тогда
			Продолжить; // Вызываемая подсистема обязательная.
		КонецЕсли;
		
		Если СтруктураПоискаВызовов.СтрокаВызывающаяПодсистема <> Неопределено
			И СтруктураПоискаВызовов.СтрокаВызывающаяПодсистема.УсловноЗависитОтПодсистем.Найти("*") <> Неопределено Тогда
			Прервать; // Зависимости для данной подсистемы не проверяются.
		КонецЕсли;
		
		Если СтруктураПоискаВызовов.СтрокаВызывающаяПодсистема <> Неопределено
			И СтруктураПоискаВызовов.СтрокаВызывающаяПодсистема.ЗависитОтПодсистем.Найти(ВызываемаяПодсистема) <> Неопределено Тогда
			Продолжить; // Зависимость между данными подсистемами документирована.
		КонецЕсли;
		
		СтруктураПоискаВызова = Новый Структура;
		СтруктураПоискаВызова.Вставить("СтрокаТекста", 					СтруктураПоискаВызовов.СтрокаТекста);
		СтруктураПоискаВызова.Вставить("ВызывающаяПодсистема", 			СтруктураПоискаВызовов.ВызывающаяПодсистема);
		СтруктураПоискаВызова.Вставить("ПолноеИмяВызывающегоОбъекта", 	СтруктураПоискаВызовов.ПолноеИмяВызывающегоОбъекта);
		СтруктураПоискаВызова.Вставить("ВызываемаяПодсистема", 			ВызываемаяПодсистема);
		СтруктураПоискаВызова.Вставить("ЭлементСоответствия", 			ЭлементСоответствия);
		СтруктураПоискаВызова.Вставить("ИмяРеквизита", 					СтруктураПоискаВызовов.ИмяРеквизита);
		
		ВыполнитьПоискВызововВДругиеПодсистемы(СтруктураПоискаВызова);
		Если Не СтруктураПоискаВызовов.ПроверкаАвтономногоОбъекта Тогда
			НайтиОбращениеКМетаданнымВКодеМодулей(СтруктураПоискаВызова);
			Если СтруктураПоискаВызовов.ВызывающаяПодсистема <> "ИнструментыРазработчика" Тогда
				ВыполнитьПоискПоПолномуИмениОбъекта(СтруктураПоискаВызова);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВызовыЧерезОповещения(СтруктураПоискаВызовов.ВызывающаяПодсистема, СтруктураПоискаВызовов.ПолноеИмяВызывающегоОбъекта,
		СтруктураПоискаВызовов.СтрокаТекста, СтруктураПоискаВызовов.ПринадлежностьОбъектаПодсистеме);
	
КонецПроцедуры

Процедура ВыполнитьПоискВызововВДругиеПодсистемы(СтруктураПоискаВызова)
	
	СтрокаТекста      = СтруктураПоискаВызова.СтрокаТекста;
	НачалоВызова      = 0;
	КонецВызова       = 0;
	НоваяСтрокаТекста = "";
	ОпорныйСимвол     = " ";
	НомерСтроки       = 0;
	СтрокаОбращенияИзКода = СтруктураПоискаВызова.ЭлементСоответствия.СтрокаОбращенияИзКода;
		
	Если СтрокаОбращенияИзКода = "" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПоиска = Новый Массив;
	Если СтрНайти(СтрокаОбращенияИзКода, "БиблиотекаКартинок") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ЦветаСтиля") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ШрифтыСтиля") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ПараметрыСеанса") > 0
		Или СтрНайти(СтрокаОбращенияИзКода, "ПолучитьФункциональнуюОпцию") > 0 Тогда
		СтрокиПоиска.Добавить(СтрокаОбращенияИзКода);
	Иначе
		СтрокиПоиска.Добавить(СтрокаОбращенияИзКода + ".");
		СтрокиПоиска.Добавить(СтрокаОбращенияИзКода + "[");
	КонецЕсли;
	
	ИмяРеквизитаФормы = Строка(СтруктураПоискаВызова.ИмяРеквизита);
	Если НЕ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ИмяРеквизитаФормы = "Реквизит: " + ИмяРеквизитаФормы + Символы.ПС;
	КонецЕсли;
	
	Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
		
		ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
		
		Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Истина Цикл
			
			ТекстВызова = Лев(НоваяСтрокаТекста, КонецВызова);
			
			Если НомерСтроки = 0 Тогда
				НомерСтроки = НомерСтроки(СтруктураПоискаВызова.СтрокаТекста, НачалоВызова, НомерСтроки);
			Иначе
				НомерСтроки = НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки);
			КонецЕсли;
			
			Если Не ЭтоКомментарий(СтрокаТекста, НачалоВызова)
				И Не ЭтоСтрока(СтрокаТекста, НачалоВызова)
				И СтрНайти(ТекстВызова, Символы.ПС) = 0
				И СтрНайти(Сред(НоваяСтрокаТекста, 0, КонецВызова), " ") = 0
				И (СокрЛП(ОпорныйСимвол) <> ОпорныйСимвол
					Или ОпорныйСимвол = "(") Тогда
				
				СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
				СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = ИмяРеквизитаФормы + "строка " + НомерСтроки + ": " + ТекстВызова;
				СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = СтруктураПоискаВызова.ВызываемаяПодсистема;
				СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = СтруктураПоискаВызова.ВызывающаяПодсистема;
				СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = СтруктураПоискаВызова.ПолноеИмяВызывающегоОбъекта;
			КонецЕсли;
			
			СтрокаТекста = Сред(НоваяСтрокаТекста, КонецВызова);
			НоваяСтрокаТекста = "";
			ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
			Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВызовыЧерезОповещения(ВызывающаяПодсистема, ПолноеИмяВызывающегоОбъекта, СтрокаТекста, ПринадлежностьОбъектаПодсистеме)
	
	НайденныеВызовы = ПоискОповещенийВТексте(СтрокаТекста);
	Для Каждого ТекущийВызов Из НайденныеВызовы Цикл
		ЗафиксироватьНекорректныеВызовы(ТекущийВызов, ВызывающаяПодсистема, ПолноеИмяВызывающегоОбъекта, ПринадлежностьОбъектаПодсистеме);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//   ТекстМодуля - Строка
// Возвращаемое значение:
//   Массив из Структура:
//   * НомерСтроки - Число
//   * Вызов - Строка
//
Функция ПоискОповещенийВТексте(Знач ТекстМодуля)
	
	СтрокиСОповещениями   = Новый Массив;
	ТекущийНомерВхождения = СтрНайти(ТекстМодуля, "Новый ОписаниеОповещения(");
	
	НомерСтроки = 0;
	Смещение    = 0;
	
	Пока ТекущийНомерВхождения > 0 Цикл
		
		НомерСтроки = НомерСтроки(ТекстМодуля, ТекущийНомерВхождения, НомерСтроки) + Смещение;
		
		ТекстМодуля        = Сред(ТекстМодуля, ТекущийНомерВхождения);
		КоличествоИтераций = СтрДлина(ТекстМодуля);
		
		Для Индекс = 24 По КоличествоИтераций Цикл
			
			ТекущийСимвол   = Сред(ТекстМодуля, Индекс, 1);
			СледующийСимвол = Сред(ТекстМодуля, Индекс + 1, 1);
			
			Если ТекущийСимвол = ")" И (СледующийСимвол = ";" Или СледующийСимвол = ",") Тогда
				
				ТекущаяСтрокаОповещения = Лев(ТекстМодуля, Индекс + 1);
				ТекстМодуля             = Сред(ТекстМодуля, Индекс + 1);
				ТекущийНомерВхождения   = СтрНайти(ТекстМодуля, "Новый ОписаниеОповещения(");
				
				Смещение = СтрЧислоСтрок(ТекущаяСтрокаОповещения) - 1;
				
				СтруктураРезультатов = Новый Структура;
				СтруктураРезультатов.Вставить("НомерСтроки", НомерСтроки);
				СтруктураРезультатов.Вставить("Вызов",       ИсключитьАнонимныеСтруктуры(ТекущаяСтрокаОповещения));
				
				СтрокиСОповещениями.Добавить(СтруктураРезультатов);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокиСОповещениями;
	
КонецФункции

Функция ИсключитьАнонимныеСтруктуры(Знач СтрокаСОповещением)
	
	ВхождениеАнонимнойСтруктуры = СтрНайти(СтрокаСОповещением, "Новый Структура(");
	Если ВхождениеАнонимнойСтруктуры > 0 Тогда
		
		СтрокаСоСтруктурой = Сред(СтрокаСОповещением, ВхождениеАнонимнойСтруктуры);
		
		СчетчикОткрывающихСкобок = 0;
		СчетчикЗакрывающихСкобок = 0;
		
		КоличествоИтераций = СтрДлина(СтрокаСоСтруктурой);
		
		Для Индекс = 15 По КоличествоИтераций Цикл
			
			Если СчетчикОткрывающихСкобок <> 0 И СчетчикЗакрывающихСкобок <> 0
				И СчетчикОткрывающихСкобок = СчетчикЗакрывающихСкобок Тогда
				
				ВызовАнонимнойСтруктуры = Сред(СтрокаСоСтруктурой, 1, Индекс - 1);
				СтрокаСОповещением = СтрЗаменить(СтрокаСОповещением, ВызовАнонимнойСтруктуры, "ДополнительныеПараметры");
				Прервать;
				
			Иначе
				
				ТекущийСимвол   = Сред(СтрокаСоСтруктурой, Индекс, 1);
				Если ТекущийСимвол = "(" Тогда
					СчетчикОткрывающихСкобок = СчетчикОткрывающихСкобок + 1;
				ИначеЕсли ТекущийСимвол = ")" Тогда
					СчетчикЗакрывающихСкобок = СчетчикЗакрывающихСкобок + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаСОповещением;
	
КонецФункции

Процедура ЗафиксироватьНекорректныеВызовы(ТекущийВызов, ВызывающаяПодсистема, ПолноеИмяВызывающегоОбъекта, ПринадлежностьОбъектаПодсистеме)
	
	ПараметрыОписанияМассивом = СтрРазделить(ТекущийВызов.Вызов, ",");
	
	Если ПараметрыОписанияМассивом.Количество() >= 2 Тогда
		
		ЦелевойВызов       = ПараметрыОписанияМассивом.Получить(1);
		ЭтоКорректныйВызов = ЭтоКорректныйВызов(ВызывающаяПодсистема, ЦелевойВызов, ПринадлежностьОбъектаПодсистеме);
		
		СтрокаВызываемаяПодсистема = ЗависимостиПодсистем.Найти(ЭтоКорректныйВызов.ВызываемаяПодсистема, "Имя");
		Если СтрокаВызываемаяПодсистема <> Неопределено И СтрокаВызываемаяПодсистема.Обязательная Тогда
			Возврат; // Вызываемая подсистема обязательная.
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЦелевойВызов) Тогда
			Если Не ЭтоКорректныйВызов.ОбъектПринадлежитТекущейПодсистеме Тогда
				ЗафиксироватьОшибкуСвязей(ТекущийВызов, ЭтоКорректныйВызов.ВызываемаяПодсистема, ВызывающаяПодсистема, ПолноеИмяВызывающегоОбъекта);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОписанияМассивом.Количество() = 5 Тогда
			
			ЦелевойВызов       = ПараметрыОписанияМассивом.Получить(4);
			ЭтоКорректныйВызов = ЭтоКорректныйВызов(ВызывающаяПодсистема, ЦелевойВызов, ПринадлежностьОбъектаПодсистеме);
			
			Если ЗначениеЗаполнено(ЦелевойВызов) Тогда
				Если Не ЭтоКорректныйВызов.ОбъектПринадлежитТекущейПодсистеме Тогда
					ЗафиксироватьОшибкуСвязей(ТекущийВызов, ЭтоКорректныйВызов.ВызываемаяПодсистема, ВызывающаяПодсистема, ПолноеИмяВызывающегоОбъекта);
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКорректныйВызов(ВызывающаяПодсистема, ЦелевойВызов, ПринадлежностьОбъектаПодсистеме)
	
	ИсходныйВызов = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(ЦелевойВызов,"""", ""), ")", ""), ";", ""));
	
	Если ИсходныйВызов = "ЭтотОбъект" Или СтрНачинаетсяС(ИсходныйВызов, "Модуль") Тогда
		Возврат Новый Структура("ОбъектПринадлежитТекущейПодсистеме, ВызываемаяПодсистема", Истина, "");
	Иначе
		СтрокаПринадлежности = ПринадлежностьОбъектаПодсистеме.Найти(ИсходныйВызов, "ИмяОМД");
		Если СтрокаПринадлежности <> Неопределено И СтрокаПринадлежности.Подсистема <> ВызывающаяПодсистема Тогда
			Возврат Новый Структура("ОбъектПринадлежитТекущейПодсистеме, ВызываемаяПодсистема", Ложь, СтрокаПринадлежности.Подсистема);
		Иначе
			Возврат Новый Структура("ОбъектПринадлежитТекущейПодсистеме, ВызываемаяПодсистема", Истина, "");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Параметры:
//   ТекущийВызов - Структура:
//   * НомерСтроки - Число
//   * Вызов - Строка
//   ВызываемаяПодсистема - Строка
//   ВызывающаяПодсистема - Строка
//   ПолноеИмяВызывающегоОбъекта - Строка
//
Процедура ЗафиксироватьОшибкуСвязей(ТекущийВызов, ВызываемаяПодсистема, ВызывающаяПодсистема, ПолноеИмяВызывающегоОбъекта)
	
	СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
	СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова          = "строка " + ТекущийВызов.НомерСтроки + ": " + ТекущийВызов.Вызов;
	СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = ВызываемаяПодсистема;
	СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = ВызывающаяПодсистема;
	СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = ПолноеИмяВызывающегоОбъекта;
	
КонецПроцедуры

Процедура ВыполнитьПоискПоПолномуИмениОбъекта(СтруктураПоискаВызова)
	
	СтрокаТекста = СтруктураПоискаВызова.СтрокаТекста;
	Если Не СтруктураПоискаВызова.ЭлементСоответствия.ВозможенВызовПоПолномуИмени Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = СтруктураПоискаВызова.ЭлементСоответствия.ПолноеИмяОМД;
	
	НачалоВызова = 0;
	КонецВызова = 0;
	НоваяСтрокаТекста = "";
	ОпорныйСимвол = " ";
	НомерСтроки = 0; 
	МассивОпорныхСимволов = Новый Массив;
	МассивОпорныхСимволов.Добавить(" ");
	МассивОпорныхСимволов.Добавить(".");
	МассивОпорныхСимволов.Добавить("""");
	МассивОпорныхСимволов.Добавить(")");
	
	Если СтрокаПоиска = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПоискПоПолномуИмени = Истина;
	ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
	
	Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаФормы = Строка(СтруктураПоискаВызова.ИмяРеквизита);
	Если НЕ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ИмяРеквизитаФормы = "Реквизит: " + ИмяРеквизитаФормы + Символы.ПС;
	КонецЕсли;
	
	Пока Истина Цикл
		
		ТекстВызова = Лев(НоваяСтрокаТекста, КонецВызова);
		
		Если Не ЭтоКомментарий(СтрокаТекста, НачалоВызова, Истина)
			И (МассивОпорныхСимволов.Найти(ОпорныйСимвол) <> Неопределено) Тогда
			
			Если НомерСтроки = 0 Тогда
				НомерСтроки = НомерСтроки(СтруктураПоискаВызова.СтрокаТекста, НачалоВызова, НомерСтроки);
			Иначе
				НомерСтроки = НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки);
			КонецЕсли;
			
			СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
			СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = ИмяРеквизитаФормы + "строка " + НомерСтроки + ": " + ТекстВызова;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = СтруктураПоискаВызова.ВызываемаяПодсистема;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = СтруктураПоискаВызова.ВызывающаяПодсистема;
			СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = СтруктураПоискаВызова.ПолноеИмяВызывающегоОбъекта;
			
		КонецЕсли;
		
		СтрокаТекста = Сред(НоваяСтрокаТекста, КонецВызова);
		НоваяСтрокаТекста = "";
		ПоискПоПолномуИмени = Истина;
		ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
		Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиОбращениеКМетаданнымВКодеМодулей(СтруктураПоискаВызова)
	
	МассивСтрокПоиска = Новый Массив;
	МассивСтрокПоиска.Добавить(СтруктураПоискаВызова.ЭлементСоответствия.СтрокаОбращенияКМетаданным);
	Если СтруктураПоискаВызова.ВызывающаяПодсистема <> "ИнструментыРазработчика" Тогда
		Для Каждого ИмяТипа Из СтруктураПоискаВызова.ЭлементСоответствия.ПоискПоТипу Цикл
			Шаблон = "Тип(""%1"")";
			МассивСтрокПоиска.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяТипа));
		КонецЦикла;
	КонецЕсли;
	
	ИмяРеквизитаФормы = Строка(СтруктураПоискаВызова.ИмяРеквизита);
	Если НЕ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ИмяРеквизитаФормы = "Реквизит: " + ИмяРеквизитаФормы + Символы.ПС;
	КонецЕсли;
	
	Для Каждого СтрокаПоиска Из МассивСтрокПоиска Цикл
		
		СтрокаТекста = СтруктураПоискаВызова.СтрокаТекста;
		НачалоВызова = 0;
		КонецВызова = 0;
		НоваяСтрокаТекста = "";
		ОпорныйСимвол = " ";
		НомерСтроки = 0;
		
		Если СтрокаПоиска = "" Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
		
		Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Истина Цикл
			
			ТекстВызова = Лев(НоваяСтрокаТекста, КонецВызова);
			
			Если Не ЭтоКомментарий(СтрокаТекста, НачалоВызова) Тогда
				
				Если НомерСтроки = 0 Тогда
					НомерСтроки = НомерСтроки(СтруктураПоискаВызова.СтрокаТекста, НачалоВызова, НомерСтроки);
				Иначе
					НомерСтроки = НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки);
				КонецЕсли;
				
				ТекстДоВызова = Лев(СтруктураПоискаВызова.СтрокаТекста, НачалоВызова);
				УсловныйВызов = "Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.%1"")";
				УсловныйВызов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(УсловныйВызов, СтруктураПоискаВызова.ВызываемаяПодсистема);
				УсловныйВызовКлиент = "Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(""СтандартныеПодсистемы.%1"")";
				УсловныйВызовКлиент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(УсловныйВызовКлиент, СтруктураПоискаВызова.ВызываемаяПодсистема);
				КонецУсловия = "КонецЕсли;";
				НачалоФункции = "Функция ";
				НачалоПроцедуры = "Процедура ";
				
				ПозицияФункции = СтрНайти(ТекстДоВызова, НачалоФункции, НаправлениеПоиска.СКонца);
				ПозицияПроцедуры = СтрНайти(ТекстДоВызова, НачалоПроцедуры, НаправлениеПоиска.СКонца);
				ПозицияКонцаУсловия = СтрНайти(ТекстДоВызова, КонецУсловия, НаправлениеПоиска.СКонца);
				ПозицияУсловногоВызова = СтрНайти(ТекстДоВызова, УсловныйВызов, НаправлениеПоиска.СКонца);
				Если ПозицияУсловногоВызова = 0 Тогда
					ПозицияУсловногоВызова = СтрНайти(ТекстДоВызова, УсловныйВызовКлиент, НаправлениеПоиска.СКонца);
				КонецЕсли;
				
				Если ПозицияУсловногоВызова < ПозицияФункции
					Или ПозицияУсловногоВызова < ПозицияПроцедуры
					Или ПозицияУсловногоВызова < ПозицияКонцаУсловия Тогда
					СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
					СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = ИмяРеквизитаФормы + "строка " + НомерСтроки + ": " + ТекстВызова;
					СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = СтруктураПоискаВызова.ВызываемаяПодсистема;
					СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = СтруктураПоискаВызова.ВызывающаяПодсистема;
					СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = СтруктураПоискаВызова.ПолноеИмяВызывающегоОбъекта;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТекста = Сред(НоваяСтрокаТекста, КонецВызова);
			НоваяСтрокаТекста = "";
			ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол);
			Если НачалоВызова = 0 Или КонецВызова = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоискВызововВМетаданныхКонфигурации(ПроверяемыеСвойстваОбъектовМетаданных, ПринадлежностьОбъектаПодсистеме)
	
	Для Каждого СтрокаОбъектМетаданных Из ПроверяемыеСвойстваОбъектовМетаданных.Строки Цикл
		
		Для Каждого ВидСвойства Из СтрокаОбъектМетаданных.Строки Цикл
			
			Для Каждого СвойствоОбъекта Из ВидСвойства.Строки Цикл
				
				ПроверяемыйВидСвойства = ВидСвойства.ВидСвойства;
				ПроверяемоеСвойство = СвойствоОбъекта.Свойство;
				ТипСвойства = СвойствоОбъекта.Тип;
				
				Для Каждого ОбъектМетаданных Из Метаданные[СтрокаОбъектМетаданных.ОбъектМетаданных] Цикл
					
					ВызывающийОбъект = ОбъектМетаданных.ПолноеИмя();
					Если СтрНайти(ВызывающийОбъект, "_Демо") > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НайденнаяСтрока = ПринадлежностьОбъектаПодсистеме.Найти(ВызывающийОбъект);
					
					Если НайденнаяСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ВызывающаяПодсистема = НайденнаяСтрока.Подсистема;
					Если СтрНачинаетсяС(ВызывающаяПодсистема, "ТехнологияСервиса.")
						Или СтрНачинаетсяС(ВызывающаяПодсистема, "ИнтернетПоддержкаПользователей.") Тогда
						Продолжить;
					КонецЕсли;
					
					ВызываемыеПодсистемы = ПоискВызываемыхПодсистем(ПринадлежностьОбъектаПодсистеме, ОбъектМетаданных, ПроверяемыйВидСвойства, ПроверяемоеСвойство, ТипСвойства);
					
					Если ВызываемыеПодсистемы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТаблицы Из ВызываемыеПодсистемы Цикл
						
						СтрокаВызываемаяПодсистема = СтрокаТаблицы.ДанныеПодсистемы;
						ВызываемаяПодсистема = СтрокаВызываемаяПодсистема.Подсистема;
						Если ВызывающаяПодсистема = ВызываемаяПодсистема Тогда
							Продолжить; // Вызов в пределах одной подсистемы.
						КонецЕсли;
						
						НайденнаяПодсистема = ЗависимостиПодсистем.Найти(ВызываемаяПодсистема, "Имя");
						Если НайденнаяПодсистема <> Неопределено И НайденнаяПодсистема.Обязательная Тогда
							Продолжить; // Вызываемая подсистема обязательная.
						КонецЕсли;
						
						СтрокаВызывающаяПодсистема = ЗависимостиПодсистем.Найти(ВызывающаяПодсистема, "Имя");
						Если СтрокаВызывающаяПодсистема <> Неопределено
							И СтрокаВызывающаяПодсистема.УсловноЗависитОтПодсистем.Найти("*") <> Неопределено Тогда
							Прервать; // Зависимости для данной подсистемы не проверяются.
						КонецЕсли;
						
						Если СтрокаВызывающаяПодсистема <> Неопределено
							И (СтрокаВызывающаяПодсистема.ЗависитОтПодсистем.Найти(ВызываемаяПодсистема) <> Неопределено
							   Или СтрокаВызывающаяПодсистема.УсловноЗависитОтПодсистем.Найти(ВызываемаяПодсистема) <> Неопределено) Тогда
							Продолжить; // Зависимость между данными подсистемами документирована.
						КонецЕсли;
						
						СтрокаСвязиМеждуОбъектамиПодсистем = СвязиМеждуОбъектамиПодсистем.Добавить();
						СтрокаСвязиМеждуОбъектамиПодсистем.МестоВызова = ПроверяемыйВидСвойства + "."
							+ ?(ПустаяСтрока(СтрокаТаблицы.ИмяРеквизита), ПроверяемоеСвойство, СтрокаТаблицы.ИмяРеквизита);
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемаяПодсистема = ВызываемаяПодсистема;
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающаяПодсистема = ВызывающаяПодсистема;
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызывающийОбъект     = ВызывающийОбъект;
						СтрокаСвязиМеждуОбъектамиПодсистем.ВызываемыйОбъект     = СтрокаТаблицы.ВызываемыйОбъект;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательные действия

Функция ПоискВызываемыхПодсистем(ПринадлежностьОбъектаПодсистеме, ОбъектМетаданных, ПроверяемыйВидСвойства, ПроверяемоеСвойство, ТипСвойства)
	
	ВызываемыеПодсистемы = Неопределено;
	Если ПроверяемыйВидСвойства = "Свойства" Тогда
		ПроверяемоеПоле = ОбъектМетаданных[ПроверяемоеСвойство];
		ВызываемыеПодсистемы = ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства);
	ИначеЕсли ПроверяемыйВидСвойства = "Реквизиты"
		Или ПроверяемыйВидСвойства = "РеквизитыАдресации"
		Или ПроверяемыйВидСвойства = "Команды"
		Или ПроверяемыйВидСвойства = "Измерения"
		Или ПроверяемыйВидСвойства = "Ресурсы" Тогда
		
		Для Каждого ПроверяемыйРеквизит Из ОбъектМетаданных[ПроверяемыйВидСвойства] Цикл
			ПроверяемоеПоле = ПроверяемыйРеквизит[ПроверяемоеСвойство];
			ИмяРеквизита = ПроверяемыйРеквизит.Имя + "." + ПроверяемоеСвойство;
			ВызываемыеПодсистемы = ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства, ИмяРеквизита);
		КонецЦикла;
		
	ИначеЕсли ПроверяемыйВидСвойства = "ТабличныеЧасти" Тогда
		
		ПроверяемыеСвойства = СтрРазделить(ПроверяемоеСвойство, ".", Ложь);
		Для Каждого ПроверяемаяТабличнаяЧасть Из ОбъектМетаданных[ПроверяемыйВидСвойства] Цикл
			Для Каждого ПроверяемыйРеквизит Из ПроверяемаяТабличнаяЧасть[ПроверяемыеСвойства[0]] Цикл
				ПроверяемоеПоле = ПроверяемыйРеквизит[ПроверяемыеСвойства[1]];
				ИмяРеквизита    = ПроверяемаяТабличнаяЧасть.Имя + "." + ПроверяемыйРеквизит.Имя + "." + ПроверяемыеСвойства[1];
				ВызываемыеПодсистемы = ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства, ИмяРеквизита);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ПроверяемоеСвойство = "Характеристики" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВызываемыеПодсистемы;
	
КонецФункции

Функция ПоискВызововВСвойствеОбъекта(ПринадлежностьОбъектаПодсистеме, ВызываемыеПодсистемы, ПроверяемоеПоле, ТипСвойства, ИмяРеквизита = Неопределено)
	
	РеквизитЛюбаяСсылка = Метаданные.Отчеты.ЗависимостиПодсистем.Реквизиты.ЛюбаяСсылка.Тип;
	
	Если ВызываемыеПодсистемы = Неопределено Тогда
		ВызываемыеПодсистемы = Новый ТаблицаЗначений;
		ВызываемыеПодсистемы.Колонки.Добавить("ДанныеПодсистемы");
		ВызываемыеПодсистемы.Колонки.Добавить("ВызываемыйОбъект");
		ВызываемыеПодсистемы.Колонки.Добавить("ИмяРеквизита");
	КонецЕсли;
	
	Если ПроверяемоеПоле = Неопределено Тогда
		Возврат ВызываемыеПодсистемы;
	КонецЕсли;
	
	Если ТипСвойства = "ОписаниеТипов" Тогда
		
		Если РеквизитЛюбаяСсылка = ПроверяемоеПоле Тогда
			Возврат ВызываемыеПодсистемы;
		КонецЕсли;
		
		Для Каждого ОпределяемыйТип Из Метаданные.ОпределяемыеТипы Цикл
			Если ПроверяемоеПоле = ОпределяемыйТип.Тип Тогда
				Возврат ВызываемыеПодсистемы;
			КонецЕсли;
		КонецЦикла;
		
		МассивТиповОбъекта = ПроверяемоеПоле.Типы();
		Если ГрупповойВыборТипов(МассивТиповОбъекта) Тогда
			Возврат ВызываемыеПодсистемы;
		КонецЕсли;
		
		Для Каждого ТипОбъекта Из МассивТиповОбъекта Цикл
			
			ВызываемыйОМД = Метаданные.НайтиПоТипу(ТипОбъекта);
			Если ВызываемыйОМД <> Неопределено Тогда
				ПолноеИмяВызываемогоОМД = ВызываемыйОМД.ПолноеИмя();
				ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипСвойства = "КоллекцияЗначенийСвойстваОбъектаМетаданных" Тогда
		
		Для Каждого ОбъектМетаданных Из ПроверяемоеПоле Цикл
			ПолноеИмяВызываемогоОМД = ОбъектМетаданных.ПолноеИмя();
			ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
		КонецЦикла;
		
	ИначеЕсли ТипСвойства = "Строка"
		Или ТипСвойства = "ОбъектМетаданных" Тогда
		
		Если ТипСвойства = "ОбъектМетаданных" Тогда
			ПолноеИмяВызываемогоОМД = ПроверяемоеПоле.ПолноеИмя();
		Иначе
			ИмяОбъектаМетаданных = СтрРазделить(ПроверяемоеПоле, ".", Ложь)[0];
			ПолноеИмяВызываемогоОМД = "ОбщийМодуль." + ИмяОбъектаМетаданных;
		КонецЕсли;
		ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
		
	ИначеЕсли ТипСвойства = "СоставФункциональнойОпции" Тогда
		
		Для Каждого ЭлементСоставаФО Из ПроверяемоеПоле Цикл
			
			Если ЭлементСоставаФО.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмяВызываемогоОМД = ЭлементСоставаФО.Объект.ПолноеИмя();
			ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
			
		КонецЦикла;
		
	ИначеЕсли ТипСвойства = "Картинка" Тогда
		
		Если ПроверяемоеПоле.Вид <> ВидКартинки.Пустая Тогда
			ПолноеИмяВызываемогоОМД = КоллекцияКартинок[XMLСтрока(ПроверяемоеПоле.ПолучитьДвоичныеДанные())];
			Если ПолноеИмяВызываемогоОМД <> Неопределено Тогда
				ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВызываемыеПодсистемы;
	
КонецФункции

Процедура ЗаполнитьВызываемыеВМетаданныхПодсистемы(ВызываемыеПодсистемы, ПринадлежностьОбъектаПодсистеме, ПолноеИмяВызываемогоОМД, ИмяРеквизита)
	
	ПолноеИмяПоЧастям = СтрРазделить(ПолноеИмяВызываемогоОМД, ".", Ложь);
	Если ПолноеИмяПоЧастям.Количество() > 2 Тогда
		ПолноеИмяВызываемогоОМД = ПолноеИмяПоЧастям[0] + "." + ПолноеИмяПоЧастям[1];
	КонецЕсли;
	
	СтрокаВызываемаяПодсистема = ПринадлежностьОбъектаПодсистеме.Найти(ПолноеИмяВызываемогоОМД, "ПолноеИмяОМД");
	Если СтрокаВызываемаяПодсистема <> Неопределено Тогда
		СтрокаВызываемыеПодсистемы = ВызываемыеПодсистемы.Добавить();
		СтрокаВызываемыеПодсистемы.ДанныеПодсистемы = СтрокаВызываемаяПодсистема;
		СтрокаВызываемыеПодсистемы.ВызываемыйОбъект = ПолноеИмяВызываемогоОМД;
		СтрокаВызываемыеПодсистемы.ИмяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
КонецПроцедуры

Функция ГрупповойВыборТипов(МассивТиповОбъекта)
	
	КоличествоВыбранныхОбъектов = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из МассивТиповОбъекта Цикл
		
		Если ЭлементМассива = Тип("КонстантыНабор") Тогда
			Возврат Истина;
		КонецЕсли;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ЭлементМассива);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданныхПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ВидОбъекта = СтрРазделить(ОбъектМетаданныхПолноеИмя, ".", Ложь)[0];
		Если ВидОбъекта = "Справочник" Тогда
			ВидОбъекта = "Справочники";
		ИначеЕсли ВидОбъекта = "Документ" Тогда
			ВидОбъекта = "Документы";
		ИначеЕсли ВидОбъекта = "Перечисление" Тогда
			ВидОбъекта = "Перечисления";
		ИначеЕсли ВидОбъекта = "ПланВидовХарактеристик" Тогда
			ВидОбъекта = "ПланыВидовХарактеристик";
		ИначеЕсли ВидОбъекта = "ПланСчетов" Тогда
			ВидОбъекта = "ПланыСчетов";
		ИначеЕсли ВидОбъекта = "ПланВидовРасчета" Тогда
			ВидОбъекта = "ПланыВидовРасчета";
		ИначеЕсли ВидОбъекта = "БизнесПроцесс" Тогда
			ВидОбъекта = "БизнесПроцессы";
		ИначеЕсли ВидОбъекта = "Задача" Тогда
			ВидОбъекта = "Задачи";
		ИначеЕсли ВидОбъекта = "ПланОбмена" Тогда
			ВидОбъекта = "ПланыОбмена";
		КонецЕсли;
		
		Количество = КоличествоВыбранныхОбъектов[ВидОбъекта];
		Если Количество = Неопределено Тогда
			КоличествоВыбранныхОбъектов.Вставить(ВидОбъекта, 1);
		Иначе
			КоличествоВыбранныхОбъектов.Вставить(ВидОбъекта, Количество+1);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаСоответствия Из КоличествоВыбранныхОбъектов Цикл
		
		Если СтрокаСоответствия.Значение = МенеджерКлассаПоИмени(СтрокаСоответствия.Ключ).ТипВсеСсылки().Типы().Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция МенеджерКлассаПоИмени(КлассОМ)
	
	Если      ВРег(КлассОМ) = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
		
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

Процедура ВыгрузитьКонфигурациюВXML()
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("ПроверкаПередСборкой");
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	СоздатьКаталог(КаталогВыгрузки);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогВыгрузки + "\1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки закройте конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = КаталогВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяПользователя());
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить();
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(КаталогВыгрузки);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
	КаталогВыгрузкиМодулей = КаталогВыгрузки;
	
КонецПроцедуры

Процедура ОчиститьКаталогДляВыгрузки()
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьНачалоИКонецВызова(СтрокаТекста, СтрокаПоиска, НоваяСтрокаТекста, НачалоВызова, КонецВызова, ОпорныйСимвол)
	
	НачалоВызова = СтрНайти(СтрокаТекста, СтрокаПоиска);
	Если НачалоВызова = 0 Тогда
		ПоискПоПолномуИмени = Ложь;
		Возврат;
	КонецЕсли;
	
	ОпорныйСимвол = Сред(СтрокаТекста, НачалоВызова-1,1);
	
	НоваяСтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - НачалоВызова + 1);
	Если СтрНайти(СтрокаПоиска, "Метаданные.") > 0
		Или СтрНайти(СтрокаПоиска, "БиблиотекаКартинок.") > 0
		Или СтрНайти(СтрокаПоиска, "ЦветаСтиля.") > 0
		Или СтрНайти(СтрокаПоиска, "ШрифтыСтиля.") > 0
		Или СтрНайти(СтрокаПоиска, "ПараметрыСеанса.") > 0
		Или СтрНайти(СтрокаПоиска, "Перечисления.") > 0
		Или ПоискПоПолномуИмени Тогда
		КонецВызова = СтрДлина(СтрокаПоиска);
	Иначе
		Если СтрЗаканчиваетсяНа(СтрокаПоиска, "[") Тогда
			КонецВызова = СтрНайти(НоваяСтрокаТекста, "]");
		Иначе
			КонецВызова = СтрНайти(НоваяСтрокаТекста, "(");
			КонецВызова2 = СтрНайти(НоваяСтрокаТекста, ".", , СтрДлина(СтрокаПоиска) + 1);
			КонецВызова3 = СтрНайти(НоваяСтрокаТекста, Символы.ПС, , СтрДлина(СтрокаПоиска) + 1);
			КонецВызова = Мин(КонецВызова, КонецВызова2, КонецВызова3);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискПоПолномуИмени Тогда
		ОпорныйСимвол = Сред(НоваяСтрокаТекста, СтрДлина(СтрокаПоиска)+1,1);
		ПоискПоПолномуИмени = Ложь;
	КонецЕсли;
	
	КодСимвола = КодСимвола(Сред(НоваяСтрокаТекста, СтрДлина(СтрокаПоиска)+1,1));
	Если СтрНайти(СтрокаПоиска, "БиблиотекаКартинок.") > 0
		И (КодСимвола >= 1040 И КодСимвола <= 1103
			Или КодСимвола >= 48 И КодСимвола <= 57) Тогда
		КонецВызова = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКомментарий(СтрокаТекста, НачалоВызова, ПоискПоПолномуИмени = Ложь)
	
	Отступ = 1;
	Пока СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), Символы.ПС) = 0 Цикл
		Отступ = Отступ + 1;
	КонецЦикла;
	
	Если СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), "//") > 0
		Или (Не ПоискПоПолномуИмени И СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), "|") > 0) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоСтрока(СтрокаТекста, НачалоВызова)
	
	Отступ = 1;
	Пока СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), Символы.ПС) = 0 Цикл
		Отступ = Отступ + 1;
	КонецЦикла;
	
	Если СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), "НСтр") > 0
		И СтрЧислоВхождений(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), "'") <> 2 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВырезатьДемоПримерыИзКода(СтрокаТекста)
	
	ПризнакРедактирования = СтрНайти(СтрокаТекста, "// _Демо начало примера");
	Пока ПризнакРедактирования > 0 Цикл
		
		ПозицияПоследнегоСимволаПримера = СтрНайти(СтрокаТекста, "// _Демо конец примера") + СтрДлина("// _Демо конец примера");
		СтрокаТекста = Лев(СтрокаТекста,ПризнакРедактирования-1) + Сред(СтрокаТекста,ПозицияПоследнегоСимволаПримера);
		ПризнакРедактирования = СтрНайти(СтрокаТекста, "// _Демо начало примера");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыСвойств()
	
	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ОбъектМетаданных:");
	ВидыСвойств.Добавить("Свойства:");
	ВидыСвойств.Добавить("Реквизиты:");
	ВидыСвойств.Добавить("РеквизитыАдресации:");
	ВидыСвойств.Добавить("ТабличныеЧасти:");
	ВидыСвойств.Добавить("Команды:");
	ВидыСвойств.Добавить("Характеристики:");
	ВидыСвойств.Добавить("ПризнакиУчета:");
	ВидыСвойств.Добавить("ПризнакУчетаСубконтоПланаСчетов:");
	ВидыСвойств.Добавить("Измерения:");
	ВидыСвойств.Добавить("Ресурсы:");
	
КонецПроцедуры

Функция НачалоНовогоБлока(ТекстСтроки)
	
	Если СтрНайти(ТекстСтроки, "ОбъектМетаданных: ") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ВидыСвойств.Найти(ТекстСтроки) <> Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапуска()
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	КаталогИБ = КаталогИнформационнойБазы(СтрокаСоединенияИнформационнойБазы());
	
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	
	Если ФайловаяБаза = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данный отчет предназначен для использования с файловой базой'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьСписокИсключений()
	
	Для Каждого СтрокаИсключения Из ТаблицаИсключений Цикл
		ПараметрыОтбора = Новый Структура();
		
		Если СтрокаИсключения.ИсключаемыйОбъект <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ВызывающийОбъект", СтрокаИсключения.ИсключаемыйОбъект);
			НайденныеСтроки = СвязиМеждуОбъектамиПодсистем.НайтиСтроки(ПараметрыОтбора);
		Иначе
			ПараметрыОтбора.Вставить("ВызывающаяПодсистема", СтрокаИсключения.ВызывающаяПодсистема);
			ПараметрыОтбора.Вставить("ВызываемаяПодсистема", СтрокаИсключения.ВызываемаяПодсистема);
			ПараметрыОтбора.Вставить("ВызывающийОбъект", СтрокаИсключения.ВызывающийОбъект);
			НайденныеСтроки = СвязиМеждуОбъектамиПодсистем.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СвязиМеждуОбъектамиПодсистем.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НомерСтроки(СтрокаТекста, НачалоВызова, НомерСтроки)
	
	НомерСтроки = НомерСтроки + СтрЧислоВхождений(Лев(СтрокаТекста, НачалоВызова), Символы.ПС) + ?(НомерСтроки = 0, 1, 0);
	
	Возврат НомерСтроки;
	
КонецФункции

Процедура ЗаполнитьПроверяемыеНаАвтономностьОбъекты()
	
	ПроверяемыеНаАвтономностьОбъекты = Новый Массив;
	
	ТабличныйДокумент = Отчеты.ЗависимостиПодсистем.ПолучитьМакет("ПроверяемыеОбработки");
	
	ТекстСтроки = Неопределено;
	НомерСтроки   = 0;
	
	Пока ТекстСтроки <> "КонецТаблицы" Цикл
		
		ТекстСтроки = ТабличныйДокумент.Область(НомерСтроки,1).Текст;
		Если ПустаяСтрока(ТекстСтроки) Или ТекстСтроки = "Проверять следующие обработки/отчеты на автономность:"
			Или ТекстСтроки = "КонецТаблицы" Тогда
			НомерСтроки = НомерСтроки+1;
			Продолжить;
		КонецЕсли;
		
		ПроверяемыеНаАвтономностьОбъекты.Добавить(ТекстСтроки);
		
		НомерСтроки = НомерСтроки+1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверки возможности формирования отчета.

Функция ОткрытКонфигуратор()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолноеИмяПоИмениМодуля(ПолныйПутьСИменем, ИмяФайлаСРасширением)
	ПутьКФорме = СтрЗаменить(ПолныйПутьСИменем, КаталогВыгрузкиМодулей + ПолучитьРазделительПути(), "");
	ИмяМодуляЧастями = СтрРазделить(ПутьКФорме, ПолучитьРазделительПути(), Ложь);
	
	ПолноеИмяОбъекта = "";
	ПолноеИмяМодуля  = "";
	Шаг = 0;
	Для Каждого ЧастьПути Из ИмяМодуляЧастями Цикл
		Шаг = Шаг + 1;
		Если ВРег(ЧастьПути) = "EXT" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧастьПути = ИмяФайлаСРасширением Тогда
			ЧастьПути = СтрРазделить(ЧастьПути, ".")[0];
		КонецЕсли;
		
		ЧастьПутиПреобразованная = СоответствиеРусскихИАнглийскихИмен()[ЧастьПути];
		Если ЧастьПутиПреобразованная = Неопределено Тогда
			ЧастьПутиПреобразованная = ЧастьПути;
		КонецЕсли;
		
		Если Шаг < 3 Тогда
			ПолноеИмяОбъекта = ?(ПолноеИмяОбъекта = "",
				                 ЧастьПутиПреобразованная,
				                 ПолноеИмяОбъекта + "." + ЧастьПутиПреобразованная);
		КонецЕсли;
		
		ПолноеИмяМодуля = ?(ПолноеИмяМодуля = "",
			                 ЧастьПутиПреобразованная,
			                 ПолноеИмяМодуля + "." + ЧастьПутиПреобразованная);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	Результат.Вставить("ПолноеИмяМодуля", ПолноеИмяМодуля);
	
	Возврат Результат;
КонецФункции

Функция СоответствиеРусскихИАнглийскихИмен()
	Результат = Новый Соответствие;
	
	// Виды объектов метаданных.
	Результат.Вставить("AccountingRegister", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegister", "РегистрНакопления");
	Результат.Вставить("BusinessProcess", "БизнесПроцесс");
	Результат.Вставить("CalculationRegister", "РегистрРасчета");
	Результат.Вставить("Catalog", "Справочник");
	Результат.Вставить("ChartOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroup", "ГруппаКоманд");
	Результат.Вставить("CommonAttribute", "ОбщийРеквизит");
	Результат.Вставить("CommonCommand", "ОбщаяКоманда");
	Результат.Вставить("CommonForm", "ОбщаяФорма");
	Результат.Вставить("CommonModule", "ОбщийМодуль");
	Результат.Вставить("CommonPicture", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplate", "ОбщийМакет");
	Результат.Вставить("Configuration", "Конфигурация");
	Результат.Вставить("Constant", "Константа");
	Результат.Вставить("DataProcessor", "Обработка");
	Результат.Вставить("DefinedType", "ОпределяемыйТип");
	Результат.Вставить("Document", "Документ");
	Результат.Вставить("DocumentJournal", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enum", "Перечисление");
	Результат.Вставить("EventSubscription", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlan", "ПланОбмена");
	Результат.Вставить("FilterCriterion", "КритерийОтбора");
	Результат.Вставить("FunctionalOption", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameter", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegister", "РегистрСведений");
	Результат.Вставить("Language", "Язык");
	Результат.Вставить("Report", "Отчет");
	Результат.Вставить("Role", "Роль");
	Результат.Вставить("ScheduledJob", "РегламентноеЗадание");
	Результат.Вставить("Sequence", "Последовательность");
	Результат.Вставить("SessionParameter", "ПараметрСеанса");
	Результат.Вставить("SettingsStorage", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItem", "ЭлементСтиля");
	Результат.Вставить("Subsystem", "Подсистема");
	Результат.Вставить("Task", "Задача");
	Результат.Вставить("WebService", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackage", "ПакетXDTO");
	
	// Виды объектов метаданных (во множественном числе).
	Результат.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegisters", "РегистрНакопления");
	Результат.Вставить("BusinessProcesses", "БизнесПроцесс");
	Результат.Вставить("CalculationRegisters", "РегистрРасчета");
	Результат.Вставить("Catalogs", "Справочник");
	Результат.Вставить("ChartsOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroups", "ГруппаКоманд");
	Результат.Вставить("CommonAttributes", "ОбщийРеквизит");
	Результат.Вставить("CommonCommands", "ОбщаяКоманда");
	Результат.Вставить("CommonForms", "ОбщаяФорма");
	Результат.Вставить("CommonModules", "ОбщийМодуль");
	Результат.Вставить("CommonPictures", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplates", "ОбщийМакет");
	Результат.Вставить("Configurations", "Конфигурация"); // Не используется.
	Результат.Вставить("Constants", "Константа");
	Результат.Вставить("DataProcessors", "Обработка");
	Результат.Вставить("DefinedTypes", "ОпределяемыйТип");
	Результат.Вставить("Documents", "Документ");
	Результат.Вставить("DocumentJournals", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enums", "Перечисление");
	Результат.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlans", "ПланОбмена");
	Результат.Вставить("FilterCriteria", "КритерийОтбора");
	Результат.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegisters", "РегистрСведений");
	Результат.Вставить("Languages", "Язык");
	Результат.Вставить("Reports", "Отчет");
	Результат.Вставить("Roles", "Роль");
	Результат.Вставить("ScheduledJobs", "РегламентноеЗадание");
	Результат.Вставить("Sequences", "Последовательность");
	Результат.Вставить("SessionParameters", "ПараметрСеанса");
	Результат.Вставить("SettingsStorages", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItems", "ЭлементСтиля");
	Результат.Вставить("Subsystems", "Подсистема");
	Результат.Вставить("Tasks", "Задача");
	Результат.Вставить("WebServices", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackages", "ПакетXDTO");
	
	// Типы вложенных объектов метаданных.
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Form", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Template", "Макет");
	Результат.Вставить("Command", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculation", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	// Типы вложенных объектов метаданных (во множественном числе).
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Forms", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Templates", "Макет");
	Результат.Вставить("Commands", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculations", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//   ТаблицаЗначений:
//   * ВызывающаяПодсистема 
//   * ВызывающийОбъект 
//   * ВызываемаяПодсистема 
//   * ВызываемыйОбъект 
//   * МестоВызова 
//
Функция ВыполнитьСозданиеТаблиц()
	
	СвязиМеждуОбъектамиПодсистем = Новый ТаблицаЗначений;
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызывающаяПодсистема");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызывающийОбъект");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызываемаяПодсистема");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("ВызываемыйОбъект");
	СвязиМеждуОбъектамиПодсистем.Колонки.Добавить("МестоВызова");
	Возврат СвязиМеждуОбъектамиПодсистем;
	
КонецФункции

Функция ПолучитьСтруктуруПоискаВызовов(СтрокаТекста, ВызывающаяПодсистема, СтрокаВызывающаяПодсистема, ПринадлежностьОбъектаПодсистеме,
	ПроверкаАвтономногоОбъекта, ПолноеИмяВызывающегоОбъекта, ИмяРеквизита = Неопределено)
	
	СтруктураПоискаВызовов = Новый Структура;
	СтруктураПоискаВызовов.Вставить("СтрокаТекста",						СтрокаТекста);
	СтруктураПоискаВызовов.Вставить("ВызывающаяПодсистема",				ВызывающаяПодсистема);
	СтруктураПоискаВызовов.Вставить("СтрокаВызывающаяПодсистема",		СтрокаВызывающаяПодсистема);
	СтруктураПоискаВызовов.Вставить("ПринадлежностьОбъектаПодсистеме",	ПринадлежностьОбъектаПодсистеме);
	СтруктураПоискаВызовов.Вставить("ПроверкаАвтономногоОбъекта",		ПроверкаАвтономногоОбъекта);
	СтруктураПоискаВызовов.Вставить("ПолноеИмяВызывающегоОбъекта",		ПолноеИмяВызывающегоОбъекта);
	СтруктураПоискаВызовов.Вставить("ИмяРеквизита",						ИмяРеквизита);
	
	Возврат СтруктураПоискаВызовов;
	
КонецФункции

#Область РаботаСDOM

Функция ПолучитьТаблицуТекстовЗапросовИзДинамическихСписков(ПолноеИмяФайла)
	
	ТаблицаТекстовЗапросов = Новый ТаблицаЗначений;
	ТаблицаТекстовЗапросов.Колонки.Добавить("Реквизит");
	ТаблицаТекстовЗапросов.Колонки.Добавить("ТекстЗапроса");
	
	МассивВыраженийПоиска = Новый Массив;
	МассивВыраженийПоиска.Добавить("//xmlns:Attributes/xmlns:Attribute/xmlns:Settings/xmlns:QueryText");
	
	ДокументDOM = ДокументDOM(ПолноеИмяФайла);
	
	Для Каждого ВыражениеПоиска Из МассивВыраженийПоиска Цикл
		
		РезультатXPath = ВычислитьВыражениеXPath(ВыражениеПоиска, ДокументDOM);
		Пока Истина Цикл
			
			ЭлементDOMТекстЗапроса = РезультатXPath.ПолучитьСледующий();
			Если ЭлементDOMТекстЗапроса = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ТекстЗапроса = ЭлементDOMТекстЗапроса.ТекстовоеСодержимое;
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицыЗапросов = ТаблицаТекстовЗапросов.Добавить();
			НоваяСтрокаТаблицыЗапросов.Реквизит = "";
			НоваяСтрокаТаблицыЗапросов.ТекстЗапроса = ТекстЗапроса;
			
			ЭлементDOMНастройки = ЭлементDOMТекстЗапроса.РодительскийУзел;
			Если ЭлементDOMНастройки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементDOMРеквизит = ЭлементDOMНастройки.РодительскийУзел;
			Если ЭлементDOMРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицыЗапросов.Реквизит = ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOMРеквизит);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТекстовЗапросов;
	
КонецФункции

Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM, ЭлементDOM = Неопределено)
	
	Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	УзелКонтекста = ?(ЭлементDOM = Неопределено, ДокументDOM, ЭлементDOM);
	Попытка
		РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(Выражение, УзелКонтекста, Разыменователь);
	Исключение
		РезультатXPath = Неопределено;
	КонецПопытки;
	
	Возврат РезультатXPath;
	
КонецФункции

Функция ПолучитьЭлементDOMПоВыражениюXPath(Выражение, ДокументDOM, ЭлементDOM = Неопределено)
	
	РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM, ЭлементDOM);
	Возврат РезультатXPath.ПолучитьСледующий();
	
КонецФункции

Функция ПолучитьЗначениеЭлементаDOMПоВыражениюXPath(Выражение, ДокументDOM, ЭлементDOM = Неопределено, ЗначениеПоУмолчанию = "")
	
	ЭлементDOMРезультат = ПолучитьЭлементDOMПоВыражениюXPath(Выражение, ДокументDOM, ЭлементDOM);
	
	// Если такого выражения нет, то возвращаем значение по умолчанию.
	Если ЭлементDOMРезультат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ЭлементDOMРезультат.ТекстовоеСодержимое;
	
КонецФункции

Функция ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOM, Префикс = "xmlns", ТипПолучения = "Атрибут")
	
	Имя = "";
	Если ТипПолучения = "Атрибут" Тогда
		Имя = ЭлементDOM.ПолучитьАтрибут("name");
	ИначеЕсли ТипПолучения = "Узел" Тогда
		Имя = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath(Префикс + ":Name", ДокументDOM, ЭлементDOM);
	КонецЕсли;
	
	Возврат Строка(Имя);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли