///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для вызова из дополнительной печатной формы.

// Формирует печатную форму документа Счет на оплату покупателю с использованием макета
// в формате офисного документа Office Open XML.
//
// Параметры:
//  ДокументСсылка      - ЛюбаяСсылка - объект, по которому требуется сформировать печатную форму.
//  МакетИДанныеОбъекта - Соответствие - коллекция ссылок на объекты и их данные.
//  ИмяМакета           - Строка - наименование макета для печати.
//
// Возвращаемое значение:
//  Строка - адрес хранилища, куда помещается сформированный файл.
//
Функция НапечататьСчетНаОплатуПокупателю(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета) Экспорт
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗакрытьОкноПечатнойФормы = Ложь;
	Попытка
		ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);
		АдресХранилищаПечатнойФормы = "";
		Если ПечатнаяФорма = Неопределено Тогда
			УправлениеПечатью.ОчиститьСсылки(Макет);
			Возврат "";
		КонецЕсли;
		
		// Вывод колонтитулов документа.
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
		
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
		УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область);
		
		// Вывод верхней части документа - обычная область с параметрами.
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
		
		// Вывод коллекции данных из информационной базы в виде таблицы.
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
		УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
		УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
		УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
		
		// Вывод коллекции данных из информационной базы в виде нумерованного списка.
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
		УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
		УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
		
		// Вывод коллекции данных из информационной базы в виде списка.
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
		УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
		УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
		
		// Вывод нижней части документа - обычная область с параметрами.
		Область = УправлениеПечатью.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
		
		АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
		Возврат "";
	КонецПопытки;
	
	УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	УправлениеПечатью.ОчиститьСсылки(Макет);
	
	Возврат АдресХранилищаПечатнойФормы;
	
КонецФункции

// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//  КодЯзыка - Строка - язык, на котором требуется сформировать печатную форму.
//                      Состоит из кода языка по ISO 639-1 и, опционально, кода страны по ISO 3166-1, разделенных
//                      символом подчеркивания. Примеры: "en", "en_US", "en_GB", "ru", "ru_RU".
//                      Значение по умолчанию - язык конфигурации.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ИмяМакета = "Счет", ВыводитьПлатежныеРеквизиты = Истина, КодЯзыка = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	СчетНаОплатуПокупателю.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплатуПокупателю.Дата КАК ДатаДокумента,
	|	СчетНаОплатуПокупателю.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.Товары.(
	|		Номенклатура.Наименование КАК Товар,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Количество КАК Количество,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура
	|	) КАК Товары,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскийСчетКонтрагента.НомерСчета КАК ПолучательНомерСчета,
	|	_ДемоОрганизации.Директор КАК Директор,
	|	_ДемоОрганизации.ГлавныйБухгалтер КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоБанковскиеСчета КАК БанковскийСчетКонтрагента
	|		ПО СчетНаОплатуПокупателю.БанковскийСчет = БанковскийСчетКонтрагента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО СчетНаОплатуПокупателю.ВалютаДокумента = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоОрганизации КАК _ДемоОрганизации
	|		ПО СчетНаОплатуПокупателю.Организация = _ДемоОрганизации.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ", КодЯзыка);
	
	Пока Шапка.Следующий() Цикл
		КонтактнаяИнформация = КонтактнаяИнформацияДляСчета(Шапка.Организация, Шапка.Дата, КодЯзыка);
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ИНН", "0000000000");
		ДанныеПечати.Вставить("КПП", "000000000");
		
		ДанныеПечати.Вставить("Дата", Формат(Шапка.Дата, "Л=" + КодЯзыка + "; ДЛФ=DD"));
		ДанныеПечати.Вставить("Номер", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер));
		
		Если ПустаяСтрока(Шапка.БИКБанкаДляРасчетов) Тогда
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанка) + " " + СокрЛП(Шапка.ГородБанка));
			ДанныеПечати.Вставить("ПредставлениеПоставщика", СокрЛП(Шапка.ПолучательНаименованиеПолное));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанк));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.ПолучательНомерСчета));
		Иначе
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанкаДляРасчетов) + " " 
				+ СокрЛП(Шапка.ГородБанкаДляРасчетов));
				ДанныеПечати.Вставить("ПредставлениеПоставщика", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 р/с %2 в %3'"),
				СокрЛП(Шапка.ПолучательНаименованиеПолное),
				СокрЛП(Шапка.ПолучательНомерСчета),
				СокрЛП(Шапка.ГородБанка)));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
		КонецЕсли;	
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(
			Шапка, ?(ИмяМакета = "Счет", 
			НСтр("ru = 'Демо: Счет на оплату'"),
			НСтр("ru = 'Демо: Заказ покупателя'")));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		// Локализация
		СведенияОбОрганизации = ОрганизацииСервер.СведенияОбОрганизации(Шапка.Организация, , Шапка.Дата, КодЯзыка);
		ДанныеПечати.Вставить("Поставщик", СведенияОбОрганизации.НаименованиеДляПечати + " " + КонтактнаяИнформация.ЮридическийАдрес);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", СведенияОбОрганизации.НаименованиеДляПечати + " " + КонтактнаяИнформация.ЮридическийАдрес);
		// Конец Локализация
		ДанныеПечати.Вставить("Получатель", Шапка.Контрагент );
		
		ПредставлениеПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Контрагент, "НаименованиеПолное", , КодЯзыка);
		ДанныеПечати.Вставить("ПредставлениеПолучателя", ?(ЗначениеЗаполнено(ПредставлениеПолучателя), ПредставлениеПолучателя, Шапка.Контрагент));
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		Номенклатура = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Номенклатура, "НаименованиеДляПечати", , КодЯзыка);
		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			НаименованиеДляПечати = ЗначенияРеквизитов[СтрокаТаблицы.Номенклатура];
			Если ЗначениеЗаполнено(НаименованиеДляПечати) Тогда
				СтрокаТаблицы.Товар = НаименованиеДляПечати;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПечати.Вставить("Всего", ТаблицаТовары.Итог("Сумма"));
		ДанныеПечати.Вставить("ВсегоНДС", ТаблицаТовары.Итог("СуммаНДС"));
		
		ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
		ДанныеПечати.Вставить("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеПечати.ИтоговаяСумма, Шапка.ВалютаДокумента, , КодЯзыка));
			
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Всего наименований %1, на сумму %2'"),
				Формат(ТаблицаТовары.Количество(), "ЧН=0; ЧГ=0"),
				ДанныеПечати.СуммаПрописью));
			
		ДанныеПечати.Вставить("ВсегоНаименований", ТаблицаТовары.Количество());
		
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
		
		// Локализация
		ДанныеПечати.Вставить("ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Шапка.Директор)));
		ДанныеПечати.Вставить("ФИОБухгалтера", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Шапка.ГлавныйБухгалтер)));
		// Конец Локализация
		
		МассивОбластейМакета = Новый Массив;
		
		Если ВыводитьПлатежныеРеквизиты Тогда
			МассивОбластейМакета.Добавить("ПлатежныеРеквизиты");
		КонецЕсли;
		
		Если ИмяМакета = "Счет" И ВыводитьПлатежныеРеквизиты Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСчета");
		Иначе
			МассивОбластейМакета.Добавить("ЗаголовокЗаказа");
		КонецЕсли;
		
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		Если Шапка.СуммаВключаетНДС Тогда
			МассивОбластейМакета.Добавить("ИтогоНДСВСумме");
		Иначе
			МассивОбластейМакета.Добавить("ИтогоНДССверху");
		КонецЕсли;
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить(?(ИмяМакета = "Счет", "ПодвалСчета", "ПодвалЗаказа"));
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Для демонстрации обращения к внешней печатной форме.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  КодЯзыка - Строка - язык, на котором требуется сформировать печатную форму.
//                      Состоит из кода языка по ISO 639-1 и, опционально, кода страны по ISO 3166-1, разделенных
//                      символом подчеркивания. Примеры: "en", "en_US", "en_GB", "ru", "ru_RU".
//                      Значение по умолчанию - язык конфигурации.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьГарантийногоПисьма(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	_ДемоСчетНаОплатуПокупателю.Номер КАК Номер,
	|	_ДемоСчетНаОплатуПокупателю.Дата КАК Дата,
	|	_ДемоСчетНаОплатуПокупателю.Организация КАК Организация,
	|	_ДемоСчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.СуммаОплаты КАК СуммаОплаты,
	|	ДОБАВИТЬКДАТЕ(_ДемоСчетНаОплатуПокупателю.Дата, ДЕНЬ, 5) КАК СрокОплаты
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	_ДемоСчетНаОплатуПокупателю.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ДанныеПечати = Запрос.Выполнить().Выгрузить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_ГарантийноеПисьмо";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_ГарантийноеПисьмо", КодЯзыка);
	
	ПредставленияЗначенийСвойств = УправлениеСвойствами.ПредставленияЗначенийСвойств(МассивОбъектов, КодЯзыка);
	
	Для Каждого Документ Из ДанныеПечати Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗначенияПараметров = Новый Структура;
		ЗначенияПараметров.Вставить("Дата", Формат(Документ.Дата, ?(ЗначениеЗаполнено(КодЯзыка), "Л=" + КодЯзыка + ";", "") + "ДЛФ=DD"));
		ЗначенияПараметров.Вставить("Номер", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер));
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстПисьма");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.Заполнить(ЗначенияПараметров);
		ОбластьМакета.Параметры.Заполнить(ПредставленияЗначенийСвойств[Документ.Ссылка]);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Для демонстрации печати QR-кода.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьКвитанции(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДокументов = ДанныеДокументов(МассивОбъектов);
	
	МакетПП = УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_Квитанция");

	ПервыйДокумент = Истина;
	Для Каждого РеквизитыПлатежа Из ДанныеДокументов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПервыйДокумент = Ложь;
		ОбластьПечатается = МакетПП.ПолучитьОбласть("Печатается");
		ЗаполнитьЗначенияСвойств(ОбластьПечатается.Параметры, РеквизитыПлатежа);
		ФИОПлательщика = РеквизитыПлатежа.ФамилияПлательщика + " " 
						+ РеквизитыПлатежа.ИмяПлательщика + " " 
						+ РеквизитыПлатежа.ОтчествоПлательщика;
		ОбластьПечатается.Параметры.ФИОПлательщика = ФИОПлательщика;
		Сумма = Окр(РеквизитыПлатежа.СуммаЧислом);
		ОбластьПечатается.Параметры.Сумма = Сумма;
		СуммаКопейки = (РеквизитыПлатежа.СуммаЧислом - Сумма) * 100;
		ОбластьПечатается.Параметры.СуммаКопейки = СуммаКопейки;
		
		QRСтрока = Неопределено;
		// Локализация
		QRСтрока = УправлениеПечатьюРФ.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
		// Конец Локализация
		
		Если ПустаяСтрока(QRСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
			ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(QRСтрока, 1, 120);
		
		Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			
			Шаблон = НСтр("ru = 'Не удалось сформировать QR-код для документа %1.
					 |Технические подробности см. в журнале регистрации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, РеквизитыПлатежа.Ссылка);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		
		ОбластьПечатается.Рисунки.QRКод.Картинка = КартинкаQRКода;
		
		ТабличныйДокумент.Вывести(ОбластьПечатается);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерПервойСтроки, ОбъектыПечати, РеквизитыПлатежа.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Добавляет сведения для отправки по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - параметры оправки по электронной почте;
//  МассивОбъектов - Массив - объекты, по которым сформированы табличные документы;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_ДемоСчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.Партнер КАК Партнер
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	_ДемоСчетНаОплатуПокупателю.Контрагент,
	|	_ДемоСчетНаОплатуПокупателю.Партнер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СведенияОПокупателе = Неопределено;
	Если РезультатЗапроса.Количество() = 1 Тогда
		СведенияОПокупателе = РезультатЗапроса[0];
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_ДемоСчетНаОплатуПокупателю.Номер,
	|	_ДемоСчетНаОплатуПокупателю.Дата,
	|	_ДемоСчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК _ДемоСчетНаОплатуПокупателю
	|ГДЕ
	|	_ДемоСчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		ПараметрыОтправки.Текст = НСтр("ru = 'Файл во вложении.'");
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
		ПараметрыОтправки.Текст = НСтр("ru = 'Файлы во вложении.'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Пока ВыборкаОбъектов.Следующий() Цикл
			ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС + СформироватьЗаголовокДокумента(ВыборкаОбъектов, НазваниеДокумента(ПечатнаяФорма.ИмяМакета));
		КонецЦикла;
	КонецЦикла;
	
	// Получатель заполняется только в случае, если он один для всех документов.
	Если СведенияОПокупателе <> Неопределено Тогда
		ОбъектыКонтактнойИнформации = Новый Массив;
		ОбъектыКонтактнойИнформации.Добавить(СведенияОПокупателе.Партнер);
		ОбъектыКонтактнойИнформации.Добавить(СведенияОПокупателе.Контрагент);
		
		ТипыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		АдресаПартнера = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыКонтактнойИнформации, ТипыКонтактнойИнформации);
		
		Получатели = Новый Массив;
		Для Каждого Адрес Из АдресаПартнера Цикл
			ПредставлениеАдреса = Адрес.Представление;
			Если Не ПустаяСтрока(ПредставлениеАдреса) Тогда
				ПредставлениеПолучателя = Строка(Адрес.Объект);
				Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактное лицо %1'"), Адрес.Объект);
				
				ОписаниеПолучателя = СоздатьОписаниеПолучателя();
				ОписаниеПолучателя.Адрес = ПредставлениеАдреса;
				ОписаниеПолучателя.Представление = ПредставлениеПолучателя;
				ОписаниеПолучателя.ИсточникКонтактнойИнформации = Адрес.Объект;
				ОписаниеПолучателя.ВидПочтовогоАдреса = Строка(Адрес.Вид);
				ОписаниеПолучателя.Пояснение = Пояснение;
				
				Получатели.Добавить(ОписаниеПолучателя);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Получатели.Количество() = 0 Тогда
			ОписаниеПолучателя = СоздатьОписаниеПолучателя();
			ОписаниеПолучателя.ИсточникКонтактнойИнформации = СведенияОПокупателе.Партнер;
			Получатели.Добавить(ОписаниеПолучателя);
		КонецЕсли;
		
		ПараметрыОтправки.Получатель = Получатели;
	КонецЕсли;
		
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// СписокНеоднозначностей содержит список неоднозначных значений, для которых в ИБ имеется несколько
// подходящих вариантов.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//       Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.Штрихкод КАК СТРОКА(13)) КАК Штрихкод,
		|	ДанныеДляСопоставления.Номенклатура КАК Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_ДемоНоменклатура.Ссылка КАК Ссылка,
		|	_ДемоНоменклатура.Штрихкод КАК Штрихкод,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
		|		ПО (_ДемоНоменклатура.Штрихкод = ДанныеДляСопоставления.Штрихкод)
		|			И (ДанныеДляСопоставления.Штрихкод <> """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.Номенклатура КАК Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|		ПО ДанныеДляСопоставления.Идентификатор = СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор
		|ГДЕ СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(_ДемоНоменклатура.Ссылка) КАК Ссылка,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор КАК Идентификатор,
		|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
		|		ПО (_ДемоНоменклатура.Наименование = (ВЫРАЗИТЬ(ДанныеДляСопоставленияПоНаименованию.Номенклатура КАК СТРОКА(500))))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставленнаяНоменклатураПоШтрихкоду.Ссылка),
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор,
		|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор)
		|ИЗ
		|	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|
		|СГРУППИРОВАТЬ ПО
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
	
	ТаблицаНоменклатура = РезультатыЗапросов[3].Выгрузить(); // ТаблицаЗначений
	ФункциональнаяОпцияХарактеристика = ?(ЗагружаемыеДанные.Колонки.Найти("Характеристика") <> Неопределено, Истина, Ложь);
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Товар = Товары.Добавить();
		Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		Товар.Количество = СтрокаТаблицы.Количество;
		Товар.Цена = СтрокаТаблицы.Цена;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Товар.Номенклатура = СтрокаНоменклатура.Ссылка; 
				Если ФункциональнаяОпцияХарактеристика Тогда
					Товар.Характеристика = Справочники._ДемоХарактеристики.НайтиПоНаименованию(СтрокаТаблицы.Характеристика, 
						Истина,, Товар.Номенклатура);
				КонецЕсли;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор;
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   СписокНеоднозначностей    - Массив из СправочникСсылка._ДемоНоменклатура - массив для заполнения с неоднозначными данными.
//   ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность.
//   ЗагружаемыеЗначенияСтрока - Строка - загружаемые данные на основании которых возникла неоднозначность.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		Запрос = Новый Запрос;
		
		ТекстГде = "";
		Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Номенклатура) Тогда
			ТекстГде = "ГДЕ _ДемоНоменклатура.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Штрихкод) Тогда
			Если ЗначениеЗаполнено(ТекстГде) Тогда
				ТекстГде = ТекстГде + " ИЛИ _ДемоНоменклатура.Штрихкод = &Штрихкод";
			Иначе
				ТекстГде = "ГДЕ _ДемоНоменклатура.Штрихкод = &Штрихкод";
			КонецЕсли;
			Запрос.УстановитьПараметр("Штрихкод", ЗагружаемыеЗначенияСтрока.Штрихкод);
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
			|	_ДемоНоменклатура.Ссылка
			|ИЗ
			|	Справочник._ДемоНоменклатура КАК _ДемоНоменклатура " + ТекстГде;
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ТекущиеДела

// Параметры:
//   ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы._ДемоСчетНаОплатуПокупателю) Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		ТекущийВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ОбъектАвторизации = ТекущийВнешнийПользователь.ОбъектАвторизации;
		Если ТипЗнч(ОбъектАвторизации) = ТипЗнч(Справочники._ДемоКонтактныеЛицаПартнеров.ПустаяСсылка()) Тогда
			ОбъектАвторизации = ОбъектАвторизации.Владелец;
		КонецЕсли;
		Результат = КоличествоНеоплаченныхСчетовПокупателя(ОбъектАвторизации);
		КоличествоНеоплаченныхСчетовПокупателя = Результат.Количество();
		
		Объекты = Результат.ВыгрузитьКолонку("Ссылка");
		ОтборПоОбъектам = Новый Структура;
		ОтборПоОбъектам.Вставить("Ссылка", Объекты);
		
		ИдентификаторЗаказыПокупателя = "СчетаНаОплатуНеОплачено";
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторЗаказыПокупателя;
		Дело.ЕстьДела       = КоличествоНеоплаченныхСчетовПокупателя > 0;
		Дело.Представление  = НСтр("ru = 'Неоплаченные счета'");
		Дело.Количество     = КоличествоНеоплаченныхСчетовПокупателя;
		Дело.Форма          = "Документ._ДемоСчетНаОплатуПокупателю.ФормаСписка";
		Дело.ПараметрыФормы = Новый Структура("Отбор", ОтборПоОбъектам);
		Дело.Владелец       = Метаданные.Подсистемы._ДемоОрганайзер;
		
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату (СКД)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (на основе СКД)'");
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("_ДемоПечатьНепроведенныхДокументов");
	
	// Счет на оплату без платежных реквизитов.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату без платежных реквизитов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("_ДемоПечатьНепроведенныхДокументов");
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьПлатежныеРеквизиты", Ложь);
	
	// Демо-пример ограничения доступности команд печати.
	Если Пользователи.РолиДоступны("_ДемоПечатьСчетаНаОплатуНаПринтер") Тогда
		// Счет на оплату (на принтер).
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Счет";
		КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (на принтер)'");
		КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.СразуНаПринтер = Истина;
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		// Комплект документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Счет,Заказ,Заказ,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,Счет,Счет,Заказ";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФиксированныйКомплект = Истина;
		КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
		КомандаПечати.Порядок = 75;
		
		// Комплект документов (на принтер).
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Счет,Заказ,Заказ,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,Счет,Счет,Заказ";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
		КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФиксированныйКомплект = Истина;
		КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
		КомандаПечати.СразуНаПринтер = Истина;
		КомандаПечати.Порядок = 75;
		
		// Настраиваемый комплект документов.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Счет,Заказ,Заказ,Обработка._ДемоПечатнаяФорма.ГарантийноеПисьмо,Счет,Счет,Заказ";
		КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
		КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
		КомандаПечати.Порядок = 75;
	КонецЕсли;
	
	// Счет на оплату в документ Adobe PDF.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в документ Adobe PDF'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	
	// Счет на оплату в формате Office Open XML
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату(OfficeOpenXML)";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в Office Open XML'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Счет на оплату в Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату(MSWord)";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в Microsoft Word (для обратной совместимости)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	
	// Счет на оплату в OpenOffice.org Writer.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату(ODT)";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в OpenOffice.org Writer (для обратной совместимости)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	
	// Квитанция на оплату с QR кодом.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Квитанция";
	КомандаПечати.Представление = НСтр("ru = 'Квитанция (с QR кодом)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 85;

	// Печатная форма с ошибкой формирования.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатнаяФормаСОшибкой";
	КомандаПечати.Представление = НСтр("ru = 'Печатная форма с ошибкой формирования'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// печать счета на оплату
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СчетНаОплату(OfficeOpenXML)");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ИмяМакета = "СчетНаОплату(OfficeOpenXML)";
		МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.МакетыИДанныеОбъектовДляПечати("Документ._ДемоСчетНаОплатуПокупателю", ИмяМакета, МассивОбъектов);
		
		ОфисныеДокументы = Новый Соответствие;
		
		Шаблон = НСтр("ru = '[Организация]-[Контрагент] Счет №[Номер] от [Дата]'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Организация,Контрагент,Номер,Дата,Ссылка");
		Для Каждого Ссылка Из МассивОбъектов Цикл
			
			ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[Ссылка];
			ЗначенияРеквизитовДокумента.Дата = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=D");
			ЗначенияРеквизитовДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗначенияРеквизитовДокумента.Номер);
			ИмяДокумента = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[Ссылка]);
			
			АдресХранилищаОфисныйДокумент = НапечататьСчетНаОплатуПокупателю(Ссылка, МакетИДанныеОбъекта, ИмяМакета);
			
			ОфисныеДокументы.Вставить(АдресХранилищаОфисныйДокумент, ИмяДокумента);
			
		КонецЦикла;
		
		ПечатнаяФорма.СинонимМакета    = НСтр("ru = 'Счет на оплату'");
		ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;
		
	КонецЕсли;
	
	// печать счета на оплату
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Счет");
	Если ПечатнаяФорма <> Неопределено Тогда
		// имена файлов
		ИменаФайлов = Новый Соответствие;
		Шаблон = НСтр("ru = '[Организация]-[Контрагент] Счет №[Номер] от [Дата]'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Организация,Контрагент,Номер,Дата,Ссылка");
		Для Каждого Ссылка Из МассивОбъектов Цикл
			ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[Ссылка];
			ЗначенияРеквизитовДокумента.Дата = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=D");
			ЗначенияРеквизитовДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗначенияРеквизитовДокумента.Номер);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[Ссылка]);
			ИменаФайлов.Вставить(Ссылка, ИмяФайла);
		КонецЦикла;
		
		// описание печатной формы
		ВыводитьПлатежныеРеквизиты = Истина;
		Если ПараметрыПечати.Свойство("ВыводитьПлатежныеРеквизиты") Тогда
			ВыводитьПлатежныеРеквизиты = ПараметрыПечати.ВыводитьПлатежныеРеквизиты;
		КонецЕсли;
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, "Счет", ВыводитьПлатежныеРеквизиты, ПараметрыВывода.КодЯзыка);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Счет на оплату'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ";
		ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИменаФайлов;
		ПечатнаяФорма.ДоступенВыводНаДругихЯзыках = Истина;
	КонецЕсли;
	
	// печать заказа покупателя
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Заказ");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, "Заказ");
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Заказ покупателя'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ";
	КонецЕсли;
	
	// печать квитанции
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Квитанция");
	Если ПечатнаяФорма <> Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = ПечатьКвитанции(МассивОбъектов, ОбъектыПечати);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Квитанция (с QR кодом)'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_Квитанция";
	КонецЕсли;
	
	// Параметры отправки печатных форм по электронной почте.
	ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Подготавливает данные объекта к выводу на печать.
// 
// Параметры:
//  МассивДокументов - Массив - ссылки на объекты, для которых запрашиваются данные для печати;
//  МассивИменМакетов - Массив - имена макетов, в которые подставляются данные для печати.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - коллекция ссылок на объекты и их данные:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура:
//    ** Ключ - Строка - имя макета,
//    ** Значение - Структура - данные объекта.
//
Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие; // Для обратной совместимости.
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "СчетНаОплату(OfficeOpenXML)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
				УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату"));
		ИначеЕсли ИмяМакета = "СчетНаОплату(MSWord)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
				УправлениеПечатью.МакетПечатнойФормы("Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплатуОбратнаяСовместимость"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC"); // Для обратной совместимости.
		ИначеЕсли ИмяМакета = "СчетНаОплату(ODT)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет._ДемоПФ_ODT_СчетНаОплату"));
			ТипыМакетов.Вставить(ИмяМакета, "ODT"); // Для обратной совместимости.
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Макеты = Новый Структура;
	Макеты.Вставить("ОписаниеОбластей", ОписаниеОбластей);
	Макеты.Вставить("ТипыМакетов", ТипыМакетов); // Для обратной совместимости.
	Макеты.Вставить("ДвоичныеДанныеМакетов", ДвоичныеДанныеМакетов);
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", ДанныеПоВсемОбъектам);
	Результат.Вставить("Макеты", Макеты);
	
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
// Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы._ДемоСчетНаОплатуПокупателю);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты - см. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.Реквизиты
//  Вложения  - см. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.Вложения
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитКратность = Реквизиты.Найти("_ДемоСчетНаОплатуПокупателю.Кратность");
	Если РеквизитКратность <> Неопределено Тогда
		Реквизиты.Удалить(РеквизитКратность);
	КонецЕсли;
	
	ШаблоныСообщений.РазвернутьРеквизит("Партнер", Реквизиты, "", "ГлавныйБухгалтер,ИнформационноеОбслуживание");
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение:
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные
//                  - Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS;
//     * Представление - Строка - представление получателя сообщения SMS;
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект, являющийся источником данных.
//                   - Структура  - структура описывающая параметры шаблона:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект, являющийся источником данных;
//    * ВидСообщения - Строка - вид формируемого сообщения: "ЭлектроннаяПочта" или "СообщениеSMS";
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров;
//    * ОтправитьСразу - Булево - признак мгновенной отправки;
//    * ПараметрыСообщения - Структура - дополнительные параметры сообщения.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей почты при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * Адрес           - Строка - адрес электронной почты получателя;
//     * Представление   - Строка - представление получателя письма;
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект, являющийся источником данных.
//                   - Структура  - структура описывающая параметры шаблона:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект, являющийся источником данных;
//    * ВидСообщения - Строка - вид формируемого сообщения: "ЭлектроннаяПочта" или "СообщениеSMS";
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров;
//    * ОтправитьСразу - Булево - признак мгновенной отправки письма;
//    * ПараметрыСообщения - Структура - дополнительные параметры сообщения;
//    * ПреобразовыватьHTMLДляФорматированногоДокумента - Булево - признак преобразование HTML текста
//             сообщения содержащего картинки в тексте письма из-за особенностей вывода изображений
//             в форматированном документе;
//    * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для отправки письма.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК _ДемоСчетНаОплатуПокупателю
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = _ДемоСчетНаОплатуПокупателю.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоКонтактныеЛицаПартнеров КАК _ДемоКонтактныеЛицаПартнеров
	|	ПО _ДемоКонтактныеЛицаПартнеров.Владелец = _ДемоСчетНаОплатуПокупателю.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиКонтактныеЛица
	|	ПО ВнешниеПользователиКонтактныеЛица.ОбъектАвторизации = _ДемоКонтактныеЛицаПартнеров.Ссылка
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)
	|	ИЛИ ЗначениеРазрешено(ВнешниеПользователиКонтактныеЛица.Ссылка)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления.

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	УправлениеПечатью.ЗарегистрироватьНовоеИмяМакета(
		"Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплатуОбратнаяСовместимость_ru", 
		Параметры);
	
КонецПроцедуры

// Отражает в регистре сведений ПользовательскиеМакетыПечати переименование макета печатной формы
// Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату_ru 
// в Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплатуОбратнаяСовместимость_ru.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Макеты = Новый Соответствие;
	Макеты["Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплатуОбратнаяСовместимость_ru"] = "Документ._ДемоСчетНаОплатуПокупателю.ПФ_DOC_СчетНаОплату_ru";
	УправлениеПечатью.ПеренестиПользовательскиеМакеты(Макеты, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоНеоплаченныхСчетовПокупателя(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	| _ДемоСчетНаОплатуПокупателюТовары.Ссылка КАК Ссылка
	|ИЗ
	| Документ._ДемоСчетНаОплатуПокупателю.Товары КАК _ДемоСчетНаОплатуПокупателюТовары
	|ГДЕ
	| _ДемоСчетНаОплатуПокупателюТовары.Ссылка.Партнер = &Партнер
	|
	|СГРУППИРОВАТЬ ПО
	| _ДемоСчетНаОплатуПокупателюТовары.Ссылка
	|
	|ИМЕЮЩИЕ
	| СУММА(_ДемоСчетНаОплатуПокупателюТовары.Сумма) > _ДемоСчетНаОплатуПокупателюТовары.Ссылка.СуммаОплаты";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка, Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

// Возвращаемое значение:
//   Массив из см. СтруктураПлатежногоДокумента - коллекция описаний платежных документов.
//
Функция ДанныеДокументов(МассивОбъектов)
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Вид", УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресКонтрагента"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоКонтрагентыКонтактнаяИнформация.Представление КАК АдресПлательщика,
	|	_ДемоКонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник._ДемоКонтрагенты.КонтактнаяИнформация КАК _ДемоКонтрагентыКонтактнаяИнформация
	|		ПО СчетНаОплатуПокупателю.Контрагент = _ДемоКонтрагентыКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|	И ЕСТЬNULL(_ДемоКонтрагентыКонтактнаяИнформация.Вид, """") = &Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.СуммаОплаты КАК СуммаЧислом,
	|	СчетНаОплатуПокупателю.Организация.Наименование КАК ТекстПолучателя,
	|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК ФИОПлательщика,
	|	СчетНаОплатуПокупателю.БанковскийСчет КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА СчетНаОплатуПокупателю.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ СчетНаОплатуПокупателю.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА СчетНаОплатуПокупателю.БанковскийСчет.БИКБанка
	|		ИНАЧЕ СчетНаОплатуПокупателю.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК БИКБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА СчетНаОплатуПокупателю.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ СчетНаОплатуПокупателю.БанковскийСчет.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	СчетНаОплатуПокупателю.БанковскийСчет.НомерСчета КАК НомерСчетаПолучателя,
	|	СчетНаОплатуПокупателю.Контрагент.ИНН КАК ИННПолучателя,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	ЕСТЬNULL(втАдрес.АдресПлательщика, """") КАК АдресПлательщика
	|ИЗ
	|	Документ._ДемоСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдрес КАК втАдрес
	|		ПО СчетНаОплатуПокупателю.Контрагент = втАдрес.Контрагент
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.МоментВремени
	|ИТОГИ ПО
	|	Ссылка";

	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекстСообщения = "";
	
	Пока Результат.Следующий() Цикл
		
		ОшибкаЗаполнения = Ложь;
		Если Не ЗначениеЗаполнено(Результат.БанковскийСчет) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен обязательный реквизит: ""Банковский счет""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.НаименованиеБанкаПолучателя) Тогда
			ТекстСообщения = НСтр("ru = 'В банковском счете не заполнен реквизит: ""Наименование банка""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.БИКБанкаПолучателя) Тогда
			ТекстСообщения = НСтр("ru = 'В банковском счете не заполнен реквизит: ""БИК банка""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.НомерСчетаПолучателя) Тогда
			ТекстСообщения = НСтр("ru = 'В банковском счете не заполнен реквизит: ""Номер счета""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Результат.Ссылка);
			ОшибкаЗаполнения = Истина;
		КонецЕсли;

		
		Если ОшибкаЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = СтруктураПлатежногоДокумента();
		РеквизитыПлатежа = Результат.Выбрать();
		РеквизитыПлатежа.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, РеквизитыПлатежа);
		СтруктураДанных.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплата по счету №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыПлатежа.Номер), Формат(РеквизитыПлатежа.Дата, "ДЛФ=D"));
		// Локализация
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(РеквизитыПлатежа.ФИОПлательщика);
		СтруктураДанных.ФамилияПлательщика = ?(СтруктураФИО.Фамилия <> Неопределено, СтруктураФИО.Фамилия, "");
		СтруктураДанных.ИмяПлательщика = ?(СтруктураФИО.Имя <> Неопределено, СтруктураФИО.Имя, "");
		СтруктураДанных.ОтчествоПлательщика = ?(СтруктураФИО.Отчество <> Неопределено, СтруктураФИО.Отчество, "");
		// Конец Локализация
		
		МассивВозврата.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//   * АдресПлательщика - Строка 
//   * ОтчествоПлательщика - Строка 
//   * ИмяПлательщика - Строка
//   * ФамилияПлательщика - Строка 
//   * НазначениеПлатежа - Строка
//   * СуммаЧислом - Число
//   * СчетБанкаПолучателя 
//   * БИКБанкаПолучателя 
//   * НаименованиеБанкаПолучателя 
//   * НомерСчетаПолучателя 
//   * ТекстПолучателя 
//   * Ссылка - ДокументСсылка._ДемоСчетНаОплатуПокупателю
// 
Функция СтруктураПлатежногоДокумента()
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ссылка");
	СтруктураВозврата.Вставить("ТекстПолучателя");
	СтруктураВозврата.Вставить("НомерСчетаПолучателя");
	СтруктураВозврата.Вставить("НаименованиеБанкаПолучателя");
	СтруктураВозврата.Вставить("БИКБанкаПолучателя");
	СтруктураВозврата.Вставить("СчетБанкаПолучателя");
	
	СтруктураВозврата.Вставить("СуммаЧислом");
	СтруктураВозврата.Вставить("НазначениеПлатежа", "");
	
	СтруктураВозврата.Вставить("ФамилияПлательщика", "");
	СтруктураВозврата.Вставить("ИмяПлательщика", "");
	СтруктураВозврата.Вставить("ОтчествоПлательщика", "");
	СтруктураВозврата.Вставить("АдресПлательщика");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КонтактнаяИнформацияДляСчета(Организация, Дата, КодЯзыка)
	
	Сведения = СведенияКонтактнойИнформации();
	
	Отбор = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	Отбор.ВидыКонтактнойИнформации.Добавить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации"));
	Отбор.Дата = Дата;
	Отбор.КодЯзыка = КодЯзыка;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Организация, Отбор);
	
	Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл
		
		// Определяем нижний уровень населенного пункта в адресе.
		ГородНаселенныйПункт = "";
		// Локализация
		Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			Если УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступныМодулиРаботаСАдресами() Тогда
				МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
				СтруктураПолейАдреса = МодульРаботаСАдресами.СведенияОбАдресе(СтрокаТаблицыКИ.Значение, ДополнительныеПараметры);
				Если СтруктураПолейАдреса.Свойство("Город") 
					И ЗначениеЗаполнено(СтруктураПолейАдреса.Город) Тогда
					ГородНаселенныйПункт = СтруктураПолейАдреса.Город;
					
				ИначеЕсли СтруктураПолейАдреса.Свойство("НаселенныйПункт") 
					И ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт) Тогда
					ГородНаселенныйПункт = СтруктураПолейАдреса.НаселенныйПункт;
					
				ИначеЕсли СтруктураПолейАдреса.Свойство("КодРегиона")
					И СтруктураПолейАдреса.Свойство("Регион")
					И (СтруктураПолейАдреса.КодРегиона =  "77" // Москва
					ИЛИ СтруктураПолейАдреса.КодРегиона = "78" // Санкт-Петербург
					ИЛИ СтруктураПолейАдреса.КодРегиона = "92" // Севастополь и Байконур
					ИЛИ СтруктураПолейАдреса.КодРегиона = "99") Тогда
					// Города федерального значения и приравненные к ним.
						ГородНаселенныйПункт = СтруктураПолейАдреса.Регион;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Конец Локализация
		
		Если СтрокаТаблицыКИ.Вид =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации") Тогда
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ЗначенияПолейЮридическийАдрес = СтрокаТаблицыКИ.Значение;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сведения;
КонецФункции

Функция СведенияКонтактнойИнформации()
	Сведения = Новый Структура;
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ЗначенияПолейЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	
	Возврат Сведения;
КонецФункции

Функция СоздатьОписаниеПолучателя()
	ОписаниеПолучателя = Новый Структура;
	ОписаниеПолучателя.Вставить("Адрес", "");
	ОписаниеПолучателя.Вставить("Представление", "");
	ОписаниеПолучателя.Вставить("ИсточникКонтактнойИнформации");
	ОписаниеПолучателя.Вставить("ВидПочтовогоАдреса", "");
	ОписаниеПолучателя.Вставить("Пояснение", "");
	
	Возврат ОписаниеПолучателя;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с макетами офисных документов.

Функция ПолучитьДанныеОбъекта(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("Комментарий", Объект.Комментарий);
	ДанныеОбъекта.Вставить("Контрагент",  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Наименование"));
	ДанныеОбъекта.Вставить("СуммаОплаты", Объект.СуммаОплаты);
	ДанныеОбъекта.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование"));
	ДанныеОбъекта.Вставить("Дата",        Строка(ТекущаяДатаСеанса()));
	
	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТаблицыТовары = Новый Структура;
		СтрокаТаблицыТовары.Вставить("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТаблицыТовары.Вставить("Количество",	СтрокаТабличнойЧасти.Количество);
		СтрокаТаблицыТовары.Вставить("Цена",		СтрокаТабличнойЧасти.Цена);
		СтрокаТаблицыТовары.Вставить("Сумма",		СтрокаТабличнойЧасти.Сумма);
		СтрокаТаблицыТовары.Вставить("Всего",		СтрокаТабличнойЧасти.Всего);
		
		Если Не СтрокаТабличнойЧасти.Номенклатура.ФайлКартинки.Пустая() Тогда
			Рисунок = РаботаСФайлами.ДанныеФайла(СтрокаТабличнойЧасти.Номенклатура.ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
		Иначе
			Рисунок = Неопределено;
		КонецЕсли;
		СтрокаТаблицыТовары.Вставить("Рисунок", Рисунок);
		
		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",		"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",		"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",			"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Абзац",				"Общая");
	
	Возврат ОписаниеОбластей;
	
КонецФункции

Функция НазваниеДокумента(Идентификатор)
	Результат = "";
	Если Идентификатор = "Счет" Тогда
		Результат = НСтр("ru = 'Демо: Счет на оплату'")
	ИначеЕсли Идентификатор = "Заказ" Тогда
		Результат = НСтр("ru = 'Демо: Заказ покупателя'")
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли