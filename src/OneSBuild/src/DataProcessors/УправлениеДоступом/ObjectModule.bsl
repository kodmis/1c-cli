///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// См. ниже раздел "ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ".

#Область ПрограммныйИнтерфейс

// Выполняет проверку совпадения текстов ограничений в разных ролей для
// одного и того же права одного и того же объекта и другое.
//
// Параметры:
//  ВсеПараметры - Структура:
//   * ПапкаВыгрузки   - Строка - полный путь к папке с выгрузкой конфигурации в файлы.
//   * ОшибкиВВыгрузке - Строка - возвращаемое значение. Не пустое, если в файлах выгрузки конфигурации,
//                       размещенных в папке, указанной в параметре ПапкаВыгрузки найдены ошибки.
//
Процедура ПроверитьИспользованиеОграниченийДоступа(ВсеПараметры) Экспорт
	
	ВсеПараметры.Вставить("ОшибкиВВыгрузке", "");
	
	ОграниченияДоступа = ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(
		ВсеПараметры.ПапкаВыгрузки, ВсеПараметры.ОшибкиВВыгрузке);
	
	Если ЗначениеЗаполнено(ВсеПараметры.ОшибкиВВыгрузке) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОграниченийПрав = Новый ТаблицаЗначений;
	ВидыОграниченийПрав.Колонки.Добавить("Таблица",          Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Право",            Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ВидДоступа",       Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Описание",         Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ТаблицаОбъекта",   Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокКоллекции", Новый ОписаниеТипов("Число"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокПрав",      Новый ОписаниеТипов("Число"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОграниченияДоступа",  ОграниченияДоступа);
	ПараметрыПроцедуры.Вставить("ВидыОграниченийПрав", ВидыОграниченийПрав);
	
	ОпределитьВидыОграниченийПрав(ПараметрыПроцедуры);
	
КонецПроцедуры

// Выгружает тексты RLS версий 2.х (старые) и 3.х (новые) в файлы для последующего контроля за расхождениями.
//
// Параметры:
//  Параметры - Структура:
//   * ПапкаВыгрузкиКонфигурации - Строка - папка с выгруженной в файлы конфигурацией, достаточно выгрузки ролей;
//   * ПапкаНовогоОписания       - Строка - папка, в которую будут выгружены тексты ограничений;
//   * ПапкаЭталонногоОписания   - Строка - (необязательный) папка с результатами предыдущей выгрузки, с которыми
//                                          необходимо выполнить сравнение.
//
//   * СтрокаПодключенияКСервисуКонтроляRLS  - Строка - (необязательный) служебный параметр, не для использования;
//   * Проект                                - Строка - (необязательный) служебный параметр, не для использования;
//   * ВерсияПроекта                         - Строка - (необязательный) служебный параметр, не для использования.
//
//   * ОтборТаблиц - см. НовыеОписания.ОтборТаблиц
//
Процедура ВыгрузитьТекстыОграничений(Знач Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры);
		ОтборТаблиц = ?(Параметры.Свойство("ОтборТаблиц"), Параметры.ОтборТаблиц, Неопределено);
		Если Параметры.Свойство("СтрокаПодключенияКСервисуКонтроляRLS") Тогда
			Параметры.Вставить("СтрокаСоединения", СтрокаСоединенияИнформационнойБазы());
			Параметры.Вставить("ИмяКонфигурацииИБ", Метаданные.Имя);
			Параметры.Вставить("НазваниеКонфигурацииИБ", Метаданные.Синоним);
			Параметры.Вставить("ВерсияКонфигурацииИБ", Метаданные.Версия);
			Параметры.Вставить("ИмяКомпьютера", ИмяКомпьютера());
			Параметры.Вставить("ДатаСбораДанных", ТекущаяДата()); // АПК:143 требуется дата компьютера.
			Параметры.Вставить("ОписанияОграничений", НовыеОписания(ОтборТаблиц));
			ОтправитьТекстыОграничений(Параметры);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПапкаНовогоОписания) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана папка выгрузки новых описаний.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СоздатьКаталог(ПапкаНовогоОписания);
	
	Отличия = Новый СписокЗначений;
	Для Каждого Описание Из НовыеОписания(ОтборТаблиц) Цикл
		Таблица = Описание.Ключ;
		ТекстНовогоОписания = Описание.Значение;
		
		ИмяФайла = ПапкаНовогоОписания + Таблица + ".txt";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
		ЗаписьТекста.Записать(ТекстНовогоОписания);
		ЗаписьТекста.Закрыть();
		
		ИмяФайла = ПапкаЭталонногоОписания + Таблица + ".txt";
		ЭталонныйТекст = ПрочитатьФайл(ИмяФайла);
		
		Если ТекстНовогоОписания <> ЭталонныйТекст Тогда
			Отличия.Добавить(Таблица);
		КонецЕсли;
	КонецЦикла;
	Отличия.СортироватьПоЗначению();
	Отличия = Отличия.ВыгрузитьЗначения();
	
	Если ЗначениеЗаполнено(ПапкаЭталонногоОписания) Тогда
		ИмяФайла = ПапкаНовогоОписания + "Отличия.txt";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
		ЗаписьТекста.ЗаписатьСтроку(СтрСоединить(Отличия, Символы.ПС));
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает тексты RLS версий 2.х (старые) и 3.х (новые) по таблицам.
//
// Параметры:
//  ОтборТаблиц - Неопределено - без отбора
//              - Структура:
//                 * Подсистемы - Соответствие из КлючИЗначение:
//                    ** Ключ - ОбъектМетаданных - объект метаданных подсистемы.
//                    ** Значение - Булево - если Истина, то включая вложенные.
//                 * ТолькоОбъектыВУказанныхПодсистемах - Булево - если Ложь,
//                     то пропустить объекты в указанных подсистемах.
//
// Возвращаемое значение:
//  Соответствие - имя таблицы и тексты RLS.
//
Функция НовыеОписания(ОтборТаблиц = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	ТаблицаОграничений = ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузкиКонфигурации,, ОтборТаблиц);
	Для Каждого СтрокаТаблицы Из ТаблицаОграничений Цикл
		СтрокаТаблицы.Ограничение = УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(СтрокаТаблицы.Ограничение);
	КонецЦикла;
	
	ВременнаяТаблица = ТаблицаОграничений.Скопировать(, "Таблица");
	ВременнаяТаблица.Свернуть("Таблица");
	ВременнаяТаблица.Сортировать("Таблица");
	СписокТаблиц = ВременнаяТаблица.ВыгрузитьКолонку("Таблица");
	
	ВсеОграниченияВРолях = ВсеОграниченияВРолях(ТаблицаОграничений);
	СпискиСОграничениемДоступа = СпискиСОграничениемДоступа();
	
	Для Каждого Таблица Из СписокТаблиц Цикл
		ОграниченияВМодулях = ОграниченияВМодулях(Таблица, СпискиСОграничениемДоступа);
		ОграниченияВРолях = ОграниченияТаблицыВРолях(Таблица, ВсеОграниченияВРолях);
		ТекстНовогоОписания = ТекстыОграниченийСтрокой(ОграниченияВМодулях, ОграниченияВРолях);
		
		Результат.Вставить(Таблица, ТекстНовогоОписания);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Начало ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

// Параметры:
//  ВидыОграниченийПрав - ТаблицаЗначений
//
Процедура ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав)
	
	// СтандартныеПодсистемы.Пользователи
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";

	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Конец  ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

// Выгружает конфигурацию текущей информационной базы в файлы.
//
// Параметры:
//  ПапкаВыгрузки   - Строка - каталог, в который будет выполнена выгрузка.
//
//  ИмяПользователя - Неопределено - использовать имя текущего пользователя.
//                  - Строка - имя пользователя, который будет выполнять выгрузку.
//
//  Пароль          - Неопределено - использовать пустой пароль, если не пустой показать ошибку.
//                  - Строка - использовать указанный пароль, если не совпадает, показывать ошибку.
// 
//
Процедура ВыгрузитьТекущуюКонфигурациюВФайлы(ПапкаВыгрузки, ИмяПользователя = Неопределено, Пароль = Неопределено)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстОшибки = НСтр("ru = 'Модель сервиса не поддерживается.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ИмяПользователя = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Не ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У пользователя ""%1"" нет права Администрирование,
			           |необходимого для выгрузки конфигурации в файлы.'"),
			ПользовательИБ.Имя);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Пароль = Неопределено Тогда
		ИспользуемыйПароль = "";
		Если ПользовательИБ.ПарольУстановлен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя ""%1"" установлен пароль, который не передан в процедуру,
				           |но является необходимым для выгрузки конфигурации в файлы.'"),
				ПользовательИБ.Имя);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ИспользуемыйПароль = Пароль;
		Если ПользовательИБ.СохраняемоеЗначениеПароля <> Пользователи.СохраняемоеЗначениеСтрокиПароля(Пароль) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя ""%1"" установлен пароль, который не совпадает с переданным в процедуру,
				           |но является необходимым для выгрузки конфигурации в файлы.'"),
				ПользовательИБ.Имя);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Пароль", ИспользуемыйПароль);
	ПараметрыПодключения.Вставить("Пользователь", ИмяПользователя());
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	Если СтрНачинаетсяС(СтрокаСоединения, "File=") > 0 И КонфигураторОткрыт() Тогда
		ТекущийКаталогИБ = Сред(СтрокаСоединения, 7, СтрДлина(СтрокаСоединения) - 8);
		ВременныйКаталог = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ВременныйКаталог);
		КопироватьФайл(ТекущийКаталогИБ + "\1Cv8.1CD", ВременныйКаталог + "\1Cv8.1CD");
		СтрокаСоединения = "File=""" + ВременныйКаталог + """;";
	Иначе
		ВременныйКаталог = "";
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("СтрокаСоединения", СтрокаСоединения);
	
	ВыгрузитьКонфигурациюВФайлы(ПапкаВыгрузки, ПараметрыПодключения);
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОпределитьВидыОграниченийПрав(Параметры) Экспорт
	
	ВидыОграниченийПрав = Параметры.ВидыОграниченийПрав;
	ОграниченияДоступа  = Параметры.ОграниченияДоступа; // ТаблицаЗначений
	
	ОграниченияДоступа.Индексы.Добавить("Таблица, Роль, Право, Поля, Ограничение");
	ОграниченияДоступа.Сортировать("Таблица, Роль, Право, Поля, Ограничение");
	
	НазначениеРолей = Пользователи.НазначениеРолей();
	
	РолиТолькоДляВнешнихПользователей =
		НазначениеРолей.ТолькоДляВнешнихПользователей;
	
	РолиСовместноДляПользователейИВнешнихПользователей =
		НазначениеРолей.СовместноДляПользователейИВнешнихПользователей;
	
	ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав);
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Таблица");
	Ограничения.Колонки.Добавить("Роль");
	Ограничения.Колонки.Добавить("РольДляПользователей");
	Ограничения.Колонки.Добавить("РольДляВнешнихПользователей");
	Ограничения.Колонки.Добавить("Право");
	Ограничения.Колонки.Добавить("Поля");
	Ограничения.Колонки.Добавить("Ограничение");
	Ограничения.Колонки.Добавить("ОграничениеБезКомментария");
	
	Ограничения.Колонки.Добавить("УказаннаяТаблица"); // Таблица, указанная в ограничении.
	Ограничения.Колонки.Добавить("УказанноеПраво");   // Право, указанное в ограничении.
	
	
	Для Каждого Строка Из ОграниченияДоступа Цикл
		
		Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение, ОграничениеБезКомментария");
		ЗаполнитьЗначенияСвойств(Свойства, Строка);
		
		Свойства.Ограничение = УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Свойства.Ограничение);
		
		// Замена табуляций на пробелы.
		Свойства.Ограничение = СтрЗаменить(Свойства.Ограничение, "	", "    ");
		
		// Удаление переводов строки с краев текста ограничения.
		Свойства.Ограничение = СокрЛП(Свойства.Ограничение);
		
		// Удаление комментариев.
		Результат = "";
		Для НомерСтрокиОграничения = 1 По СтрЧислоСтрок(Свойства.Ограничение) Цикл
			Строка = СтрПолучитьСтроку(Свойства.Ограничение, НомерСтрокиОграничения);
			ПозицияКомментария = СтрНайти(Строка, "//");
			Если ПозицияКомментария > 0 Тогда
				Строка = Сред(Строка, 1, ПозицияКомментария - 1);
			КонецЕсли;
			Если НЕ ПустаяСтрока(Результат) Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			Результат = Результат + Строка;
		КонецЦикла;
		Свойства.ОграничениеБезКомментария = СокрЛП(Результат);
		Ограничение = Свойства.ОграничениеБезКомментария;
		
		Если ВРег(Свойства.Роль) = ВРег("ПолныеПрава")
			Или ВРег(Свойства.Роль) = ВРег("АдминистраторСистемы") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Ограничения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойства);
		НоваяСтрока.РольДляПользователей =
			РолиТолькоДляВнешнихПользователей.Найти(Свойства.Роль) = Неопределено;
		НоваяСтрока.РольДляВнешнихПользователей =
			РолиТолькоДляВнешнихПользователей.Найти(Свойства.Роль) <> Неопределено
			Или РолиСовместноДляПользователейИВнешнихПользователей.Найти(Свойства.Роль) <> Неопределено;
		
		Если ВРег(Свойства.Право) = ВРег("Добавление")
		 ИЛИ ВРег(Свойства.Право) = ВРег("Удаление") Тогда
		
			// Эти права не используются для отдельного ограничения доступа.
			// Ограничение добавления совпадает с ограничением изменения,
			// ограничение удаления, либо не используется, либо совпадает с ограничением изменения.
			ПропуститьПраво = Истина;
		Иначе
			ПропуститьПраво = Ложь;
		КонецЕсли;
		
		Ограничение = СтрЗаменить(Ограничение, Символы.ПС, " ");
		Пока СтрНайти(Ограничение, ", ") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, ", ", ",");
		КонецЦикла;
		Пока СтрНайти(Ограничение, " ,") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, " ,", ",");
		КонецЦикла;
		
		Если ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениям("))) = ВРег("#ПоЗначениям(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямРасширенный("))) = ВРег("#ПоЗначениямРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямИНаборамРасширенный("))) = ВРег("#ПоЗначениямИНаборамРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоНаборамЗначений("))) = ВРег("#ПоНаборамЗначений(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			ВидДоступа = "Объект";
			
			Если НЕ ЗначениеЗаполнено(ПолноеИмяПоля) Тогда
				ПолноеИмяПоля = "Ссылка"; // @query-part-1
			КонецЕсли;
			
			ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
		КонецЕсли;
	КонецЦикла;
	
	// Удаление видов ограничений НастройкиПрав, для которых в поле нет ни одного из типов владельцев настроек прав.
	Отбор = Новый Структура("ВидДоступа, ТаблицаОбъекта", "НастройкиПрав", "");
	НайденныеСтроки = ВидыОграниченийПрав.НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		ВидыОграниченийПрав.Удалить(ВидыОграниченийПрав.Индекс(Строка));
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования.
//
// Параметры:
//  ПапкаВыгрузки - Строка
//  ОшибкиВВыгрузке - Строка
//  ОтборТаблиц - см. НовыеОписания.ОтборТаблиц
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Таблица - Строка
//    * Роль - Строка
//    * Право - Строка
//    * Поля - Строка
//    * Ограничение - Строка
//
Функция ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузки = "", ОшибкиВВыгрузке = "",
			ОтборТаблиц = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПапкаВыгрузки) Тогда
		ВременныйКаталог = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ВременныйКаталог);
		ВыгрузитьТекущуюКонфигурациюВФайлы(ВременныйКаталог);
		ПапкаВыгрузки = ВременныйКаталог;
	КонецЕсли;
	
	ОграниченияПрав = Новый ТаблицаЗначений;
	ОграниченияПрав.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	
	ОшибкиВВыгрузке = "";
	Для Каждого Роль Из Метаданные.Роли Цикл
		ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль.Имя, ПапкаВыгрузки, ОшибкиВВыгрузке, ОтборТаблиц);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ОграниченияПрав;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для процедуры ВыгрузитьТекущуюКонфигурациюВФайлы.
Функция КонфигураторОткрыт()
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.ИмяПриложения = "Designer" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ВыгрузитьТекущуюКонфигурациюВФайлы.
Процедура ВыгрузитьКонфигурациюВФайлы(ПапкаВыгрузки, Параметры)
	
	ИмяФайлаСообщений = ПапкаВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	ИмяФайлаСпискаОбъектов = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСпискаОбъектов);
	ЗаписьТекста.Записать(СтрСоединить(ВсеРоли(), Символы.ПС));
	ЗаписьТекста.Закрыть();
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(Параметры.СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(Параметры.Пользователь);
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить(Параметры.Пароль);
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(ПапкаВыгрузки);
	КомандаЗапуска.Добавить("-listFile");
	КомандаЗапуска.Добавить(ИмяФайлаСпискаОбъектов);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	УдалитьФайлы(ИмяФайлаСпискаОбъектов);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ВыгрузитьКонфигурациюВФайлы.
Функция ВсеРоли()
	Результат = Новый Массив;
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Роль.РасширениеКонфигурации() = Неопределено Тогда
			Результат.Добавить(Роль.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ДобавитьВидДоступа(Знач Свойства, Знач ВидыОграниченийПрав,
		Знач НаборВидовДоступа, Знач ПолноеИмяПоля, Знач ПрисоединяемыеТаблицы)
	
	ВидыДоступа = СтрРазделить(НаборВидовДоступа, ",", Ложь);
	
	Для Каждого ВидДоступа Из ВидыДоступа Цикл
		Если ВидДоступа <> "Условие"
		   И ВидДоступа <> "ПравоЧтения"
		   И ВидДоступа <> "ПравоЧтенияПоИдентификатору"
		   И ВидДоступа <> "ПравоИзменения" Тогда
			
			Отбор = Новый Структура("Таблица, Право, ВидДоступа, ТаблицаОбъекта");
			
			Отбор.Таблица    = Свойства.Таблица;
			Отбор.Право      = Свойства.Право;
			Отбор.ВидДоступа = ВидДоступа;
			
			Если ВидДоступа = "Объект" Или ВидДоступа = "НастройкиПрав" Тогда
				
				ТекстЗапроса =
				"ВЫБРАТЬ
				| &ПолноеИмяПоля КАК ПолеИскомыхТипов
				|ИЗ
				|	&ИмяТаблицы КАК Т
				|" + ПрисоединяемыеТаблицы + "
				|ГДЕ
				|	ЛОЖЬ"; // @query-part-1
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяПоля", ПолноеИмяПоля);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", Свойства.Таблица);
				Запрос = Новый Запрос(ТекстЗапроса);
				
				Если ВидДоступа = "НастройкиПрав" Тогда
					ВозможныеПрава = УправлениеДоступомСлужебный.ВозможныеПраваДляНастройкиПравОбъектов();
					ВладельцыПрав = ВозможныеПрава.ПоПолнымИменам;
				КонецЕсли;
				
				Для Каждого Тип Из Запрос.Выполнить().Выгрузить().Колонки.ПолеИскомыхТипов.ТипЗначения.Типы() Цикл
					Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(Тип) <> Неопределено Тогда
						МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
						ТаблицаТипа = МетаданныеТипа.ПолноеИмя();
						Если ВидДоступа = "НастройкиПрав" И ВладельцыПрав.Получить(ТаблицаТипа) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Отбор.ТаблицаОбъекта = ТаблицаТипа;
						Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
							ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
						КонецЕсли
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа) = Неопределено Тогда
				
			Иначе
				Отбор.ТаблицаОбъекта = "";
				Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы.
Процедура ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль, ПапкаВыгрузки, ОписаниеОшибки, ОтборТаблиц)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Пути",   Новый Структура("ПапкаДляВыгрузкиПрав", ПапкаВыгрузки));
	Контекст.Вставить("Журнал", Новый Структура("Текст", ""));
	Контекст.Вставить("МассивОбъектов",       Новый Массив);
	Контекст.Вставить("СоответствиеОбъектов", Новый Соответствие);
	Контекст.Вставить("МассивШаблонов",       Новый Массив);
	Контекст.Вставить("СоответствиеШаблонов", Новый Соответствие);
	
	ЕстьОшибки = Ложь;
	Попытка
		ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
	Права = Новый Соответствие;
	Права.Вставить("Read",   "Чтение");
	Права.Вставить("Insert", "Добавление");
	Права.Вставить("Update", "Изменение");
	Права.Вставить("Delete", "Удаление");
	
	СоответствиеОбъектов = Контекст.СоответствиеОбъектов;
	УстановленОтбор = ТипЗнч(ОтборТаблиц) = Тип("Структура");
	
	Для Каждого ОписаниеОбъекта Из СоответствиеОбъектов Цикл
		Если СтрЧислоВхождений(ОписаниеОбъекта.Ключ, ".") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъекта.Ключ);
		Если ОбъектМетаданных = Неопределено Тогда
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти объект метаданных ""%1"".'"), ОписаниеОбъекта.Ключ));
			ЕстьОшибки = Истина;
			Если УстановленОтбор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если УстановленОтбор
		   И ОбъектВходитВОднуИзПодсистем(ОбъектМетаданных, ОтборТаблиц.Подсистемы)
		     = ОтборТаблиц.ТолькоОбъектыВУказанныхПодсистемах Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		СоответствиеПрав = ОписаниеОбъекта.Значение.СоответствиеПрав;
		Для Каждого ОписаниеПрава Из СоответствиеПрав Цикл
			ОграниченияПолей = ОписаниеПрава.Значение.ОграниченияПолей;
			Если Не ЗначениеЗаполнено(ОграниченияПолей) Тогда
				Продолжить;
			КонецЕсли;
			Право = Права[ОписаниеПрава.Ключ];
			Для Каждого ОписаниеОграничения Из ОграниченияПолей Цикл
				Если ОписаниеОграничения.Ключ = "" И Не ЗначениеЗаполнено(ОписаниеОграничения.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Поля = ?(ОписаниеОграничения.Ключ = "", "<" + НСтр("ru = 'Прочие поля'") + ">", ОписаниеОграничения.Ключ);
				НоваяСтрока = ОграниченияПрав.Добавить();
				НоваяСтрока.Таблица     = ПолноеИмя;
				НоваяСтрока.Роль        = Роль;
				НоваяСтрока.Право       = Право;
				НоваяСтрока.Поля        = Поля;
				НоваяСтрока.Ограничение = ОписаниеОграничения.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектВходитВОднуИзПодсистем(ОбъектМетаданных, СоставПодсистем)
	
	Для Каждого КлючИЗначение Из СоставПодсистем Цикл
		Если ОбъектВходитВПодсистему(ОбъектМетаданных, КлючИЗначение.Ключ, КлючИЗначение.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
//  Подсистема - ОбъектМетаданныхПодсистема
//  ВключаяВложенные - Булево
//
Функция ОбъектВходитВПодсистему(ОбъектМетаданных, Подсистема, ВключаяВложенные)
	
	Если Подсистема.Состав.Содержит(ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ВключаяВложенные Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
		Если ОбъектВходитВПодсистему(ОбъектМетаданных, ВложеннаяПодсистема, ВключаяВложенные) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ДобавитьОграниченияПравРоли.
Процедура ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки)
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При чтении прав роли %1 произошла ошибка:'"), Роль);
	
	Контекст.Вставить("ЗаголовокОшибкиЧтенияПравРоли", ЗаголовокОшибки);
	
	Если Контекст.Свойство("СтарыйФорматИмениФайла") Тогда
		ИмяФайлаРоли = "Роль." + Роль + ".Права.xml";
	Иначе
		
		ИмяФайлаРоли = СтрЗаменить("Roles\" + Роль + "\Ext\Rights.xml", "\", ПолучитьРазделительПути());
	КонецЕсли;
	ПолноеИмяФайлаРоли = ДобавитьКонечныйРазделительПути(Контекст.Пути.ПапкаДляВыгрузкиПрав) + ИмяФайлаРоли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайлаРоли);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть для чтения файл XML по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	Если Не ЧтениеXML.Прочитать()
	 Или Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "Rights"
	 Или Не ЧтениеXML.URIПространстваИмен = "http://v8.1c.ru/8.2/roles"
	 Или Не ЧтениеXML.Прочитать()
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForNewObjects") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForAttributesByDefault") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "independentRightsOfChildObjects") <> Неопределено
	 Или Не ЧтениеXML.ИмеетИмя Тогда
		
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'Некорректный файл прав'"));
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Не (  ЧтениеXML.Имя = "Rights"
	         И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеXML.Имя = "object" Тогда
			Попытка
				ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось прочитать элемент %1 по причине:
					           |%2'"),
					"object",
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
			
		ИначеЕсли ЧтениеXML.Имя = "restrictionTemplate" Тогда
			Попытка
				ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось прочитать элемент %1 по причине:
					           |%2'"),
					"restrictionTemplate",
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
		Иначе
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать файл прав, т.к. обнаружен неизвестный элемент %1'"), ЧтениеXML.Имя));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЧтениеXML.ИмеетИмя Тогда
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'В структуре XML элемент не завершен'"));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяОбъекта = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяОбъекта = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство %1 (имя объекта)'"), "name");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СвойстваОбъекта = Контекст.СоответствиеОбъектов.Получить(ИмяОбъекта);
	Если СвойстваОбъекта = Неопределено Тогда
		Контекст.МассивОбъектов.Добавить(ИмяОбъекта);
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("МассивПрав",       Новый Массив);
		СвойстваОбъекта.Вставить("СоответствиеПрав", Новый Соответствие);
		Контекст.СоответствиеОбъектов.Вставить(ИмяОбъекта, СвойстваОбъекта);
	КонецЕсли;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "right" Цикл
		
		Попытка
			ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать элемент %1 элемента %2 с именем
				           |%3
				           |по причине:
				           |%4'"),
				"right",
				"object",
				ИмяОбъекта,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "object" Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента %1 с именем:
			           |%2'"),
			"object",
			ИмяОбъекта);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьОбъект.
Процедура ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяПрава = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство %1 (имя права)'"),
			"name");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗначениеПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "value");
	Если ИмяПрава = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство %1 (значение права с именем %2)'"),
			"value",
			ИмяПрава);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗначениеПрава = XMLЗначение(Тип("Булево"), ЗначениеПрава);
	
	СвойстваПрава = СвойстваОбъекта.СоответствиеПрав.Получить(ИмяПрава);
	Если СвойстваПрава = Неопределено Тогда
		СвойстваОбъекта.МассивПрав.Добавить(ИмяПрава);
		СвойстваПрава = Новый Структура;
		СвойстваПрава.Вставить("Значение",         ЗначениеПрава);
		СвойстваПрава.Вставить("ОграниченияПолей", Неопределено);
		СвойстваОбъекта.СоответствиеПрав.Вставить(ИмяПрава, СвойстваПрава);
	Иначе
		Если ЗначениеПрава = Истина Тогда
			СвойстваПрава.Значение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОграниченияПолей = Новый Соответствие;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "restrictionByCondition" Цикл
		
		Попытка
			ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава);
		Исключение
			ЕстьОшибки = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать элемент %1 права %2 по причине:
				           |%3'"),
				"restrictionByCondition",
				ИмяПрава,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеПрава = Истина Тогда
		ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "right" Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента %1 с именем:
			           |%2'"),
			"right", ИмяПрава);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава)
	
	ЧтениеXML.Прочитать();
	
	Поля = Новый Массив;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "field" Цикл
		
		ИмяПоля = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "field");
		Если ИмяПоля = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У элемента %1 некорректное свойство %2'"),
				"restrictionByCondition",
				"field");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Поля.Добавить(ИмяПоля);
	КонецЦикла;
	
	Если Поля.Количество() = 0 Тогда
		Поля.Добавить(""); // Прочие поля.
	КонецЕсли;
	
	Ограничение = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Ограничение = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У элемента %1 не найдено свойство %2'"),
			"restrictionByCondition",
			"condition");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Для каждого Поле Из Поля Цикл
		ОграниченияПолей.Вставить(Поле, Ограничение);
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionByCondition" Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента %1'"),
			"restrictionByCondition");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки)
	
	Если ОграниченияПолей.Количество() > 0
	   И ОграниченияПолей.Получить("") = Неопределено Тогда
		
		// Ограничение "Прочие поля" есть всегда, либо пустое, либо заполненное.
		ОграниченияПолей.Вставить("", "");
	КонецЕсли;
	
	Если СвойстваПрава.ОграниченияПолей = Неопределено Тогда
		// Ограничения полей текущего права обрабатываются первый раз.
		СвойстваПрава.ОграниченияПолей = ОграниченияПолей;
		Возврат;
		
	ИначеЕсли СвойстваПрава.ОграниченияПолей.Количество() = 0 Тогда
		// Одна из ролей не имеет ограничений права ни на одно из полей.
		Возврат;
	КонецЕсли;
	
	Если ОграниченияПолей.Количество() = 0 Тогда
		// Текущая роль не имеет ограничений права ни на одно из полей.
		СвойстваПрава.ОграниченияПолей = Новый Соответствие;
		Возврат;
	КонецЕсли;
	
	НовоеОграничениеПрочихПолей = ОграниченияПолей.Получить("");
	
	// Проверка/обновление текущих ограничений отдельных полей по новому ограничению для прочих полей.
	Для каждого КлючИЗначение Из СвойстваПрава.ОграниченияПолей Цикл
		ИмяПоля         = КлючИЗначение.Ключ;
		ОграничениеПоля = КлючИЗначение.Значение;
		Если ОграниченияПолей.Получить(ИмяПоля) <> Неопределено Тогда
			// Это поле имеет отдельную новую настройку ограничения.
			Продолжить;
		КонецЕсли;
		Если ОграничениеПоля = "" Тогда
			// Это поле не имеет ограничения, поэтому не должно совпадать с новым общим ограничением.
			Продолжить;
		КонецЕсли;
		Если НовоеОграничениеПрочихПолей = "" Тогда
			СвойстваПрава.ОграниченияПолей[ИмяПоля] = "";
		ИначеЕсли ОграничениеПоля <> НовоеОграничениеПрочихПолей Тогда
			ЕстьОшибки = Истина;
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"),
				ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, НовоеОграничениеПрочихПолей));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка текущих ограничений полей по новым ограничения.
	// Добавление ограничений новых отдельных полей.
	СтароеОграничениеПрочихПолей = СвойстваПрава.ОграниченияПолей.Получить("");
	Для каждого КлючИЗначение Из ОграниченияПолей Цикл
		Поле        = КлючИЗначение.Ключ;
		Ограничение = КлючИЗначение.Значение;
		
		ОграничениеПоля = СвойстваПрава.ОграниченияПолей.Получить(Поле);
		Если ОграничениеПоля = Неопределено Тогда
			ОграничениеПоля = СтароеОграничениеПрочихПолей;
			СвойстваПрава.ОграниченияПолей.Вставить(Поле, ОграничениеПоля);
		КонецЕсли;
		
		Если ОграничениеПоля = "" Тогда
			// Поле без ограничения не может стать с ограничением.
		ИначеЕсли Ограничение = "" Тогда
			СвойстваПрава.ОграниченияПолей[Поле] = "";
		ИначеЕсли ОграничениеПоля <> Ограничение Тогда
			ЕстьОшибки = Истина;
			ИмяПоля = ?(ЗначениеЗаполнено(Поле), Поле, "<" + НСтр("ru = 'Прочие поля'") + ">");
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"),
				ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, Ограничение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяШаблона = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяШаблона = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство %1 (имя шаблона)'"),
			"name");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Шаблон = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Шаблон = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство %1 (текст шаблона)'"),
			"condition");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТекстШаблона = Контекст.СоответствиеШаблонов.Получить(ИмяШаблона);
	Если ТекстШаблона = Неопределено Тогда
		Контекст.МассивШаблонов.Добавить(ИмяШаблона);
		Контекст.СоответствиеШаблонов.Вставить(ИмяШаблона, Шаблон);
		
	ИначеЕсли ТекстШаблона <> Шаблон Тогда
		ЕстьОшибки = Истина;
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Текст шаблона с именем %1, загруженный ранее:
			           |%2
			           |не совпадает с указанным:
			           |%3'"),
			ИмяШаблона, ТекстШаблона, Шаблон));
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionTemplate" Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента %1'"),
			"restrictionTemplate");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедур ДобавитьПраваРоли, ПрочитатьОбъект, ПрочитатьПравоОбъекта,
// ПрочитатьОграничениеПолей, ПрочитатьШаблонОграничения.
//
Функция ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, ИмяЭлемента)
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = ИмяЭлемента Тогда
		
		ЧтениеXML.Прочитать();
		Возврат "";
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст
	 Или Не ЧтениеXML.ИмеетЗначение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = ЧтениеXML.Значение;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

// Для процедур ДобавитьОграниченияПравРоли, ДобавитьПраваРоли,
// ПрочитатьОбъект, ДобавитьОграниченияПолей, ПрочитатьШаблонОграничения.
//
Процедура ЗаписатьСообщение(Журнал, Заголовок = "", Описание = "")
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста = Новый ЗаписьТекста(Журнал, "UTF-8",, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок)
	 Или ЗначениеЗаполнено(Описание) Тогда
		
		Строка = СокрЛП(Заголовок + Символы.ПС + Описание) + Символы.ПС;
		
		Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
			ЗаписьТекста.ЗаписатьСтроку(Строка);
		Иначе
			Журнал.Текст = Журнал.Текст + Символы.ПС + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Функция ДобавитьКонечныйРазделительПути(ПутьКаталога)
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции

Функция УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Знач ТекстОграничения)
	
	ТекстОграничения = СокрЛП(ТекстОграничения);
	
	Если СтрНачинаетсяС(ТекстОграничения, "#Если &ОграничениеДоступаНаУровнеЗаписейУниверсально") Тогда
		ТекстДляПоиска = "#Иначе";
		Позиция = СтрНайти(ТекстОграничения, ТекстДляПоиска);
		Если Позиция > 0 Тогда
			ТекстОграничения = Сред(ТекстОграничения, Позиция + СтрДлина(ТекстДляПоиска));
			ТекстДляПоиска = "#КонецЕсли";
			Если СтрЗаканчиваетсяНа(ТекстОграничения, ТекстДляПоиска) Тогда
				ТекстОграничения = Лев(ТекстОграничения, СтрДлина(ТекстОграничения) - СтрДлина(ТекстДляПоиска));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОграничения;
	
КонецФункции

#Область СравнениеСтарогоИНовогоRLS

Функция СпискиСОграничениемДоступа()
	СпискиСОграничениемДоступа = Новый Соответствие;
	ИнтеграцияПодсистемБСП.ПриЗаполненииСписковСОграничениемДоступа(СпискиСОграничениемДоступа);
	УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа(СпискиСОграничениемДоступа);
	Возврат СпискиСОграничениемДоступа;
КонецФункции

Функция ВсеОграниченияВРолях(ТаблицаОграничений)
	
	Для Каждого ОписаниеОграничения Из ТаблицаОграничений Цикл
		ОписаниеОграничения.Ограничение = ОчиститьОтПостороннихСимволов(ОписаниеОграничения.Ограничение);
	КонецЦикла;
	
	ТаблицаОграничений.Свернуть("Таблица,Право,Ограничение,Роль");
	
	ОграниченияДляПользователей = ТаблицаОграничений.Скопировать();
	ОграниченияДляПользователей.Очистить();
	ОграниченияДляВнешнихПользователей = ОграниченияДляПользователей.Скопировать();
	
	НазначениеРолей = Пользователи.НазначениеРолей();
	
	Для Каждого Ограничение Из ТаблицаОграничений Цикл
		ДляВнешнихПользователей = НазначениеРолей.ТолькоДляВнешнихПользователей.Найти(Ограничение.Роль) <> Неопределено;
		СовместноДляПользователейИВнешнихПользователей = НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Найти(Ограничение.Роль) <> Неопределено;
		
		Если ДляВнешнихПользователей Или СовместноДляПользователейИВнешнихПользователей Тогда
			ЗаполнитьЗначенияСвойств(ОграниченияДляВнешнихПользователей.Добавить(), Ограничение);
		КонецЕсли;
		
		Если Не ДляВнешнихПользователей Тогда
			ЗаполнитьЗначенияСвойств(ОграниченияДляПользователей.Добавить(), Ограничение);
		КонецЕсли;
	КонецЦикла;
	
	ОграниченияДляПользователей.Свернуть("Таблица,Право,Ограничение,Роль");
	ОграниченияДляВнешнихПользователей.Свернуть("Таблица,Право,Ограничение,Роль");
	
	ВсеОграничения = ОграниченияДляПользователей;
	ВсеОграничения.Колонки.Добавить("Права");
	ВсеОграничения.Колонки.Добавить("ДляПользователей", Новый ОписаниеТипов("Булево"));
	ВсеОграничения.Колонки.Добавить("ДляВнешнихПользователей", Новый ОписаниеТипов("Булево"));
	ВсеОграничения.Колонки.Добавить("Чтение", Новый ОписаниеТипов("Булево"));
	ВсеОграничения.Колонки.Добавить("Добавление", Новый ОписаниеТипов("Булево"));
	ВсеОграничения.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	ВсеОграничения.Колонки.Добавить("Удаление", Новый ОписаниеТипов("Булево"));
	ВсеОграничения.ЗаполнитьЗначения(Истина, "ДляПользователей");
	
	Для Каждого Ограничение Из ОграниченияДляВнешнихПользователей Цикл
		НоваяСтрока = ВсеОграничения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Ограничение);
		НоваяСтрока.ДляВнешнихПользователей = Истина;
	КонецЦикла;
	
	Для Каждого Ограничение Из ВсеОграничения Цикл
		Если Ограничение.Право = "Чтение" Тогда
			Ограничение.Чтение = Истина;
		ИначеЕсли Ограничение.Право = "Изменение" Тогда
			Ограничение.Изменение = Истина;
		ИначеЕсли Ограничение.Право = "Добавление" Тогда
			Ограничение.Добавление = Истина;
		ИначеЕсли Ограничение.Право = "Удаление" Тогда
			Ограничение.Удаление = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВсеОграничения.Свернуть("Таблица,Ограничение,Роль", "Чтение,Изменение,Добавление,Удаление,ДляПользователей,ДляВнешнихПользователей");
	ВсеОграничения.Сортировать("Таблица,ДляПользователей Убыв,ДляВнешнихПользователей Убыв,Роль,Чтение Убыв,Изменение Убыв,Добавление Убыв,Удаление Убыв");
	
	Возврат ВсеОграничения;
	
КонецФункции

Процедура СгруппироватьРолиВТаблицеОграничений(ТаблицаОграничений)
	
	Отборы = ТаблицаОграничений.Скопировать();
	Отборы.Свернуть("Ограничение");
	
	Для Каждого Отбор Из Отборы Цикл
		СтруктураОтбора = Новый Структура;
		Для Каждого Колонка Из Отборы.Колонки Цикл
			СтруктураОтбора.Вставить(Колонка.Имя, Отбор[Колонка.Имя]);
		КонецЦикла;
		
		НайденныеСтроки = ТаблицаОграничений.НайтиСтроки(СтруктураОтбора);
		ВременнаяТаблица = ТаблицаОграничений.Скопировать(НайденныеСтроки);
		
		Роли = Новый Массив;
		Для Каждого Ограничение Из ВременнаяТаблица Цикл
			Для Каждого Право Из СтрРазделить("Чтение,Изменение,Добавление,Удаление", ",", Ложь) Цикл
				Если Ограничение[Право] Тогда
					Роли.Добавить(Ограничение.Роль + "." + Право);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РолиСтрокой = СтрСоединить(Роли, ", ");
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.Роль = РолиСтрокой;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОграничений.Свернуть("Ограничение,Роль", "Чтение,Изменение,Добавление,Удаление,ДляПользователей,ДляВнешнихПользователей");
	ТаблицаОграничений.Сортировать("ДляПользователей Убыв,ДляВнешнихПользователей Убыв,Чтение Убыв,Изменение Убыв,Добавление Убыв,Удаление Убыв,Роль");
	
КонецПроцедуры

Функция ОграниченияТаблицыВРолях(Таблица, ОграниченияВРолях)
	
	НайденныеСтроки = ОграниченияВРолях.НайтиСтроки(Новый Структура("Таблица", Таблица));
	ОграниченияПоТаблице = ОграниченияВРолях.Скопировать(НайденныеСтроки);
	
	СгруппироватьРолиВТаблицеОграничений(ОграниченияПоТаблице);
	
	Возврат ОграниченияПоТаблице;
	
КонецФункции

Функция КоллекцияОграниченийСтрокой(КоллекцияОграничений, ЕстьОграниченияДляПользователейВМодулях, ЕстьОграниченияДляВнешнихПользователейВМодулях)
	
	Результат = Новый Массив;
	
	ВыводитьИменаРолейДляВнутреннихПользователей = ЕстьРазличныеRLSНаОдноПраво(КоллекцияОграничений, "ДляПользователей");
	ВыводитьИменаРолейДляВнешнихПользователей = ЕстьРазличныеRLSНаОдноПраво(КоллекцияОграничений, "ДляВнешнихПользователей");
	
	Для Каждого Ограничение Из КоллекцияОграничений Цикл
		Строки = Новый Массив;
		Если Ограничение.ДляПользователей Тогда
			Если Ограничение.ДляВнешнихПользователей Тогда
				Строки.Добавить(НСтр("ru = 'Внутренние и внешние пользователи:'"));
			Иначе
				Строки.Добавить(НСтр("ru = 'Внутренние пользователи:'"));
			КонецЕсли
		Иначе
			Если Ограничение.ДляВнешнихПользователей Тогда
				Строки.Добавить(НСтр("ru = 'Внешние пользователи:'"));
			Иначе
				Строки.Добавить(НСтр("ru = 'Ни для внутренних и ни для внешних пользователей:'"));
			КонецЕсли
		КонецЕсли;
		
		Права = Новый Массив;
		Для Каждого Право Из СтрРазделить("Чтение,Изменение,Добавление,Удаление", ",", Ложь) Цикл
			Если Ограничение[Право] Тогда
				Права.Добавить(Право);
			КонецЕсли;
		КонецЦикла;
		
		Если Ограничение.ДляПользователей И ВыводитьИменаРолейДляВнутреннихПользователей
			Или Ограничение.ДляВнешнихПользователей И ВыводитьИменаРолейДляВнешнихПользователей Тогда
			Для Каждого ПравоРоли Из СтрРазделить(Ограничение.Роль, ", ", Ложь) Цикл
				Строки.Добавить("Роль." + ПравоРоли);
			КонецЦикла;
		Иначе
			Строки.Добавить(СтрСоединить(Права, ", "));
		КонецЕсли;
		Строки.Добавить(Ограничение.Ограничение);
		
		Результат.Добавить(СтрСоединить(Строки, Символы.ПС));
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Результат) И ЕстьОграниченияДляПользователейВМодулях И ЕстьОграниченияДляВнешнихПользователейВМодулях Тогда
		Результат.Добавить(НСтр("ru = 'Внутренние и внешние пользователи:'"));
		Результат.Добавить(НСтр("ru = '<не указан>'"));
	Иначе
		Если Не ЕстьОграниченияДляПользователейВРолях(КоллекцияОграничений) И ЕстьОграниченияДляПользователейВМодулях Тогда
			Строки.Вставить(0, НСтр("ru = 'Внутренние пользователи:'"));
			Строки.Вставить(1, НСтр("ru = '<не указан>'"));
		КонецЕсли;
		
		Если Не ЕстьОграниченияДляВнешнихПользователейВРолях(КоллекцияОграничений) И ЕстьОграниченияДляВнешнихПользователейВМодулях Тогда
			Строки.Добавить(НСтр("ru = 'Внешние пользователи:'"));
			Строки.Добавить(НСтр("ru = '<не указан>'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, Символы.ПС + Символы.ПС);
	
КонецФункции

Функция ЕстьРазличныеRLSНаОдноПраво(КоллекцияОграничений, Фильтр)
	
	Для Каждого Право Из СтрРазделить("Чтение,Изменение,Добавление,Удаление", ",", Ложь) Цикл
		Отбор = Новый Структура;
		Отбор.Вставить(Фильтр, Истина);
		Отбор.Вставить(Право, Истина);
		
		НайденныеСтроки = КоллекцияОграничений.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОчиститьОтПостороннихСимволов(ИсходныйТекст)
	Результат = "";
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИсходныйТекст) Цикл
		Строка = СтрПолучитьСтроку(ИсходныйТекст, НомерСтроки);
		Если Не СтрНачинаетсяС(СокрЛ(Строка), "//") Тогда
			Результат = Результат + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрЗаменить(Результат, """Чтение""", """""");
	Результат = СтрЗаменить(Результат, """Изменение""", """""");
	Результат = СтрЗаменить(Результат, """Добавление""", """""");
	Результат = СтрЗаменить(Результат, """Удаление""", """""");
	
	Возврат СокрЛП(Результат);
КонецФункции

Функция ОграниченияВМодулях(Таблица, СпискиСОграничением)
	
	Ограничение = Новый Структура;
	Ограничение.Вставить("Текст", "");
	Ограничение.Вставить("ТекстДляВнешнихПользователей", "");
	Ограничение.Вставить("ПоВладельцуБезЗаписиКлючейДоступа", Неопределено);
	Ограничение.Вставить("ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей", Неопределено);
	Ограничение.Вставить("ТекстВМодулеМенеджера", Ложь);
	Ограничение.Вставить("ПриЗаполненииСписковСОграничениемДоступа", Ложь);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Таблица);
	ТекстВМодулеМенеджера = СпискиСОграничением.Получить(ОбъектМетаданных);
	Если ТекстВМодулеМенеджера = Неопределено Тогда
		Возврат Ограничение;
	КонецЕсли;
	
	Ограничение.ПриЗаполненииСписковСОграничениемДоступа = Истина;
	Ограничение.ТекстВМодулеМенеджера = ТекстВМодулеМенеджера;
	
	// АПК:280-выкл - №499.3.4 Допустимо пропустить обработку исключения, так как
	// при этом будет сформирован пустой текст ограничения для сравнения.
	// Само исключение будет обработано при вызове процедуры ОшибкиОграниченийДоступа
	// общего модуля УправлениеДоступомСлужебный из поставляемого отчета ПроверкаВнедренияБСП.
	
	Если ТекстВМодулеМенеджера Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Таблица);
		Попытка
			Менеджер.ПриЗаполненииОграниченияДоступа(Ограничение);
		Исключение
			// Обработка не требуется.
		КонецПопытки;
	Иначе
		Попытка
			УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа(ОбъектМетаданных, Ограничение);
		Исключение
			// Обработка не требуется.
		КонецПопытки;
	КонецЕсли;
	
	// АПК:280-вкл.
	
	Возврат Ограничение;
	
КонецФункции

Функция ТекстыОграниченийСтрокой(ОграниченияВМодулях, ОграниченияВРолях)
	
	ЕстьОграниченияДляПользователейВМодулях = ЗначениеЗаполнено(ОграниченияВМодулях.Текст);
	ЕстьОграниченияДляВнешнихПользователейВМодулях = ЗначениеЗаполнено(ОграниченияВМодулях.ТекстДляВнешнихПользователей);
	
	ТекстыВРолях = КоллекцияОграниченийСтрокой(ОграниченияВРолях, ЕстьОграниченияДляПользователейВМодулях, ЕстьОграниченияДляВнешнихПользователейВМодулях);
	
	Строки = Новый Массив;
	
	Строки.Добавить("RLS в формате БСП 2.х");
	Строки.Добавить("");
	Строки.Добавить(ТекстыВРолях);
	Строки.Добавить("");
	Строки.Добавить("RLS в формате БСП 3.х");
	Строки.Добавить("");
	
	Текст = СтрЗаменить(ОграниченияВМодулях.Текст, Символы.ПС, Символы.ПС + "|");
	ТекстДляВнешнихПользователей = СтрЗаменить(ОграниченияВМодулях.ТекстДляВнешнихПользователей, Символы.ПС, Символы.ПС + "|");
	
	Если Текст = ТекстДляВнешнихПользователей Тогда
		Если ЕстьОграниченияДляПользователейВРолях(ОграниченияВРолях) Тогда
			Если ЕстьОграниченияДляВнешнихПользователейВРолях(ОграниченияВРолях) Тогда
				Строки.Добавить(НСтр("ru = 'Внутренние и внешние пользователи:'"));
			Иначе
				Строки.Добавить(НСтр("ru = 'Внутренние пользователи:'"));
			КонецЕсли;
		Иначе
			Строки.Добавить(НСтр("ru = 'Внешние пользователи:'"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Текст) Тогда
			Если ОграниченияВМодулях.ПриЗаполненииСписковСОграничениемДоступа Тогда
				Если ОграниченияВМодулях.ТекстВМодулеМенеджера Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<не указан в процедуре %1 модуля менеджера>'"),
						"ПриЗаполненииОграниченияДоступа");
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<не указан в %1>'"),
						"УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа");
				КонецЕсли;
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<не подключен в %1>'"),
					"УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа");
			КонецЕсли;
		КонецЕсли;
		Строки.Добавить(Текст);
	Иначе
		Если ЗначениеЗаполнено(Текст) Тогда
			Строки.Добавить(НСтр("ru = 'Внутренние пользователи:'"));
			Строки.Добавить(Текст);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстДляВнешнихПользователей) Тогда
			Если ЗначениеЗаполнено(Текст) Тогда
				Строки.Добавить("");
			КонецЕсли;
			Строки.Добавить(НСтр("ru = 'Внешние пользователи:'"));
			Строки.Добавить(ТекстДляВнешнихПользователей);
		КонецЕсли;
	КонецЕсли;
	
	Результат = СтрСоединить(Строки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьОграниченияДляПользователейВРолях(ОграниченияВРолях)
	Возврат ОграниченияВРолях.НайтиСтроки(Новый Структура("ДляПользователей", Истина)).Количество() > 0;
КонецФункции

Функция ЕстьОграниченияДляВнешнихПользователейВРолях(ОграниченияВРолях)
	Возврат ОграниченияВРолях.НайтиСтроки(Новый Структура("ДляВнешнихПользователей", Истина)).Количество() > 0;
КонецФункции

Функция ПрочитатьФайл(ПолноеИмяМодуля)
	
	Файл = Новый Файл(ПолноеИмяМодуля);
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяМодуля);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат ТекстМодуля;
	
КонецФункции

Функция ОтправитьТекстыОграничений(ПараметрыОтправки)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыОтправки.СтрокаПодключенияКСервисуКонтроляRLS);
	ЗащищенноеСоединение = ?(СтруктураURI.Схема = "https", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ЗначениеВJSON(ПараметрыОтправки));
	
	HTTPОтвет = Неопределено;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru = 'Контроль изменения текстов RLS'", ОбщегоНазначения.КодОсновногоЯзыка());
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Отправка текстов ограничений не выполнена по причине:'") + Символы.ПС + "%1";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, СтруктураURI.Логин,
			СтруктураURI.Пароль, Прокси, 600, ЗащищенноеСоединение);
			
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Пояснение = HTTPОтвет.ПолучитьТелоКакСтроку();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке, НСтр("ru = 'Код состояния:'")) + " " + HTTPОтвет.КодСостояния + ?(ЗначениеЗаполнено(Пояснение), Символы.ПС + Пояснение, "");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли