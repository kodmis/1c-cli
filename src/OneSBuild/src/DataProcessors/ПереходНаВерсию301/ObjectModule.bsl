///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ПСТаб;
Перем ЗависимостиПравДоступа;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияПомощника

// События, возникающие в процессе перебора объектов метаданных.

Процедура ПриЧтенииОсновныхНастроек(Параметры)
	УправлениеДоступом_ПриЧтенииОсновныхНастроек(Параметры);
КонецПроцедуры

Процедура ПриАнализеОбъекта(Параметры, СтрокаОбъекта)
	УправлениеДоступом_ПриАнализеОбъекта(Параметры, СтрокаОбъекта);
КонецПроцедуры

Процедура ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	УправлениеДоступом_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
КонецПроцедуры

#КонецОбласти


#Область APIРедактированияМетодов

Процедура ДобавитьОтступы(Текст)
	НовыйТекст = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		НовыйТекст = НовыйТекст + Символы.Таб + Строка + Символы.ПС;
	КонецЦикла;
	Текст = СокрП(НовыйТекст);
КонецПроцедуры

Функция НайтиПроцедуруМодуля(Модуль, ИмяПроцедуры)
	Возврат НайтиБлок(Модуль.Структура.Содержимое, "Процедура" + " " + ИмяПроцедуры + "(");
КонецФункции

Функция НайтиОбластьМодуля(Модуль, ИмяОбласти)
	Возврат НайтиБлок(Модуль.Структура.Содержимое, "#Область" + " " + ИмяОбласти);
КонецФункции

Функция НайтиИнструкциюПрепроцессораМодуля(Модуль, ТекстИнструкции)
	Возврат НайтиБлок(Модуль.Структура.Содержимое, ТекстИнструкции, Ложь);
КонецФункции

Функция ПолучитьИнструкциюЕслиСерверИлиТолстыйКлиентОбычноеПриложениеИлиВнешнееСоединение(Модуль);
	Заголовок = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда";
	Подвал = "#КонецЕсли";
	
	Инструкция = НайтиИнструкциюПрепроцессораМодуля(Модуль, Заголовок);
	Если Инструкция = Неопределено Тогда
		Инструкция = ДобавитьЭлементВНачало(Модуль.Структура);
		Инструкция.Заголовок = Заголовок;
		Инструкция.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Инструкция;
КонецФункции

Функция ПолучитьОбластьПрограммныйИнтерфейс(Модуль);
	ИмяОбласти = "ПрограммныйИнтерфейс";
	
	Заголовок = "#Область" + " " + ИмяОбласти;
	Подвал = "#КонецОбласти";
	
	Область = НайтиОбластьМодуля(Модуль, ИмяОбласти);
	Если Область = Неопределено Тогда
		ЭлементМодуля = ПолучитьИнструкциюЕслиСерверИлиТолстыйКлиентОбычноеПриложениеИлиВнешнееСоединение(Модуль);
		Область = ДобавитьЭлементВНачало(ЭлементМодуля);
		Область.Заголовок = Заголовок;
		Область.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ПолучитьОбластьДляВызоваИзДругихПодсистем(Модуль);
	ИмяОбласти = "ДляВызоваИзДругихПодсистем";
	
	Заголовок = "#Область" + " " + ИмяОбласти;
	Подвал = "#КонецОбласти";
	
	Область = НайтиОбластьМодуля(Модуль, ИмяОбласти);
	Если Область = Неопределено Тогда
		ЭлементМодуля = ПолучитьОбластьПрограммныйИнтерфейс(Модуль);
		Область = ДобавитьЭлементВКонец(ЭлементМодуля);
		Область.Заголовок = Заголовок;
		Область.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ПолучитьОбластьПодсистемы(ЭлементМодуля, ИмяПодсистемы, ДобавитьОтступы = Ложь, СоздаватьПередДругимиОбластями = Ложь);
	Заголовок = "//" + " " + ИмяПодсистемы;
	Подвал = "//" + " " + "Конец" + " " + ИмяПодсистемы;
	
	Результат = НайтиБлок(ЭлементМодуля.Содержимое, Заголовок);
	Если Результат = Неопределено Тогда
		Если ДобавитьОтступы Тогда
			ДобавитьОтступы(Заголовок);
			ДобавитьОтступы(Подвал);
		КонецЕсли;
		
		Если СоздаватьПередДругимиОбластями Тогда
			Результат = ДобавитьЭлементВНачало(ЭлементМодуля);
		Иначе
			Результат = ДобавитьЭлементВКонец(ЭлементМодуля);
		КонецЕсли;
		
		Результат.Заголовок = Заголовок;
		Результат.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОбластьОбработчикиСобытийФормы(Модуль);
	ИмяОбласти = "ОбработчикиСобытийФормы";
	
	Заголовок = "#Область" + " " + ИмяОбласти;
	Подвал = "#КонецОбласти";
	
	Область = НайтиОбластьМодуля(Модуль, ИмяОбласти);
	Если Область = Неопределено Тогда
		Область = ДобавитьЭлементПослеОбластиПеременных(Модуль.Структура);
		Область.Заголовок = Заголовок;
		Область.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ДобавитьЭлементВКонец(ЭлементМодуля, ДобавлятьОтступы = Истина)
	
	НовыйБлок = НовыйБлок(ЭлементМодуля);
	
	ЕстьОтступВКонце = ЭлементМодуля.Содержимое.Количество() > 0
		И (ТипЗнч(ЭлементМодуля.Содержимое[ЭлементМодуля.Содержимое.Количество() - 1]) <> Тип("Структура")
			И ПустаяСтрока(ЭлементМодуля.Содержимое[ЭлементМодуля.Содержимое.Количество() - 1]));
	
	Отступ = Отступ(ЭлементМодуля);
	
	Если ДобавлятьОтступы И Не ЕстьОтступВКонце Тогда
		ЭлементМодуля.Содержимое.Добавить(Отступ);
	КонецЕсли;
	
	ЭлементМодуля.Содержимое.Добавить(НовыйБлок);
	
	Если ДобавлятьОтступы Тогда
		ЭлементМодуля.Содержимое.Добавить(Отступ);
	КонецЕсли;
	
	Возврат НовыйБлок;
	
КонецФункции

Функция ДобавитьЭлементВНачало(ЭлементМодуля, ДобавлятьОтступы = Истина)
	
	НовыйБлок = НовыйБлок(ЭлементМодуля);
	
	ЕстьОтступВНачале = ЭлементМодуля.Содержимое.Количество() > 0
		И (ТипЗнч(ЭлементМодуля.Содержимое[0]) <> Тип("Структура") И ПустаяСтрока(ЭлементМодуля.Содержимое[0]));
		
	Отступ = Отступ(ЭлементМодуля);
	
	Если ДобавлятьОтступы И Не ЕстьОтступВНачале Тогда
		ЭлементМодуля.Содержимое.Вставить(0, Отступ);
	КонецЕсли;
	
	ЭлементМодуля.Содержимое.Вставить(0, НовыйБлок);
	
	Если ДобавлятьОтступы Тогда
		ЭлементМодуля.Содержимое.Вставить(0, Отступ);
	КонецЕсли;
	
	Возврат НовыйБлок;
	
КонецФункции

Процедура ДобавитьСтрокуВКонец(ЭлементМодуля, Строка)
	
	КоличествоСодержимого = ЭлементМодуля.Содержимое.Количество();
	ПозицияВставки = КоличествоСодержимого;
	
	Для Индекс = -ЭлементМодуля.Содержимое.Количество() + 1 По 0 Цикл
		ПозицияВставки = -Индекс + 1;
		Если ЗначениеЗаполнено(ЭлементМодуля.Содержимое[-Индекс]) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОтступВКонце = ПозицияВставки <= КоличествоСодержимого И КоличествоСодержимого > 0;
	
	ЭлементМодуля.Содержимое.Вставить(ПозицияВставки, Строка);
	
	Если ЕстьОтступВКонце И ПозицияВставки = КоличествоСодержимого Тогда
		ЭлементМодуля.Содержимое.Добавить(Отступ(ЭлементМодуля));
	КонецЕсли;
	
КонецПроцедуры

Функция Отступ(ЭлементМодуля)
	
	Если ЗначениеЗаполнено(ЭлементМодуля.Заголовок) Тогда
		Заголовок = СокрЛ(ЭлементМодуля.Заголовок);
		Если СтрНачинаетсяС(Заголовок, "Процедура") Или СтрНачинаетсяС(Заголовок, "Функция") Тогда
			Возврат Символы.Таб;
		ИначеЕсли СтрНачинаетсяС(Заголовок, "#") Тогда
			Возврат Отступ(ЭлементМодуля.Родитель);
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ДобавитьЭлементПослеОбластиПеременных(ЭлементМодуля)
	
	Заголовки = Новый Массив;
	Заголовки.Добавить("Процедура");
	Заголовки.Добавить("Функция");
	
	НайденныеБлоки = НайтиБлоки(ЭлементМодуля.Содержимое, Заголовки);
	
	Если НайденныеБлоки.Количество() = 0 Тогда
		Возврат ДобавитьЭлементВНачало(ЭлементМодуля, Истина);
	КонецЕсли;
	
	ТекущийБлок = НайденныеБлоки[0];
	Пока ТекущийБлок.Родитель <> ЭлементМодуля Цикл
		ТекущийБлок = ТекущийБлок.Родитель;
	КонецЦикла;
	
	Индекс = ЭлементМодуля.Содержимое.Найти(ТекущийБлок);
	НовыйБлок = НовыйБлок(ЭлементМодуля);
	ЭлементМодуля.Содержимое.Вставить(Индекс, "");
	ЭлементМодуля.Содержимое.Вставить(Индекс, НовыйБлок);
	
	Возврат НовыйБлок;
	
КонецФункции

Функция СтрокаВБлок(Текст)
	Результат = НовыйБлок();
	Если СтрДлина(Текст) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийБлок = Результат;
	Описание = Новый Массив;
	ИнструкцияПрепроцессора = "";
	Для НомерСтроки = 1 По СтрЧислоВхождений(Текст, Символы.ПС) + 1 Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		Если ЭтоЗаголовокБлока(Строка) Тогда
			НовыйБлок = НовыйБлок(ТекущийБлок, Строка, СтрСоединить(Описание, Символы.ПС));
			ТекущийБлок.Содержимое.Добавить(НовыйБлок);
			ТекущийБлок = НовыйБлок;
			ТекущийБлок.ИнструкцияПрепроцессора = ИнструкцияПрепроцессора;
			ИнструкцияПрепроцессора = "";
			Описание.Очистить();
		ИначеЕсли ЭтоПродолжениеЗаголовка(ТекущийБлок.Заголовок, Строка) Тогда
			ТекущийБлок.Заголовок = ТекущийБлок.Заголовок + Символы.ПС + Строка;
		ИначеЕсли ЭтоПодвалБлока(Строка, ТекущийБлок) Тогда
			ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
			ТекущийБлок.Подвал = Строка;
			ТекущийБлок = ТекущийБлок.Родитель;
		ИначеЕсли СтрНачинаетсяС(Строка, "//") И ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
			Описание.Добавить(Строка);
		ИначеЕсли СтрНачинаетсяС(Строка, "&") И ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
			ИнструкцияПрепроцессора = Строка;
		Иначе
			ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
			Если Не ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
				ТекущийБлок.Содержимое.Добавить(ИнструкцияПрепроцессора);
				ИнструкцияПрепроцессора = "";
			КонецЕсли;
			ТекущийБлок.Содержимое.Добавить(Строка);
		КонецЕсли;
	
		Если СтрНачинаетсяС(СокрЛ(ТекущийБлок.Заголовок), "Перем") И СтрНайти(ТекущийБлок.Заголовок, ";") > 0 Тогда
			ТекущийБлок = ТекущийБлок.Родитель;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
	Если Не ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
		ТекущийБлок.Содержимое.Добавить(ИнструкцияПрепроцессора);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция БлокВСтроку(Блок)
	Если ТипЗнч(Блок) = Тип("Строка") Тогда
		Возврат Блок;
	КонецЕсли;
	
	КоллекцияСтрок = БлокВКоллекциюСтрок(Блок);
	
	Результат = СтрСоединить(КоллекцияСтрок, Символы.ПС);
	Возврат Результат;
КонецФункции

// Параметры:
//   Блок - см. НовыйБлок
//   
// Возвращаемое значение:
//   Массив
//
Функция БлокВКоллекциюСтрок(Знач Блок)
	
	КоллекцияСтрок = Новый Массив;
	
	Если СтрДлина(Блок.Описание) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Описание);
	КонецЕсли;
	
	Если СтрДлина(Блок.ИнструкцияПрепроцессора) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.ИнструкцияПрепроцессора);
	КонецЕсли;
	
	Если СтрДлина(Блок.Заголовок) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Заголовок);
	КонецЕсли;
	
	Для Каждого БлокСодержимого Из Блок.Содержимое Цикл
		КоллекцияСтрок.Добавить(БлокВСтроку(БлокСодержимого));
	КонецЦикла;
	
	Если СтрДлина(Блок.Подвал) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Подвал);
	КонецЕсли;
	
	Возврат КоллекцияСтрок;

КонецФункции

// Возвращаемое значение:
//   Структура:
//   * Родитель - Неопределено
//   * Подвал - Строка
//   * Содержимое - Массив
//   * Заголовок - Строка
//   * ИнструкцияПрепроцессора - Строка
//   * Описание - Строка
//
Функция НовыйБлок(Родитель = Неопределено, Заголовок = "", Описание = "")
	Результат = Новый Структура;
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("ИнструкцияПрепроцессора", "");
	Результат.Вставить("Заголовок", Заголовок);
	Результат.Вставить("Содержимое", Новый Массив);
	Результат.Вставить("Подвал", "");
	
	Результат.Вставить("Родитель", Родитель);
	Возврат Результат;
КонецФункции

Функция НайтиБлок(КоллекцияБлоков, Заголовок, ИскатьВПодчиненных = Истина)
	Результат = Неопределено;
	
	// Поиск по верхнему уровню.
	Для Каждого Элемент Из КоллекцияБлоков Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНачинаетсяС(СокрЛ(Элемент.Заголовок), Заголовок) Тогда
			Возврат Элемент;
		КонецЕсли;
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по уровню ниже.
	Если Результат = Неопределено И ИскатьВПодчиненных Тогда
		Для Каждого Элемент Из КоллекцияБлоков Цикл
			Если ТипЗнч(Элемент) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Результат = НайтиБлок(Элемент.Содержимое, Заголовок);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НайтиБлоки(КоллекцияБлоков, Знач Заголовки)
	
	Если ТипЗнч(Заголовки) = Тип("Строка") Тогда
		Заголовки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заголовки);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из КоллекцияБлоков Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Заголовок Из Заголовки Цикл
			Если СтрНачинаетсяС(СокрЛ(Элемент.Заголовок), Заголовок) Тогда
				Результат.Добавить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НайденныеБлоки = НайтиБлоки(Элемент.Содержимое, Заголовки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НайденныеБлоки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция ЭтоПродолжениеЗаголовка(Заголовок, Строка)
	Возврат (СтрНачинаетсяС(Заголовок, "Функция") Или СтрНачинаетсяС(Заголовок, "Процедура"))
		И СтрНайти(Заголовок, ")") = 0
		Или СтрНачинаетсяС(СокрЛ(Заголовок), "Перем") И СтрНайти(Заголовок, ";") = 0;
КонецФункции

Функция ЭтоЗаголовокБлока(Знач Строка)
	Строка = СокрЛП(Строка);
	
	Для Каждого ВидБлока Из ВидыБлоков() Цикл
		Если СтрНачинаетсяС(Строка, ВидБлока.Ключ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ЭтоПодвалБлока(Знач Строка, Блок)
	Строка = СокрЛ(Строка);
	ЗаголовокБлока = СокрЛ(Блок.Заголовок);
	
	Для Каждого ВидБлока Из ВидыБлоков() Цикл
		Если ВидБлока.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрНачинаетсяС(Строка, ВидБлока.Значение) Тогда
			Если СтрНачинаетсяС(ЗаголовокБлока, ВидБлока.Ключ) Тогда
				Возврат Истина;
			Иначе
				// Это подвал, но от другого блока. Проверяем его к родительским блокам.
				ТекущийБлок = Блок;
				Пока ТекущийБлок <> Неопределено И Не СтрНачинаетсяС(СокрЛ(ТекущийБлок.Заголовок), ВидБлока.Ключ) Цикл
					ТекущийБлок = ТекущийБлок.Родитель;
				КонецЦикла;
				Если ТекущийБлок = Неопределено Тогда
					// Это подвал блока, у которого нет начала.
					Возврат Ложь;
				Иначе
					// Переносим содержимое ошибочного блока в родительский блок.
					Для Каждого Элемент Из Блок.Содержимое Цикл
						ТекущийБлок.Содержимое.Добавить(Элемент);
					КонецЦикла;
					Блок.Содержимое = Новый Массив;
					
					// Переключаем текущий блок на родительский.
					Блок = ТекущийБлок; 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ВидыБлоков()
	Результат = Новый Соответствие;
	Результат.Вставить("#Если", "#КонецЕсли");
	Результат.Вставить("Функция", "КонецФункции");
	Результат.Вставить("Процедура", "КонецПроцедуры");
	Результат.Вставить("#Область", "#КонецОбласти");
	Результат.Вставить("// _Демо начало", "// _Демо конец");
	Результат.Вставить("// СтандартныеПодсистемы.", "// Конец СтандартныеПодсистемы.");
	Результат.Вставить("Перем ", Неопределено);
	Возврат Результат;
КонецФункции

Процедура ПоместитьСтрокиОписанияВСодержимое(Содержимое, Описание)
	Если Описание.Количество() > 0 Тогда
		Для Каждого СтрокаОписания Из Описание Цикл
			Содержимое.Добавить(СтрокаОписания);
		КонецЦикла;
		Описание.Очистить();
	КонецЕсли;
КонецПроцедуры


Функция МодульМенеджера(СтрокаОбъекта)
	ПолноеИмяМодуля = СтрокаОбъекта.Каталог + "Ext\ManagerModule.bsl";
	Возврат ОписаниеМодуля(ПолноеИмяМодуля);
КонецФункции

Функция МодульФормы(СтрокаФормы)
	ПолноеИмяМодуля = СтрокаФормы.Каталог + "Ext\Form\Module.bsl";
	Возврат ОписаниеМодуля(ПолноеИмяМодуля);
КонецФункции

Функция ЗаписатьМодуль(Модуль)
	ТекстМодуля = БлокВСтроку(Модуль.Структура);
	ПолноеИмяМодуля = Модуль.ПолноеИмяМодуля;
	Если ТекстМодуля <> ПрочитатьТекстМодуля(ПолноеИмяМодуля) Тогда
		ЗаписатьТекстМодуля(ПолноеИмяМодуля, ТекстМодуля);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ОписаниеМодуля(ПолноеИмяМодуля)
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяМодуля", ПолноеИмяМодуля);
	Результат.Вставить("ТекстМодуля", ПрочитатьТекстМодуля(ПолноеИмяМодуля));
	Результат.Вставить("Структура", ПрочитатьСтруктуруМодуля(Результат.ТекстМодуля));
	Возврат Результат;
КонецФункции

Функция ПрочитатьСтруктуруМодуля(ТекстМодуля)
	Возврат СтрокаВБлок(ТекстМодуля);
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура УправлениеДоступом_ПриЧтенииОсновныхНастроек(Параметры)
	
	НазначениеРолей = Пользователи.НазначениеРолей();
	Ограничения = ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(Параметры.РабочийКаталог);
	ТекстыОграниченийТаблиц = Новый Соответствие;
	ИсправляемыеТекстыОграниченийТаблиц = Новый Соответствие;
	
	ВременнаяТаблица = Ограничения.Скопировать(, "Таблица");
	ВременнаяТаблица.Свернуть("Таблица");
	ВременнаяТаблица.Сортировать("Таблица");
	СписокТаблиц = ВременнаяТаблица.ВыгрузитьКолонку("Таблица");
	
	Для Каждого Таблица Из СписокТаблиц Цикл
		ТекстыОграничений = ТекстыОграничений(Таблица, Ограничения, НазначениеРолей);
		ИсправляемыеТекстыОграничений = ТекстыОграничений_3_0_1_163(Таблица, Ограничения, НазначениеРолей);
		ТекстыОграниченийТаблиц.Вставить(Таблица, ТекстыОграниченийСтрокой(ТекстыОграничений));
		ИсправляемыеТекстыОграниченийТаблиц.Вставить(Таблица, ТекстыОграниченийСтрокой_3_0_1_163(ИсправляемыеТекстыОграничений));
	КонецЦикла;
	
	СпискиСОграничениемДоступа = Новый Соответствие;
	ИнтеграцияПодсистемБСП.ПриЗаполненииСписковСОграничениемДоступа(СпискиСОграничениемДоступа);
	УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа(СпискиСОграничениемДоступа);
	
	Параметры.Вставить("УправлениеДоступом", Новый Структура);
	Параметры.УправлениеДоступом.Вставить("ТекстыОграничений", ТекстыОграниченийТаблиц);
	Параметры.УправлениеДоступом.Вставить("ИсправляемыеТексты", ИсправляемыеТекстыОграниченийТаблиц);
	Параметры.УправлениеДоступом.Вставить("НазначениеРолей", Пользователи.НазначениеРолей());
	Параметры.УправлениеДоступом.Вставить("СпискиСОграничениемДоступа", СпискиСОграничениемДоступа);
	
КонецПроцедуры

Процедура УправлениеДоступом_ПриАнализеОбъекта(Параметры, СтрокаОбъекта)
	
	УправлениеДоступом_ВыполнитьВставкуТекстаВМодулеМенеджераОбъекта(Параметры, СтрокаОбъекта);
	
КонецПроцедуры

// Параметры:
//   Параметры - Структура:
//     * ИзмененныеФайлы - Массив
//   СтрокаОбъекта - Структура:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//   * Строки - ДеревоЗначений
//   СтрокаФормы - Структура:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//
Процедура УправлениеДоступом_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	
	ТипОсновногоРеквизитаФормы = ТипОсновногоРеквизитаФормы(СтрокаФормы);
	Если ТипОсновногоРеквизитаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОсновногоРеквизитаФормы);
	Если ОбъектМетаданных = Неопределено Или Параметры.УправлениеДоступом.ТекстыОграничений[ОбъектМетаданных.ПолноеИмя()] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДляВставки =
	"Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.УправлениеДоступом"") Тогда
	|	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль(""УправлениеДоступом"");
	|	МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	|КонецЕсли;";
	
	ДобавитьОтступы(ТекстДляВставки);
	Модуль = МодульФормы(СтрокаФормы);
	
	ПроцедураМодуля = НайтиПроцедуруМодуля(Модуль, "ПриЧтенииНаСервере");
	Если ПроцедураМодуля = Неопределено Тогда
		// Добавление обработчика
		ИмяФайла = СтрокаФормы.Каталог + "Ext\Form.xml";
		ДокументDOM = ПрочитатьДокументDOM(ИмяФайла);
		Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
		Выражение = "/xmlns:Form/xmlns:Events/xmlns:Event[@name='OnReadAtServer']";
		Если ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий() = Неопределено Тогда
			Выражение = "/xmlns:Form/xmlns:Events";
			ОбработчикиФормы = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий();
			Если ОбработчикиФормы = Неопределено Тогда
				Выражение = "/xmlns:Form";
				Форма = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий();
				ОбработчикиФормы = Форма.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Events"));
			КонецЕсли;
			Обработчик = ОбработчикиФормы.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Event"));
			Обработчик.УстановитьАтрибут("name", "OnReadAtServer");
			Обработчик.ТекстовоеСодержимое = "ПриЧтенииНаСервере";
			ЗаписатьДокументDOM(ДокументDOM, ИмяФайла);
		КонецЕсли;
		
		// Вставка процедуры
		ОбластьОбработчикиСобытийФормы = ПолучитьОбластьОбработчикиСобытийФормы(Модуль);
		ПроцедураМодуля = ДобавитьЭлементВКонец(ОбластьОбработчикиСобытийФормы);
		ПроцедураМодуля.ИнструкцияПрепроцессора = "&НаСервере";
		ПроцедураМодуля.Заголовок = "Процедура ПриЧтенииНаСервере(ТекущийОбъект)";
		ПроцедураМодуля.Подвал = "КонецПроцедуры";
	Иначе
		ПроцедураСтрокой = БлокВСтроку(ПроцедураМодуля);
		// Не изменяет процедуру, если уже есть вставка кода.
		Если СтрНайти(ПроцедураСтрокой, "УправлениеДоступом.ПриЧтенииНаСервере(") > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьУправлениеДоступом = ПолучитьОбластьПодсистемы(ПроцедураМодуля, "СтандартныеПодсистемы.УправлениеДоступом", Истина, Истина);
	Вставка = ДобавитьЭлементВНачало(ОбластьУправлениеДоступом, Ложь);
	Вставка.Содержимое.Добавить(ТекстДляВставки);
	
	ЗаписатьМодуль(Модуль);
	ИмяФайла = СтрокаОбъекта.Каталог + "Forms" + ПолучитьРазделительПути() + СтрокаФормы.Имя + ".xml";
	Параметры.ИзмененныеФайлы.Добавить(ИмяФайла);
	
КонецПроцедуры

Функция ТипОсновногоРеквизитаФормы(СтрокаФормы)
	ИмяФайла = СтрокаФормы.Каталог + СтрЗаменить("Ext\Form.xml", "\", ПолучитьРазделительПути());
	
	ФайлМодуля = Новый Файл(ИмяФайла);
	Если Не ФайлМодуля.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументDOM = ПрочитатьДокументDOM(ИмяФайла);
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	Выражение = "/xmlns:Form/xmlns:Attributes/xmlns:Attribute/xmlns:MainAttribute[text()='true']/parent::*/xmlns:Type/v8:Type";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	ТипОсновногоРеквизита = РезультатXPath.ПолучитьСледующий();
	Если ТипОсновногоРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипXMLСтрокой = ТипОсновногоРеквизита.ТекстовоеСодержимое;
	ЧастиСтроки = СтрРазделить(ТипXMLСтрокой, ":", Истина);
	Если ЧастиСтроки.Количество() = 2 Тогда
		ТипXMLСтрокой = ЧастиСтроки[1];
	КонецЕсли;
	
	Если ТипXMLСтрокой = "SettingsComposer" Тогда
		Возврат Тип("КомпоновщикНастроекКомпоновкиДанных");
	КонецЕсли;
	
	Возврат Тип(ТипXMLСтрокой);
	
КонецФункции

// Параметры:
//   Параметры - Структура:
//     * ИзмененныеФайлы - Массив
//   СтрокаОбъекта - см. УправлениеДоступом_ПриАнализеФормы.СтрокаОбъекта
//
Процедура УправлениеДоступом_ВыполнитьВставкуТекстаВМодулеМенеджераОбъекта(Параметры, СтрокаОбъекта)
	
	// Исключение.
	Если СтрокаОбъекта.ПолноеИмя = "Справочник.ПоставляемыеДополнительныеОтчетыИОбработки" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.УправлениеДоступом.СпискиСОграничениемДоступа[СтрокаОбъекта.Метаданные] = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДляВставки = Параметры.УправлениеДоступом.ТекстыОграничений[СтрокаОбъекта.ПолноеИмя];
	Если Не ЗначениеЗаполнено(ТекстДляВставки) Тогда
		Возврат;
	КонецЕсли;
	
	ИсправляемыйТекст = Параметры.УправлениеДоступом.ИсправляемыеТексты[СтрокаОбъекта.ПолноеИмя];
	
	// Вставка в модуль менеджера.
	
	ДобавитьОтступы(ТекстДляВставки);
	Если ЗначениеЗаполнено(ИсправляемыйТекст) Тогда
		ДобавитьОтступы(ИсправляемыйТекст);
	КонецЕсли;
	
	МодульМенеджера = МодульМенеджера(СтрокаОбъекта);
	
	ПроцедураМодуля = НайтиПроцедуруМодуля(МодульМенеджера, "ПриЗаполненииОграниченияДоступа");
	Если ПроцедураМодуля = Неопределено Тогда
		ОбластьДляВызоваИзДругихПодсистем = ПолучитьОбластьДляВызоваИзДругихПодсистем(МодульМенеджера);
		ОбластьУправлениеДоступом = ПолучитьОбластьПодсистемы(ОбластьДляВызоваИзДругихПодсистем, "СтандартныеПодсистемы.УправлениеДоступом");
		ПроцедураМодуля = ДобавитьЭлементВКонец(ОбластьУправлениеДоступом);
		ПроцедураМодуля.Описание = "// Параметры:
			|//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
			|//";
		ПроцедураМодуля.Заголовок = "Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт";
		ПроцедураМодуля.Подвал = "КонецПроцедуры";
	Иначе
		ПроцедураСтрокой = БлокВСтроку(ПроцедураМодуля);
		
		ЕстьTODO = СтрНайти(ПроцедураСтрокой, "TODO") > 0;
		ЕстьИсправляемыйТекст = ЗначениеЗаполнено(ИсправляемыйТекст) И ИсправляемыйТекст <> ТекстДляВставки И СтрНайти(ПроцедураСтрокой, ИсправляемыйТекст) > 0;
		ТребуетсяЗаменаТекста = ЕстьTODO Или ЕстьИсправляемыйТекст;
		
		Если Не ТребуетсяЗаменаТекста Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроцедураМодуля.Содержимое.Очистить();
	ПроцедураМодуля.Содержимое.Добавить(Символы.ПС + ТекстДляВставки + Символы.ПС);
	
	Если ЗаписатьМодуль(МодульМенеджера) Тогда
		Параметры.ИзмененныеФайлы.Добавить(МодульМенеджера.ПолноеИмяМодуля);
	КонецЕсли;
	
	Если СтрНайти(ТекстДляВставки, "TODO") > 0 Тогда
		ТипСообщения = НСтр("ru = 'Выполнить вручную'");
		ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, НСтр("ru = 'Модуль менеджера'"), ТипСообщения, ТекстДляВставки);
	КонецЕсли;
	
	// Вставка в переопределяемый модуль.
	
	Если Параметры.УправлениеДоступом.СпискиСОграничениемДоступа[СтрокаОбъекта.Метаданные] = Неопределено Тогда
		ПолноеИмяМодуля = Параметры.РабочийКаталог + СтрЗаменить("CommonModules\УправлениеДоступомПереопределяемый\Ext\Module.bsl", "\", ПолучитьРазделительПути());
		ОбщийМодуль = ОписаниеМодуля(ПолноеИмяМодуля);
		ПроцедураМодуля = НайтиПроцедуруМодуля(ОбщийМодуль, "ПриЗаполненииСписковСОграничениемДоступа");
		
		ШаблонДляВставкиВПриЗаполненииСписковСОграничениемДоступа = "	Списки.Вставить(Метаданные.%1.%2, Истина);";
		РодительСтрокиОбъекта = СтрокаОбъекта.Родитель; // см. УправлениеДоступом_ПриАнализеФормы.СтрокаОбъекта
		ТекстДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонДляВставкиВПриЗаполненииСписковСОграничениемДоступа, РодительСтрокиОбъекта.Имя, СтрокаОбъекта.Имя);
			
		ПроцедураСтрокой = БлокВСтроку(ПроцедураМодуля);
		Если СтрНайти(ПроцедураСтрокой, ТекстДляВставки) = 0 Тогда
			ДобавитьСтрокуВКонец(ПроцедураМодуля, ТекстДляВставки);
			Если ЗаписатьМодуль(ОбщийМодуль) Тогда
				Параметры.ИзмененныеФайлы.Добавить(ОбщийМодуль.ПолноеИмяМодуля);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Таблица - Строка
//     * Роль - Строка
//     * Право - Строка
//     * Поля - Строка
//     * Ограничение - Строка
//     * ТекстОграничения - Строка
//
Функция ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузки = "", ОшибкиВВыгрузке = "") Экспорт
	
	ОграниченияПрав = Новый ТаблицаЗначений;
	ОграниченияПрав.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("ТекстОграничения", Новый ОписаниеТипов("Строка"));
	
	ОшибкиВВыгрузке = "";
	Для Каждого Роль Из Метаданные.Роли Цикл
		ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль.Имя, ПапкаВыгрузки, ОшибкиВВыгрузке);
	КонецЦикла;
	
	Возврат ОграниченияПрав;
	
КонецФункции

// Для процедуры ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы.
Процедура ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль, ПапкаВыгрузки, ОписаниеОшибки)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Пути",   Новый Структура("ПапкаДляВыгрузкиПрав", ПапкаВыгрузки));
	Контекст.Вставить("Журнал", Новый Структура("Текст", ""));
	Контекст.Вставить("МассивОбъектов",       Новый Массив);
	Контекст.Вставить("СоответствиеОбъектов", Новый Соответствие);
	Контекст.Вставить("МассивШаблонов",       Новый Массив);
	Контекст.Вставить("СоответствиеШаблонов", Новый Соответствие);
	
	ЕстьОшибки = Ложь;
	Попытка
		ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
	Права = Новый Соответствие;
	Права.Вставить("Read",   "Чтение");
	Права.Вставить("Insert", "Добавление");
	Права.Вставить("Update", "Изменение");
	Права.Вставить("Delete", "Удаление");
	
	СоответствиеОбъектов = Контекст.СоответствиеОбъектов;
	
	Для Каждого ОписаниеОбъекта Из СоответствиеОбъектов Цикл
		Если СтрЧислоВхождений(ОписаниеОбъекта.Ключ, ".") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъекта.Ключ).ПолноеИмя();
		Если ПолноеИмя = Неопределено Тогда
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти объект метаданных ""%1"".'"), ПолноеИмя));
			ЕстьОшибки = Истина;
		КонецЕсли;
		СоответствиеПрав = ОписаниеОбъекта.Значение.СоответствиеПрав;
		Для Каждого ОписаниеПрава Из СоответствиеПрав Цикл
			ОграниченияПолей = ОписаниеПрава.Значение.ОграниченияПолей;
			Если Не ЗначениеЗаполнено(ОграниченияПолей) Тогда
				Продолжить;
			КонецЕсли;
			Право = Права[ОписаниеПрава.Ключ];
			Для Каждого ОписаниеОграничения Из ОграниченияПолей Цикл
				Если ОписаниеОграничения.Ключ = "" И Не ЗначениеЗаполнено(ОписаниеОграничения.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Поля = ?(ОписаниеОграничения.Ключ = "", НСтр("ru = '<Прочие поля>'"), ОписаниеОграничения.Ключ);
				НоваяСтрока = ОграниченияПрав.Добавить();
				НоваяСтрока.Таблица     = ПолноеИмя;
				НоваяСтрока.Роль        = Роль;
				НоваяСтрока.Право       = Право;
				НоваяСтрока.Поля        = Поля;
				НоваяСтрока.Ограничение = УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(ОписаниеОграничения.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьОграниченияПравРоли.
Функция УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Знач ТекстОграничения)
	
	ТекстОграничения = СокрЛП(ТекстОграничения);
	
	Если СтрНачинаетсяС(ТекстОграничения, "#Если &ОграничениеДоступаНаУровнеЗаписейУниверсально") Тогда
		ТекстДляПоиска = "#Иначе";
		Позиция = СтрНайти(ТекстОграничения, ТекстДляПоиска);
		Если Позиция > 0 Тогда
			ТекстОграничения = Сред(ТекстОграничения, Позиция + СтрДлина(ТекстДляПоиска));
			ТекстДляПоиска = "#КонецЕсли";
			Если СтрЗаканчиваетсяНа(ТекстОграничения, ТекстДляПоиска) Тогда
				ТекстОграничения = Лев(ТекстОграничения, СтрДлина(ТекстОграничения) - СтрДлина(ТекстДляПоиска));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОграничения;
	
КонецФункции

// Для процедуры ДобавитьОграниченияПравРоли.
Процедура ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки)
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При чтении прав роли %1 произошла ошибка:'"), Роль);
	
	Контекст.Вставить("ЗаголовокОшибкиЧтенияПравРоли", ЗаголовокОшибки);
	
	Если Контекст.Свойство("СтарыйФорматИмениФайла") Тогда
		ИмяФайлаРоли = "Роль." + Роль + ".Права.xml";
	Иначе
		
		ИмяФайлаРоли = СтрЗаменить("Roles\" + Роль + "\Ext\Rights.xml", "\", ПолучитьРазделительПути());
	КонецЕсли;
	ПолноеИмяФайлаРоли = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Контекст.Пути.ПапкаДляВыгрузкиПрав) + ИмяФайлаРоли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайлаРоли);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть для чтения файл XML по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	Если Не ЧтениеXML.Прочитать()
	 Или Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "Rights"
	 Или Не ЧтениеXML.URIПространстваИмен = "http://v8.1c.ru/8.2/roles"
	 Или Не ЧтениеXML.Прочитать()
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForNewObjects") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForAttributesByDefault") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "independentRightsOfChildObjects") <> Неопределено
	 Или Не ЧтениеXML.ИмеетИмя Тогда
		
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'Некорректный файл прав'"));
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Не (  ЧтениеXML.Имя = "Rights"
	         И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеXML.Имя = "object" Тогда
			Попытка
				ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось прочитать элемент object по причине:
					           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
			
		ИначеЕсли ЧтениеXML.Имя = "restrictionTemplate" Тогда
			Попытка
				ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось прочитать элемент %1 по причине:
					           |%2'"), "restrictionTemplate", КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
		Иначе
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать файл прав, т.к. обнаружен неизвестный элемент %1'"), ЧтениеXML.Имя));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЧтениеXML.ИмеетИмя Тогда
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'В структуре XML элемент не завершен'"));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяОбъекта = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя объекта)'");
	КонецЕсли;
	
	СвойстваОбъекта = Контекст.СоответствиеОбъектов.Получить(ИмяОбъекта);
	Если СвойстваОбъекта = Неопределено Тогда
		Контекст.МассивОбъектов.Добавить(ИмяОбъекта);
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("МассивПрав",       Новый Массив);
		СвойстваОбъекта.Вставить("СоответствиеПрав", Новый Соответствие);
		Контекст.СоответствиеОбъектов.Вставить(ИмяОбъекта, СвойстваОбъекта);
	КонецЕсли;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "right" Цикл
		
		Попытка
			ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать элемент right элемента object с именем
				           |%1
				           |по причине:
				           |%2'"), ИмяОбъекта, КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "object" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента object с именем:
			           |%1'"), ИмяОбъекта);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьОбъект.
Процедура ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяПрава = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя права)'");
	КонецЕсли;
	
	ЗначениеПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "value");
	Если ИмяПрава = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство value (значение права с именем %1)'"), ИмяПрава);
	КонецЕсли;
	
	ЗначениеПрава = XMLЗначение(Тип("Булево"), ЗначениеПрава);
	
	СвойстваПрава = СвойстваОбъекта.СоответствиеПрав.Получить(ИмяПрава);
	Если СвойстваПрава = Неопределено Тогда
		СвойстваОбъекта.МассивПрав.Добавить(ИмяПрава);
		СвойстваПрава = Новый Структура;
		СвойстваПрава.Вставить("Значение",         ЗначениеПрава);
		СвойстваПрава.Вставить("ОграниченияПолей", Неопределено);
		СвойстваОбъекта.СоответствиеПрав.Вставить(ИмяПрава, СвойстваПрава);
	Иначе
		Если ЗначениеПрава = Истина Тогда
			СвойстваПрава.Значение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОграниченияПолей = Новый Соответствие;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "restrictionByCondition" Цикл
		
		Попытка
			ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава);
		Исключение
			ЕстьОшибки = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать элемент %1 права %2 по причине:
				           |%3'"), "restrictionByCondition", ИмяПрава, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеПрава = Истина Тогда
		ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "right" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента right с именем:
			           |%1'"), ИмяПрава);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава)
	
	ЧтениеXML.Прочитать();
	
	Поля = Новый Массив;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "field" Цикл
		
		ИмяПоля = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "field");
		Если ИмяПоля = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У элемента %1 не существует обязательное свойство %2.'"), "restrictionByCondition", "field");
		КонецЕсли;
		Поля.Добавить(ИмяПоля);
	КонецЦикла;
	
	Если Поля.Количество() = 0 Тогда
		Поля.Добавить(""); // Прочие поля.
	КонецЕсли;
	
	Ограничение = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Ограничение = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У элемента %1 не существует обязательное свойство %2.'"), , "restrictionByCondition", "condition");
	КонецЕсли;
	
	Для каждого Поле Из Поля Цикл
		ОграниченияПолей.Вставить(Поле, Ограничение);
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionByCondition" Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не существует конец элемента %1.'"), "restrictionByCondition");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки)
	
	Если ОграниченияПолей.Количество() > 0
	   И ОграниченияПолей.Получить("") = Неопределено Тогда
		
		// Ограничение "Прочие поля" есть всегда, либо пустое, либо заполненное.
		ОграниченияПолей.Вставить("", "");
	КонецЕсли;
	
	Если СвойстваПрава.ОграниченияПолей = Неопределено Тогда
		// Ограничения полей текущего права обрабатываются первый раз.
		СвойстваПрава.ОграниченияПолей = ОграниченияПолей;
		Возврат;
		
	ИначеЕсли СвойстваПрава.ОграниченияПолей.Количество() = 0 Тогда
		// Одна из ролей не имеет ограничений права ни на одно из полей.
		Возврат;
	КонецЕсли;
	
	Если ОграниченияПолей.Количество() = 0 Тогда
		// Текущая роль не имеет ограничений права ни на одно из полей.
		СвойстваПрава.ОграниченияПолей = Новый Соответствие;
		Возврат;
	КонецЕсли;
	
	НовоеОграничениеПрочихПолей = ОграниченияПолей.Получить("");
	
	// Проверка/обновление текущих ограничений отдельных полей по новому ограничению для прочих полей.
	Для каждого КлючИЗначение Из СвойстваПрава.ОграниченияПолей Цикл
		ИмяПоля         = КлючИЗначение.Ключ;
		ОграничениеПоля = КлючИЗначение.Значение;
		Если ОграниченияПолей.Получить(ИмяПоля) <> Неопределено Тогда
			// Это поле имеет отдельную новую настройку ограничения.
			Продолжить;
		КонецЕсли;
		Если ОграничениеПоля = "" Тогда
			// Это поле не имеет ограничения, поэтому не должно совпадать с новым общим ограничением.
			Продолжить;
		КонецЕсли;
		Если НовоеОграничениеПрочихПолей = "" Тогда
			СвойстваПрава.ОграниченияПолей[ИмяПоля] = "";
		ИначеЕсли ОграничениеПоля <> НовоеОграничениеПрочихПолей Тогда
			ЕстьОшибки = Истина;
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, НовоеОграничениеПрочихПолей));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка текущих ограничений полей по новым ограничения.
	// Добавление ограничений новых отдельных полей.
	СтароеОграничениеПрочихПолей = СвойстваПрава.ОграниченияПолей.Получить("");
	Для каждого КлючИЗначение Из ОграниченияПолей Цикл
		Поле        = КлючИЗначение.Ключ;
		Ограничение = КлючИЗначение.Значение;
		
		ОграничениеПоля = СвойстваПрава.ОграниченияПолей.Получить(Поле);
		Если ОграничениеПоля = Неопределено Тогда
			ОграничениеПоля = СтароеОграничениеПрочихПолей;
			СвойстваПрава.ОграниченияПолей.Вставить(Поле, ОграничениеПоля);
		КонецЕсли;
		
		Если ОграничениеПоля = "" Тогда
			// Поле без ограничения не может стать с ограничением.
		ИначеЕсли Ограничение = "" Тогда
			СвойстваПрава.ОграниченияПолей[Поле] = "";
		ИначеЕсли ОграничениеПоля <> Ограничение Тогда
			ЕстьОшибки = Истина;
			ИмяПоля = ?(ЗначениеЗаполнено(Поле), Поле, НСтр("ru = '<Прочие поля>'"));
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, Ограничение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяШаблона = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяШаблона = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя шаблона)'");
	КонецЕсли;
	
	Шаблон = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Шаблон = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство condition (текст шаблона)'");
	КонецЕсли;
	
	ТекстШаблона = Контекст.СоответствиеШаблонов.Получить(ИмяШаблона);
	Если ТекстШаблона = Неопределено Тогда
		Контекст.МассивШаблонов.Добавить(ИмяШаблона);
		Контекст.СоответствиеШаблонов.Вставить(ИмяШаблона, Шаблон);
		
	ИначеЕсли ТекстШаблона <> Шаблон Тогда
		ЕстьОшибки = Истина;
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Текст шаблона с именем %1, загруженный ранее:
			           |%2
			           |не совпадает с указанным:
			           |%3'"), ИмяШаблона, ТекстШаблона, Шаблон));
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionTemplate" Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не существует конец элемента %1.'"), "restrictionTemplate");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедур ДобавитьПраваРоли, ПрочитатьОбъект, ПрочитатьПравоОбъекта,
// ПрочитатьОграничениеПолей, ПрочитатьШаблонОграничения.
//
Функция ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, ИмяЭлемента)
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = ИмяЭлемента Тогда
		
		ЧтениеXML.Прочитать();
		Возврат "";
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст
	 Или Не ЧтениеXML.ИмеетЗначение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = ЧтениеXML.Значение;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

// Для процедур ДобавитьОграниченияПравРоли, ДобавитьПраваРоли,
// ПрочитатьОбъект, ДобавитьОграниченияПолей, ПрочитатьШаблонОграничения.
//
Процедура ЗаписатьСообщение(Журнал, Заголовок = "", Описание = "")
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста = Новый ЗаписьТекста(Журнал, "UTF-8",, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок)
	 Или ЗначениеЗаполнено(Описание) Тогда
		
		Строка = СокрЛП(Заголовок + Символы.ПС + Описание) + Символы.ПС;
		
		Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
			ЗаписьТекста.ЗаписатьСтроку(Строка);
		Иначе
			Журнал.Текст = Журнал.Текст + Символы.ПС + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Область ПреобразовательТекстов

Функция ТекстыОграниченийСтрокой(ТекстыОграничений, ВыводитьДополнительнуюИнформацию = Ложь)
	
	Текст = СтрЗаменить(ТекстыОграничений.Текст, Символы.ПС, Символы.ПС + "|");
	ТекстДляВнешнихПользователей = СтрЗаменить(ТекстыОграничений.ТекстДляВнешнихПользователей, Символы.ПС, Символы.ПС + "|");
	
	Строки = Новый Массив;
	
	Если Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Тогда
		Строки.Добавить(ТекстыОграничений.ПояснениеКТексту);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Текст) Или Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Тогда
		ШаблонОграничения = "Ограничение.Текст =
		|""%1"";";
		Строки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОграничения, Текст));
	КонецЕсли;
	
	Если (Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей) Или Не ПустаяСтрока(ТекстДляВнешнихПользователей))
		И (Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Или Не ПустаяСтрока(Текст)) Тогда
		Строки.Добавить("");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей) Тогда
		Строки.Добавить(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстДляВнешнихПользователей) Или Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей) Тогда
		Если ТекстыОграничений.Текст = ТекстыОграничений.ТекстДляВнешнихПользователей Тогда
			Строки.Добавить("Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;");
		Иначе
			ШаблонОграничения = "Ограничение.ТекстДляВнешнихПользователей =
				|""%1"";";
			Строки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОграничения, ТекстДляВнешнихПользователей));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Или Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей)
		Или ВыводитьДополнительнуюИнформацию Тогда
		Строки.Вставить(0, ЗакомментироватьТекст(ТекстыОграничений.ДополнительнаяИнформация));
	КонецЕсли;
	
	Результат = СтрСоединить(Строки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстыОграничений(Знач Таблица, Знач ТаблицаОграничений, Знач НазначениеРолей)
	
	Результат = Новый Структура;
	Результат.Вставить("ПояснениеКТексту", "");
	Результат.Вставить("Текст", "");
	Результат.Вставить("ПояснениеКТекстуДляВнешнихПользователей", "");
	Результат.Вставить("ТекстДляВнешнихПользователей", "");
	Результат.Вставить("ДополнительнаяИнформация", "");
	
	ПояснениеКТексту = Новый Массив;
	ПояснениеКТекстуДляВнешнихПользователей = Новый Массив;
	Ограничения = ТаблицаОграничений.Скопировать(ТаблицаОграничений.НайтиСтроки(Новый Структура("Таблица", Таблица))); // см. ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы
	Для Каждого ОписаниеОграничения Из Ограничения Цикл
		ОписаниеОграничения.Ограничение = ОчиститьОтПостороннихСимволов(ОписаниеОграничения.Ограничение);
	КонецЦикла;
	
	Ограничения.Свернуть("Право,Ограничение,Роль");
	
	ОграниченияДляПользователей = Ограничения.Скопировать(); // см. ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы
	ОграниченияДляПользователей.Очистить();
	ОграниченияДляВнешнихПользователей = ОграниченияДляПользователей.Скопировать(); // см. ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы
	
	Для Каждого Ограничение Из Ограничения Цикл
		ДляВнешнихПользователей = НазначениеРолей.ТолькоДляВнешнихПользователей.Найти(Ограничение.Роль) <> Неопределено;
		СовместноДляПользователейИВнешнихПользователей = НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Найти(Ограничение.Роль) <> Неопределено;
		
		Если ДляВнешнихПользователей Или СовместноДляПользователейИВнешнихПользователей Тогда
			ЗаполнитьЗначенияСвойств(ОграниченияДляВнешнихПользователей.Добавить(), Ограничение);
		КонецЕсли;
		
		Если Не ДляВнешнихПользователей Тогда
			ЗаполнитьЗначенияСвойств(ОграниченияДляПользователей.Добавить(), Ограничение);
		КонецЕсли;
	КонецЦикла;
	
	ОграниченияДляПользователей.Свернуть("Право,Ограничение");
	ОграниченияДляВнешнихПользователей.Свернуть("Право,Ограничение");
	
	ДополнительнаяИнформация = "";
	
	Для Каждого Ограничение Из ОграниченияДляПользователей Цикл
		Если Ограничение.Право <> "Чтение" И Ограничение.Право <> "Изменение" Тогда
			Продолжить;
		КонецЕсли;
		ДополнительнаяИнформация = ДополнительнаяИнформация 
			+ Ограничение.Право + Символы.ПС
			+ Ограничение.Ограничение + Символы.ПС
			+ Символы.ПС;
	КонецЦикла;
	
	Для Каждого Ограничение Из ОграниченияДляВнешнихПользователей Цикл
		Если Ограничение.Право <> "Чтение" И Ограничение.Право <> "Изменение" Тогда
			Продолжить;
		КонецЕсли;
		ДополнительнаяИнформация = ДополнительнаяИнформация 
			+ Ограничение.Право + " " + НСтр("ru = '(для внешних пользователей)'") + Символы.ПС
			+ Ограничение.Ограничение + Символы.ПС
			+ Символы.ПС;
	КонецЦикла;
	
	ДополнительнаяИнформация = НСтр("ru = 'Имеющиеся ограничения доступа в ролях:'") + Символы.ПС + Символы.ПС + ДополнительнаяИнформация;
	Результат.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	Отказ = Ложь;
	Для Счетчик = 0 По 1 Цикл
		ДляВнешнихПользователей = Булево(Счетчик);
		
		Если ДляВнешнихПользователей Тогда
			Ограничения = ОграниченияДляВнешнихПользователей;
		Иначе
			Ограничения = ОграниченияДляПользователей;
		КонецЕсли;
		
		ОграничениеЧтения = Ограничения.НайтиСтроки(Новый Структура("Право", "Чтение"));
		ОграничениеИзменения = Ограничения.НайтиСтроки(Новый Структура("Право", "Изменение"));
		
		ОграничениеЧтенияСтрокой = Неопределено;
		Если ОграничениеЧтения.Количество() > 0 Тогда
			ОграничениеЧтенияСтрокой = ОграничениеЧтения[0].Ограничение;
		КонецЕсли;
		Если ОграничениеЧтения.Количество() > 1 И Не ТекстОграниченийОдинаковый(ОграничениеЧтения) Тогда
			ТекстПояснения = "// TODO: " + НСтр("ru = 'Найдено более одного варианта текста ограничения чтения'");
			Если ДляВнешнихПользователей Тогда
				ПояснениеКТекстуДляВнешнихПользователей.Добавить(ТекстПояснения);
			Иначе
				ПояснениеКТексту.Добавить(ТекстПояснения);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
		ОграничениеИзмененияСтрокой = Неопределено;
		Если ОграничениеИзменения.Количество() > 0 Тогда
			ОграничениеИзмененияСтрокой = ОграничениеИзменения[0].Ограничение;
		КонецЕсли;
		Если ОграничениеИзменения.Количество() > 1 И Не ТекстОграниченийОдинаковый(ОграничениеИзменения) Тогда
			ТекстПояснения = "// TODO: " + НСтр("ru = 'Найдено более одного варианта текста ограничения изменения'");
			Если ДляВнешнихПользователей Тогда
				ПояснениеКТекстуДляВнешнихПользователей.Добавить(ТекстПояснения);
			Иначе
				ПояснениеКТексту.Добавить(ТекстПояснения);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОграничения = НовыйТекстОграничения(Таблица, ОграничениеЧтенияСтрокой, ОграничениеИзмененияСтрокой, ДляВнешнихПользователей, Отказ);
		Если ТекстОграничения <> Неопределено Тогда
			Если ДляВнешнихПользователей Тогда
				Если Не ПустаяСтрока(ТекстОграничения.Пояснение) Тогда
					ПояснениеКТекстуДляВнешнихПользователей.Добавить(ТекстОграничения.Пояснение);
				КонецЕсли;
				Результат.ТекстДляВнешнихПользователей = ТекстОграничения.Текст;
			Иначе
				Если Не ПустаяСтрока(ТекстОграничения.Пояснение) Тогда
					ПояснениеКТексту.Добавить(ТекстОграничения.Пояснение);
				КонецЕсли;
				Результат.Текст = ТекстОграничения.Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ПояснениеКТексту = СтрСоединить(ПояснениеКТексту, Символы.ПС);
	Результат.ПояснениеКТекстуДляВнешнихПользователей = СтрСоединить(ПояснениеКТекстуДляВнешнихПользователей, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//   Ограничения - см. ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы
//
Функция ТекстОграниченийОдинаковый(Ограничения)
	РазныеТекстыОграничений = Новый Соответствие;
	Для Каждого Ограничение Из Ограничения Цикл
		ТекстОграничения = Ограничение.Ограничение;
		ТекстОграничения = НРег(СтрСоединить(СтрРазделить(ТекстОграничения, " " + Символы.ПС + Символы.Таб, Ложь), ""));
		РазныеТекстыОграничений.Вставить(ТекстОграничения);
	КонецЦикла;
	Возврат РазныеТекстыОграничений.Количество() <= 1;
КонецФункции

Функция РазобратьСтрокуОграничения(Знач Ограничение)
	
	Результат = Новый Массив;
	
	Позиция = СтрНайти(Ограничение, "#");
	НачалоСтроки = СокрЛ(Сред(Ограничение, 1, Позиция));
	Если НачалоСтроки <> "#" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Позиция = СтрНайти(Ограничение, "(");
	Если Позиция = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидОграничения = Лев(Ограничение, Позиция - 1);
	Ограничение = Сред(Ограничение, Позиция + 1);
	Позиция = СтрНайти(Ограничение, ")", НаправлениеПоиска.СКонца);
	Если Позиция = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Ограничение = Лев(Ограничение, Позиция - 1);
	
	КоличествоЗапятых = СтрЧислоВхождений(Ограничение, ",");
	ИменаКлючей = "";
	Для Счетчик = 0 По КоличествоЗапятых + 1 Цикл
		Если Не ПустаяСтрока(ИменаКлючей) Тогда
			ИменаКлючей = ИменаКлючей + ",";
		КонецЕсли;
		ИменаКлючей = ИменаКлючей + "К" + Формат(Счетчик, "ЧЦ=2; ЧН=; ЧВН=");
	КонецЦикла;
	
	Ограничение = СтрЗаменить(Ограничение, Символы.ПС, " ");
	
	ПараметрыВычисления = Новый Структура;
	ПараметрыВычисления.Вставить("ИменаКлючей", ИменаКлючей);
	
	СтруктураПараметров = ОбщегоНазначения.ВычислитьВБезопасномРежиме("Новый Структура(Параметры.ИменаКлючей, " + Ограничение + ")", ПараметрыВычисления);
	
	Результат.Добавить(ВидОграничения);
	Для Каждого Параметр Из СтруктураПараметров Цикл
		Если Параметр.Значение <> Неопределено Тогда
			Результат.Добавить(Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПрочитатьДеталиОграниченияПоЗначениям(Знач ПараметрыОграничения)
	Таблица = ПараметрыОграничения[1];
	Право = ПараметрыОграничения[2];
	Модификатор = ПараметрыОграничения[3];
	Условия = Новый Массив;
	Для Индекс = 4 По ПараметрыОграничения.Количество() - 1 Цикл
		Условие = ОписаниеУсловия();
		Условие.ВидДоступа = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс]);
		Условие.Поле = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс + 1]);
		Условие.Скобка = "И";
		Если Не ПустаяСтрока(Условие.Поле) Тогда
			Условия.Добавить(Условие);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Условия[Условия.ВГраница()].Скобка = "";
	
	Результат = ОписаниеОграничения();
	Результат.ИсходныйШаблон = ПараметрыОграничения[0];
	Результат.Таблица = Таблица;
	Результат.Право = Право;
	Результат.Модификатор = Модификатор;
	Результат.Условия = Условия;
	Возврат Результат;
КонецФункции

Функция ПрочитатьДеталиОграниченияПоЗначениямРасширенный(Знач ПараметрыОграничения)
	Таблица = ПараметрыОграничения[1];
	Право = ПараметрыОграничения[2];
	Модификатор = ПараметрыОграничения[3];
	ПрисоединяемыеТаблицы = ПараметрыОграничения[4];
	НачальнаяСкобка = ПараметрыОграничения[5];
	
	СтрокаПоиска = "НЕ ЛОЖЬ В (ВЫБРАТЬ ПЕРВЫЕ 1 ЛОЖЬ ИЗ";
	Если СтрНачинаетсяС(ВРег(НачальнаяСкобка), ВРег(СтрокаПоиска)) Тогда
		Строка = Сред(НачальнаяСкобка, СтрДлина(СтрокаПоиска) + 1);
		СтрокаПоиска = " И НЕ (";
		Если СтрЗаканчиваетсяНа(ВРег(Строка), ВРег(СтрокаПоиска)) И ВРег(ПараметрыОграничения[8]) = ВРег(")) И ") Тогда
			Строка = Лев(Строка, СтрДлина(Строка) - СтрДлина(СтрокаПоиска));
			ПрисоединяемыеТаблицы = "ЛЕВОЕ СОЕДИНЕНИЕ" + СтрЗаменить(Строка, " ГДЕ ", " ПО ");
			НачальнаяСкобка = "ДляВсехСтрок(";
			ПараметрыОграничения[7] = ПараметрыОграничения[7] + ", NULL КАК ИСТИНА";
			ПараметрыОграничения[8] = ") И ";
		КонецЕсли;
	КонецЕсли;
	
	Условия = Новый Массив;
	Для Индекс = 6 По ПараметрыОграничения.Количество() - 1 Цикл
		Условие = ОписаниеУсловия();
		
		Условие.ВидДоступа = ПараметрыОграничения[Индекс];
		Если Условие.ВидДоступа = " " Тогда
			Условие.ВидДоступа = "Объект";
		КонецЕсли;
		Условие.ВидДоступа = УбратьЛишниеКавычки(Условие.ВидДоступа);
		
		Условие.Поле = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс+1]);
		Условие.Скобка = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс+2]);
		Если Не ПустаяСтрока(Условие.Поле) Или Не ПустаяСтрока(Условие.Скобка) Тогда
			Условия.Добавить(Условие);
		КонецЕсли;
		Индекс = Индекс + 2;
	КонецЦикла;
	
	Результат = ОписаниеОграничения();
	Результат.ИсходныйШаблон = ПараметрыОграничения[0];
	Результат.Таблица = Таблица;
	Результат.Право = Право;
	Результат.Модификатор = Модификатор;
	Результат.ПрисоединяемыеТаблицы = ПрисоединяемыеТаблицы;
	Результат.НачальнаяСкобка = НачальнаяСкобка;
	Результат.Условия = Условия;
	
	Возврат Результат;
КонецФункции

Функция ПрочитатьДеталиОграниченияПоНаборамЗначений(Знач ПараметрыОграничения)
	
	Результат = ОписаниеОграничения();
	Результат.ИсходныйШаблон = ПараметрыОграничения[0];
	Результат.Таблица = ПараметрыОграничения[1];
	Результат.Право = ПараметрыОграничения[2];
	Результат.Модификатор = ПараметрыОграничения[3];
	
	ВладелецНаборов = ПараметрыОграничения[4];
	Если ВладелецНаборов = "" Или НРег(ВладелецНаборов) = НРег("Ссылка") Тогда
		ВладелецНаборов = "Ссылка";
	КонецЕсли;
	
	Условие = ОписаниеУсловия();
	Условие.Поле = ВладелецНаборов;
	Если ВладелецНаборов <> "Ссылка" Тогда
		Условие.ВидДоступа = "Объект";
	КонецЕсли;
	Результат.Условия.Добавить(Условие);
	
	Результат.ВладелецНаборов = ВладелецНаборов;
	
	Возврат Результат;
КонецФункции

Функция ОписаниеОграничения()
	Результат = Новый Структура;
	Результат.Вставить("Таблица", "");
	Результат.Вставить("Право", "");
	Результат.Вставить("Модификатор", "");
	Результат.Вставить("ПрисоединяемыеТаблицы", "");
	Результат.Вставить("НачальнаяСкобка", "");
	Результат.Вставить("Условия", Новый Массив);
	Результат.Вставить("ИсходныйШаблон", "");
	Результат.Вставить("ВладелецНаборов", Неопределено);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеУсловия()
	Результат = Новый Структура;
	Результат.Вставить("ВидДоступа", "");
	Результат.Вставить("Поле", "");
	Результат.Вставить("Скобка", "");
	
	Возврат Результат;
КонецФункции

// Ограничение может быть указано только в одном из вариантов:
// 1) одинаковое ограничение чтения и изменения:
//        "РазрешитьЧтениеИзменение
//        |ГДЕ ...";
// 2) ограничение изменения без ограничения чтения:
//        "РазрешитьЧтение
//        |ГДЕ ИСТИНА
//        |;
//        |РазрешитьИзменениеЕслиРазрешеноЧтение
//        |ГДЕ ...";
// 3) разные ограничения чтения и изменения:
//        "РазрешитьЧтение
//        |ГДЕ ...
//        |;
//        |РазрешитьИзменениеЕслиРазрешеноЧтение
//        |ГДЕ ...";
// 4) то же, что пункт 1, но с дополнительными таблицами:
//        "ПрисоединитьДополнительныеТаблицы
//        |СПИСОК КАК <Псевдоним>
//        |ЛЕВОЕ СОЕДИНЕНИЕ ...
//        |;
//        |РазрешитьЧтениеИзменение
//        |ГДЕ ...";
// 5) то же, что пункт 2, но с дополнительными таблицами:
//        "ПрисоединитьДополнительныеТаблицы
//        |СПИСОК КАК <Псевдоним>
//        |ЛЕВОЕ СОЕДИНЕНИЕ ...
//        |;
//        |РазрешитьЧтение
//        |ГДЕ ИСТИНА
//        |;
//        |РазрешитьИзменениеЕслиРазрешеноЧтение
//        |ГДЕ ...";
// 6) то же, что пункт 3, но с дополнительными таблицами:
//        "ПрисоединитьДополнительныеТаблицы
//        |СПИСОК КАК <Псевдоним>
//        |ЛЕВОЕ СОЕДИНЕНИЕ ...
//        |;
//        |РазрешитьЧтение
//        |ГДЕ ...
//        |;
//        |РазрешитьИзменениеЕслиРазрешеноЧтение
//        |ГДЕ ...";
//
Функция НовыйТекстОграничения(Таблица, СтарыйТекстОграниченияЧтения, СтарыйТекстОграниченияИзменения, Знач ДляВнешнихПользователей, Отказ)
	
	Если СтарыйТекстОграниченияЧтения = Неопределено И СтарыйТекстОграниченияИзменения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйТекстОграничения = "";
	ТекстПояснения = "";
	
	Если ЭтоЖурнал(Таблица) Тогда
		НовыйТекстОграничения = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(Ссылка)";
	ИначеЕсли ЭтоСправочникПрисоединенныхФайлов(Таблица) Тогда
		НовыйТекстОграничения =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ВладелецФайла)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ВладелецФайла)";
	Иначе
		Отказ = Отказ Или ЕстьНеконвертируемыеУсловия(СтарыйТекстОграниченияЧтения) Или ЕстьНеконвертируемыеУсловия(СтарыйТекстОграниченияИзменения);
		
		Если Не Отказ Тогда
			ОграниченияОдинаковые = СтарыйТекстОграниченияЧтения = СтарыйТекстОграниченияИзменения;
			
			ДеталиОграниченияЧтения = Неопределено;
			Если СтарыйТекстОграниченияЧтения <> Неопределено Тогда
				ПараметрыЧтения = РазобратьСтрокуОграничения(СтарыйТекстОграниченияЧтения);
				ДеталиОграниченияЧтения = ДеталиОграничения(ПараметрыЧтения, Таблица);
			КонецЕсли;
			
			ДеталиОграниченияИзменения = Неопределено;
			Если СтарыйТекстОграниченияИзменения <> Неопределено Тогда
				ПараметрыИзменения = РазобратьСтрокуОграничения(СтарыйТекстОграниченияИзменения);
				ДеталиОграниченияИзменения = ДеталиОграничения(ПараметрыИзменения, Таблица);
			КонецЕсли;
			
			Если ТребуетсяПереносЛогикиОграниченийИзПроцедурыЗаполнитьНаборыЗначенийДоступа(ДеталиОграниченияЧтения, ДеталиОграниченияИзменения) Тогда
				ТекстПояснения = "// TODO: " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перенести логику ограничений из процедуры %1 модуля объекта.'"),
					"ЗаполнитьНаборыЗначенийДоступа");
				Отказ = Истина;
			Иначе
				Если ДеталиОграниченияЧтения = Неопределено И ДеталиОграниченияИзменения = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				ЕстьЧтение = ДеталиОграниченияЧтения <> Неопределено;
				ЕстьИзменение = ДеталиОграниченияИзменения <> Неопределено;
				
				Если ЕстьЧтение И ЕстьИзменение И Не ОграниченияОдинаковые Тогда
					СократитьУсловияИзменения(ДеталиОграниченияЧтения, ДеталиОграниченияИзменения);
				КонецЕсли;
				
				ОграниченияЧтенияСтрокой = "";
				ТекстПрисоединяемыхТаблицЧтение = "";
				Если ЕстьЧтение Тогда
					ПсевдонимыТаблицЧтение = ЗаменяемыеПсевдонимыТаблиц(ДеталиОграниченияЧтения.Таблица, ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы);
					ТекстПрисоединяемыхТаблицЧтение = ТекстПрисоединяемыхТаблиц(ПсевдонимыТаблицЧтение, ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы);
					ОграниченияЧтенияСтрокой = ОграниченияСтрокой(ПсевдонимыТаблицЧтение, ДеталиОграниченияЧтения, Ложь);
				КонецЕсли;
				
				ОграниченияИзмененияСтрокой = "";
				ТекстПрисоединяемыхТаблицИзменение = "";
				Если ЕстьИзменение Тогда
					ПсевдонимыТаблицИзменение = ЗаменяемыеПсевдонимыТаблиц(ДеталиОграниченияИзменения.Таблица, ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы);
					ТекстПрисоединяемыхТаблицИзменение = ТекстПрисоединяемыхТаблиц(ПсевдонимыТаблицИзменение, ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы);
					ОграниченияИзмененияСтрокой = ОграниченияСтрокой(ПсевдонимыТаблицИзменение, ДеталиОграниченияИзменения, Истина);
				КонецЕсли;
				
				ОграниченияОдинаковые = ЕстьЧтение И (Не ЕстьИзменение Или ПустаяСтрока(ОграниченияИзмененияСтрокой) Или ОграниченияЧтенияСтрокой = ОграниченияИзмененияСтрокой);
				Если ОграниченияОдинаковые Тогда
					Если ЗначениеЗаполнено(ОграниченияЧтенияСтрокой) Тогда
						НовыйТекстОграничения = "РазрешитьЧтениеИзменение" + ОграниченияЧтенияСтрокой;
					КонецЕсли;
				Иначе
					Если ЕстьЧтение И ЕстьИзменение Тогда
						НовыйТекстОграничения = "РазрешитьЧтение" + ОграниченияЧтенияСтрокой + Символы.ПС + ";" + Символы.ПС
							+ "РазрешитьИзменениеЕслиРазрешеноЧтение" + ОграниченияИзмененияСтрокой;
					Иначе
						Если Не ЕстьЧтение И ЕстьИзменение Тогда
							НовыйТекстОграничения = "РазрешитьЧтение
								|ГДЕ ИСТИНА
								|;
								|РазрешитьИзменениеЕслиРазрешеноЧтение" + ОграниченияИзмененияСтрокой;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьЧтение И ЕстьИзменение
					И ЗначениеЗаполнено(ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы) 
					И Не СтрНачинаетсяС(ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы, ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы)
					И ЗначениеЗаполнено(ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы) 
					И Не СтрНачинаетсяС(ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы, ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы) Тогда
						НовыйТекстОграничения = "";
				КонецЕсли;
				
				Если СтрНайти(НРег(НовыйТекстОграничения), НРег("ВЫБРАТЬ ПЕРВЫЕ 1")) Тогда // @query-part
					НовыйТекстОграничения = "";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекстПрисоединяемыхТаблицЧтение)
					И ЗначениеЗаполнено(ТекстПрисоединяемыхТаблицИзменение)
					И ТекстПрисоединяемыхТаблицЧтение <> ТекстПрисоединяемыхТаблицИзменение Тогда
						НовыйТекстОграничения = "";
				КонецЕсли;
				
				Если Не ПустаяСтрока(НовыйТекстОграничения) Тогда
					ТекстПрисоединяемыхТаблиц = ТекстПрисоединяемыхТаблицЧтение;
					Если Не ЗначениеЗаполнено(ТекстПрисоединяемыхТаблиц) Тогда
						ТекстПрисоединяемыхТаблиц = ТекстПрисоединяемыхТаблицИзменение;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекстПрисоединяемыхТаблиц) Тогда
						НовыйТекстОграничения = ТекстПрисоединяемыхТаблиц + НовыйТекстОграничения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(НовыйТекстОграничения) Тогда
		СтруктураОграниченияИзОписания = УправлениеДоступомСлужебный.СтруктураОграниченияИзОписания(Таблица, НовыйТекстОграничения);
		Если СтруктураОграниченияИзОписания.ОписаниеОшибок.ЕстьОшибки Тогда
			НовыйТекстОграничения = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПояснения) И ПустаяСтрока(НовыйТекстОграничения) Тогда
		ТекстПояснения = "// TODO: " + НСтр("ru = 'Сконвертировать тексты ограничений вручную.'");
		Отказ = Истина;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", НовыйТекстОграничения);
	Результат.Вставить("Пояснение", ТекстПояснения);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПрисоединяемыхТаблиц(ПсевдонимыТаблиц, ПрисоединяемыеТаблицы)
	ТекстПрисоединяемыхТаблиц = "";
	Если Не ЗначениеЗаполнено(ПсевдонимыТаблиц) И Не ПустаяСтрока(ПрисоединяемыеТаблицы) Тогда
		ТекстПрисоединяемыхТаблиц = "ПрисоединитьДополнительныеТаблицы" + Символы.ПС
			+ "ЭтотСписок КАК Т"
			+ РасставитьПереносы(СтрЗаменить(ПрисоединяемыеТаблицы, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ", "ЛЕВОЕ СОЕДИНЕНИЕ"))
			+ Символы.ПС + ";" + Символы.ПС;
	КонецЕсли;
	Возврат ТекстПрисоединяемыхТаблиц;
КонецФункции

Процедура СократитьУсловияИзменения(ДеталиОграниченияЧтения, ДеталиОграниченияИзменения)
	
	СложныеУсловия = Ложь;
	ПоляОграниченияЧтения = Новый Массив;
	Для Каждого Условие Из ДеталиОграниченияЧтения.Условия Цикл
		Если Условие.ВидДоступа = "Условие" Или Не (Условие.Скобка = "И" Или ПустаяСтрока(Условие.Скобка)) Тогда
			СложныеУсловия = Истина;
			Прервать;
		КонецЕсли;
		ПоляОграниченияЧтения.Добавить(Условие.Поле);
	КонецЦикла;
	
	УдаляемыеУсловия = Новый Массив;
	Если Не СложныеУсловия Тогда
		Для Каждого Условие Из ДеталиОграниченияИзменения.Условия Цикл
			Если Условие.ВидДоступа = "Условие" Или Не (Условие.Скобка = "И" Или ПустаяСтрока(Условие.Скобка)) Тогда
				СложныеУсловия = Истина;
				УдаляемыеУсловия.Очистить();
				Прервать;
			КонецЕсли;
			Если ПоляОграниченияЧтения.Найти(Условие.Поле) <> Неопределено Тогда
				УдаляемыеУсловия.Добавить(Условие);
			КонецЕсли;
		КонецЦикла;
		
		Если УдаляемыеУсловия.Количество() > 0 Тогда
			Для Каждого Условие Из УдаляемыеУсловия Цикл
				Индекс = ДеталиОграниченияИзменения.Условия.Найти(Условие);
				ДеталиОграниченияИзменения.Условия.Удалить(ИНдекс);
			КонецЦикла;
			
			Если ДеталиОграниченияИзменения.Условия.Количество() > 0 Тогда
				ДеталиОграниченияИзменения.Условия[ДеталиОграниченияИзменения.Условия.ВГраница()].Скобка = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяПереносЛогикиОграниченийИзПроцедурыЗаполнитьНаборыЗначенийДоступа(ДеталиОграниченияЧтения, ДеталиОграниченияИзменения)
	
	ДеталиОграничения = Неопределено;
	Если ДеталиОграниченияЧтения <> Неопределено И ДеталиОграниченияЧтения.ИсходныйШаблон = "#ПоНаборамЗначений" Тогда
		ДеталиОграничения = ДеталиОграниченияЧтения;
	ИначеЕсли ДеталиОграниченияИзменения <> Неопределено И ДеталиОграниченияИзменения.ИсходныйШаблон = "#ПоНаборамЗначений" Тогда
		ДеталиОграничения = ДеталиОграниченияИзменения;
	КонецЕсли;
	
	Если ДеталиОграничения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не ЭтоЖурнал(ДеталиОграничения.Таблица) И ДеталиОграничения.ВладелецНаборов = "Ссылка";
	
КонецФункции

Функция ЕстьНеконвертируемыеУсловия(ТекстОграничения)
	Возврат ТекстОграничения <> Неопределено 
		И (СтрЧислоВхождений(ТекстОграничения, "#") <> 1
		Или СтрНайти(ТекстОграничения, "&") > 0
		Или СтрНайти(НРег(ТекстОграничения), НРег("""ВнешниеПользователи""")) > 0
		Или СтрНайти(НРег(ТекстОграничения), НРег(".Ссылка ЕСТЬ NULL")) > 0);
КонецФункции

Функция ЭтоЖурнал(ИмяТаблицы)
	Возврат СтрНачинаетсяС(НРег(ИмяТаблицы), НРег("ЖурналДокументов."));
КонецФункции

Функция ЭтоСправочникПрисоединенныхФайлов(Знач ИмяТаблицы)
	ИмяТаблицы = НРег(ИмяТаблицы);
	Возврат СтрНачинаетсяС(ИмяТаблицы, НРег("Справочник.")) И СтрЗаканчиваетсяНа(ИмяТаблицы, НРег("ПрисоединенныеФайлы"));
КонецФункции

Функция ОграниченияСтрокой(ПсевдонимыТаблиц, ДеталиОграничения, ДляИзменения = Ложь)
	
	Если ПсевдонимыТаблиц = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = "";
	
	НачальнаяСкобка = ЗаменитьИменаТаблиц(ДеталиОграничения.НачальнаяСкобка, ПсевдонимыТаблиц);
	НачальнаяСкобка = ЗаменитьОператорСсылкаНаСравнениеТипа(НачальнаяСкобка);
	
	Если Не ПустаяСтрока(НачальнаяСкобка) Тогда
		Результат = Результат + НачальнаяСкобка + " ";
	КонецЕсли;
	
	Для Каждого Условие Из ДеталиОграничения.Условия Цикл
		Поле = ЗаменитьИменаТаблиц(Условие.Поле, ПсевдонимыТаблиц);
		Поле = ЗаменитьОператорСсылкаНаСравнениеТипа(Поле);
		
		Скобка = ЗаменитьИменаТаблиц(Условие.Скобка, ПсевдонимыТаблиц);
		Скобка = ЗаменитьОператорСсылкаНаСравнениеТипа(Скобка);
		
		Если Условие.ВидДоступа = "Условие" Или Не ЗначениеЗаполнено(Условие.ВидДоступа) Тогда
			Результат = Результат + Поле;
		Иначе
			Если Условие.ВидДоступа = "ПравоЧтения" Или Условие.ВидДоступа = "ПравоЧтенияПоИдентификатору" Тогда
				ФункцияДоступа = "ЧтениеСпискаРазрешено"
			ИначеЕсли Условие.ВидДоступа = "ПравоИзменения" Или Условие.ВидДоступа = "ПравоИзмененияПоИдентификатору" Тогда
				ФункцияДоступа = "ИзменениеСпискаРазрешено"
			Иначе
				ФункцияДоступа = "ЗначениеРазрешено";
				Если Условие.ВидДоступа = "Объект" Или Условие.ВидДоступа = "НастройкиПрав" Тогда
					ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0 &ИмяПоля ИЗ #ИмяТаблицы";
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоля", ?(ПустаяСтрока(Поле), "Ссылка", Поле));
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ДеталиОграничения.Таблица);
					Запрос = Новый Запрос(ТекстЗапроса);
					Попытка
						Типы = Запрос.Выполнить().Колонки[0].ТипЗначения.Типы();
					Исключение
						Возврат Неопределено;
					КонецПопытки;
					ЕстьЗависимостиПоВсемТипам = Истина;
					Для Каждого Тип Из Типы Цикл
						Если Тип = Тип("Null") Тогда
							Продолжить;
						КонецЕсли;
						ЕстьЗависимостиПоВсемТипам = ЕстьЗависимостиПоВсемТипам 
							И ЗависимостиПравДоступа.НайтиСтроки(
								Новый Структура("ПодчиненнаяТаблица,ВедущаяТаблица", ДеталиОграничения.Таблица,
									Метаданные.НайтиПоТипу(Тип).ПолноеИмя())).Количество() <> 0;
					КонецЦикла;
					
					ФункцияДоступа = "ЧтениеОбъектаРазрешено";
					Если ДляИзменения И Не ЕстьЗависимостиПоВсемТипам Тогда
						ФункцияДоступа = "ИзменениеОбъектаРазрешено";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Поле = ЗаменитьЕстьNULL(Поле);
			Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ФункцияДоступа + "(%1)", Поле);
		КонецЕсли;
			
		Если Не ПустаяСтрока(Скобка) Тогда
			Результат = Результат + Символы.ПС + "	" + Скобка + " ";
		КонецЕсли;
	КонецЦикла;
	
	Если ДеталиОграничения.Модификатор = "НеОграничиватьДоступКГруппам" Тогда
		Результат = "ЭтоГруппа ИЛИ" + Символы.ПС + "	" + Результат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		Результат = Символы.ПС
			+ "ГДЕ" + Символы.ПС
			+ "	" + Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗаменитьОператорСсылкаНаСравнениеТипа(Строка)
	Результат = Строка;
	Разделитель = " ССЫЛКА ";
	Позиция = СтрНайти(ВРег(Результат), ВРег(Разделитель));
	Пока Позиция > 0 Цикл
		Разделитель = Сред(Результат, Позиция, СтрДлина(Разделитель));
		ЧастиСтрокиВокругСловаСсылка = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, Разделитель);
		Если ЧастиСтрокиВокругСловаСсылка.Количество() = 2 Тогда
			ЧастиСтрокиДоСловаСсылка = СтрРазделить(ЧастиСтрокиВокругСловаСсылка[0], " ", Ложь);
			ЧастиСтрокиПослеСловаСсылка = СтрРазделить(ЧастиСтрокиВокругСловаСсылка[1], " ", Ложь);
			
			ЛеваяЧастьВыражения = ЧастиСтрокиДоСловаСсылка[ЧастиСтрокиДоСловаСсылка.ВГраница()];
			ЧастиСтрокиДоСловаСсылка.Удалить(ЧастиСтрокиДоСловаСсылка.ВГраница());
			
			ПраваяЧастьВыражения = ЧастиСтрокиПослеСловаСсылка[0];
			ЧастиСтрокиПослеСловаСсылка.Удалить(0);
			
			Результат = СтрСоединить(ЧастиСтрокиДоСловаСсылка, " ") + " "
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ТипЗначения(%1) = Тип(%2)", ЛеваяЧастьВыражения, ПраваяЧастьВыражения)
				+ " " + СтрСоединить(ЧастиСтрокиПослеСловаСсылка, " ");
		КонецЕсли;
		Позиция = СтрНайти(ВРег(Результат), ВРег(Разделитель));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗаменитьЕстьNULL(ИсходныйТекст)
	Результат = ИсходныйТекст;
	ИскомаяСтрока = "ЕСТЬNULL(";
	Если ВРег(Лев(Результат, СтрДлина(ИскомаяСтрока))) = ИскомаяСтрока Тогда
		ПозицияЗапятой = СтрНайти(Результат, ",");
		Если ПозицияЗапятой > 0 Тогда
			Поле = СокрЛП(Сред(Результат, СтрДлина(ИскомаяСтрока + 1), ПозицияЗапятой - (СтрДлина(ИскомаяСтрока) + 1)));
			Значение = СокрЛП(Сред(Результат, ПозицияЗапятой + 1, СтрДлина(Результат) - (ПозицияЗапятой + 1)));
			
			Если НРег(Значение) = НРег("ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.ДоступРазрешен)") Тогда
				Результат = Поле + ", NULL КАК ИСТИНА";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ЗаменяемыеПсевдонимыТаблиц(ИмяОсновнойТаблицы, Знач ПрисоединяемыеТаблицы)
	Результат = Новый Соответствие;
	
	ТекстЗапроса = "ВЫБРАТЬ 1 ИЗ #ИмяОсновнойТаблицы КАК Т";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяОсновнойТаблицы", ИмяОсновнойТаблицы);
	ТекстЗапроса = ТекстЗапроса + " "+ ПрисоединяемыеТаблицы;
	СхемаЗапроса = Новый СхемаЗапроса;
	Попытка
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	АнализСоединенийВыполнен = Истина;
	ТаблицыОбъекта = Новый Соответствие;
	ИспользуемыеПсевдонимы = Новый Массив;
	Для Каждого Соединение Из СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Соединения Цикл
		Источник = Соединение.Источник.Источник;
		Если Соединение.ТипСоединения <> ТипСоединенияСхемыЗапроса.ЛевоеВнешнее 
			Или ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			АнализСоединенийВыполнен = Ложь;
			Прервать;
		КонецЕсли;
		
		ИмяТаблицы = Источник.ИмяТаблицы;
		
		Если Не СтандартныеПодсистемыСервер.ЭтоТаблицаРегистра(ИмяТаблицы) Тогда
			// Если соединение по ссылке, то исключаем такое соединение, поля заменяем на поля основной таблицы "через точку".
			ЧастиСтроки = СтрРазделить(СокрЛП(Соединение.Условие), "=");
			Если ЧастиСтроки.Количество() = 2 Тогда
				НайденоСоединениеПоСсылке = Ложь;
				Если СтрНачинаетсяС(ВРег(ЧастиСтроки[0]), "Т.") И СтрЗаканчиваетсяНа(ВРег(ВРег(ЧастиСтроки[1])), ВРег(Источник.Псевдоним + ".Ссылка")) Тогда
					ИмяТаблицы = СокрЛП(ЧастиСтроки[0]);
					НайденоСоединениеПоСсылке = Истина;
				ИначеЕсли СтрНачинаетсяС(ВРег(ЧастиСтроки[1]), "Т.") И СтрЗаканчиваетсяНа(ВРег(ВРег(ЧастиСтроки[0])), ВРег(Источник.Псевдоним + ".Ссылка")) Тогда
					ИмяТаблицы = СокрЛП(ЧастиСтроки[1]);
					НайденоСоединениеПоСсылке = Истина;
				КонецЕсли;
				
				Если НайденоСоединениеПоСсылке И СтрНачинаетсяС(Источник.ИмяТаблицы, ИмяОсновнойТаблицы + ".") Тогда
					ИмяТаблицы = "Т." + СтрЗаменить(Источник.ИмяТаблицы, ИмяОсновнойТаблицы + ".", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицыОбъекта.Вставить(Источник.Псевдоним, ИмяТаблицы);
		ИспользуемыеПсевдонимы.Добавить(Источник.Псевдоним);
	КонецЦикла;
	
	Если Не АнализСоединенийВыполнен Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИспользуемыеПсевдонимы.Количество() > 0 Тогда
		ИспользуемыеПсевдонимы.Добавить("Т");
	КонецЕсли;
	
	ТребуютсяПсевдонимыТаблицВУсловиях = Ложь;
	Для Каждого Таблица Из ТаблицыОбъекта Цикл
		ЕстьИспользование = Ложь;
		Для Каждого Псевдоним Из ИспользуемыеПсевдонимы Цикл
			Если СтрНачинаетсяС(Таблица.Значение, Псевдоним + ".") Тогда
				ЕстьИспользование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьИспользование Тогда
			ТребуютсяПсевдонимыТаблицВУсловиях = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Таблица Из ТаблицыОбъекта Цикл
		ПсевдонимПрисоединяемойТаблицы = Таблица.Ключ;
		ИмяПрисоединяемойТаблицы = Таблица.Значение;
		
		Если СтрНачинаетсяС(ИмяПрисоединяемойТаблицы, "Т.") Тогда
			Если Не ТребуютсяПсевдонимыТаблицВУсловиях Тогда
				ИмяПрисоединяемойТаблицы = Сред(ИмяПрисоединяемойТаблицы, 3);
			КонецЕсли;
			Результат.Вставить(ПсевдонимПрисоединяемойТаблицы, ИмяПрисоединяемойТаблицы);
		КонецЕсли;
	КонецЦикла;
		
	Если Не ТребуютсяПсевдонимыТаблицВУсловиях Тогда
		Результат.Вставить("Т", "");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция РасставитьПереносы(Строка)
	Результат = Строка;
	
	ИдентификаторыНачалаСтроки = Новый Массив;
	ИдентификаторыНачалаСтроки.Добавить("ЛЕВОЕ СОЕДИНЕНИЕ");
	ИдентификаторыНачалаСтроки.Добавить("ПРАВОЕ СОЕДИНЕНИЕ");
	ИдентификаторыНачалаСтроки.Добавить("ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
	ИдентификаторыНачалаСтроки.Добавить("ПОЛНОЕ СОЕДИНЕНИЕ");
	Для Каждого Идентификатор Из ИдентификаторыНачалаСтроки Цикл
		Результат = СтрЗаменить(Результат, Идентификатор, Символы.ПС + Идентификатор);
	КонецЦикла;
	
	Идентификатор = "ПО ";
	Результат = СтрЗаменить(Результат, Идентификатор, Символы.ПС + "	" + Идентификатор);
	
	Возврат Результат;
КонецФункции

Функция ЗаменитьИменаТаблиц(Текст, ПсевдонимыТаблиц)
	Результат = Текст;
	Для Каждого Псевдоним Из ПсевдонимыТаблиц Цикл
		Если ЗначениеЗаполнено(Псевдоним.Значение) Тогда
			Результат = СтрЗаменить(Результат, Псевдоним.Ключ + ".Ссылка", Псевдоним.Значение);
		КонецЕсли;
		Результат = СтрЗаменить(Результат, Псевдоним.Ключ + ".", ?(ЗначениеЗаполнено(Псевдоним.Значение), Псевдоним.Значение + ".", ""));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ДеталиОграничения(ПараметрыДоступа, Таблица)
	Результат = Неопределено;
	Если ПараметрыДоступа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ШаблонОграничения = ПараметрыДоступа[0];
	Если ШаблонОграничения = "#ПоЗначениям" Тогда
		Результат = ПрочитатьДеталиОграниченияПоЗначениям(ПараметрыДоступа);
	ИначеЕсли ШаблонОграничения = "#ПоЗначениямРасширенный" Или ШаблонОграничения = "#ПоЗначениямИНаборамРасширенный" Тогда
		Результат = ПрочитатьДеталиОграниченияПоЗначениямРасширенный(ПараметрыДоступа);
	ИначеЕсли ШаблонОграничения = "#ПоНаборамЗначений" Тогда
		Результат = ПрочитатьДеталиОграниченияПоНаборамЗначений(ПараметрыДоступа);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.Таблица) Тогда
		Результат.Таблица = Таблица;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция УбратьЛишниеКавычки(Строка)
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;
	Возврат СокрЛП(Строка);
КонецФункции

Функция ОчиститьОтПостороннихСимволов(ИсходныйТекст)
	Результат = "";
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИсходныйТекст) Цикл
		Строка = СтрПолучитьСтроку(ИсходныйТекст, НомерСтроки);
		Если Не СтрНачинаетсяС(СокрЛ(Строка), "//") Тогда
			Результат = Результат + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрЗаменить(Результат, """Чтение""", """""");
	Результат = СтрЗаменить(Результат, """Изменение""", """""");
	
	Возврат СокрЛП(Результат);
КонецФункции

Функция ЗакомментироватьТекст(Текст)
	Возврат "// " + СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "// ");
КонецФункции

#Область ИсправляемыеТексты

Функция ТекстыОграниченийСтрокой_3_0_1_163(ТекстыОграничений, ВыводитьДополнительнуюИнформацию = Ложь)
	
	Текст = СтрЗаменить(ТекстыОграничений.Текст, Символы.ПС, Символы.ПС + "|");
	ТекстДляВнешнихПользователей = СтрЗаменить(ТекстыОграничений.ТекстДляВнешнихПользователей, Символы.ПС, Символы.ПС + "|");
	
	Строки = Новый Массив;
	
	Если Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Тогда
		Строки.Добавить(ТекстыОграничений.ПояснениеКТексту);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Текст) Или Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Тогда
		ШаблонОграничения = "Ограничение.Текст =
		|""%1"";";
		Строки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОграничения, Текст));
	КонецЕсли;
	
	Если (Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей) Или Не ПустаяСтрока(ТекстДляВнешнихПользователей))
		И (Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Или Не ПустаяСтрока(Текст)) Тогда
		Строки.Добавить("");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей) Тогда
		Строки.Добавить(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстДляВнешнихПользователей) Или Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей) Тогда
		ШаблонОграничения = "Ограничение.ТекстДляВнешнихПользователей =
		|""%1"";";
		Строки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОграничения, ТекстДляВнешнихПользователей));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТексту) Или Не ПустаяСтрока(ТекстыОграничений.ПояснениеКТекстуДляВнешнихПользователей)
		Или ВыводитьДополнительнуюИнформацию Тогда
		Строки.Вставить(0, ЗакомментироватьТекст(ТекстыОграничений.ДополнительнаяИнформация));
	КонецЕсли;
	
	Результат = СтрСоединить(Строки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстыОграничений_3_0_1_163(Знач Таблица, Знач ТаблицаОграничений, Знач НазначениеРолей)
	
	Результат = Новый Структура;
	Результат.Вставить("ПояснениеКТексту", Новый Массив);
	Результат.Вставить("Текст", "");
	Результат.Вставить("ПояснениеКТекстуДляВнешнихПользователей", Новый Массив);
	Результат.Вставить("ТекстДляВнешнихПользователей", "");
	Результат.Вставить("ДополнительнаяИнформация", "");
	
	
	Ограничения = ТаблицаОграничений.Скопировать(ТаблицаОграничений.НайтиСтроки(Новый Структура("Таблица", Таблица))); // см. ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы
	Для Каждого ОписаниеОграничения Из Ограничения Цикл
		ОписаниеОграничения.Ограничение = ОчиститьОтПостороннихСимволов(ОписаниеОграничения.Ограничение);
	КонецЦикла;
	
	Ограничения.Свернуть("Право,Ограничение,Роль");
	Ограничения.Колонки.Добавить("ДляВнешнихПользователей", Новый ОписаниеТипов("Булево"));
	Для Каждого Ограничение Из Ограничения Цикл
		Ограничение.ДляВнешнихПользователей = НазначениеРолей.ТолькоДляВнешнихПользователей.Найти(Ограничение.Роль) <> Неопределено
			Или НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Найти(Ограничение.Роль) <> Неопределено;
	КонецЦикла;
	
	Ограничения.Свернуть("Право,Ограничение,ДляВнешнихПользователей");
	Ограничения.Сортировать("ДляВнешнихПользователей, Право Убыв");
	ДополнительнаяИнформация = "";
	Для Каждого Ограничение Из Ограничения Цикл
		Если Ограничение.Право <> "Чтение" И Ограничение.Право <> "Изменение" Тогда
			Продолжить;
		КонецЕсли;
		ДополнительнаяИнформация = ДополнительнаяИнформация + Ограничение.Право;
		Если Ограничение.ДляВнешнихПользователей Тогда
			ДополнительнаяИнформация = ДополнительнаяИнформация + " " + НСтр("ru = '(для внешних пользователей)'");
		КонецЕсли;
		ДополнительнаяИнформация = ДополнительнаяИнформация + Символы.ПС;
		ДополнительнаяИнформация = ДополнительнаяИнформация + Ограничение.Ограничение + Символы.ПС;
		ДополнительнаяИнформация = ДополнительнаяИнформация + Символы.ПС;
	КонецЦикла;
	ДополнительнаяИнформация = НСтр("ru = 'Имеющиеся ограничения доступа в ролях:'") + Символы.ПС + Символы.ПС + ДополнительнаяИнформация;
	Результат.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	Отказ = Ложь;
	Для Счетчик = 0 По 1 Цикл
		ДляВнешнихПользователей = Булево(Счетчик);
		
		ОграничениеЧтения = Ограничения.НайтиСтроки(Новый Структура("Право,ДляВнешнихПользователей", "Чтение", ДляВнешнихПользователей));
		ОграничениеИзменения = Ограничения.НайтиСтроки(Новый Структура("Право,ДляВнешнихПользователей", "Изменение", ДляВнешнихПользователей));
		
		ОграничениеЧтенияСтрокой = Неопределено;
		Если ОграничениеЧтения.Количество() > 0 Тогда
			ОграничениеЧтенияСтрокой = ОграничениеЧтения[0].Ограничение;
		КонецЕсли;
		Если ОграничениеЧтения.Количество() > 1 И Не ТекстОграниченийОдинаковый(ОграничениеЧтения) Тогда
			ТекстПояснения = "// TODO: " + НСтр("ru = 'Найдено более одного варианта текста ограничения чтения'");
			Если ДляВнешнихПользователей Тогда
				Результат.ПояснениеКТекстуДляВнешнихПользователей.Добавить(ТекстПояснения);
			Иначе
				Результат.ПояснениеКТексту.Добавить(ТекстПояснения);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
		ОграничениеИзмененияСтрокой = Неопределено;
		Если ОграничениеИзменения.Количество() > 0 Тогда
			ОграничениеИзмененияСтрокой = ОграничениеИзменения[0].Ограничение;
		КонецЕсли;
		Если ОграничениеИзменения.Количество() > 1 И Не ТекстОграниченийОдинаковый(ОграничениеИзменения) Тогда
			ТекстПояснения = "// TODO: " + НСтр("ru = 'Найдено более одного варианта текста ограничения изменения'");
			Если ДляВнешнихПользователей Тогда
				Результат.ПояснениеКТекстуДляВнешнихПользователей.Добавить(ТекстПояснения);
			Иначе
				Результат.ПояснениеКТексту.Добавить(ТекстПояснения);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОграничения = НовыйТекстОграничения_3_0_1_163(Таблица, ОграничениеЧтенияСтрокой, ОграничениеИзмененияСтрокой, ДляВнешнихПользователей, Отказ);
		Если ТекстОграничения <> Неопределено Тогда
			Если ДляВнешнихПользователей Тогда
				Если Не ПустаяСтрока(ТекстОграничения.Пояснение) Тогда
					Результат.ПояснениеКТекстуДляВнешнихПользователей.Добавить(ТекстОграничения.Пояснение);
				КонецЕсли;
				Результат.ТекстДляВнешнихПользователей = ТекстОграничения.Текст;
			Иначе
				Если Не ПустаяСтрока(ТекстОграничения.Пояснение) Тогда
					Результат.ПояснениеКТексту.Добавить(ТекстОграничения.Пояснение);
				КонецЕсли;
				Результат.Текст = ТекстОграничения.Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ПояснениеКТексту = СтрСоединить(Результат.ПояснениеКТексту, Символы.ПС);
	Результат.ПояснениеКТекстуДляВнешнихПользователей = СтрСоединить(Результат.ПояснениеКТекстуДляВнешнихПользователей, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьДеталиОграниченияПоЗначениямРасширенный_3_0_1_163(Знач ПараметрыОграничения)
	Таблица = ПараметрыОграничения[1];
	Право = ПараметрыОграничения[2];
	Модификатор = ПараметрыОграничения[3];
	ПрисоединяемыеТаблицы = ПараметрыОграничения[4];
	НачальнаяСкобка = ПараметрыОграничения[5];
	
	СтрокаПоиска = "НЕ ЛОЖЬ В (ВЫБРАТЬ ПЕРВЫЕ 1 ЛОЖЬ ИЗ";
	Если СтрНачинаетсяС(ВРег(НачальнаяСкобка), ВРег(СтрокаПоиска)) Тогда
		Строка = Сред(НачальнаяСкобка, СтрДлина(СтрокаПоиска) + 1);
		СтрокаПоиска = " И НЕ (";
		Если СтрЗаканчиваетсяНа(ВРег(Строка), ВРег(СтрокаПоиска)) И ВРег(ПараметрыОграничения[8]) = ВРег(")) И ") Тогда
			Строка = Лев(Строка, СтрДлина(Строка) - СтрДлина(СтрокаПоиска));
			ПрисоединяемыеТаблицы = "ЛЕВОЕ СОЕДИНЕНИЕ" + СтрЗаменить(Строка, " ГДЕ ", " ПО ");
			НачальнаяСкобка = "ДляВсехСтрок(";
			ПараметрыОграничения[8] = ") И ";
		КонецЕсли;
	КонецЕсли;
	
	Условия = Новый Массив;
	Для Индекс = 6 По ПараметрыОграничения.Количество() - 1 Цикл
		Условие = ОписаниеУсловия();
		Условие.ВидДоступа = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс]);
		Условие.Поле = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс+1]);
		Условие.Скобка = УбратьЛишниеКавычки(ПараметрыОграничения[Индекс+2]);
		Если Не ПустаяСтрока(Условие.Поле) Или Не ПустаяСтрока(Условие.Скобка) Тогда
			Условия.Добавить(Условие);
		КонецЕсли;
		Индекс = Индекс + 2;
	КонецЦикла;
	
	Результат = ОписаниеОграничения();
	Результат.ИсходныйШаблон = ПараметрыОграничения[0];
	Результат.Таблица = Таблица;
	Результат.Право = Право;
	Результат.Модификатор = Модификатор;
	Результат.ПрисоединяемыеТаблицы = ПрисоединяемыеТаблицы;
	Результат.НачальнаяСкобка = НачальнаяСкобка;
	Результат.Условия = Условия;
	
	Возврат Результат;
КонецФункции

Функция НовыйТекстОграничения_3_0_1_163(Таблица, СтарыйТекстОграниченияЧтения, СтарыйТекстОграниченияИзменения, Знач ДляВнешнихПользователей, Отказ)
	
	Если СтарыйТекстОграниченияЧтения = Неопределено И СтарыйТекстОграниченияИзменения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйТекстОграничения = "";
	ТекстПояснения = "";
	
	Если ЭтоЖурнал(Таблица) Тогда
		НовыйТекстОграничения = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(Ссылка)";
	ИначеЕсли ЭтоСправочникПрисоединенныхФайлов(Таблица) Тогда
		НовыйТекстОграничения =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ВладелецФайла)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ВладелецФайла)";
	Иначе
		Отказ = Отказ Или ЕстьНеконвертируемыеУсловия(СтарыйТекстОграниченияЧтения) Или ЕстьНеконвертируемыеУсловия(СтарыйТекстОграниченияИзменения);
		
		Если Не Отказ Тогда
			ОграниченияОдинаковые = СтарыйТекстОграниченияЧтения = СтарыйТекстОграниченияИзменения;
			
			ДеталиОграниченияЧтения = Неопределено;
			Если СтарыйТекстОграниченияЧтения <> Неопределено Тогда
				ПараметрыЧтения = РазобратьСтрокуОграничения(СтарыйТекстОграниченияЧтения);
				ДеталиОграниченияЧтения = ДеталиОграничения_3_0_1_163(ПараметрыЧтения, Таблица);
			КонецЕсли;
			
			ДеталиОграниченияИзменения = Неопределено;
			Если СтарыйТекстОграниченияИзменения <> Неопределено Тогда
				ПараметрыИзменения = РазобратьСтрокуОграничения(СтарыйТекстОграниченияИзменения);
				ДеталиОграниченияИзменения = ДеталиОграничения_3_0_1_163(ПараметрыИзменения, Таблица);
			КонецЕсли;
			
			Если ТребуетсяПереносЛогикиОграниченийИзПроцедурыЗаполнитьНаборыЗначенийДоступа(ДеталиОграниченияЧтения, ДеталиОграниченияИзменения) Тогда
				ТекстПояснения = "// TODO: " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перенести логику ограничений из процедуры %1 модуля объекта.'"), "ЗаполнитьНаборыЗначенийДоступа");
				Отказ = Истина;
			Иначе
				Если ДеталиОграниченияЧтения = Неопределено И ДеталиОграниченияИзменения = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				ЕстьЧтение = ДеталиОграниченияЧтения <> Неопределено;
				ЕстьИзменение = ДеталиОграниченияИзменения <> Неопределено;
				
				Если ЕстьЧтение И ЕстьИзменение И Не ОграниченияОдинаковые Тогда
					СократитьУсловияИзменения(ДеталиОграниченияЧтения, ДеталиОграниченияИзменения);
				КонецЕсли;
				
				ОграниченияЧтенияСтрокой = "";
				ТекстПрисоединяемыхТаблицЧтение = "";
				Если ЕстьЧтение Тогда
					ПсевдонимыТаблицЧтение = ЗаменяемыеПсевдонимыТаблиц(ДеталиОграниченияЧтения.Таблица, ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы);
					ТекстПрисоединяемыхТаблицЧтение = ТекстПрисоединяемыхТаблиц(ПсевдонимыТаблицЧтение, ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы);
					ОграниченияЧтенияСтрокой = ОграниченияСтрокой(ПсевдонимыТаблицЧтение, ДеталиОграниченияЧтения, Ложь);
				КонецЕсли;
				
				ОграниченияИзмененияСтрокой = "";
				ТекстПрисоединяемыхТаблицИзменение = "";
				Если ЕстьИзменение Тогда
					ПсевдонимыТаблицИзменение = ЗаменяемыеПсевдонимыТаблиц(ДеталиОграниченияИзменения.Таблица, ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы);
					ТекстПрисоединяемыхТаблицИзменение = ТекстПрисоединяемыхТаблиц(ПсевдонимыТаблицИзменение, ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы);
					ОграниченияИзмененияСтрокой = ОграниченияСтрокой(ПсевдонимыТаблицИзменение, ДеталиОграниченияИзменения, Истина);
				КонецЕсли;
				
				ОграниченияОдинаковые = ЕстьЧтение И (Не ЕстьИзменение Или ПустаяСтрока(ОграниченияИзмененияСтрокой) Или ОграниченияЧтенияСтрокой = ОграниченияИзмененияСтрокой);
				Если ОграниченияОдинаковые Тогда
					Если ЗначениеЗаполнено(ОграниченияЧтенияСтрокой) Тогда
						НовыйТекстОграничения = "РазрешитьЧтениеИзменение" + ОграниченияЧтенияСтрокой;
					КонецЕсли;
				Иначе
					Если ЕстьЧтение И ЕстьИзменение Тогда
						НовыйТекстОграничения = "РазрешитьЧтение" + ОграниченияЧтенияСтрокой + Символы.ПС + ";" + Символы.ПС
							+ "РазрешитьИзменениеЕслиРазрешеноЧтение" + ОграниченияИзмененияСтрокой;
					Иначе
						Если Не ЕстьЧтение И ЕстьИзменение Тогда
							НовыйТекстОграничения = "РазрешитьЧтение
								|ГДЕ ИСТИНА
								|;
								|РазрешитьИзменениеЕслиРазрешеноЧтение" + ОграниченияИзмененияСтрокой;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьЧтение И ЕстьИзменение
					И ЗначениеЗаполнено(ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы) И Не СтрНачинаетсяС(ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы, ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы)
					И ЗначениеЗаполнено(ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы) И Не СтрНачинаетсяС(ДеталиОграниченияИзменения.ПрисоединяемыеТаблицы, ДеталиОграниченияЧтения.ПрисоединяемыеТаблицы) Тогда
						НовыйТекстОграничения = "";
				КонецЕсли;
				
				Если СтрНайти(НРег(НовыйТекстОграничения), НРег("ВЫБРАТЬ ПЕРВЫЕ 1")) Тогда // @query-part
					НовыйТекстОграничения = "";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекстПрисоединяемыхТаблицЧтение)
					И ЗначениеЗаполнено(ТекстПрисоединяемыхТаблицИзменение)
					И ТекстПрисоединяемыхТаблицЧтение <> ТекстПрисоединяемыхТаблицИзменение Тогда
						НовыйТекстОграничения = "";
				КонецЕсли;
				
				Если Не ПустаяСтрока(НовыйТекстОграничения) Тогда
					ТекстПрисоединяемыхТаблиц = ТекстПрисоединяемыхТаблицЧтение;
					Если Не ЗначениеЗаполнено(ТекстПрисоединяемыхТаблиц) Тогда
						ТекстПрисоединяемыхТаблиц = ТекстПрисоединяемыхТаблицИзменение;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекстПрисоединяемыхТаблиц) Тогда
						НовыйТекстОграничения = ТекстПрисоединяемыхТаблиц + НовыйТекстОграничения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(НовыйТекстОграничения) Тогда
		СтруктураОграниченияИзОписания = УправлениеДоступомСлужебный.СтруктураОграниченияИзОписания(Таблица, НовыйТекстОграничения);
		Если СтруктураОграниченияИзОписания.ОписаниеОшибок.ЕстьОшибки Тогда
			НовыйТекстОграничения = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПояснения) И ПустаяСтрока(НовыйТекстОграничения) Тогда
		ТекстПояснения = "// TODO: " + НСтр("ru = 'Сконвертировать тексты ограничений вручную.'");
		Отказ = Истина;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", НовыйТекстОграничения);
	Результат.Вставить("Пояснение", ТекстПояснения);
	
	Возврат Результат;
	
КонецФункции

Функция ДеталиОграничения_3_0_1_163(ПараметрыДоступа, Таблица)
	Результат = Неопределено;
	Если ПараметрыДоступа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ШаблонОграничения = ПараметрыДоступа[0];
	Если ШаблонОграничения = "#ПоЗначениям" Тогда
		Результат = ПрочитатьДеталиОграниченияПоЗначениям(ПараметрыДоступа);
	ИначеЕсли ШаблонОграничения = "#ПоЗначениямРасширенный" Или ШаблонОграничения = "#ПоЗначениямИНаборамРасширенный" Тогда
		Результат = ПрочитатьДеталиОграниченияПоЗначениямРасширенный_3_0_1_163(ПараметрыДоступа);
	ИначеЕсли ШаблонОграничения = "#ПоНаборамЗначений" Тогда
		Результат = ПрочитатьДеталиОграниченияПоНаборамЗначений(ПараметрыДоступа);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.Таблица) Тогда
		Результат.Таблица = Таблица;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПомощника

// Параметры:
//   Параметры - Структура:
//     * ГлобальныеСообщения - ТаблицаЗначений
//
Процедура ЗаписатьГлобальноеСообщение(Параметры, Текст, Порядок)
	Сообщение = Параметры.ГлобальныеСообщения.Добавить();
	Сообщение.ТекстГС   = Текст;
	Сообщение.ПорядокГС = Порядок;
КонецПроцедуры

// Параметры:
//   Параметры - Структура:
//     * СообщенияПоОбъектам - ТаблицаЗначений
//   СтрокаОбъекта - см. УправлениеДоступом_ПриАнализеФормы.СтрокаОбъекта
//   СтрокаФормы - см. УправлениеДоступом_ПриАнализеФормы.СтрокаОбъекта
//
Процедура ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, ТипСообщения, Текст)
	СтрокаВида = СтрокаОбъекта.Родитель;
	
	Сообщение = Параметры.СообщенияПоОбъектам.Добавить();
	Сообщение.ПриоритетВида    = Параметры.ПриоритетыВидов[СтрокаВида.Имя];
	Сообщение.Вид              = СтрокаВида.ПредставлениеСписка;
	Сообщение.ОбъектМетаданных = СтрокаОбъекта.ПолноеИмя;
	Если ТипЗнч(СтрокаФормы) = Тип("Строка") Тогда
		Сообщение.Форма = СтрокаФормы;
	Иначе
		Сообщение.Форма            = СтрокаФормы.Имя;
	КонецЕсли;
	Сообщение.ТипСообщения     = ТипСообщения;
	Сообщение.Текст            = Текст;
КонецПроцедуры

// Обработчики фоновых заданий.

Процедура Внедрение(Параметры, АдресРезультата) Экспорт
	Если Не ЗначениеЗаполнено(Параметры.РабочийКаталог) Тогда
		ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла("DevTools"));
		СоздатьКаталог(ПутьККаталогу);
		Параметры.РабочийКаталог = ПутьККаталогу;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Параметры.Пользователь = ИмяПользователя();
	КонецЕсли;
	
	Если Параметры.ВыгружатьФайлыВКаталог Тогда
		ВыгрузитьКонфигурациюВXML(Параметры);
	КонецЕсли;
	
	ПрочитатьОсновныеНастройки(Параметры);
	ИзменитьВыгруженныеТексты(Параметры);
	ЗагрузитьКонфигурациюИзXML(Параметры);
	
	Результат = Новый Структура;
	Результат.Вставить("РабочийКаталог",    Параметры.РабочийКаталог);
	Результат.Вставить("ДеревоМетаданных",  Параметры.ДеревоМетаданных);
	Результат.Вставить("ТабличныйДокумент", СформироватьОтчет(Параметры));
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

// Функции, используемые из формы и из этого модуля.

Функция ОткрытКонфигуратор() Экспорт
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Чтение метаданных текущей конфигурации.

Процедура ПрочитатьОсновныеНастройки(Параметры)
	
	ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Чтение основных настроек из переопределяемых модулей...'"));
	
	Параметры.Вставить("СКД", ПолучитьМакет("СхемаКомпоновкиДанных"));
	Параметры.Вставить("ГлобальныеСообщения", СоздатьТаблицуПоСхемеНабора(Параметры.СКД, "ГлобальныеСообщения"));
	Параметры.Вставить("СообщенияПоОбъектам", СоздатьТаблицуПоСхемеНабора(Параметры.СКД, "СообщенияПоОбъектам"));
	Параметры.Вставить("ИзмененныеФайлы", Новый Массив);
	
	ПриЧтенииОсновныхНастроек(Параметры);
	
	ДлительныеОперации.СообщитьПрогресс(2, НСтр("ru = 'Построение дерева метаданных...'"));
	ЗарегистрироватьСоответствияДляБыстрогоПреобразованияИмен(Параметры);
	
	Параметры.Вставить("КоличествоОбъектов", 0);
	Параметры.Вставить("ДеревоМетаданных", ДеревоМетаданных());
	Параметры.Вставить("ПриоритетВида", 0);
	Параметры.Вставить("ПриоритетыВидов", Новый Соответствие);

	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ОбщиеМодули", НСтр("ru = 'Общие модули'"), НСтр("ru = 'Общий модуль'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ОбщиеФормы", НСтр("ru = 'Общие формы'"), НСтр("ru = 'Общая форма'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыОбмена", НСтр("ru = 'Планы обмена'"), НСтр("ru = 'План обмена'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Справочники", НСтр("ru = 'Справочники'"), НСтр("ru = 'Справочник'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Документы", НСтр("ru = 'Документы'"), НСтр("ru = 'Документ'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ЖурналыДокументов", НСтр("ru = 'Журналы документов'"), НСтр("ru = 'Журнал документов'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Отчеты", НСтр("ru = 'Отчеты'"), НСтр("ru = 'Отчет'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Обработки", НСтр("ru = 'Обработки'"), НСтр("ru = 'Обработка'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), НСтр("ru = 'План видов характеристик'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыСчетов", НСтр("ru = 'Планы счетов'"), НСтр("ru = 'План счетов'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"), НСтр("ru = 'План видов расчета'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыСведений", НСтр("ru = 'Регистры сведений'"), НСтр("ru = 'Регистр сведений'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыНакопления", НСтр("ru = 'Регистры накопления'"), НСтр("ru = 'Регистр накопления'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"), НСтр("ru = 'Регистр бухгалтерии'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыРасчета", НСтр("ru = 'Регистры расчета'"), НСтр("ru = 'Регистр расчета'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "БизнесПроцессы", НСтр("ru = 'Бизнес-процессы'"), НСтр("ru = 'Бизнес-процесс'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Задачи", НСтр("ru = 'Задачи'"), НСтр("ru = 'Задача'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Роли", НСтр("ru = 'Роли'"), НСтр("ru = 'Роль'"), Ложь);

	Параметры.Удалить("ПриоритетВида");
	
КонецПроцедуры

// Возвращаемое значение:
//  ДеревоЗначений:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//  
Функция ДеревоМетаданных()
	
	ДеревоМетаданных = Новый ДеревоЗначений();
	
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеСписка", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеОбъекта", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ДеревоМетаданных.Колонки.Добавить("Ссылочный", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоМетаданных;
	
КонецФункции

Функция СоздатьТаблицуПоСхемеНабора(СхемаКомпоновкиДанных, ИмяНабораДанных)
	Результат = Новый ТаблицаЗначений;
	ПоляНабораДанныхСхемыКД = СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля;
	Для Каждого ЭлементКД Из ПоляНабораДанныхСхемыКД Цикл
		Если ТипЗнч(ЭлементКД) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ИмяКолонки = СтрЗаменить(Строка(ЭлементКД.Поле), ".", "_");
			Результат.Колонки.Добавить(ИмяКолонки, ЭлементКД.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ЗарегистрироватьКоллекциюМетаданных(Параметры, Вид, ПредставлениеСписка, ПредставлениеОбъекта, Ссылочный)
	Параметры.ПриоритетВида = Параметры.ПриоритетВида + 1;
	Параметры.ПриоритетыВидов.Вставить(Вид, Параметры.ПриоритетВида);
	
	Коллекция = Метаданные[Вид];
	Количество = Коллекция.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	Параметры.КоличествоОбъектов = Параметры.КоличествоОбъектов + Количество;
	
	ДеревоКоллекцииМетаданных = Параметры.ДеревоМетаданных;  // ДеревоЗначений
	СтрокаВида = ДеревоКоллекцииМетаданных.Строки.Добавить(); // ДеревоЗначений
	СтрокаВида.Имя       = Вид;
	СтрокаВида.ПолноеИмя = Вид;
	СтрокаВида.ПредставлениеСписка  = ПредставлениеСписка;
	СтрокаВида.ПредставлениеОбъекта = ПредставлениеОбъекта;
	СтрокаВида.НомерКартинки = Параметры.НомераКартинок[НРег(Вид)];
	СтрокаВида.Ссылочный = Ссылочный;
	
	Для Каждого ОбъектМетаданных Из Коллекция Цикл
		Если ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда
			Продолжить; // Объект расширения.
		КонецЕсли;
		
		СтрокаОбъекта = СтрокаВида.Строки.Добавить();
		СтрокаОбъекта.Метаданные         = ОбъектМетаданных;
		СтрокаОбъекта.Имя                = ОбъектМетаданных.Имя;
		СтрокаОбъекта.ПолноеИмя          = ОбъектМетаданных.ПолноеИмя();
		СтрокаОбъекта.НомерКартинки      = СтрокаВида.НомерКартинки;
		ЗаполнитьПредставлениеОбъектаМетаданных(СтрокаОбъекта, ОбъектМетаданных);
		СтрокаОбъекта.Ссылочный = Ссылочный;
		
		Если Вид = "ОбщиеФормы" Или Вид = "ОбщиеМодули" Или Вид = "Роли" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого МетаданныеФормы Из ОбъектМетаданных.Формы Цикл
			СтрокаФормы = СтрокаОбъекта.Строки.Добавить();
			СтрокаФормы.Метаданные = МетаданныеФормы;
			СтрокаФормы.Имя        = МетаданныеФормы.Имя;
			СтрокаФормы.ПолноеИмя  = МетаданныеФормы.ПолноеИмя();
			СтрокаФормы.ПредставлениеСписка  = МетаданныеФормы.Представление();
			СтрокаФормы.ПредставлениеОбъекта = СтрокаФормы.ПредставлениеСписка;
			СтрокаФормы.Ссылочный = Ссылочный;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПредставлениеОбъектаМетаданных(СтрокаОбъекта, ОбъектМетаданных)
	СтандартныеСвойства = Новый Структура("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Тогда
		СтрокаОбъекта.ПредставлениеОбъекта = СтандартныеСвойства.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Тогда
		СтрокаОбъекта.ПредставлениеОбъекта = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
	Иначе
		СтрокаОбъекта.ПредставлениеОбъекта = ОбъектМетаданных.Представление();
	КонецЕсли;
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеСписка) Тогда
		СтрокаОбъекта.ПредставлениеСписка = СтандартныеСвойства.ПредставлениеСписка;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеСписка) Тогда
		СтрокаОбъекта.ПредставлениеСписка = СтандартныеСвойства.РасширенноеПредставлениеСписка;
	Иначе
		СтрокаОбъекта.ПредставлениеСписка = ОбъектМетаданных.Представление();
	КонецЕсли;
КонецПроцедуры

// Выгрузка и загрузка конфигурации из XML.

Функция ВыгрузитьКонфигурациюВXML(Параметры)
	
	Если ФайлСуществует(Параметры.РабочийКаталог) Тогда
		УдалитьФайлы(Параметры.РабочийКаталог, "*");
	Иначе
		СоздатьКаталог(Параметры.РабочийКаталог);
	КонецЕсли;
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	КаталогКопии1CD = Неопределено;
	
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			ДлительныеОперации.СообщитьПрогресс(5, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
				НСтр("ru = 'Копирование %1, т.к. не закрыт конфигуратор...'"), "1Cv8.1CD"));
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПутьККонфигурации).file;
			КаталогКопии1CD = Параметры.РабочийКаталог + "BaseCopy" + ПолучитьРазделительПути();
			СоздатьКаталог(КаталогКопии1CD);
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогКопии1CD + "1Cv8.1CD");
			ПутьККонфигурации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"File=""%1"";", КаталогКопии1CD);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для выгрузки модулей закройте конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + "Выгрузка.log";
	
	ДлительныеОперации.СообщитьПрогресс(10, НСтр("ru = 'Выгрузка конфигурации в XML...'"));
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(ПутьККонфигурации);
	Если Не ПустаяСтрока(Параметры.Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Параметры.Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Параметры.Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(Параметры.РабочийКаталог);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог выгрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости выгрузки модулей;
	//		Template - признак необходимости выгрузки шаблонов;
	//		Help - признак необходимости выгрузки справочной информации;
	//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	
	Если КаталогКопии1CD <> Неопределено Тогда
		Попытка
			УдалитьФайлы(КаталогКопии1CD);
		Исключение
			// Если сейчас каталог еще занят другим процессом, то он будет удален позднее автоматически.
		КонецПопытки;
	КонецЕсли;
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выгрузить конфигурацию в XML (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, ПСТаб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаСообщений);
	Исключение
		// Если сейчас файл еще занят другим процессом, то он будет удален позднее автоматически.
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ЗагрузитьКонфигурациюИзXML(Параметры)
		
	Если Параметры.ИзмененныеФайлы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Файлы конфигурации не изменены, загрузка не требуется.'");
		ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 90);
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаИзмененныеФайлы = Параметры.РабочийКаталог + "ИзмененныеФайлы.txt";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаИзмененныеФайлы, КодировкаТекста.UTF8, , Ложь);
	ЗаписьТекста.Записать(СтрСоединить(Параметры.ИзмененныеФайлы, Символы.ПС));
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + "Загрузка.log";
	
	//	/LoadConfigFromFiles <каталог загрузки> [-Extension <имя расширения>] [-AllExtensions][-files][-listfile][-format]
	//	- загрузка конфигурации из файлов. Загрузка расширения в основную конфигурацию (и наоборот) не поддерживается.
	//	Допустимо использование следующих опций:
	//		<каталог загрузки> - каталог, содержащий XML-файлы конфигурации;
	//		Extension <Имя расширения> - обработка расширения с указанным именем.
	//			Если расширение успешно обработано возвращает код возврата 0.
	//			В противном случае (если расширение с указанным именем не существует или в процессе работы произошли ошибки) - 1.
	//		AllExtensions - загрузка только расширений (всех).
	//			Если требуемое расширение не существует, оно будет создано.
	//			Для каждого подкаталога указанного каталога будет выполнена попытка создать расширение.
	//			При попытке загрузить расширение в основную конфигурацию или наоборот, будет выведена ошибка.
	//		files - содержит список файлов, которые требуется загрузить. Список разделяется запятыми.
	//			Не используется, если указана опция-listfile.
	//		listfile - указывает файл, в котором перечислены файлы, которые требуется загрузить.
	//			Не используется, если указана опция -files. 
	//			Указываемый файл должен удовлетворять следующим требованиям:
	//			- Файл должен быть в кодировке UTF-8.
	//			- Имена файлов должны быть указаны через перенос.
	//				Поддерживаются символы переноса \r\n ("следующая строка") и \r ("возврат каретки").
	//			- Файл не должен содержать пустые строки между именами файлов.
	//		format - используется для частичной загрузки. Указывает формат загрузки файлов.
	//			По умолчанию загрузка производится в иерархическом формате:
	//			Hierarchical - загрузка выполняется в иерархическом формате.
	//			Plain - загрузка выполняется в линейном формате.
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединенияИнформационнойБазы());
	Если Не ПустаяСтрока(Параметры.Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Параметры.Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Параметры.Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/LoadConfigFromFiles");
	КомандаЗапуска.Добавить(Параметры.РабочийКаталог);
	КомандаЗапуска.Добавить("-listfile");
	КомандаЗапуска.Добавить(ИмяФайлаИзмененныеФайлы);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	АдресФайлаРучнойЗагрузки = Параметры.РабочийКаталог + "load.cmd";
	ЗаписьТекста = Новый ЗаписьТекста(АдресФайлаРучнойЗагрузки, КодировкаТекста.OEM);
	ЗаписьТекста.Записать(ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска));
	ЗаписьТекста.Закрыть();
	
	Если ОткрытКонфигуратор() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Конфигурация не загружена, т.к. открыт конфигуратор.
				|Загрузку можно выполнить в конфигураторе из каталога ""%1"" (или запустив файл ""%2"").'"),
			Параметры.РабочийКаталог,
			АдресФайлаРучнойЗагрузки);
		ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 10);
		Возврат Ложь;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(90, НСтр("ru = 'Загрузка конфигурации из XML...'"));
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить XML конфигурации (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, ПСТаб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Анализ и изменение файлов конфигурации.
// 
// Параметры:
//   Параметры - Структура:
//   * ВыгружатьВКаталог - Булево
//   * РабочийКаталог - Строка
//   * Пользователь - СправочникСсылка.Пользователи
//   * Пароль - Строка
//   * СКД - СхемаКомпоновкиДанных
//   * ГлобальныеСообщения - ТаблицаЗначений
//   * СообщенияПоОбъектам - ТаблицаЗначений
//   * ИзмененныеФайлы - Массив из Строка
//   * КоличествоОбъектов - Число
//   * ДеревоМетаданных - ДеревоЗначений:
//   ** Метаданные - ОбъектМетаданных
//   ** Имя - Строка
//   ** ПолноеИмя - Строка
//   ** ПредставлениеСписка - Строка
//   ** ПредставлениеОбъекта - Строка
//   ** Каталог - Строка
//   ** НомерКартинки - Число
//   ** Ссылочный - Булево
//   ** ПриоритетВида - Число
//   * ПриоритетВида - Соответствие из КлючИЗначение:
//     ** Ключ - Строка
//     ** Значение - Число
//   * ОбъектыСКомандами - Структура:
//   ** Печать - Массив
//   ** ЗаполнениеОбъектов - Массив
//   ** ВариантыОтчетов - Массив
//   ** ДополнительныеОтчетыИОбработки - Массив
//   * НовыеОбъектыСКомандами - Структура:
//   ** Печать - Массив
//   ** ЗаполнениеОбъектов - Массив
//   ** ВариантыОтчетов - Массив
//   ** ДополнительныеОтчетыИОбработки - Массив
//   * СвойстваРазделовДатЗапрета - см. ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.СвойстваРазделовДатЗапрета
//   * НовыеПредопределенныеРазделыДатЗапрета - Массив
//
Процедура ИзменитьВыгруженныеТексты(Параметры)
	ДостигнутыйПроцент = 20;
	Диапазон = 90 - ДостигнутыйПроцент;
	Всего = Параметры.КоличествоОбъектов;
	Номер = 0;
	Для Каждого СтрокаВида Из Параметры.ДеревоМетаданных.Строки Цикл
		ВидНаАнглийском = Параметры.РусскоАнглийскийВоМножественном[НРег(СтрокаВида.Имя)];
		Если ВидНаАнглийском = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен перевод имени ""%1"" на английский язык.'"),
				СтрокаВида.Имя);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
			Продолжить;
		КонецЕсли;
		СтрокаВида.Каталог = Параметры.РабочийКаталог + ВидНаАнглийском + ПолучитьРазделительПути();
		Если Не ФайлСуществует(СтрокаВида.Каталог) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен каталог ""%1"".'"),
				СтрокаВида.Каталог);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 10);
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаОбъекта Из СтрокаВида.Строки Цикл
			// Прогресс анализа.
			Номер = Номер + 1;
			Процент = ДостигнутыйПроцент + Диапазон*Номер/Всего;
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Анализируется %1 ""%2""...'"),
				НРег(СтрокаВида.ПредставлениеОбъекта),
				СтрокаОбъекта.Имя);
			ДлительныеОперации.СообщитьПрогресс(Процент, Текст);
			
			// Анализ форм.
			СтрокаОбъекта.Каталог = СтрокаВида.Каталог + СтрокаОбъекта.Имя + ПолучитьРазделительПути();
			Для Каждого СтрокаФормы Из СтрокаОбъекта.Строки Цикл
				СтрокаФормы.Каталог = СтрокаОбъекта.Каталог + "Forms" + ПолучитьРазделительПути() + СтрокаФормы.Имя + ПолучитьРазделительПути();
				Если Не ФайлСуществует(СтрокаФормы.Каталог) Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не обнаружен каталог ""%1"".'"),
						СтрокаФормы.Каталог);
					ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "Ошибка", Текст);
					Продолжить;
				КонецЕсли;
				
				ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
			КонецЦикла;
			
			// Анализ модулей объекта.
			Если СтрокаВида.Имя = "ОбщиеФормы" Тогда
				ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаОбъекта);
			Иначе
				ПриАнализеОбъекта(Параметры, СтрокаОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Формирование результирующего отчета.

Функция СформироватьОтчет(Параметры)
	НастройкиКД = Параметры.СКД.ВариантыНастроек.Основной.Настройки;
	
	ВнешниеНаборыДанных = Новый Структура("ГлобальныеСообщения, СообщенияПоОбъектам");
	ЗаполнитьЗначенияСвойств(ВнешниеНаборыДанных, Параметры);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(Параметры.СКД, НастройкиКД);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	Возврат ДокументРезультат;
КонецФункции

// Работа с файлами.

Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

// Преобразования.

Процедура ЗарегистрироватьСоответствияДляБыстрогоПреобразованияИмен(Параметры)
	Параметры.Вставить("РусскоАнглийскийВЕдинственном", Новый Соответствие);
	Параметры.Вставить("РусскоАнглийскийВоМножественном", Новый Соответствие);
	Параметры.Вставить("РусскийИзЕдинственногоВоМножественный", Новый Соответствие);
	Параметры.Вставить("РусскийИзМножественногоВЕдинственный", Новый Соответствие);
	Параметры.Вставить("НомераКартинок", Новый Соответствие);
	
	// Виды объектов метаданных.
	ЗарегистрироватьТермин(Параметры, "WebСервис", "WebСервисы", "WebService", "WebServices", -1);
	ЗарегистрироватьТермин(Параметры, "WSСсылка", "WSСсылки", "WSReference", "", -1);
	ЗарегистрироватьТермин(Параметры, "БизнесПроцесс", "БизнесПроцессы", "BusinessProcess", "BusinessProcesses", 19);
	ЗарегистрироватьТермин(Параметры, "ГруппаКоманд", "ГруппыКоманд", "CommandGroup", "CommandGroups", -1);
	ЗарегистрироватьТермин(Параметры, "Документ", "Документы", "Document", "Documents", 12);
	ЗарегистрироватьТермин(Параметры, "ЖурналДокументов", "ЖурналыДокументов", "DocumentJournal", "DocumentJournals");
	ЗарегистрироватьТермин(Параметры, "Задача", "Задачи", "Task", "Tasks", 21);
	ЗарегистрироватьТермин(Параметры, "Константа", "Константы", "Constant", "Constants", 25);
	ЗарегистрироватьТермин(Параметры, "Конфигурация", "", "Configuration", "Configurations", -1);
	ЗарегистрироватьТермин(Параметры, "КритерийОтбора", "КритерииОтбора", "FilterCriterion", "FilterCriteria");
	ЗарегистрироватьТермин(Параметры, "НумераторДокументов", "НумераторыДокументов", "DocumentNumerator", "", -1);
	ЗарегистрироватьТермин(Параметры, "Обработка", "Обработки", "DataProcessor", "DataProcessors");
	ЗарегистрироватьТермин(Параметры, "ОбщаяКартинка", "ОбщиеКартинки", "CommonPicture", "CommonPictures", БиблиотекаКартинок.Картинка);
	ЗарегистрироватьТермин(Параметры, "ОбщаяКоманда", "ОбщиеКоманды", "CommonCommand", "CommonCommands", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщаяФорма", "ОбщиеФормы", "CommonForm", "CommonForms", БиблиотекаКартинок.Форма);
	ЗарегистрироватьТермин(Параметры, "ОбщийМакет", "ОбщиеМакеты", "CommonTemplate", "CommonTemplates", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщийМодуль", "ОбщиеМодули", "CommonModule", "CommonModules", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщийРеквизит", "ОбщиеРеквизиты", "CommonAttribute", "CommonAttributes", 3);
	ЗарегистрироватьТермин(Параметры, "ОпределяемыйТип", "ОпределяемыеТипы", "DefinedType", "DefinedTypes", -1);
	ЗарегистрироватьТермин(Параметры, "Отчет", "Отчеты", "Report", "Reports");
	ЗарегистрироватьТермин(Параметры, "ПакетXDTO", "ПакетыXDTO", "XDTOPackage", "XDTOPackages", -1);
	ЗарегистрироватьТермин(Параметры, "ПараметрСеанса", "ПараметрыСеанса", "SessionParameter", "SessionParameters", -1);
	ЗарегистрироватьТермин(Параметры, "ПараметрФункциональныхОпций", "ПараметрыФункциональныхОпций", "FunctionalOptionsParameter", "FunctionalOptionsParameters", -1);
	ЗарегистрироватьТермин(Параметры, "Перечисление", "Перечисления", "Enum", "Enums");
	ЗарегистрироватьТермин(Параметры, "ПланВидовРасчета", "ПланыВидовРасчета", "ChartOfCalculationTypes", "ChartsOfCalculationTypes", 17);
	ЗарегистрироватьТермин(Параметры, "ПланВидовХарактеристик", "ПланыВидовХарактеристик", "ChartOfCharacteristicTypes", "ChartsOfCharacteristicTypes", 3);
	ЗарегистрироватьТермин(Параметры, "ПланОбмена", "ПланыОбмена", "ExchangePlan", "ExchangePlans", 23);
	ЗарегистрироватьТермин(Параметры, "ПланСчетов", "ПланыСчетов", "ChartOfAccounts", "ChartsOfAccounts", 15);
	ЗарегистрироватьТермин(Параметры, "ПодпискаНаСобытие", "ПодпискиНаСобытия", "EventSubscription", "EventSubscriptions", -1);
	ЗарегистрироватьТермин(Параметры, "Подсистема", "Подсистемы", "Subsystem", "Subsystems");
	ЗарегистрироватьТермин(Параметры, "Последовательность", "Последовательности", "Sequence", "Sequences", -1);
	ЗарегистрироватьТермин(Параметры, "РегистрБухгалтерии", "РегистрыБухгалтерии", "AccountingRegister", "AccountingRegisters", 34);
	ЗарегистрироватьТермин(Параметры, "РегистрНакопления", "РегистрыНакопления", "AccumulationRegister", "AccumulationRegisters", 28);
	ЗарегистрироватьТермин(Параметры, "РегистрРасчета", "РегистрыРасчета", "CalculationRegister", "CalculationRegisters", 38);
	ЗарегистрироватьТермин(Параметры, "РегистрСведений", "РегистрыСведений", "InformationRegister", "InformationRegisters", 26);
	ЗарегистрироватьТермин(Параметры, "РегламентноеЗадание", "РегламентныеЗадания", "ScheduledJob", "ScheduledJobs");
	ЗарегистрироватьТермин(Параметры, "Роль", "Роли", "Role", "Roles", -1);
	ЗарегистрироватьТермин(Параметры, "Справочник", "Справочники", "Catalog", "Catalogs");
	ЗарегистрироватьТермин(Параметры, "Стиль", "Стили", "Style", "", -1);
	ЗарегистрироватьТермин(Параметры, "ФункциональнаяОпция", "ФункциональныеОпции", "FunctionalOption", "FunctionalOptions", БиблиотекаКартинок.УстановитьФлажки);
	ЗарегистрироватьТермин(Параметры, "ХранилищеНастроек", "ХранилищаНастроек", "SettingsStorage", "SettingsStorages");
	ЗарегистрироватьТермин(Параметры, "ЭлементСтиля", "ЭлементыСтиля", "StyleItem", "StyleItems", -1);
	ЗарегистрироватьТермин(Параметры, "Язык", "Языки", "Language", "Languages", -1);
	
	// Типы вложенных объектов метаданных.
	ЗарегистрироватьТермин(Параметры, "Модуль", "", "Module", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульМенеджера", "", "ManagerModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульОбъекта", "", "ObjectModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульКоманды", "", "CommandModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульНабораЗаписей", "", "RecordSetModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульМенеджераЗначения", "", "ValueManagerModule", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "МодульВнешнегоСоединения", "", "ExternalConnectionModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульУправляемогоПриложения", "", "ManagedApplicationModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульОбычногоПриложения", "", "OrdinaryApplicationModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульСеанса", "", "SessionModule", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "Справка", "", "Help", "");
	ЗарегистрироватьТермин(Параметры, "Форма", "Формы", "Form", "Forms");
	ЗарегистрироватьТермин(Параметры, "КартаМаршрута", "", "Flowchart", "", -1);
	ЗарегистрироватьТермин(Параметры, "Картинка", "Картинки", "Picture", "Pictures");
	ЗарегистрироватьТермин(Параметры, "КомандныйИнтерфейс", "", "CommandInterface", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "Макет", "Макеты", "Template", "Templates", -1);
	ЗарегистрироватьТермин(Параметры, "Команда", "Команды", "Command", "Commands", -1);
	ЗарегистрироватьТермин(Параметры, "Агрегаты", "", "Aggregates", "", -1);
	ЗарегистрироватьТермин(Параметры, "Перерасчет", "Перерасчеты", "Recalculation", "Recalculations", -1);
	ЗарегистрироватьТермин(Параметры, "Предопределенные", "", "Predefined", "", -1);
	ЗарегистрироватьТермин(Параметры, "Состав", "", "Content", "", -1);
	ЗарегистрироватьТермин(Параметры, "Права", "", "Rights", "", -1);
	ЗарегистрироватьТермин(Параметры, "Расписание", "", "Schedule", "", -1);
	
	// Типы элементов форм.
	ЗарегистрироватьТермин(Параметры, "ГруппаКнопок", "", "ButtonGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "ГруппаКолонок", "", "ColumnGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "КоманднаяПанель", "", "CommandBar", "", -1);
	ЗарегистрироватьТермин(Параметры, "КонтекстноеМеню", "", "ContextMenu", "", -1);
	ЗарегистрироватьТермин(Параметры, "ОбычнаяГруппа", "", "UsualGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "Подменю", "", "Popup", "", -1);
	ЗарегистрироватьТермин(Параметры, "Страница", "", "Page", "", -1);
	ЗарегистрироватьТермин(Параметры, "Страницы", "", "Pages", "", -1);
	
КонецПроцедуры

Процедура ЗарегистрироватьТермин(Параметры, РусскийВЕдинственном, РусскийВоМножественном, АнглийскийВЕдинственном, АнглийскийВоМножественном, НомерКартинки = 0)
	Если РусскийВоМножественном = "" Тогда
		РусскийВоМножественном = РусскийВЕдинственном;
	КонецЕсли;
	Если АнглийскийВоМножественном = "" Тогда
		АнглийскийВоМножественном = АнглийскийВЕдинственном;
	КонецЕсли;
	Параметры.РусскоАнглийскийВЕдинственном.Вставить(НРег(РусскийВЕдинственном), АнглийскийВЕдинственном);
	Параметры.РусскоАнглийскийВоМножественном.Вставить(НРег(РусскийВоМножественном), АнглийскийВоМножественном);
	Параметры.РусскийИзЕдинственногоВоМножественный.Вставить(НРег(РусскийВЕдинственном), РусскийВоМножественном);
	Параметры.РусскийИзМножественногоВЕдинственный.Вставить(НРег(РусскийВоМножественном), РусскийВЕдинственном);
	Если НомерКартинки = 0 Тогда
		НомерКартинки = БиблиотекаКартинок[РусскийВЕдинственном];
	КонецЕсли;
	Параметры.НомераКартинок.Вставить(НРег(РусскийВоМножественном), НомерКартинки);
КонецПроцедуры

// Работа с файлами модулей.

Функция ПрочитатьТекстМодуля(ПолноеИмяМодуля)
	Если Не ФайлСуществует(ПолноеИмяМодуля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяМодуля);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат ТекстМодуля;
КонецФункции

Процедура ЗаписатьТекстМодуля(ПолноеИмяМодуля, ТекстМодуля)
	Файл = Новый Файл(ПолноеИмяМодуля);
	СоздатьКаталог(Файл.Путь);
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяМодуля, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстМодуля);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

// Работа с DOM и XPath.

Функция ПрочитатьДокументDOM(ПутьКФайлу)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

Процедура ЗаписатьДокументDOM(ДокументDOM, ИмяФайла)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ПСТаб = Символы.ПС + Символы.Таб;

ЗависимостиПравДоступа = Новый ТаблицаЗначений;
ЗависимостиПравДоступа.Колонки.Добавить("ПодчиненнаяТаблица", Новый ОписаниеТипов("Строка"));
ЗависимостиПравДоступа.Колонки.Добавить("ВедущаяТаблица",     Новый ОписаниеТипов("Строка"));

ИмяМодуля = "ИнтеграцияСтандартныхПодсистем";
Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда
	ИмяМодуля = "ИнтеграцияПодсистемБСП";
КонецЕсли;
МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
МодульИнтеграцияПодсистемБСП.ПриЗаполненииЗависимостейПравДоступа(ЗависимостиПравДоступа);
УправлениеДоступомПереопределяемый.ПриЗаполненииЗависимостейПравДоступа(ЗависимостиПравДоступа);

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли