///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогФайловойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогФайловойБазы;
	
	Контекст = Новый Структура("ДиалогВыбора", ДиалогВыбора);
	
	Оповещение = Новый ОписаниеОповещения("КаталогФайловойБазыНачалоВыбораЗавершение", ЭтотОбъект, Контекст);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловойБазыНачалоВыбораЗавершение(ВыбранныеФайлы, Контекст) Экспорт
	
	ДиалогВыбора = Контекст.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогФайловойБазы = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	Элементы.ГруппаАутентификация.Доступность = (ТипАутентификации = 0);
КонецПроцедуры

&НаКлиенте
Процедура ТипБазыПриИзменении(Элемент)
	
	Если ТипБазы = 0 Тогда
		Элементы.ГруппаТипБазы.ТекущаяСтраница = Элементы.ГруппаФайловая;
	Иначе
		Элементы.ГруппаТипБазы.ТекущаяСтраница = Элементы.ГруппаСерверная;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПодключениеПослеПроверкиCOMСоединителя", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь, Оповещение);
	Иначе 
		ПроверитьПодключениеПослеПроверкиCOMСоединителя(Истина, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеПослеПроверкиCOMСоединителя(Зарегистрировано, Контекст) Экспорт
	
	СтруктураНастроек = ПараметрыПодключенияCOM();
	
	ТекстСообщения = ОшибкиПодключенияCOMНаСервере(СтруктураНастроек);
	Если ПустаяСтрока(ТекстСообщения) Тогда
		// Нет ошибок, сообщим об успехе.
		ТекстСообщения = НСтр("ru = 'Проверка подключения успешно завершена.'");
	КонецЕсли;
	
	ОчиститьСообщения();
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ПеренестиПользователей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПользователиДляПереноса(Знач Источник, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из Источник.ПолучитьЭлементы() Цикл
		Если Строка.Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Текущая строка
		Группа = Результат[Строка.ГруппаПользователей];
		Если Группа = Неопределено Тогда
			Группа = Новый Соответствие;
			Результат[Строка.ГруппаПользователей] = Группа;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Пользователь) Тогда
			Группа[Строка.Пользователь] = Истина;
		КонецЕсли;
		
		// Подчиненные строки
		ПользователиДляПереноса(Строка, Результат); 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ИзменениеПометкиПользователя(Знач КоллекцияСтрок, Знач ИсходныеДанные)
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка <> ИсходныеДанные И Строка.Пользователь = ИсходныеДанные.Пользователь Тогда
			Строка.Пометка = ИсходныеДанные.Пометка;
			ПроставитьПометкиВниз(Строка);
			ПроставитьПометкиВверх(Строка);
		КонецЕсли;
		
		ИзменениеПометкиПользователя(Строка.ПолучитьЭлементы(), ИсходныеДанные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
		Иначе
			РодительСтроки.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПодключенияCOM()
	
	Результат = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
	
	Результат.ВариантРаботыИнформационнойБазы = ТипБазы;
	Результат.КаталогИнформационнойБазы       = КаталогФайловойБазы;
	
	Результат.ИмяСервера1СПредприятия                     = СерверБазы;
	Результат.ИмяИнформационнойБазыНаСервере1СПредприятия = ИмяБазы;
	Результат.АутентификацияОперационнойСистемы           = ?(ТипАутентификации = 1, Истина, Ложь);
	
	Результат.ИмяПользователя    = Пользователь;
	Результат.ПарольПользователя = Пароль;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ОшибкиПодключенияCOMНаСервере(Знач СтруктураНастроек)
	
	Результат = ОбменДаннымиСервер.ВнешнееСоединениеСБазой(СтруктураНастроек);
	Если Результат.Соединение = Неопределено Тогда
		Возврат Результат.КраткоеОписаниеОшибки;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Начало выполнения переноса после успешной проверки параметров безопасности.
&НаКлиенте
Процедура ПеренестиПользователей()
	
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПеренестиПользователейПослеПроверкиCOMСоединителя", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь, Оповещение);
	Иначе 
		ПеренестиПользователейПослеПроверкиCOMСоединителя(Истина, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПользователейПослеПроверкиCOMСоединителя(Зарегистрировано, Контекст) Экспорт
	
	Если Зарегистрировано Тогда 
		
		Результат = ЗапуститьВыгрузкуДанныхНаСервере(УникальныйИдентификатор, ПараметрыПодключенияCOM());
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресРезультата = Результат.АдресРезультата;
		
		Если Результат.Статус = "Выполняется" Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПереносСведенийОПользователяхЗавершение", ЭтотОбъект);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания       = Истина;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
			
		ИначеЕсли Результат.Статус = "Выполнено" Тогда
			СообщитьОЗавершенииПереноса();
		Иначе
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить перенос сведений о пользователях:'") + " " + Результат.КраткоеПредставлениеОшибки; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗавершенииПереноса()
	
	// Все сообщения фонового обработчика.
	ВывестиСообщенияФоновогоЗадания(ИдентификаторЗадания);
	
	// Итоговый результат
	АдресХранилища = АдресРезультата;
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		
		ТекстСообщения = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиСообщенияФоновогоЗадания(Знач Идентификатор)
	
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияФоновогоЗадания = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из СообщенияФоновогоЗадания Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КоррекцияУровняСтрок(Знач КоллекцияСтрокДерева, Знач ЗначениеРодителя)
	
	Позиция = КоллекцияСтрокДерева.Количество() - 1;
	Пока Позиция >= 0 Цикл
		СтрокаДерева = КоллекцияСтрокДерева[Позиция];
		Позиция = Позиция - 1;
		
		ДочерниеСтроки = СтрокаДерева.Строки;
		ТекущаяГруппа  = СтрокаДерева.ГруппаПользователей;
		
		КоррекцияУровняСтрок(ДочерниеСтроки, ТекущаяГруппа);
		
		ЭтоСтрокаГруппы = СтрокаДерева.Пользователь = NULL;
		Если ТекущаяГруппа = ЗначениеРодителя И ЭтоСтрокаГруппы Тогда
			Для Каждого Строка Из ДочерниеСтроки Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияСтрокДерева.Добавить(), Строка);
			КонецЦикла;
			КоллекцияСтрокДерева.Удалить(СтрокаДерева);
			
		Иначе
			Если ЭтоСтрокаГруппы Тогда
				СтрокаДерева.ИндексПиктограммы = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереносСведенийОПользователяхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус <> "Выполнено" Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить перенос сведений о пользователях:'") + " " + Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	СообщитьОЗавершенииПереноса();
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыгрузкуДанныхНаСервере(Знач ИдентификаторФормы, Знач ПараметрыПодключения)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Перенос сведений о пользователях в другую программу'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки._ДемоПереносСведенийОПользователяхВДругуюПрограмму.ВыполнитьПереносСведенийОПользователях", 
		ПараметрыПроцедуры, 
		ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
