///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ПапкиТЖДляУдаления;

&НаКлиенте
Перем ПроисходитЗакрытиеФормы;

&НаКлиенте
Перем ПроисходитОчисткаФайловТЖ;

&НаКлиенте
Перем ДатаНачалаУдаленияФайловТЖ;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик при создании на сервере.
// 1. Инициализируются возможные типы данных конфигурации для представления параметров.
// 2. Формируется путь к имени формы.
// 3. Автоматическое создание запроса в табличной части.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяЗапросаПоУмолчанию = НСтр("ru = 'Новый запрос'");
	
	ОбработкаОбъект                            = ОбъектОбработки();
	Объект.ДоступныеТипыДанных                 = ОбработкаОбъект.Метаданные().Реквизиты.ДоступныеТипыДанных.Тип;
	Объект.ПутьКФормам                         = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма";
	Объект.ЧередованиеЦветовВРезультатеЗапроса = Истина;
	
	Элемент                      = Объект.Запросы.Добавить();
	ИдентификаторТекущегоЗапроса = Новый УникальныйИдентификатор;
	Элемент.Идентификатор        = ИдентификаторТекущегоЗапроса;
	Элемент.Имя                  = ИмяЗапросаПоУмолчанию;
	
	СписокТипов                  = ОбъектОбработки().СформироватьСписокТипов();
	ОбъектОбработки().ФильтрацияСпискаТипов(СписокТипов, "");
	
	ЗаголовокФормы = НСтр("ru = 'Консоль запросов (%ИмяЗапросаПоУмолчанию%)'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%ИмяЗапросаПоУмолчанию%", ИмяЗапросаПоУмолчанию);
	ЭтотОбъект.Заголовок = ЗаголовокФормы;
	
	Объект.ТипОбхода = "Авто";
	
	ВключитьРежимВыбора();
	
	ВыводитьРезультатыЗапроса = 1000;
	
	РезультатВключения = Новый Структура("Результат, Причина", Ложь, "");
	ПараметрыТехнологическогоЖурнала = Новый Структура("КаталогСЛогФайлами, ИдентификаторПроцессаОС");
	
	ОбъектОбработки().ПолучитьПризнакВключенияЖурналаДляТекущегоСеанса(ПараметрыТехнологическогоЖурнала, РезультатВключения);
	Если РезультатВключения.Результат Или АнализЗапросаПроведен Тогда
		ИдентификаторПроцессаОС = ПараметрыТехнологическогоЖурнала.ИдентификаторПроцессаОС;
		КаталогСЛогФайлами = ПараметрыТехнологическогоЖурнала.КаталогСЛогФайлами;
		
		ПоказыватьПланВыполненияЗапроса = Истина;
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Ложь;
		Элементы.ДекорацияВключенияПланаЗапроса.Видимость = Истина;
		Элементы.ПоказатьПланВыполненияЗапросаПропуск.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если МобильныйКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Работа консоли запросов в мобильном клиенте не поддерживается.'"));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	ПроисходитЗакрытиеФормы = Ложь;
	ПроисходитОчисткаФайловТЖ = Ложь;
	
	Если ПоказыватьПланВыполненияЗапроса Тогда
		ПодключитьОбработчикОжидания("ОпределитьВозможностьОткрытияТехнологическогоЖурнала", 3);
	КонецЕсли;
	
	Если ПоказыватьПланВыполненияЗапроса Тогда
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПроисходитОчисткаФайловТЖ Тогда
		ПроисходитЗакрытиеФормы = Истина;
		ТекстСообщения = НСтр("ru = 'Очистка файлов может продолжаться до 2 минут'");
		СообщитьПользователю(ТекстСообщения, "Объект");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			Текст = НСтр("ru = 'Данные изменены. Сохранить изменения?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	ИначеЕсли НЕ ЗавершениеРаботы Тогда
		Оповестить("ОтключитьПризнакПолученияПланаЗапросаВДругихФормах",, ЭтотОбъект);
		Если ПоказыватьПланВыполненияЗапроса > 0 Тогда
			Отказ = Истина;
			ПроисходитЗакрытиеФормы = Истина;
			ПоказыватьПланВыполненияЗапроса = Ложь;
			ВыключитьПланВыполненияЗапросаКлиент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьФайлЗапроса(Объект.ИмяФайла);
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередатьПараметрыНастроек" Тогда
		ВыгрузитьНастройки(Параметр);
	ИначеЕсли ИмяСобытия = "ПередатьПараметрыНастроекАвтоСохранения" Тогда
		НастройкаАвтосохранения();
	ИначеЕсли ИмяСобытия = "ВыгрузитьЗапросыВРеквизиты" Тогда
		ВыгрузитьЗапросыВРеквизиты(Параметр);
	ИначеЕсли ИмяСобытия = "ОбновитьФормуКлиент" Тогда
		ОбновитьФормуКлиент();
	ИначеЕсли ИмяСобытия = "ОчиститьМеткуЗапроса" Тогда
		МеткаЗапроса = "";
	ИначеЕсли ИмяСобытия = "ПолучениеГраницы" Тогда
		ВыгрузитьЗапросыВРеквизиты(Параметр); 
	ИначеЕсли ИмяСобытия = "ОтключитьПризнакПолученияПланаЗапросаВДругихФормах"
		 И Источник <> ЭтотОбъект Тогда
		ПоказыватьПланВыполненияЗапроса = Ложь;
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	ИначеЕсли ИмяСобытия = "ВключитьПланВыполненияЗапроса"
		 И Источник <> ЭтотОбъект
		 И НЕ ПоказыватьПланВыполненияЗапроса Тогда
		ПоказыватьПланВыполненияЗапроса = Истина;
		ВключитьПланВыполненияЗапросаКлиент();
	ИначеЕсли ИмяСобытия = "ОшибкаПолученияПланаВыполненияЗапроса"
		 И Параметр.Свойство("МеткаЗапроса") И Параметр.МеткаЗапроса = МеткаЗапроса Тогда
		АнализЗапросаПроведен = Ложь;
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказатьПланВыполненияЗапросаНажатие(Элемент)
	
	АдресХранилищаПланаЗапроса = "";
	
	Если ЗначениеЗаполнено(ИдентификаторТекущегоЗапроса) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор",ИдентификаторТекущегоЗапроса);
		СтрокаЗапроса = Объект.Запросы.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокаЗапроса.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(СтрокаЗапроса[0].АдресХранилищаПланаЗапроса) Тогда
				
				АдресХранилищаПланаЗапроса = СтрокаЗапроса[0].АдресХранилищаПланаЗапроса;
				СтруктураПланаЗапроса = ПолучитьИзВременногоХранилища(АдресХранилищаПланаЗапроса);
				
				Если СтруктураПланаЗапроса <> Неопределено Тогда
					ПланЗапросаАктуален = СтруктураПланаЗапроса.ПланЗапросаАктуален;
					ОткрытьФормуПланаВыполненияЗапроса();
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МеткаЗапроса) Тогда 
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для получения плана выполнения запроса сначала выполните запрос.'"));
		Возврат;
	КонецЕсли;
	
	Если ТехнологическийЖурналДоступен() Тогда
		ОткрытьФормуПланаВыполненияЗапроса();
	Иначе
		ПодключитьОбработчикОжидания("ОпределитьВозможностьОткрытияТехнологическогоЖурнала", 5);
		Элементы.ПоказатьПланВыполненияЗапроса.Заголовок = НСтр("ru = 'Подготовка...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаголовокЭлемента = НСтр("ru = 'Выбрать тип'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ТипВФормеЗавершениеВыбора", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокЭлемента);

КонецПроцедуры

&НаКлиенте
Процедура ТипВФормеЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
		ТекущийТип = ВыбранныйЭлемент;
		
		Если ТекущийТип.Значение = "ТаблицаЗначений"
			Или ТекущийТип.Значение = "МоментВремени"
			Или ТекущийТип.Значение = "Граница" Тогда
		
			ТекущийПараметр.Тип            = ТекущийТип.Значение;
			ТекущийПараметр.ТипВФорме      = ТекущийТип.Представление;
			ТекущийПараметр.Значение       = "";
			ТекущийПараметр.ЗначениеВФорме = ТекущийТип.Представление;
		Иначе
			ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, ТекущийТип);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не Копирование Тогда 
		ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
		Если ИндексТекущегоЗапроса = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Выберите запрос.'");
			СообщитьПользователю(ТекстСообщения, "Объект");
			Возврат;
		КонецЕсли;
		
		ЭлементПараметр = Объект.Параметры.Добавить();
		ЭлементПараметр.ИдентификаторЗапроса = ИдентификаторТекущегоЗапроса;
		ЭлементПараметр.Имя = ПолучитьИмяПараметра();
		ЭлементПараметр.Идентификатор = Новый УникальныйИдентификатор;
		
		ОбновитьФормуКлиент();
		
		ПараметрыЭлементов = Элементы.Параметры;
		ПараметрыЭлементов.ТекущаяСтрока = ЭлементПараметр.ПолучитьИдентификатор();
		ТипВФормеНачалоВыбора(ПараметрыЭлементов, Неопределено, Ложь);
	Иначе
		ЭлементКопирования = Элемент.ТекущиеДанные;
		
		ЭлементПараметр = Объект.Параметры.Добавить();
		ЭлементПараметр.Идентификатор = Новый УникальныйИдентификатор;
		ЭлементПараметр.ИдентификаторЗапроса = ИдентификаторТекущегоЗапроса;
		ЭлементПараметр.Имя = ЭлементКопирования.Имя;
		ЭлементПараметр.Тип = ЭлементКопирования.Тип;
		ЭлементПараметр.Значение = ЭлементКопирования.Значение;
		ЭлементПараметр.ТипВФорме = ЭлементКопирования.ТипВФорме;
		ЭлементПараметр.ЗначениеВФорме = ЭлементКопирования.ЗначениеВФорме;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	
	ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
	Если ИндексТекущегоЗапроса = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите запрос.'");
		СообщитьПользователю(ТекстСообщения, "Объект");
		Возврат;
	КонецЕсли;
	
	СтрокиЗапроса = ТекстЗапроса.ПолучитьТекст();
	ТекущийЗапрос = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	
	// Если имя запроса по умолчанию, тогда формируется имя запроса.
	Если ТекущийЗапрос.Имя = ИмяЗапросаПоУмолчанию Тогда 
		ТекущийЗапрос.Имя = ПолучитьИмяЗапроса(СтрокиЗапроса);
	КонецЕсли;
	
	МеткаЗапроса = "";
	Если ЗначениеЗаполнено(ТекущийЗапрос.АдресХранилищаПланаЗапроса) Тогда
		СтруктураПланаЗапроса = ПолучитьИзВременногоХранилища(ТекущийЗапрос.АдресХранилищаПланаЗапроса);
		Если СтруктураПланаЗапроса <> Неопределено Тогда
			ПланЗапросаАктуален = Ложь;
			СтруктураПланаЗапроса.Вставить("ПланЗапросаАктуален",ПланЗапросаАктуален);
			ТекущийЗапрос.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(СтруктураПланаЗапроса,ТекущийЗапрос.АдресХранилищаПланаЗапроса);
		Иначе
			ТекущийЗапрос.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ТекущийЗапрос.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	
	ТекущийЗапрос.Текст = СтрокиЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзXML(Команда)
	Найденные = Объект.Запросы.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТекущегоЗапроса));
	Если Найденные.Количество() = 0 Тогда
		СообщитьПользователю(НСтр("ru = 'Выберите запрос.'"), "Объект");
		Возврат;
	КонецЕсли;
	ТекущийЗапрос = Найденные[0];
	Контекст = Новый Структура("ИзТекстаЗапроса", Ложь);
	Если Лев(ТекущийЗапрос.Текст, 10) = "<Structure" Тогда
		Контекст.ИзТекстаЗапроса = Истина;
		ЗаполнитьПараметрыИзXMLСервер(ТекущийЗапрос.Текст, Контекст);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьПараметрыИзXMLЗавершение", ЭтотОбъект, Контекст);
		Подсказка = ПодставитьПараметрыВСтроку(НСтр("ru = 'Вставьте XML с информацией о запросе, полученный методом %1'"), 
			"ОбщегоНазначения.ЗначениеВСтрокуXML()");
		ПоказатьВводСтроки(Обработчик, , Подсказка, , Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВФормеПриИзменении(Элемент)
	
	ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
	
	Значение		= ТекущийПараметр.ЗначениеВФорме;
	ТекущийТип		= ТекущийПараметр.Тип;
	Если ТекущийТип <> "ТаблицаЗначений" И ТекущийТип <> "МоментВремени" И ТекущийТип <> "Граница" Тогда
		ЗначВнутр					= ЗначениеВСтрокуСервер(Значение);
		ТекущийПараметр.Значение	= ЗначВнутр;
		
		Модифицированность 			= Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
	ТипПараметра	= Элементы.Параметры.ТекущиеДанные.Тип;
	
	ИдентификаторТекущегоПараметра = ТекущийПараметр.Идентификатор;
	
	Если ТипПараметра = "ТаблицаЗначений" Тогда
		Путь = Объект.ПутьКФормам + "." + "ТаблицаЗначений";
	ИначеЕсли ТипПараметра = "МоментВремени" Тогда
		Путь = Объект.ПутьКФормам + "." + "МоментВремени";
	ИначеЕсли ТипПараметра = "Граница" Тогда
		Путь = Объект.ПутьКФормам + "." + "Граница";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередаваемыеЗапросы = ПоместитьЗапросыВСтруктуру();
	ОткрытьФорму(Путь, ПередаваемыеЗапросы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПриИзменении(Элемент)
	
	// СЗахватывается" текущий запрос из списка запросов.
	ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
	Если ИндексТекущегоЗапроса = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите запрос.'");
		СообщитьПользователю(ТекстСообщения, "Объект");
		Возврат;
	КонецЕсли;
	
	// Выбор текущего запроса.
	ТекущийЗапрос = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	ТекущийЗапрос.АдресРезультата = ПоместитьВоВременноеХранилище(РезультатЗапроса, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	РасшифровкаЯчейки = Область.Расшифровка;
	
	ТипРасшифровки = ТипЗнч(РасшифровкаЯчейки);
	
	Если Объект.ДоступныеТипыДанных.СодержитТип(ТипРасшифровки) И РасшифровкаЯчейки <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, РасшифровкаЯчейки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// СЗахватывается" текущий запрос из списка запросов.
	ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
	Если ИндексТекущегоЗапроса = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите запрос.'");
		СообщитьПользователю(ТекстСообщения, "Объект");
		Возврат;
	КонецЕсли;
	
	// Выбор текущего запроса.
	ТекущийЗапрос = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	ТекущийЗапрос.АдресРезультата = ПоместитьВоВременноеХранилище(РезультатЗапроса, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьПланВыполненияЗапросаПриИзменении(Элемент)
	
	Если ПоказыватьПланВыполненияЗапроса Тогда
		ВключитьПланВыполненияЗапросаКлиент()
	Иначе
		ВыключитьПланВыполненияЗапросаКлиент();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗадатьУникальныйИдентификатор(Команда)
	
	НомерСтроки = Элементы.Параметры.ТекущаяСтрока;
	Оповещение = Новый ОписаниеОповещения("ПослеВводаУникальногоИдентификатора", ЭтотОбъект, НомерСтроки);
	УникальныйИдентификаторСтрокой = "";
	ПоказатьВводСтроки(Оповещение, УникальныйИдентификаторСтрокой, НСтр("ru = 'Введите уникальный идентификатор'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Закомментировать(Команда)
	
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	
	Элемент = Элементы.ТекстЗапроса;
	Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
	
	ТекстДоИзменения = ТекстЗапроса.ПолучитьТекст();
	КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
	ВыделенныйФрагмент = "";
	ДлинаПоследнейСтроки = 0;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если НомерСтроки = ПерваяСтрока Тогда 
				ВыделенныйФрагмент = ВыделенныйФрагмент + "//" + Фрагмент;
			Иначе
				ВыделенныйФрагмент = ВыделенныйФрагмент + Символы.ПС + "//" +Фрагмент;
			КонецЕсли;
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделенныйФрагмент =  ВыделенныйФрагмент + Символы.ПС;
	КонецЕсли;
	
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделенныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Раскомментировать(Команда)
	
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	Элемент = Элементы.ТекстЗапроса;
	Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
	
	ТекстДоИзменения = ТекстЗапроса.ПолучитьТекст();
	КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
	ВыделенныйФрагмент = "";
	ДлинаПоследнейСтроки = ПоследняяКолонка;
	
	Если ПоследняяКолонка = 1 Тогда
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;

	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если СтрНачинаетсяС(СокрЛ(Фрагмент), "//") Тогда
				Позиция = СтрНайти(Фрагмент, "//");
				Фрагмент = Лев(Фрагмент, Позиция - 1) + Сред(Фрагмент, Позиция + 2);
			КонецЕсли;
			Если НомерСтроки = ПерваяСтрока Тогда 
				ВыделенныйФрагмент = ВыделенныйФрагмент + Фрагмент;
			Иначе
				ВыделенныйФрагмент = ВыделенныйФрагмент + Символы.ПС + Фрагмент;
			КонецЕсли;
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделенныйФрагмент =  ВыделенныйФрагмент + Символы.ПС;
	КонецЕсли;
	
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделенныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыборРезультатаЗапроса(Команда)
	
	Для Каждого СтрокаЗапроса Из Объект.Запросы Цикл
		Если СтрокаЗапроса.Идентификатор=ИдентификаторТекущегоЗапроса И Не ПустаяСтрока(СтрокаЗапроса.АдресРезультатовЗапроса) Тогда
			ОповеститьОВыборе(Новый Структура("ДействиеВыбора, ДанныеВыбора",
				Параметры.ДействиеВыбора, СтрокаЗапроса.АдресРезультатовЗапроса));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТекстПредупреждения = НСтр("ru = 'Введите текст запроса и выполните его.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗапроса(Команда)
	
	ПередаваемыеЗапросы = ПоместитьЗапросыВСтруктуру();
	Путь = Объект.ПутьКФормам + "." + "ВыборЗапроса";
	ОткрытьФорму(Путь, ПередаваемыеЗапросы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	#Если МобильныйКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Работа консоли запросов в мобильном клиенте не поддерживается.'"));
		Возврат;
	#Иначе
		ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
		Если ИндексТекущегоЗапроса = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Выберите запрос.'");
			СообщитьПользователю(ТекстСообщения, "Объект");
			Возврат;
		КонецЕсли;
		
		ТекстЗапросаВФорме = СокрЛП(ТекстЗапроса.ПолучитьТекст());
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИндексТекущегоЗапроса", ИндексТекущегоЗапроса);
		СтруктураПараметров.Вставить("ИсходныйТекстЗапроса", ТекстЗапросаВФорме);
		
		КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапросаВФорме);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект, СтруктураПараметров);
		КонструкторЗапроса.Показать(Оповещение);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьПараметрыИзТекстаЗапроса(Команда)
	
	ЗаполнитьПараметрыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекАвтоСохранения(Команда)
	
	ПередаваемыеНастройки = ПоместитьНастройкиВСтруктуру();
	Путь = Объект.ПутьКФормам + "." + "Настройки";
	
	ОткрытьФорму(Путь, ПередаваемыеНастройки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	ЗапуститьВыполнениеЗапроса(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросСВременнымиТаблицами(Команда)
	
	ЗапуститьВыполнениеЗапроса(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	
	СохранитьФайлЗапроса(Объект.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВДругойФайл(Команда)
	
	СохранитьФайлЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗапросыИзФайла(Команда)
	
	ОбработкаЧтенияФайла(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстЗапросаДляКонфигуратора(Команда)
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ТекстЗапроса", ТекстЗапроса.ПолучитьТекст());
	
	Путь = Объект.ПутьКФормам + "." + "ТекстЗапросаДляКонфигуратора";
	ОткрытьФорму(Путь, ПараметрыПередачи, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВОтдельномОкнеТабличныйДокумент(Команда)
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("РезультатЗапроса", РезультатЗапроса);
	
	Путь = Объект.ПутьКФормам + "." + "РезультатЗапроса";
	ОткрытьФорму(Путь, ПараметрыПередачи, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапрос(Команда)
	
	ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
	Если ИндексТекущегоЗапроса = Неопределено Тогда
		СообщитьПользователю(НСтр("ru = 'Выберите запрос.'"), "Объект");
		Возврат;
	КонецЕсли;
	
	ЗапросОснование = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	
	ИдентификаторНовогоЗапроса 	= Новый УникальныйИдентификатор;
	ИмяНовогоЗапроса			= СформироватьИмяКопииЗапроса(ЗапросОснование.Имя);
	
	НовыйЗапрос 				= Объект.Запросы.Добавить();
	НовыйЗапрос.Идентификатор 	= ИдентификаторНовогоЗапроса;
	НовыйЗапрос.Имя				= ИмяНовогоЗапроса;
	НовыйЗапрос.Текст			= ЗапросОснование.Текст;
	НовыйЗапрос.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	
	АнализЗапросаПроведен = Ложь;
	ПланЗапросаАктуален = Ложь;
	
	МеткаЗапроса = "";
	УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	
	// Копирование параметров из запроса основания в новый запрос
	// из запроса, имеющего ИдентификаторТекущегоЗапроса.
	СкопироватьПараметрыИзЗапроса(НовыйЗапрос);
	
	// Изменение значения ИдентификатораТекущегоЗапроса.
	ИдентификаторТекущегоЗапроса = ИдентификаторНовогоЗапроса;
	
	// Обновление формы.
	ОбновитьФормуКлиент();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектИзРезультата(Команда)
	
	РасшифровкаЯчейки = РезультатЗапроса.ТекущаяОбласть.Расшифровка;
	ТипРасшифровки    = ТипЗнч(РасшифровкаЯчейки);
	Если Объект.ДоступныеТипыДанных.СодержитТип(ТипРасшифровки) И РасшифровкаЯчейки <> Неопределено Тогда
		ПоказатьЗначение(, РасшифровкаЯчейки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокИзРезультата(Команда)
	
	РасшифровкаЯчейки = РезультатЗапроса.ТекущаяОбласть.Расшифровка;
	ИмяФормыСписка    = СформироватьИмяФормыСпискаДляСсылки(РасшифровкаЯчейки);
	Если Не ПустаяСтрока(ИмяФормыСписка) Тогда
		ОткрытьФорму(ИмяФормыСписка, , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЯчейки(Команда)
	
	ОбластьРезультата = РезультатЗапроса.ТекущаяОбласть;
	
	ПерваяСтрока     = ОбластьРезультата.Верх;
	ПерваяКолонка    = ОбластьРезультата.Лево;
	ПоследняяСтрока  = ОбластьРезультата.Низ;
	ПоследняяКолонка = ОбластьРезультата.Право;
	
	ЭталоннаяОбласть      = РезультатЗапроса.Область(ПерваяСтрока, ПерваяКолонка, ПерваяСтрока, ПерваяКолонка);
	ШрифтЭталоннойОбласти = ЭталоннаяОбласть.Шрифт;
	
	Если ШрифтЭталоннойОбласти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФлагЖирности = Не ШрифтЭталоннойОбласти.Жирный;
	Если ФлагЖирности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для ИндексСтроки = ПерваяСтрока По ПоследняяСтрока Цикл
		Для ИндексКолонки = ПерваяКолонка По ПоследняяКолонка Цикл
			ТекущаяОбластьРезультата = РезультатЗапроса.Область(ИндексСтроки, ИндексКолонки, ИндексСтроки, ИндексКолонки);
			ТекущийШрифт = ТекущаяОбластьРезультата.Шрифт;
			Если ТекущийШрифт <> Неопределено Тогда
				ТекущаяОбластьРезультата.Шрифт = Новый Шрифт(ТекущийШрифт,,, ФлагЖирности);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(ТекстЗапросаВФорме, СтруктураПараметров) Экспорт
	
	Если ТекстЗапросаВФорме <> Неопределено Тогда
		
		ТекущийЗапрос = Объект.Запросы.Получить(СтруктураПараметров.ИндексТекущегоЗапроса - 1);
		
		Если ТекстЗапросаВФорме <> СтруктураПараметров.ИсходныйТекстЗапроса Тогда
			
			МеткаЗапроса = "";
			СтруктураПланаЗапроса = Неопределено;
			
			Если ЗначениеЗаполнено(ТекущийЗапрос.АдресХранилищаПланаЗапроса) Тогда
				СтруктураПланаЗапроса = ПолучитьИзВременногоХранилища(ТекущийЗапрос.АдресХранилищаПланаЗапроса);
			КонецЕсли;
			
			Если СтруктураПланаЗапроса <> Неопределено Тогда
				ПланЗапросаАктуален = Ложь;
				СтруктураПланаЗапроса.Вставить("ПланЗапросаАктуален",ПланЗапросаАктуален);
				ТекущийЗапрос.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(СтруктураПланаЗапроса,ТекущийЗапрос.АдресХранилищаПланаЗапроса);
			Иначе
				ТекущийЗапрос.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
			КонецЕсли;
			
			УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
			
		КонецЕсли;
		
		Если ТекущийЗапрос.Имя = ИмяЗапросаПоУмолчанию Тогда
			ТекущийЗапрос.Имя = ПолучитьИмяЗапроса(ТекстЗапросаВФорме);
		КонецЕсли;
		ТекущийЗапрос.Текст = ТекстЗапросаВФорме;
		Модифицированность = Истина;
		ОбновитьФормуКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

// Передача табличной части "Запросы", "Параметры" в виде структуры.
//
&НаСервере
Функция ПоместитьЗапросыВСтруктуру()
	
	АдресХранилища		= ОбъектОбработки().ПоместитьЗапросыВоВременноеХранилище(Объект, ИдентификаторТекущегоЗапроса, ИдентификаторТекущегоПараметра);
	ПараметрАдрес		= Новый Структура;
	ПараметрАдрес.Вставить("АдресХранилища", АдресХранилища);
	Возврат ПараметрАдрес;
	
КонецФункции

// Получение табличной части "Запросы" в виде структуры.
// Возвращает Идентификатор выбранного запроса, обновляет табличную часть "Запросы".
//
// Параметры:
//   ПараметрыПередачи - Структура - запросы из передаваемого объекта и Идентификатор текущего запроса:
//     * АдресХранилища - Строка
//
&НаСервере
Процедура ВыгрузитьЗапросыВРеквизиты(ПараметрыПередачи)
	
	ОписаниеЗапросов = ПолучитьИзВременногоХранилища(ПараметрыПередачи.АдресХранилища); // см. ОбработкаОбъект.КонсольЗапросов.ПоместитьЗапросыВоВременноеХранилище
	ПолученныеЗапросы 				= ОписаниеЗапросов.Запросы;
	ПолученныеПараметры 			= ОписаниеЗапросов.Параметры;
	Объект.ИмяФайла  				= ОписаниеЗапросов.ИмяФайла;
	ИдентификаторТекущегоЗапроса  	= ОписаниеЗапросов.ИдентификаторТекущегоЗапроса;
	ИдентификаторТекущегоПараметра 	= ОписаниеЗапросов.ИдентификаторТекущегоПараметра;
	Объект.Запросы.Загрузить(ПолученныеЗапросы);
	Объект.Параметры.Загрузить(ПолученныеПараметры);
	
	ВывестиРезультатЗапроса();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатЗапроса()
	
	РезультатЗапроса = Новый ТабличныйДокумент;
	Для каждого СтрЗапросы Из Объект.Запросы Цикл
		
		Если СтрЗапросы.Идентификатор = ИдентификаторТекущегоЗапроса Тогда
			ПолучитьРезультатЗапросаИзХранилища(РезультатЗапроса, СтрЗапросы.АдресРезультата);
			
			КоличествоСтрок = СтрЗапросы.КоличествоСтрок;
			ВремяВыполнения = СтрЗапросы.ВремяВыполнения;
			РезультирующаяСтрока	= НСтр("ru = 'Результат запроса (количество строк = %КолСтрок%, время выполнения = %ВремяВыполнения% с)'");
			РезультирующаяСтрока 	= СтрЗаменить(РезультирующаяСтрока, "%КолСтрок%", Строка(КоличествоСтрок));
			РезультирующаяСтрока 	= СтрЗаменить(РезультирующаяСтрока, "%ВремяВыполнения%", Строка(ВремяВыполнения));
			Элементы.РезультатЗапроса.Заголовок = РезультирующаяСтрока;
			
			Элементы.ГруппаРезультатЗапроса.Заголовок = РезультирующаяСтрока;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Передача настроек автосохранения.
//
&НаСервере
Функция ПоместитьНастройкиВСтруктуру()
	
	АдресХранилища		= ОбъектОбработки().ПоместитьНастройкиВоВременноеХранилище(Объект);
	ПараметрАдрес		= Новый Структура;
	ПараметрАдрес.Вставить("АдресХранилища", АдресХранилища);
	
	Возврат ПараметрАдрес;
	
КонецФункции

// Получение настроек в виде структуры.
//
// Параметры:
//   ПараметрыПередачи - Структура - настройки.
//
&НаСервере
Процедура ВыгрузитьНастройки(ПараметрыПередачи)
	
	Объект.ИспользоватьАвтосохранение 						= ПолучитьИзВременногоХранилища(ПараметрыПередачи.АдресХранилища).ИспользоватьАвтосохранение;
	Объект.ПериодАвтосохранения								= ПолучитьИзВременногоХранилища(ПараметрыПередачи.АдресХранилища).ПериодАвтосохранения;
	Объект.ВыводитьВРезультатахЗапросаЗначенияСсылок		= ПолучитьИзВременногоХранилища(ПараметрыПередачи.АдресХранилища).ВыводитьВРезультатахЗапросаЗначенияСсылок;
	Объект.ТипОбхода										= ПолучитьИзВременногоХранилища(ПараметрыПередачи.АдресХранилища).ТипОбхода;
	Объект.ЧередованиеЦветовВРезультатеЗапроса				= ПолучитьИзВременногоХранилища(ПараметрыПередачи.АдресХранилища).ЧередованиеЦветовВРезультатеЗапроса;
	
КонецПроцедуры

// Обновление формы.
// Обновление отображения параметров, текста запроса и результата.
//
&НаКлиенте
Процедура ОбновитьФормуКлиент()
	
	// Обновление параметров.
	Фильтр = Новый Структура;
	Фильтр.Вставить("ИдентификаторЗапроса", ИдентификаторТекущегоЗапроса);
	ФиксированныйФильтр = Новый ФиксированнаяСтруктура(Фильтр);
	Элементы.Параметры.ОтборСтрок = ФиксированныйФильтр;
	
	Для каждого СтрЗапросы Из Объект.Запросы Цикл
		
		Если СтрЗапросы.Идентификатор = ИдентификаторТекущегоЗапроса Тогда
			
			// Обновление текста запроса.
			ЭтотОбъект.ТекстЗапроса.УстановитьТекст(СтрЗапросы.Текст);
			АнализЗапросаПроведен = АнализЗапросаПроведен(СтрЗапросы.АдресХранилищаПланаЗапроса, ПланЗапросаАктуален);
			УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
			
			// Вывод заголовка формы.
			ЗаголовокФормы = НСтр("ru = 'Консоль запросов (%ИмяЗапроса%)'");
			ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%ИмяЗапроса%", СтрЗапросы.Имя);
			ЭтотОбъект.Заголовок = ЗаголовокФормы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	
	// Вывод заголовка кнопки "Запросы".
	КоличествоЗапросов = Объект.Запросы.Количество();
	ЗаголовокКнопкиВыбораЗапроса = НСтр("ru = 'Запросы'");
	Если КоличествоЗапросов > 1 Тогда
		ЗаголовокКнопкиВыбораЗапроса = ЗаголовокКнопкиВыбораЗапроса + " (" + КоличествоЗапросов + ")";
	КонецЕсли;
	Элементы.ФормаВыбратьЗапрос.Заголовок = ЗаголовокКнопкиВыбораЗапроса;
	
	#Если ВебКлиент Тогда
		ЭтотОбъект.ОбновитьОтображениеДанных();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ИндексТекущегоВопроса()
	
	Результат = Неопределено;
	Для каждого СтрЗапросы Из Объект.Запросы Цикл
		Если СтрЗапросы.Идентификатор = ИдентификаторТекущегоЗапроса Тогда
			Результат = СтрЗапросы.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает имя запроса по имени первой таблицы.
//
// Параметры:
//   ТекстЗапроса - Строка - текст передаваемого запроса.
//
&НаКлиенте
Функция ПолучитьИмяЗапроса(знач ТекстЗапроса)
	
	// Если пустой текст запроса тогда возвращается "Запрос".
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Результат = ИмяЗапросаПоУмолчанию;
		Возврат Результат;
	КонецЕсли;
	
	// Поиск зарезервированного слова "ВЫБРАТЬ".
	Выбрать = "ВЫБРАТЬ"; // @query-part-1
	ДлинаВыбрать = СтрДлина(Выбрать);
	ПозицияВыбрать = СтрНайти(ВРег(ТекстЗапроса), Выбрать);
	Если ПозицияВыбрать = 0 Тогда
		Результат = ИмяЗапросаПоУмолчанию;
		Возврат Результат;
	КонецЕсли;
	
	// Срез строки текста запроса без зарезервированного слова "ВЫБРАТЬ".
	ТекстЗапроса = Сред(ТекстЗапроса, ПозицияВыбрать + ДлинаВыбрать);
	
	// Поиск первой "точки", чтобы определить имя таблицы.
	Точка = ".";
	ДлинаТочка = СтрДлина(Точка);
	ПозицияТочка = СтрНайти(ВРег(ТекстЗапроса), Точка);
	Если ПозицияТочка = 0 Тогда
		Результат = ИмяЗапросаПоУмолчанию;
		Возврат Результат;
	КонецЕсли;
	
	// Возвращается "Запрос:" и имя первой таблицы.
	Результат = СокрЛП(Лев(ТекстЗапроса, ПозицияТочка - ДлинаТочка));
	Если ПустаяСтрока(Результат) Тогда
		Результат = ИмяЗапросаПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Считывает параметры из текста запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//  Удалять - Булево - флаг очистки списка параметров для текущего запроса.
//  ИдентификаторЗапроса - Строка - идентификатор текущего запроса.
//
&НаСервере
Процедура СчитатьПараметрыЗапроса(ТекстЗапроса, Удалять, ИдентификаторЗапроса)
	
	// Считывание параметров из текст запроса в массив структуры.
	РезультатСтруктура = ОбъектОбработки().СчитатьПараметрыЗапроса(ТекстЗапроса, ИдентификаторЗапроса);
	Если ТипЗнч(РезультатСтруктура) = Тип("Строка") Тогда
		СообщитьПользователю(РезультатСтруктура);
		Возврат;
	КонецЕсли;
	
	// Инициализация параметров.
	ПараметрыВФорме = Объект.Параметры;
	
	// Удаление параметров для текущего запроса.
	Если Удалять Тогда
		КоличествоСтрок = ПараметрыВФорме.Количество() - 1;
		Пока КоличествоСтрок >= 0 Цикл
			ТекущийПараметр = ПараметрыВФорме.Получить(КоличествоСтрок);
			Если ТекущийПараметр.ИдентификаторЗапроса = ИдентификаторЗапроса Тогда
				ПараметрыВФорме.Удалить(КоличествоСтрок);
				Модифицированность = Истина;
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок - 1;
		КонецЦикла;
	КонецЕсли;
	
	// Добавление параметров.
	Фильтр = Новый Структура;
	Фильтр.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	МассивПараметров = ПараметрыВФорме.НайтиСтроки(Фильтр);
	
	Для каждого СтрПараметр Из РезультатСтруктура Цикл
		ЕстьПараметр = Ложь;
		Для каждого Стр Из МассивПараметров Цикл
			Если СтрПараметр.Имя = Стр.Имя Тогда
				ЕстьПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьПараметр Или Не Удалять Тогда 
			ДобавитьПараметрВФорму(ПараметрыВФорме, СтрПараметр);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет параметр из структуры в параметр формы.
//
// Параметры:
//  ПараметрыВФорме - ТаблицаЗначений - таблица значений "Параметры" в форме.
//  ПараметрСтруктуры - КлючИЗначение - текущая строка параметра массива структуры.
//
&НаСервере
Процедура ДобавитьПараметрВФорму(ПараметрыВФорме, ПараметрСтруктуры)
	
	Значение 	= ПараметрСтруктуры.Значение;
	Тип			= ОбъектОбработки().ИмяТипаИзЗначения(ЗначениеИзСтрокиВнутр(Значение));
	
	// Основные реквизиты.
	Элемент							= ПараметрыВФорме.Добавить();
	Элемент.Идентификатор			= Новый УникальныйИдентификатор;
	Элемент.ИдентификаторЗапроса 	= ПараметрСтруктуры.ИдентификаторЗапроса;
	Элемент.Имя						= ПараметрСтруктуры.Имя;
	Элемент.Тип						= Тип;
	Элемент.Значение				= Значение;
	
	Значение = ЗначениеИзСтрокиВнутр(Значение);
	
	// Форменные реквизиты.
	Элемент.ТипВФорме 				= Строка(ТипЗнч(Значение));
	Элемент.ЗначениеВФорме 			= Значение;
	
КонецПроцедуры	

// Вызов процедуры сохранения запросов в файл.
//
&НаКлиенте
Процедура НастройкаАвтосохранения()
	
	Если Объект.ИспользоватьАвтосохранение Тогда
		// Вызов процедуры сохранения запросов в файл.
		ПериодАвтосохранения = Объект.ПериодАвтосохранения * 60;
		Если ПериодАвтосохранения > 0 Тогда
			ПодключитьОбработчикОжидания("СохранитьЗапросы", ПериодАвтосохранения);
		КонецЕсли;
	Иначе
		ОтключитьОбработчикОжидания("СохранитьЗапросы");
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохранения запросов для автосохранения.
//
&НаКлиенте
Процедура СохранитьЗапросы()
	
	ИмяФайла = Объект.ИмяФайла;
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		ДвоичныеДанные = СохранитьЗапросыСервер();
		ДвоичныеДанные.Записать(ИмяФайла);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Автосохранение прошло успешно.'"), ИмяФайла);
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохранения запросов(серверная часть).
//
&НаСервере
Функция СохранитьЗапросыСервер()
	
	ДвоичныеДанные = ОбъектОбработки().ЗаписатьЗапросыВФайлXML(Объект);
	Возврат ДвоичныеДанные;
	
КонецФункции

// Запускает выполнение запроса.
//
&НаКлиенте
Процедура ЗапуститьВыполнениеЗапроса(ВыводитьВременныеТаблицы)
	
	// СЗахватывается" текущий запрос из списка запросов.
	ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
	Если ИндексТекущегоЗапроса = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите запрос.'");
		СообщитьПользователю(ТекстСообщения, "Объект");
		Возврат;
	КонецЕсли;
	
	НеотформатированныйТекст = ТекстЗапроса.ПолучитьТекст();
	ОтформатированныйТекст = СтрЗаменить(НеотформатированныйТекст, "|", "");
	
	Если ПустаяСтрока(ОтформатированныйТекст) Тогда
		ТекстПредупреждения = НСтр("ru = 'Введите текст запроса.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса.УстановитьТекст(ОтформатированныйТекст);
	Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1).Текст = ОтформатированныйТекст;
	Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1).АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	АнализЗапросаПроведен = Ложь;
	ПланЗапросаАктуален = Истина;
	УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	
	// Определение текста запроса.
	ВыделенныйТекст = Элементы.ТекстЗапроса.ВыделенныйТекст;
	Если Не ПустаяСтрока(ВыделенныйТекст) Тогда
		Текст = ВыделенныйТекст;
	Иначе
		Текст = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1).Текст;
	КонецЕсли;
	
	ВыводитьИдентификатор = Объект.ВыводитьВРезультатахЗапросаЗначенияСсылок;
	
	// Очистка табличного документа "РезультатЗапроса" в форме.
	РезультатЗапроса = Новый ТабличныйДокумент;
	ТекстСообщения = "";
	
	ОчиститьСообщения();
	
	// Серверная часть для выполнения запроса.
	Попытка
		ВыполнитьЗапросСервер(ИндексТекущегоЗапроса, РезультатЗапроса, ВыводитьВременныеТаблицы, ВыводитьИдентификатор, Текст, ТекстСообщения);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьОшибкуПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда 
		СообщитьПользователю(ТекстСообщения, "Объект");
	КонецЕсли;
	
	Элементы.ГруппаПараметры.Скрыть();
	Элементы.ГруппаРезультатЗапроса.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПользователю(Знач ТекстОшибки)
	
	Позиция = СтрНайти(ТекстОшибки, "{(");
	
	Если Позиция > 0 Тогда
		ТекстИнформацияОМестеОшибки = Сред(ТекстОшибки, Позиция + 2);
		ПозицияОкончание = СтрНайти(ТекстИнформацияОМестеОшибки, ")}");
		
		ТекстСообщения = СокрЛП(Сред(ТекстИнформацияОМестеОшибки, ПозицияОкончание + 3));
		СообщитьПользователю(ТекстСообщения, "Объект");
		
		НомерКолонкиИСтроки = СтрРазделить(Сред(ТекстИнформацияОМестеОшибки, 1, ПозицияОкончание - 1), ",");
		Если НомерКолонкиИСтроки.Количество() = 2 Тогда
			ТипЧисло = Новый ОписаниеТипов("Число");
			НомерКолонки = ТипЧисло.ПривестиЗначение(СокрЛП(НомерКолонкиИСтроки[0]));
			НомерСтроки = ТипЧисло.ПривестиЗначение(СокрЛП(НомерКолонкиИСтроки[1]));
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(НомерКолонки, НомерСтроки, НомерКолонки, НомерСтроки);
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстЗапроса;
		КонецЕсли;
	Иначе
		СообщитьПользователю(ТекстОшибки, "Объект");
	КонецЕсли;

КонецПроцедуры

// Загружает в результат запроса возвращаемый из Временного хранилища табличный документ.
//
// Параметры:
//  РезультатЗапроса - результат запроса.
//  АдресРезультата - адрес временного хранилища, хранящийся.
//  ТекстЗапроса - Строка - текст запроса.
//
&НаСервере
Процедура ВыполнитьЗапросСервер(ИндексТекущегоЗапроса, ТабличныйДокументРезультата, ВыводитьВременныеТаблицы, ВыводитьИдентификатор, ТекстЗапроса, ТекстСообщения)
	
	// Убрать строки с комментариями.
	КоличествоСтрок = СтрЧислоСтрок(ТекстЗапроса);
	Текст = "";
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстЗапроса, НомерСтроки);
		Если Не СтрНачинаетсяС(СокрЛ(Фрагмент), "//") Тогда
			Текст = Текст + Фрагмент + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	ЗаполнитьПараметрыПриВыполненииЗапроса(Текст);
	
	// Обнуление параметры.
	ВремяВыполнения = 0;
	КоличествоСтрок = 0;
	
	// Выбор текущего запроса.
	ТекущийЗапрос = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	// Выбор параметров по текущему запросу.
	Фильтр = Новый Структура;
	Фильтр.Вставить("ИдентификаторЗапроса", ТекущийЗапрос.Идентификатор);
	МассивПараметров = Объект.Параметры.НайтиСтроки(Фильтр);
	
	МассивМаксШириныЯчеек = Новый Массив;
	МассивМаксШириныЯчеек.Очистить();
	
	ПорядокОбхода = Объект.ТипОбхода;
	ИспользованиеЧередования = Объект.ЧередованиеЦветовВРезультатеЗапроса;
	
	Если ПоказыватьПланВыполненияЗапроса И ТехнологическийЖурналДоступен() Тогда
		МеткаЗапроса = Строка(Новый УникальныйИдентификатор);
	Иначе
		МеткаЗапроса = "";
	КонецЕсли;
	
	// Выполнение запроса.
	
	// Будет сохранять результат запроса вместе с табличным документом - представлением результата...
	ПараметрыВыводаЗапроса = Новый Структура;
	ПараметрыВыводаЗапроса.Вставить("ВыводитьВременныеТаблицы", ВыводитьВременныеТаблицы);
	ПараметрыВыводаЗапроса.Вставить("ВыводитьИдентификатор", ВыводитьИдентификатор);
	ПараметрыВыводаЗапроса.Вставить("ПорядокОбхода", ПорядокОбхода);
	ПараметрыВыводаЗапроса.Вставить("ИспользованиеЧередования", ИспользованиеЧередования);
	ПараметрыВыводаЗапроса.Вставить("ВыводитьРезультатыЗапроса", ВыводитьРезультатыЗапроса);
	
	ОтчетПоВыполнениюЗапроса = Новый Структура;
	ОтчетПоВыполнениюЗапроса.Вставить("КоличествоСтрок", КоличествоСтрок);
	ОтчетПоВыполнениюЗапроса.Вставить("ВремяВыполнения", ВремяВыполнения);
	ОтчетПоВыполнениюЗапроса.Вставить("ТекстСообщения", ТекстСообщения);
	
	Результат = ОбъектОбработки().ВыполнитьЗапрос(Текст, МассивПараметров, ТабличныйДокументРезультата, ПараметрыВыводаЗапроса, ОтчетПоВыполнениюЗапроса, МеткаЗапроса);
	
	Если ЗначениеЗаполнено(ОтчетПоВыполнениюЗапроса.ТекстСообщения) Тогда
		СообщитьПользователю(ОтчетПоВыполнениюЗапроса.ТекстСообщения);
	КонецЕсли;
	
	// Т..только если находимся в режиме выбора.
	Если Не Параметры.РежимВыбора Тогда
		Результат = Неопределено;
	КонецЕсли; 
	
	// Заполнение адреса временного хранилища для результата.
	ТекущийЗапрос.АдресРезультата = ПоместитьВоВременноеХранилище(ТабличныйДокументРезультата, УникальныйИдентификатор);
	ТекущийЗапрос.ВремяВыполнения = ОтчетПоВыполнениюЗапроса.ВремяВыполнения;
	ТекущийЗапрос.КоличествоСтрок = ОтчетПоВыполнениюЗапроса.КоличествоСтрок;
	
	Если Не ПустаяСтрока(ТекущийЗапрос.АдресРезультатовЗапроса) Тогда
		УдалитьИзВременногоХранилища(ТекущийЗапрос.АдресРезультатовЗапроса)
	КонецЕсли;
	Если Результат = Неопределено Тогда
		ТекущийЗапрос.АдресРезультатовЗапроса = "";
	Иначе
		ТекущийЗапрос.АдресРезультатовЗапроса = ПоместитьВоВременноеХранилище(Результат, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	// Обновление заголовка результата запроса.
	РезультирующаяСтрока = НСтр("ru = 'Результат запроса (количество строк = %КоличествоСтрок%, время выполнения = %ВремяВыполнения% с)'");
	РезультирующаяСтрока = СтрЗаменить(РезультирующаяСтрока, "%КоличествоСтрок%", Строка(ОтчетПоВыполнениюЗапроса.КоличествоСтрок));
	РезультирующаяСтрока = СтрЗаменить(РезультирующаяСтрока, "%ВремяВыполнения%", Строка(ОтчетПоВыполнениюЗапроса.ВремяВыполнения));
	
	Элементы.РезультатЗапроса.Заголовок = РезультирующаяСтрока;
	Элементы.ГруппаРезультатЗапроса.Заголовок = РезультирующаяСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатЗапросаИзХранилища(ТабличныйДокументРезультата, АдресРезультата)
	
	Если НЕ ПустаяСтрока(АдресРезультата) Тогда
		РезультатИзВременногоХранилища 	= ПолучитьИзВременногоХранилища(АдресРезультата);
		ТабличныйДокументРезультата 	= РезультатИзВременногоХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеВСтрокуСервер(Значение)
	
	Результат = ЗначениеВСтрокуВнутр(Значение);
	Возврат Результат;
	
КонецФункции

// Возвращает строковое представление типа.
// Например, для ссылки справочника возвращает "CatalogRef.ИмяСправочника".
//
&НаСервере
Функция ТипСтрока(Значение)
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	ОбъектОбработки().СформироватьСписокТипов(СписокДобавленныхТипов);
	
	ТипСтрока = Строка(Тип(Значение));
	Если Значение = "СписокЗначений" Тогда
		Возврат "СписокЗначений";
	КонецЕсли;
		
	ТипНайден = Ложь;
	Для Каждого ЭлементСписка Из СписокДобавленныхТипов Цикл
		Если ЭлементСписка.Представление = ТипСтрока Тогда
			ТипНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипНайден Тогда
		ТипСтрока	= XMLТип(Тип(Значение)).ИмяТипа;
	КонецЕсли;
	
	Возврат ТипСтрока;
	
КонецФункции

// Формирование диалога по сохранению файла запросов.
//
&НаКлиенте
Процедура СохранитьФайлЗапроса(ИмяФайла = "")
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла", ИмяФайла);
	#Если Не ВебКлиент Тогда
		// В мобильном, тонком и толстом клиентах расширение подключено всегда.
		СохранитьФайлЗапросаЗавершение(Истина, ДополнительныеПараметры);
		Возврат;
	#КонецЕсли
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,
		Новый ОписаниеОповещения("СохранитьФайлЗапросаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	Если Результат Тогда
		
		Получаемые = Новый Массив;
		Получаемые.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, СохранитьЗапросыВоВременноеХранилище()));
		
		ОписаниеОповещенияПолученияФайлов = Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект);
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, Получаемые, ИмяФайла, Ложь);
		Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок = НСтр("ru = 'Выберите файл запросов'");
			Диалог.ПредварительныйПросмотр = Ложь;
			Диалог.Фильтр = НСтр("ru = 'Файл запросов (*.q1c)|*.q1c'");
			Диалог.Расширение = "q1c";
			Диалог.ПроверятьСуществованиеФайла = Истина;
			Диалог.МножественныйВыбор = Ложь;
			
			НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, Получаемые, Диалог, Истина);
		КонецЕсли;
	Иначе
		СообщитьПользователю(НСтр("ru = 'Без расширения работы с файлами невозможно работать с файлами.'"), "Объект");
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   Результат - Массив из Файл
//   ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура ПолучениеФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Модифицированность = Ложь;
		Объект.ИмяФайла = Результат[0].ПолноеИмя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЧтенияФайла(Удалять)
	
	ДополнительныеПараметры = Новый Структура("Удалять", Удалять);
	
	#Если Не ВебКлиент Тогда
		// В мобильном, тонком и толстом клиентах расширение подключено всегда.
		ЧтениеФайлаЗавершение(Истина, ДополнительныеПараметры);
		Возврат;
	#КонецЕсли
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,
		Новый ОписаниеОповещения("ЧтениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		// Выбор файла для загрузки.
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = НСтр("ru = 'Выберите файл запросов'");
		Диалог.ПредварительныйПросмотр = Ложь;
		Диалог.Фильтр = НСтр("ru = 'Файл запросов (*.q1c)|*.q1c'");
		Диалог.Расширение = "q1c";
		Диалог.ПроверятьСуществованиеФайла  = Истина;
		Диалог.МножественныйВыбор = Ложь;
		
		ДополнительныеПараметры = Новый Структура("Удалять", ДополнительныеПараметры.Удалять);
		Оповещение = Новый ОписаниеОповещения("ПомещениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайлов(Оповещение,, Диалог, Истина, ЭтотОбъект.УникальныйИдентификатор);
	Иначе
		СообщитьПользователю(НСтр("ru = 'Без расширения работы с файлами невозможно сохранять и загружать запросы в файл.'"), "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если Результат.Количество() > 0 Тогда
			
			Если ДополнительныеПараметры.Удалять Тогда
				Объект.Запросы.Очистить();
				Объект.Параметры.Очистить();
			КонецЕсли;
			
			ИмяФайла = Результат[0].Имя;
			ЗагрузитьЗапросыИзФайла(Результат[0].Хранение);
			Объект.ИмяФайла = ИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗапросов = Объект.Запросы.Количество();
	Если КоличествоЗапросов > 0 Тогда
		ИдентификаторТекущегоЗапроса = Объект.Запросы.Получить(0).Идентификатор;
		Модифицированность = Ложь;
		АдресХранилищаПланаЗапроса = Объект.Запросы.Получить(0).АдресХранилищаПланаЗапроса;
		АнализЗапросаПроведен = АнализЗапросаПроведен(АдресХранилищаПланаЗапроса, ПланЗапросаАктуален);
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	Иначе
		Элемент = Объект.Запросы.Добавить();
		ИдентификаторТекущегоЗапроса = Новый УникальныйИдентификатор;
		Элемент.Идентификатор = ИдентификаторТекущегоЗапроса;
		Элемент.Имя = ИмяЗапросаПоУмолчанию;
		Результат = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ОбновитьФормуКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗапросыИзФайла(АдресВоВременномХранилище)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ОбъектВнешнейОбработки = ОбъектОбработки().ПрочитатьЗапросыИзФайлаXML(ДвоичныеДанные);
	ЗаполнитьЗапросыИПараметрыИзОбъектаВнешнейОбработки(ОбъектВнешнейОбработки);
	ВывестиРезультатЗапроса();
	
КонецПроцедуры

// Общие процедуры для сохранения и загрузки

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ЗаданВопросОбУстановкеРасширения Тогда
		ЗаданВопросОбУстановкеРасширения = Истина;
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросОбУстановкеРасширения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещенияВопрос );
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры, РасширениеПодключено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУстановкеРасширения(Оповещение) Экспорт
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗапросыВоВременноеХранилище()
	
	ДвоичныеДанные = СохранитьЗапросыСервер();
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецФункции

// Заполняет из объекта внешней обработки запросы и параметры.
//
// Параметры:
//  ОбъектОбработки - ОбработкаОбъект.КонсольЗапросов - объект обработки.
//
&НаСервере
Процедура ЗаполнитьЗапросыИПараметрыИзОбъектаВнешнейОбработки(ОбъектОбработки)
	
	ЗапросыОб = ОбъектОбработки.Запросы;
	ПараметрыОб = ОбъектОбработки.Параметры;
	
	Объект.Запросы.Очистить();
	Объект.Параметры.Очистить();
	
	// Заполнение запросов и параметров в форме.
	Для каждого ТекЗапрос Из ЗапросыОб Цикл
		ЭлементЗапроса                  = Объект.Запросы.Добавить();
		ЭлементЗапроса.Идентификатор    = ТекЗапрос.Идентификатор;
		ЭлементЗапроса.Имя              = ТекЗапрос.Имя;
		ЭлементЗапроса.Текст            = ТекЗапрос.Текст;
		ЭлементЗапроса.АдресХранилищаПланаЗапроса = ТекЗапрос.АдресХранилищаПланаЗапроса;
	КонецЦикла;
	
	Для каждого ТекПараметр Из ПараметрыОб Цикл
		ТипСтрока 	= ТекПараметр.Тип;
		
		Значение	= ТекПараметр.Значение;
		Значение    = ЗначениеИЗСтрокиВнутр(Значение);
	
		Если ТипСтрока = "ТаблицаЗначений" Или ТипСтрока = "МоментВремени" Или ТипСтрока = "Граница" Тогда
			ЭлементПараметр								= Объект.Параметры.Добавить();
			ЭлементПараметр.ИдентификаторЗапроса		= ТекПараметр.ИдентификаторЗапроса;
			ЭлементПараметр.Идентификатор				= ТекПараметр.Идентификатор;
			ЭлементПараметр.Имя							= ТекПараметр.Имя;
			ЭлементПараметр.Тип		 					= СписокТипов.НайтиПоЗначению(ТипСтрока).Значение;
			ЭлементПараметр.Значение 					= ТекПараметр.Значение;
			ЭлементПараметр.ТипВФорме					= СписокТипов.НайтиПоЗначению(ТипСтрока).Представление;
			ЭлементПараметр.ЗначениеВФорме				= ОбъектОбработки().ФормированиеПредставленияЗначения(Значение);
		Иначе
			Массив 		= Новый Массив;
			Массив.Добавить(Тип(ТипСтрока));
			Описание	= Новый ОписаниеТипов(Массив);
			
			ЭлементПараметр								= Объект.Параметры.Добавить();
			ЭлементПараметр.ИдентификаторЗапроса		= ТекПараметр.ИдентификаторЗапроса;
			ЭлементПараметр.Идентификатор				= ТекПараметр.Идентификатор;
			ЭлементПараметр.Имя							= ТекПараметр.Имя;
			ЭлементПараметр.Тип 						= ТипСтрока;
			ЭлементПараметр.ТипВФорме					= Описание;
			ЭлементПараметр.Значение					= ЗначениеВСтрокуВнутр(Значение);
			ЭлементПараметр.ЗначениеВФорме				= Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, ТекущийТип)
	
	// Тип в табличной части.
	ТипСтрока					= ТипСтрока(ТекущийТип.Значение);
	ТекущийПараметр.Тип 		= ТипСтрока;
	
	// Тип в форме.
	Массив = Новый Массив;
	Массив.Добавить(Тип(ТекущийПараметр.Тип));
	Описание = Новый ОписаниеТипов(Массив);
	
	ТекущийПараметр.ТипВФорме 		= ТекущийТип.Представление;
	
	// Значение.
	Значение						= Описание.ПривестиЗначение(Тип(ТекущийТип.Значение));
	ТекущийПараметр.ЗначениеВФорме	= Значение;   
	
	ЗначениеВнутр					= ЗначениеВСтрокуСервер(Значение);
	ТекущийПараметр.Значение		= ЗначениеВнутр;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПараметра()
	
	ПараметрыВФорме = Объект.Параметры;
	Флаг = Истина;
	Индекс = 0;
	
	Пока Флаг Цикл
		Имя = "Параметр" + Строка(Формат(Индекс, "ЧН=-"));
		Имя = СтрЗаменить(Имя, "-", "");
		Фильтр = Новый Структура("Имя", Имя);
		
		ОтфильтрованныеСтроки = ПараметрыВФорме.НайтиСтроки(Фильтр);
		Если ОтфильтрованныеСтроки.Количество() = 0 Тогда
			Результат = Имя;
			Флаг = Ложь;
		КонецЕсли;
		Индекс = Индекс+1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Показывает сообщение или предупреждение пользователю.
//
// Параметры:
//  ТекстСообщения - Строка - текст передаваемого сообщения.
//  ПутьКДанным - Строка - путь к данным для сообщения.
//
&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыКлиент()
	
	// СЗахватывается" текущий запрос из списка запросов.
	ИндексТекущегоЗапроса = ИндексТекущегоВопроса();
	Если ИндексТекущегоЗапроса = Неопределено Тогда
		СообщитьПользователю(НСтр("ru = 'Выберите запрос.'"), "Объект");
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	
	Если Не ПустаяСтрока(ТекущийЗапрос.Текст) Тогда
		Фильтр = Новый Структура;
		Фильтр.Вставить("ИдентификаторЗапроса", ИдентификаторТекущегоЗапроса);
		МассивПараметров = Объект.Параметры.НайтиСтроки(Фильтр);
		
		Если МассивПараметров.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Таблица параметров не пуста. Очистить таблицу?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПараметрыКлиентЗавершение", ЭтотОбъект, ТекущийЗапрос);
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьПараметрыКлиентЗавершение(КодВозвратаДиалога.Да, ТекущийЗапрос);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Текст запроса пустой.'"));
	КонецЕсли;
	
	Элементы.ГруппаПараметры.Показать();
	Элементы.ГруппаРезультатЗапроса.Скрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыКлиентЗавершение(Ответ, ТекущийЗапрос) Экспорт
	
	Удалять = (Ответ = КодВозвратаДиалога.Да);
	
	СчитатьПараметрыЗапроса(ТекущийЗапрос.Текст, Удалять, ИдентификаторТекущегоЗапроса);
	
	ОбновитьФормуКлиент();
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФормыСпискаДляСсылки(Ссылка)
	
	ИмяФормыСписка = "";
	
	Если Ссылка = Неопределено Тогда
		Возврат ИмяФормыСписка;
	КонецЕсли;
	
	Если ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
		ИмяФормыСписка = Ссылка.Метаданные().ОсновнаяФормаСписка.ПолноеИмя();
	КонецЕсли;
	
	Возврат ИмяФормыСписка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПриВыполненииЗапроса(ТекстЗапроса)
	
	// Считывание параметров из текст запроса в массив структуры.
	РезультатСтруктура = ОбъектОбработки().СчитатьПараметрыЗапроса(ТекстЗапроса, ИдентификаторТекущегоЗапроса);
	
	ФлагВыводаСообщения = Ложь;
	ПараметрыВФорме = Объект.Параметры;
	
	Для каждого СчитанныйПараметр Из РезультатСтруктура Цикл
		Фильтр = Новый Структура;
		Фильтр.Вставить("ИдентификаторЗапроса", ИдентификаторТекущегоЗапроса);
		МассивПараметров = Объект.Параметры.НайтиСтроки(Фильтр);
		
		НайденПараметр = Ложь;
		Для Индекс = 0 По МассивПараметров.Количество() - 1 Цикл
			Если НРег(МассивПараметров.Получить(Индекс).Имя) = НРег(СчитанныйПараметр.Имя) Тогда 
				НайденПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденПараметр Тогда
			Если Не ФлагВыводаСообщения Тогда
				СообщитьПользователю(НСтр("ru = 'Найденные параметры были добавлены автоматически.'"), "Объект");
				ФлагВыводаСообщения = Истина;
			КонецЕсли;
			ДобавитьПараметрВФорму(ПараметрыВФорме, СчитанныйПараметр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Копирует параметры из запроса имеющего идентификатор текущего запроса.
//
// Параметры:
//  ЗапросПолучатель - Структура - запрос, к которому привязываются параметры.
//
&НаКлиенте
Процедура СкопироватьПараметрыИзЗапроса(ЗапросПолучатель)
	
	ПараметрыЗапроса = Объект.Параметры;
	
	МассивПараметров = Новый Массив;
	
	Для каждого ТекущийПараметр Из ПараметрыЗапроса Цикл
		Если ТекущийПараметр.ИдентификаторЗапроса <> ИдентификаторТекущегоЗапроса Тогда
			Продолжить;
		КонецЕсли;
		МассивПараметров.Добавить(ТекущийПараметр);
	КонецЦикла;
	
	КолПараметров = МассивПараметров.Количество();
	Для Индекс = 0 По КолПараметров - 1 Цикл
		ЭлементПараметр 						= Объект.Параметры.Добавить();
		ЭлементПараметр.Идентификатор 			= Новый УникальныйИдентификатор;
		ЭлементПараметр.ИдентификаторЗапроса 	= ЗапросПолучатель.Идентификатор;
		ОписаниеПараметра = МассивПараметров.Получить(Индекс);
		ЭлементПараметр.Имя						= ОписаниеПараметра.Имя;
		ЭлементПараметр.Тип						= ОписаниеПараметра.Тип;
		ЭлементПараметр.Значение 				= ОписаниеПараметра.Значение;
		ЭлементПараметр.ТипВФорме 				= ОписаниеПараметра.ТипВФорме;
		ЭлементПараметр.ЗначениеВФорме 			= ОписаниеПараметра.ЗначениеВФорме;
	КонецЦикла;
	
КонецПроцедуры

// Формирует имя копии запроса.
//
// Параметры:
//  Имя - Строка - передаваемое имя запроса.
//
&НаКлиенте
Функция СформироватьИмяКопииЗапроса(Имя)
	
	Флаг 	= Истина;
	Индекс 	= 1;
	
	Пока Флаг Цикл
		ФормируемоеИмяЗапроса = НСтр("ru = '%ИмяЗапроса% - Копия %НомерКопии%'");
		ФормируемоеИмяЗапроса = СтрЗаменить(ФормируемоеИмяЗапроса, "%ИмяЗапроса%", Имя);
		ФормируемоеИмяЗапроса = СтрЗаменить(ФормируемоеИмяЗапроса, "%НомерКопии%", Индекс);
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("Имя", ФормируемоеИмяЗапроса);
		
		МассивЗапросовПоФильтру = Объект.Запросы.НайтиСтроки(Фильтр);
		
		Если МассивЗапросовПоФильтру.Количество() = 0 Тогда 
			Флаг = Ложь;
		КонецЕсли;
		
		Индекс 	= Индекс + 1;
	КонецЦикла;
	
	Возврат ФормируемоеИмяЗапроса;
	
КонецФункции

//  Анализирует параметры запуска формы и по необходимости настраивает режим выбора.
&НаСервере
Процедура ВключитьРежимВыбора()
	
	НоваяКнопка = Элементы.ФормаВыполнитьВыборРезультатаЗапроса;
	НоваяКнопка.Видимость   = Параметры.РежимВыбора;
	НоваяКнопка.Доступность = НоваяКнопка.Видимость;
	
	Если Не НоваяКнопка.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	НоваяКнопка.КнопкаПоУмолчанию = Истина;
	
	ЗакрыватьПриВыборе = Параметры.ЗакрыватьПриВыборе;
	Если Не ПустаяСтрока(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ВключениеПланаВыполненияЗапроса()
	
	РезультатВключения = Новый Структура("Результат, Причина", Истина, "");
	
	Если ПоказПланаВыполненияВозможен() Тогда
		ПараметрыТехнологическогоЖурнала = Новый Структура("КаталогСЛогФайлами, ИдентификаторПроцессаОС");
		ОбъектОбработки().ВключениеТехнологическогоЖурнала(ПараметрыТехнологическогоЖурнала, РезультатВключения);
		Если РезультатВключения.Результат Тогда
			ИдентификаторПроцессаОС = ПараметрыТехнологическогоЖурнала.ИдентификаторПроцессаОС;
			КаталогСЛогФайлами = ПараметрыТехнологическогоЖурнала.КаталогСЛогФайлами;
		КонецЕсли;
	Иначе
		РезультатВключения.Результат = Ложь;
		РезультатВключения.Причина = НСтр("ru = 'Отображение плана выполнения запроса доступно только при работе на ОС Windows.'");
	КонецЕсли;
	
	Возврат РезультатВключения;
	
КонецФункции

&НаСервере
Процедура ВыключитьПланаВыполненияЗапроса(ПараметрыВыключенияТЖ, ИзменятьФайлКонфигурации)
	
	ОбъектОбработки().ВыключениеТехнологическогоЖурнала(ПараметрыВыключенияТЖ, ИзменятьФайлКонфигурации);
	
КонецПроцедуры

&НаСервере
Функция ТехнологическийЖурналДоступен()
	
	СписокФайлов = НайтиФайлы(КаталогСЛогФайлами, "*.log", Истина);
	Для каждого Файл Из СписокФайлов Цикл
		Если СтрНайти(Файл.Путь, "_" + ИдентификаторПроцессаОС) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьВозможностьОткрытияТехнологическогоЖурнала()
	
	ТехнологическийЖурналДоступен = ТехнологическийЖурналДоступен();
	Если ТехнологическийЖурналДоступен Или АнализЗапросаПроведен Тогда
		
		Элементы.ДекорацияВключенияПланаЗапроса.Видимость = Ложь;
		Элементы.ПоказатьПланВыполненияЗапросаПропуск.Видимость = Истина;
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
		
		ОтключитьОбработчикОжидания("ОпределитьВозможностьОткрытияТехнологическогоЖурнала");
	Иначе
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланаВыполненияЗапроса()
	
	Если ЗначениеЗаполнено(МеткаЗапроса) Или АнализЗапросаПроведен Тогда
		
		Отбор = Новый Структура("Идентификатор", ИдентификаторТекущегоЗапроса);
		Строки = Объект.Запросы.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда 
			ИмяЗапроса = Строки[0].Имя;
		Иначе
			ИмяЗапроса = "";
		КонецЕсли;
		
		АнализЗапросаПроведен = Истина;
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("МеткаЗапроса", МеткаЗапроса);
		ПараметрыЗапроса.Вставить("КаталогСЛогФайлами", КаталогСЛогФайлами);
		ПараметрыЗапроса.Вставить("ИдентификаторПроцессаОС", ИдентификаторПроцессаОС);
		ПараметрыЗапроса.Вставить("ИмяЗапроса", ИмяЗапроса);
		ПараметрыЗапроса.Вставить("ИдентификаторТекущегоЗапроса", ИдентификаторТекущегоЗапроса);
		ПараметрыЗапроса.Вставить("АнализЗапросаПроведен", АнализЗапросаПроведен);
		ПараметрыЗапроса.Вставить("АдресХранилищаПланаЗапроса", АдресХранилищаПланаЗапроса);
		
		ОткрытьФорму(Объект.ПутьКФормам  + ".ПланВыполненияЗапроса", ПараметрыЗапроса, Объект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоказПланаВыполненияВозможен()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

&НаСервере
Функция ЭтоСсылка(Тип)
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаУникальногоИдентификатора(Результат, Параметр) Экспорт
	
	ЗначениеПараметраУникальныйИдентификатор = Новый УникальныйИдентификатор(Результат);
	ТекущаяСтрока = Объект.Параметры.НайтиПоИдентификатору(Параметр);
	ТекущаяСтрока.Значение = ЗначениеВСтрокуСервер(ЗначениеПараметраУникальныйИдентификатор);
	ТекущаяСтрока.ЗначениеВФорме = ЗначениеПараметраУникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзXMLЗавершение(СтрокаXML, Контекст) Экспорт
	
	Если ТипЗнч(СтрокаXML) <> Тип("Строка") Или ПустаяСтрока(СтрокаXML) Тогда
		Возврат;
	КонецЕсли;
	Контекст.Вставить("ИзТекстаЗапроса", Истина);
	ЗаполнитьПараметрыИзXMLСервер(СтрокаXML, Контекст);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыИзXMLСервер(Знач СтрокаXML, Знач Контекст)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Попытка
		СтруктураПараметров = СериализаторXDTO.ПрочитатьXML(ЧтениеXML); // Запрос
	Исключение
		ТекстОшибки = НСтр("ru = 'Невозможно сформировать запрос из введенного XML, т.к. он, скорее всего некорректный.
		|Техническая информация: %1'");
		СообщитьПользователю(ПодставитьПараметрыВСтроку(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат;
	КонецПопытки;
	
	Если СтруктураПараметров.Количество() <> 2
		Или Не СтруктураПараметров.Свойство("Текст")
		Или Не СтруктураПараметров.Свойство("Параметры") Тогда
		Контекст.ИзТекстаЗапроса = Ложь;
	КонецЕсли;
	
	Найденные = Объект.Запросы.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТекущегоЗапроса));
	ТекущийЗапрос = Найденные[0];
	
	Если Контекст.ИзТекстаЗапроса Тогда
		ТекущийЗапрос.Текст = СтруктураПараметров.Текст;
		ТекущийЗапрос.Имя   = ПолучитьИмяЗапросаПоФорме(ЭтотОбъект, ТекущийЗапрос.Текст);
		ТекстЗапроса.УстановитьТекст(ТекущийЗапрос.Текст);
		СтруктураПараметров = СтруктураПараметров.Параметры
	КонецЕсли;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("ИдентификаторЗапроса", ИдентификаторТекущегоЗапроса);
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Фильтр.Вставить("Имя", КлючИЗначение.Ключ);
		Найденные = Объект.Параметры.НайтиСтроки(Фильтр);
		Если Найденные.Количество() = 0 Тогда
			ПараметрЗапроса = Объект.Параметры.Добавить();
			ПараметрЗапроса.Имя = Фильтр.Имя;
			ПараметрЗапроса.Идентификатор = Новый УникальныйИдентификатор;
			ПараметрЗапроса.ИдентификаторЗапроса = ИдентификаторТекущегоЗапроса;
		Иначе
			ПараметрЗапроса = Найденные[0];
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Значение = Новый СписокЗначений;
			Значение.ЗагрузитьЗначения(КлючИЗначение.Значение);
			ПараметрЗапроса.Тип = "СписокЗначений";
		Иначе
			Значение = КлючИЗначение.Значение;
			ПараметрЗапроса.Тип = ОбъектОбработки().ИмяТипаИзЗначения(Значение);
		КонецЕсли;
		ПараметрЗапроса.Значение = ЗначениеВСтрокуСервер(Значение);
		ПараметрЗапроса.ЗначениеВФорме = Значение;
		ПараметрЗапроса.ТипВФорме = Строка(ТипЗнч(Значение));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя запроса по имени первой таблицы.
//
// Параметры:
//   ТекстЗапроса - Строка - текст передаваемого запроса.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяЗапросаПоФорме(Форма, Знач ТекстЗапроса)
	
	// Если пустой текст запроса тогда возвращается "Запрос".
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Результат = Форма.ИмяЗапросаПоУмолчанию;
		Возврат Результат;
	КонецЕсли;
	
	// Поиск зарезервированного слова "ВЫБРАТЬ".
	Выбрать = "ВЫБРАТЬ"; // @query-part-1
	ДлинаВыбрать = СтрДлина(Выбрать);
	ПозицияВыбрать = СтрНайти(ВРег(ТекстЗапроса), Выбрать);
	Если ПозицияВыбрать = 0 Тогда
		Результат = Форма.ИмяЗапросаПоУмолчанию;
		Возврат Результат;
	КонецЕсли;
	
	// Срез строки текста запроса без зарезервированного слова "ВЫБРАТЬ".
	ТекстЗапроса = Сред(ТекстЗапроса, ПозицияВыбрать + ДлинаВыбрать);
	
	// Поиск первой "точки", чтобы определить имя таблицы.
	Точка = ".";
	ДлинаТочка = СтрДлина(Точка);
	ПозицияТочка = СтрНайти(ВРег(ТекстЗапроса), Точка);
	Если ПозицияТочка = 0 Тогда
		Результат = Форма.ИмяЗапросаПоУмолчанию;
		Возврат Результат;
	КонецЕсли;
	
	// Возвращается "Запрос:" и имя первой таблицы.
	Результат = СокрЛП(Лев(ТекстЗапроса, ПозицияТочка - ДлинаТочка));
	Если ПустаяСтрока(Результат) Тогда
		Результат = Форма.ИмяЗапросаПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьПризнакПолученияПланаЗапросаВДругихФормах()
	
	ПоказыватьПланВыполненияЗапроса = Ложь;
	ПодключитьОбработчикОжидания("ОпределитьВозможностьОткрытияТехнологическогоЖурнала", 3);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АнализЗапросаПроведен(Адрес, ПланЗапросаАктуален)
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		СтруктураПланаЗапроса = ПолучитьИзВременногоХранилища(Адрес);
		Если ТипЗнч(СтруктураПланаЗапроса) = Тип("Структура") Тогда
			ПланЗапросаАктуален = СтруктураПланаЗапроса.ПланЗапросаАктуален;
			Если СтруктураПланаЗапроса.ТипСУБД <> "" И  СтруктураПланаЗапроса.СКЛЗапрос <> "" И СтруктураПланаЗапроса.ПланВыполненияЗапроса <> "" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса()
	
	Если АнализЗапросаПроведен Тогда
		Если ПланЗапросаАктуален Тогда
			Элементы.ПоказатьПланВыполненияЗапроса.Заголовок = НСтр("ru = 'Открыть'");
		Иначе
			Элементы.ПоказатьПланВыполненияЗапроса.Заголовок = НСтр("ru = 'Открыть (не актуален)'");
		КонецЕсли;
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Истина;
	ИначеЕсли ТехнологическийЖурналДоступен И ПоказыватьПланВыполненияЗапроса Тогда
		Элементы.ПоказатьПланВыполненияЗапроса.Заголовок = НСтр("ru = 'Получить'");
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Истина;
	Иначе
		Элементы.ПоказатьПланВыполненияЗапроса.Заголовок = НСтр("ru = 'Получить'");
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПланВыполненияЗапросаКлиент()
	
	РезультатВключения = ВключениеПланаВыполненияЗапроса();
	Если РезультатВключения.Результат Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Показывать план выполнения запроса'"), , НСтр("ru = 'Включение анализа плана выполнения запроса занимает до одной минуты'"));
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Ложь;
		Элементы.ДекорацияВключенияПланаЗапроса.Видимость = Истина;
		Элементы.ПоказатьПланВыполненияЗапросаПропуск.Видимость = Ложь;
		Оповестить("ВключитьПланВыполненияЗапроса",, ЭтотОбъект);
		ПодключитьОбработчикОжидания("ОпределитьВозможностьОткрытияТехнологическогоЖурнала", 3);
	Иначе
		ПоказыватьПланВыполненияЗапроса = Ложь;
		ПоказатьПредупреждение(, РезультатВключения.Причина);
		ТехнологическийЖурналДоступен = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыключитьПланВыполненияЗапросаКлиент()
	
	ОтключитьОбработчикОжидания("ОпределитьВозможностьОткрытияТехнологическогоЖурнала");
	
	ПараметрыВыключенияТЖ = Новый Структура;
	ПараметрыВыключенияТЖ.Вставить("КаталогСЛогФайлами", КаталогСЛогФайлами);
	ПараметрыВыключенияТЖ.Вставить("РеестрВключенныхКаталогов", Новый Массив);
	ПараметрыВыключенияТЖ.Вставить("РеестрУдаленныхКаталогов", Новый Массив);
	
	ВыключитьПланаВыполненияЗапроса(ПараметрыВыключенияТЖ, Истина);
	
	Элементы.ДекорацияВключенияПланаЗапроса.Видимость = Ложь;
	Элементы.ПоказатьПланВыполненияЗапросаПропуск.Видимость = Истина;
	УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
	
	ТехнологическийЖурналДоступен = Ложь;
	Оповестить("ОтключитьПризнакПолученияПланаЗапросаВДругихФормах",, ЭтотОбъект);
	
	ДополнитьФайлыТЖДляУдаления(ПараметрыВыключенияТЖ.РеестрВключенныхКаталогов, ПараметрыВыключенияТЖ.РеестрУдаленныхКаталогов);
	
	Если ПараметрыВыключенияТЖ.РеестрУдаленныхКаталогов.Количество() > 0 Тогда
		ПапкиТЖДляУдаления = ПараметрыВыключенияТЖ.РеестрУдаленныхКаталогов;
		ДатаНачалаУдаленияФайловТЖ = ТекущаяДатаСеансаНаСервере();
		ПроисходитОчисткаФайловТЖ = Истина;
		Элементы.ПолучатьПланВыполненияЗапроса.Доступность = Ложь;
		Элементы.ДекорацияВключенияПланаЗапроса.Видимость = Истина;
		Элементы.ПоказатьПланВыполненияЗапросаПропуск.Видимость = Ложь;
		Элементы.ПоказатьПланВыполненияЗапроса.Заголовок = НСтр("ru = 'Очистка временных файлов'");
		Элементы.ПоказатьПланВыполненияЗапроса.Доступность = Ложь;
		ПодключитьОбработчикОжидания("ПроверитьУдалениеФайловТЖ", 3, Истина);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУдалениеФайловТЖ()

	УдалитьНайденныеФайлыТЖ(ПапкиТЖДляУдаления);
	
	Если ТекущаяДатаСеансаНаСервере() - ДатаНачалаУдаленияФайловТЖ > 90 Тогда
		ПапкиТЖДляУдаления = Новый Массив; //максимальное время ожидания удаления - 1 минута 30 секунд
	КонецЕсли;
	
	Если ПапкиТЖДляУдаления.Количество() = 0 Тогда
		
		ОтключитьОбработчикОжидания("ПроверитьУдалениеФайловТЖ");
		
		Элементы.ПолучатьПланВыполненияЗапроса.Доступность = Истина;
		Элементы.ДекорацияВключенияПланаЗапроса.Видимость = Ложь;
		Элементы.ПоказатьПланВыполненияЗапросаПропуск.Видимость = Истина;
		УстановитьОформлениеНадписиПоказатьПланВыполненияЗапроса();
		ПроисходитОчисткаФайловТЖ = Ложь;
		
		Если ПроисходитЗакрытиеФормы Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьУдалениеФайловТЖ", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьФайлыТЖДляУдаления(РеестрВключенныхКаталогов, РеестрУдаленныхКаталогов)
	
	НайденныеФайлы = НайтиФайлы(КаталогВременныхФайлов(), "*.1c_logs", Истина);
	
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		ИмяФайлаДляУдаления = ВРег(НайденныйФайл.ПолноеИмя);
		
		Если НЕ РеестрВключенныхКаталогов.Найти(ИмяФайлаДляУдаления) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеестрУдаленныхКаталогов.Найти(ИмяФайлаДляУдаления) = Неопределено Тогда
			РеестрУдаленныхКаталогов.Добавить(ИмяФайлаДляУдаления);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьНайденныеФайлыТЖ(КаталогиДляУдаления)

	УспешноУдаленныеКаталоги = Новый Массив;
	
	Для каждого Каталог Из КаталогиДляУдаления Цикл
		Если СтрНайти(ВРег(Каталог), ".1C_LOGS") = 0
			ИЛИ СтрНайти(ВРег(Каталог), "\TEMP\") = 0 Тогда
			УспешноУдаленныеКаталоги.Добавить(Каталог);
			Продолжить;
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(Каталог);
		Исключение
			Продолжить;
		КонецПопытки;
			
		УспешноУдаленныеКаталоги.Добавить(Каталог);
	КонецЦикла;
	
	Для каждого Каталог Из УспешноУдаленныеКаталоги Цикл
		ИндексНайденногоКаталога = КаталогиДляУдаления.Найти(Каталог);
		КаталогиДляУдаления.Удалить(ИндексНайденногоКаталога);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()

	Возврат ТекущаяДатаСеанса();

КонецФункции
 

#КонецОбласти
