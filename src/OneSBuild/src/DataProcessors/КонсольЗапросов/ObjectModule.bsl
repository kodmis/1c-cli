///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ИнформационнаяБазаФайловая Экспорт;

Перем ВерсияПлатформы Экспорт;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

// Параметры:
//   Объект - Произвольный - передаваемый объект обработки:
//     * Параметры - ТаблицаЗначений
//     * Запросы - ТаблицаЗначений
//   ИдентификаторТекущегоЗапроса - GUID текущего запроса.
//   ИдентификаторТекущегоПараметра - GUID текущего параметра.
//
// Возвращаемое значение:
//   Строка - адрес хранилища, где: 
//     * Параметры - ТаблицаЗначений
//     * Запросы - ТаблицаЗначений
//     * ИмяФайла - Строка
//     * ИдентификаторТекущегоЗапроса - Строка
//     * ИдентификаторТекущегоПараметра - Строка
//
Функция ПоместитьЗапросыВоВременноеХранилище(Объект, ИдентификаторТекущегоЗапроса, ИдентификаторТекущегоПараметра) Экспорт
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Запросы", Объект.Запросы.Выгрузить());
	ПараметрыПередачи.Вставить("Параметры", Объект.Параметры.Выгрузить());
	ПараметрыПередачи.Вставить("ИмяФайла", Объект.ИмяФайла);
	ПараметрыПередачи.Вставить("ИдентификаторТекущегоЗапроса", ИдентификаторТекущегоЗапроса);
	ПараметрыПередачи.Вставить("ИдентификаторТекущегоПараметра", ИдентификаторТекущегоПараметра);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыПередачи);
	Возврат АдресХранилища;
	
КонецФункции

// Помещает во внутренне хранилище настройки обработки.
// 
// Параметры:
//   Объект - передаваемый Объект обработки.
//
Функция ПоместитьНастройкиВоВременноеХранилище(Объект) Экспорт
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ИспользоватьАвтосохранение", Объект.ИспользоватьАвтосохранение);
	ПараметрыПередачи.Вставить("ПериодАвтосохранения", Объект.ПериодАвтосохранения);
	ПараметрыПередачи.Вставить("ВыводитьВРезультатахЗапросаЗначенияСсылок", Объект.ВыводитьВРезультатахЗапросаЗначенияСсылок);
	ПараметрыПередачи.Вставить("ЧередованиеЦветовВРезультатеЗапроса", Объект.ЧередованиеЦветовВРезультатеЗапроса);
	ПараметрыПередачи.Вставить("ТипОбхода", Объект.ТипОбхода);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыПередачи);
	Возврат АдресХранилища;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С XML-ФАЙЛАМИ

// Записывает Запросы(текст и параметры запроса) в файл XML.
//
// Параметры:
//  ИмяФайла - Строка - имя файла XML.
//  Объект - Произвольный - передаваемый объект обработки, где:
//   * Параметры - ТаблицаЗначений
//   * Запросы - ТаблицаЗначений:
//     ** Имя - Строка
//     ** Идентификатор - Число
//
Функция ЗаписатьЗапросыВФайлXML(знач Объект) Экспорт
	
	
	ФайлXML = Новый ЗаписьXML;
	ИмяФайла = ПолучитьИмяВременногоФайла("q1c");
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.ЗаписатьОбъявлениеXML();
	ФайлXML.ЗаписатьНачалоЭлемента("querylist");
	// Цикл запросов.
	Для каждого ТекЗапрос Из Объект.Запросы Цикл
		ФайлXML.ЗаписатьНачалоЭлемента("query");
		ФайлXML.ЗаписатьАтрибут("name", ТекЗапрос.Имя);
			ФайлXML.ЗаписатьНачалоЭлемента("text");
			ТекстЗапроса = ТекЗапрос.Текст;
			
			Для Счетчик = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
				ПереносСтр	= Символы.ВК + Символы.ПС;
				ТекСтрока 	= СтрПолучитьСтроку(ТекстЗапроса, Счетчик);
				ФайлXML.ЗаписатьТекст(ТекСтрока);
				ФайлXML.ЗаписатьБезОбработки(ПереносСтр);
			КонецЦикла;
			ФайлXML.ЗаписатьКонецЭлемента();
			ИдентификаторЗапроса = ТекЗапрос.Идентификатор;
			
			Если ЗначениеЗаполнено(ТекЗапрос.АдресХранилищаПланаЗапроса) Тогда
				СтруктураПланаЗапроса = ПолучитьИзВременногоХранилища(ТекЗапрос.АдресХранилищаПланаЗапроса);
				Если СтруктураПланаЗапроса <> Неопределено Тогда
					Если СтруктураПланаЗапроса.ПланЗапросаАктуален Тогда
						СКЛЗапрос = СтруктураПланаЗапроса.СКЛЗапрос;
						ПланВыполненияЗапроса = СтруктураПланаЗапроса.ПланВыполненияЗапроса;
						ТипСУБД = СтруктураПланаЗапроса.ТипСУБД;
					Иначе
						СКЛЗапрос = "";
						ПланВыполненияЗапроса = "";
						ТипСУБД = "";
					КонецЕсли;
				Иначе
					СКЛЗапрос = "";
					ПланВыполненияЗапроса = "";
					ТипСУБД = "";
				КонецЕсли;
			Иначе
				СКЛЗапрос = "";
				ПланВыполненияЗапроса = "";
				ТипСУБД = "";
			КонецЕсли;
			
			ФайлXML.ЗаписатьНачалоЭлемента("textSQL");
			Для Счетчик = 1 По СтрЧислоСтрок(СКЛЗапрос) Цикл
				ПереносСтр	= Символы.ВК + Символы.ПС;
				ТекСтрока 	= СтрПолучитьСтроку(СКЛЗапрос, Счетчик);
				ФайлXML.ЗаписатьТекст(ТекСтрока);
				ФайлXML.ЗаписатьБезОбработки(ПереносСтр);
			КонецЦикла;
			ФайлXML.ЗаписатьКонецЭлемента();
			
			ФайлXML.ЗаписатьНачалоЭлемента("planSQL");
			Для Счетчик = 1 По СтрЧислоСтрок(ПланВыполненияЗапроса) Цикл
				ПереносСтр	= Символы.ВК + Символы.ПС;
				ТекСтрока 	= СтрПолучитьСтроку(ПланВыполненияЗапроса, Счетчик);
				ФайлXML.ЗаписатьТекст(ТекСтрока);
				ФайлXML.ЗаписатьБезОбработки(ПереносСтр);
			КонецЦикла;
			ФайлXML.ЗаписатьКонецЭлемента();
			
			ФайлXML.ЗаписатьНачалоЭлемента("typeSQL");
			Для Счетчик = 1 По СтрЧислоСтрок(ТипСУБД) Цикл
				ПереносСтр	= Символы.ВК + Символы.ПС;
				ТекСтрока 	= СтрПолучитьСтроку(ТипСУБД, Счетчик);
				ФайлXML.ЗаписатьТекст(ТекСтрока);
				ФайлXML.ЗаписатьБезОбработки(ПереносСтр);
			КонецЦикла;
			ФайлXML.ЗаписатьКонецЭлемента();
			
			// Запись параметров в XML-файл.
			Если Объект.Параметры.Количество() > 0 Тогда
				ФайлXML.ЗаписатьНачалоЭлемента("parameters");
				Для каждого ТекПараметр Из Объект.Параметры Цикл
					Если ТекПараметр.ИдентификаторЗапроса = ИдентификаторЗапроса Тогда
						ИмяПараметра		= ТекПараметр.Имя;
						ТипПараметра		= ТекПараметр.Тип;
						Значение			= ТекПараметр.Значение;
						Если ПустаяСтрока(Значение) Тогда
							ЗначениеПараметра = "";
						Иначе
							ЗначениеПараметра = ЗначениеИзСтрокиВнутр(ТекПараметр.Значение);
						КонецЕсли;
						
						ФайлXML.ЗаписатьНачалоЭлемента("parameter");
						ФайлXML.ЗаписатьАтрибут("name", ИмяПараметра);
						Если ТипПараметра = "СписокЗначений" Тогда 
							ФайлXML.ЗаписатьАтрибут("type", ТипПараметра);
							ЗаписатьСписокЗначенийВXML(ФайлXML, ЗначениеПараметра);
						ИначеЕсли ТипПараметра = "ТаблицаЗначений" Тогда
							ФайлXML.ЗаписатьАтрибут("type", ТипПараметра);
							
							Колонки = ЗначениеПараметра.Колонки.Количество();
							Строки = ЗначениеПараметра.Количество();
							
							ФайлXML.ЗаписатьАтрибут("colcount", XMLСтрока(Колонки));
							ФайлXML.ЗаписатьАтрибут("rowcount", XMLСтрока(Строки));
							
							ЗаписатьТаблицуЗначенийВXML(ФайлXML, ЗначениеПараметра);
						ИначеЕсли ТипПараметра = "МоментВремени" Тогда
							ФайлXML.ЗаписатьАтрибут("type", ТипПараметра);
							ЗаписатьМоментВремениВXML(ФайлXML, ЗначениеПараметра);
						ИначеЕсли ТипПараметра = "Граница" Тогда
							ФайлXML.ЗаписатьАтрибут("type", ТипПараметра);
							ЗаписатьГраницуВXML(ФайлXML, ЗначениеПараметра);
						Иначе
							ИмяТипа = ИмяТипаИзЗначения(ЗначениеПараметра);
							ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
							ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(ЗначениеПараметра));
						КонецЕсли;
						ФайлXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
				КонецЦикла;
				ФайлXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		ФайлXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.Закрыть();
	
	ВозвращаемоеЗначение = Новый ДвоичныеДанные(ИмяФайла);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Записывает строки списка значений в Файл XML.
//
// Параметры:
//  ФайлXML - ЗаписьXML
//  Значение - СписокЗначений
//
Процедура ЗаписатьСписокЗначенийВXML(ФайлXML, Значение)
	
	Если ТипЗнч(Значение) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрСписка Из Значение Цикл
		ЗначениеЭлементаСписка	= СтрСписка.Значение;
		// Определение имени типа.
		ИмяТипа = ИмяТипаИзЗначения(ЗначениеЭлементаСписка); 
		
		ФайлXML.ЗаписатьНачалоЭлемента("item");
			ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
			ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(ЗначениеЭлементаСписка));
		ФайлXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//   ФайлXML - ЗаписьXML
//   Значение - ТаблицаЗначений
//
Процедура ЗаписатьТаблицуЗначенийВXML(ФайлXML, Значение)
	
	Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	КолКолонок 	= Значение.Колонки.Количество();
	КолСтрок	= Значение.Количество();
	
	Для СтрокаИндекс = 0 По КолСтрок - 1 Цикл
		Для КолонкаИндекс = 0 По КолКолонок - 1 Цикл
			ЗначениеЭлементаСписка	= Значение.Получить(СтрокаИндекс).Получить(КолонкаИндекс);
			ИмяКолонки = Значение.Колонки.Получить(КолонкаИндекс).Имя;
			// Определение имени типа.
			ИмяТипа = ИмяТипаИзЗначения(ЗначениеЭлементаСписка);
			Если ИмяТипа = "Строка" Тогда 
				Длина = Значение.Колонки.Получить(КолонкаИндекс).ТипЗначения.КвалификаторыСтроки.Длина;
			Иначе 
				Длина = 0;
			КонецЕсли;
			
			ФайлXML.ЗаписатьНачалоЭлемента("item");
			ФайлXML.ЗаписатьАтрибут("nameCol", ИмяКолонки);
			ФайлXML.ЗаписатьАтрибут("row", XMLСтрока(СтрокаИндекс));
			ФайлXML.ЗаписатьАтрибут("col", XMLСтрока(КолонкаИндекс));
			ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
			ФайлXML.ЗаписатьАтрибут("length", XMLСтрока(Длина));
			ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(ЗначениеЭлементаСписка));
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Записывает момент времени в Файл XML.
//
// Параметры:
//  ФайлXML - ЗаписьXML
//  Значение - момент времени.
//
Процедура ЗаписатьМоментВремениВXML(ФайлXML, Значение)
	
	Если ТипЗнч(Значение) <> Тип("МоментВремени") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени типа.
	ИмяТипа = ИмяТипаИзЗначения(Значение.Ссылка);
	
	ФайлXML.ЗаписатьНачалоЭлемента("item");
		Если Значение.Ссылка <> Неопределено Тогда 
			ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
			ФайлXML.ЗаписатьАтрибут("valueRef", XMLСтрока(Значение.Ссылка));
		КонецЕсли;
		ФайлXML.ЗаписатьАтрибут("valueDate", XMLСтрока(Значение.Дата));
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Записывает границу.
//
Процедура ЗаписатьГраницуВXML(ФайлXML, Граница)
	
	Если ТипЗнч(Граница) <> Тип("Граница") Тогда
		Возврат;
	КонецЕсли;
	
	ФайлXML.ЗаписатьНачалоЭлемента("divide");
		// Определение имени типа.
		ИмяТипа 			= ИмяТипаИзЗначения(Граница.Значение); 
		ТипЗначенияГраницы 	= ТипЗнч(Граница.Значение);
		
		// Запись в строку вида границы.
		ИмяВидаГраницы = Строка(Граница.ВидГраницы);
		
		ФайлXML.ЗаписатьАтрибут("type", ИмяТипа);
		ФайлXML.ЗаписатьАтрибут("valueDiv", ИмяВидаГраницы);
		
		Если ТипЗначенияГраницы <> Тип("МоментВремени") Тогда
			ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Граница.Значение));
		Иначе
			ЗаписатьМоментВремениВXML(ФайлXML, Граница.Значение);
		КонецЕсли;
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Параметры:
//   ДвоичныеДанные - ДвоичныеДанные
// Возвращаемое значение:
//   ОбработкаОбъект.КонсольЗапросов
//
Функция ПрочитатьЗапросыИзФайлаXML(ДвоичныеДанные) Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла("q1c");
	ДвоичныеДанные.Записать(ИмяФайла);
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.Прочитать();
	// Чтение всех запросов.
	Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "querylist" Тогда
		Пока ФайлXML.Прочитать() Цикл 
			// Чтение запроса.
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "query" Тогда
				Пока ФайлXML.ПрочитатьАтрибут() Цикл 
					Если ФайлXML.Имя = "name" Тогда
						// Добавление запроса в таблицу.
						текЭлементЗапроса 				= Запросы.Добавить();
						текЭлементЗапроса.Идентификатор	= Новый УникальныйИдентификатор;
						текЭлементЗапроса.Имя 			= ФайлXML.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПланаЗапроса = Новый Структура;
				СтруктураПланаЗапроса.Вставить("СКЛЗапрос","");
				СтруктураПланаЗапроса.Вставить("ПланВыполненияЗапроса","");
				СтруктураПланаЗапроса.Вставить("ТипСУБД","");
				СтруктураПланаЗапроса.Вставить("ПланЗапросаАктуален",Истина);
				
				Пока ФайлXML.Прочитать() Цикл 
					Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "text" Тогда
						ФайлXML.Прочитать();
						текЭлементЗапроса.Текст = ФайлXML.Значение;
					// Чтение параметров.
					КонецЕсли;
					Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "parameters" Тогда
						Пока ФайлXML.Прочитать() Цикл
							// Чтение отдельного параметра.
							Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "parameter" Тогда
								Пока ФайлXML.ПрочитатьАтрибут() Цикл 
									// Чтение имени атрибута.									
									Если ФайлXML.Имя = "name" Тогда
										текПараметрЗапроса 						= Параметры.Добавить();
										текПараметрЗапроса.Идентификатор  		= Новый УникальныйИдентификатор;
										текПараметрЗапроса.Имя					= ФайлXML.Значение;
										текПараметрЗапроса.ИдентификаторЗапроса	= текЭлементЗапроса.Идентификатор;
									КонецЕсли;
									
									// Чтение типа параметра.
									Если ФайлXML.Имя = "type" Тогда
										ТипЭлемента 			= Тип(ФайлXML.Значение);
										текПараметрЗапроса.Тип	= Строка(ФайлXML.Значение);
									КонецЕсли;
									
									// Чтение значения параметра.
									Если ФайлXML.Имя = "value" Тогда
										Значение					= XMLЗначение(ТипЭлемента, ФайлXML.Значение);
										текПараметрЗапроса.Значение = ЗначениеВСтрокуВнутр(Значение);
									КонецЕсли;
									
									// Чтение количества колонок Таблицы Значений.
									Если ФайлXML.Имя = "colcount" Тогда
										КоличествоКолонок 	= Число(ФайлXML.Значение);
									КонецЕсли;
									
									// Чтение количества строк Таблицы Значений.
									Если ФайлXML.Имя = "rowcount" Тогда
										КоличествоСтрок 	= Число(ФайлXML.Значение);
									КонецЕсли;
								КонецЦикла;
								
								// Чтение отдельных типов.
								// Для отдельных типов предусмотрено индивидуальное чтение параметров.
								// Под отдельными типами понимаются: Список значений, Таблица значений, 
								// Момент Времени, Граница.
								//
								// Список отдельных типов может увеличиваться.
								Если текПараметрЗапроса.Тип = "СписокЗначений" Тогда
									ПрочитатьСписокЗначенийИзXML(ФайлXML, текПараметрЗапроса);
								КонецЕсли; 
								Если текПараметрЗапроса.Тип = "ТаблицаЗначений" Тогда
									ПрочитатьТаблицуЗначенийИзXML(ФайлXML, текПараметрЗапроса, КоличествоСтрок, КоличествоКолонок);
								КонецЕсли;
								Если текПараметрЗапроса.Тип = "МоментВремени" Тогда
									ПрочитатьМоментВремениИзXML(ФайлXML, текПараметрЗапроса);
								КонецЕсли;
								Если текПараметрЗапроса.Тип = "Граница" Тогда
									ПрочитатьГраницуИзXML(ФайлXML, текПараметрЗапроса);
								КонецЕсли;
							КонецЕсли;
							Если ПроверкаКонцаТэгов(ФайлXML) Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "textSQL" Тогда
						ФайлXML.Прочитать();
						СтруктураПланаЗапроса.СКЛЗапрос = СокрЛП(ФайлXML.Значение);
					КонецЕсли;
					
					Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "planSQL" Тогда
						ФайлXML.Прочитать();
						СтруктураПланаЗапроса.ПланВыполненияЗапроса = СокрЛП(ФайлXML.Значение);
					КонецЕсли;
					
					Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "typeSQL" Тогда
						ФайлXML.Прочитать();
						СтруктураПланаЗапроса.ТипСУБД = СокрЛП(ФайлXML.Значение);
					КонецЕсли;
					
					Если ПроверкаКонцаТэгов(ФайлXML) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла; // Обход по тэгам "query".
			КонецЕсли; // Если "query".
			Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "query" Тогда
				Если СтруктураПланаЗапроса.СКЛЗапрос <> "" И СтруктураПланаЗапроса.ПланВыполненияЗапроса <> "" И СтруктураПланаЗапроса.ТипСУБД <> "" Тогда
					текЭлементЗапроса.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(СтруктураПланаЗапроса, Новый УникальныйИдентификатор());
				Иначе
					текЭлементЗапроса.АдресХранилищаПланаЗапроса = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;// Обход по запросам.
	КонецЕсли;// Если "querylist".
	ФайлXML.Закрыть();
	УдалитьФайлы(ИмяФайла);
	Возврат ЭтотОбъект;
	
КонецФункции

// Читает Список значений.
//
// Параметры:
//  ФайлXML - чтение XML.
//  ПараметрЗапроса - текущий параметр.
//
Процедура ПрочитатьСписокЗначенийИзXML(ФайлXML, ПараметрЗапроса)
	
	СписокЗН = Новый СписокЗначений;
	Пока ФайлXML.Прочитать() Цикл
		Если ФайлXML.Имя = "item" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				Если ФайлXML.Имя = "type" Тогда
					ТипЭлемента = Тип(ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "value" Тогда
					// Чтение значения.
					Значение				= XMLЗначение(ТипЭлемента, ФайлXML.Значение);
					ЗначениеЭлементаСписка 	= Значение;
				КонецЕсли;	
			КонецЦикла;	
			СписокЗН.Добавить(ЗначениеЭлементаСписка);
		ИначеЕсли ФайлXML.Имя <> "item" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрЗапроса.Значение = ЗначениеВСтрокуВнутр(СписокЗН);
	
КонецПроцедуры

// Параметры:
//   ФайлXML - ЧтениеXML
//   ПараметрЗапроса - ТаблицаЗначений
//   КоличествоСтрок - Число
//   КоличествоКолонок - Число
//
Процедура ПрочитатьТаблицуЗначенийИзXML(ФайлXML, ПараметрЗапроса, КоличествоСтрок, КоличествоКолонок)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	МассивКолонок = Новый Массив;
	
	Пока ФайлXML.Прочитать() Цикл 
		Если ФайлXML.Имя = "item" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				Если ФайлXML.Имя = "col" Тогда
					ИндексКолонки 	= Число(ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "row" Тогда
					ИндексСтроки 	= Число(ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "type" Тогда
					ТипЭлемента = Тип(ФайлXML.Значение);
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЭлемента);
				КонецЕсли;
				Если ФайлXML.Имя = "nameCol" Тогда
					ИмяКолонки	 = ФайлXML.Значение;
				КонецЕсли;
				Если ФайлXML.Имя = "length" Тогда
					Длина		 = ФайлXML.Значение;
				КонецЕсли;
				Если ФайлXML.Имя = "value" Тогда
					Значение		= XMLЗначение(ТипЭлемента, ФайлXML.Значение);
					ЗначениеЯчейки 	= Значение;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыСтроки = Новый КвалификаторыСтроки(Длина);
			Если МассивКолонок.Количество() - 1 < ИндексКолонки Тогда
				ОписаниеТипов = Новый ОписаниеТипов();
				ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, МассивТипов,,, ПараметрыСтроки);
				
				СписокЗначенийЯчеекКолонки  = Новый СписокЗначений;
				СписокЗначенийЯчеекКолонки.Вставить(ИндексСтроки,ЗначениеЯчейки);
				
				СтруктураКолонки = КолонкиВXMLФайле(ИмяКолонки, ОписаниеТипов, СписокЗначенийЯчеекКолонки);
				МассивКолонок.Вставить(ИндексКолонки, СтруктураКолонки);
				
			Иначе
				ОписаниеТипов = МассивКолонок.Получить(ИндексКолонки).ОписаниеТипов;
				ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, МассивТипов,,, ПараметрыСтроки);
				СписокЗначенийЯчеекКолонки  = МассивКолонок.Получить(ИндексКолонки).СписокЗначенийЯчеекКолонки;
				СписокЗначенийЯчеекКолонки.Вставить(ИндексСтроки,ЗначениеЯчейки);
				
				МассивКолонок.Удалить(ИндексКолонки);
				СтруктураКолонки = КолонкиВXMLФайле(ИмяКолонки, ОписаниеТипов, СписокЗначенийЯчеекКолонки);
				
				МассивКолонок.Вставить(ИндексКолонки, СтруктураКолонки);
			КонецЕсли;	
		ИначеЕсли ФайлXML.Имя <> "item" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КолКолонок = МассивКолонок.Количество();
	Для ИндексКолонок = 0 По КолКолонок - 1 Цикл
		ОписаниеКолонок =  МассивКолонок.Получить(ИндексКолонок); // см. КолонкиВXMLФайле
		ИмяКолонки 		= ОписаниеКолонок.Имя;
		ТипКолонки 		= МассивКолонок.Получить(ИндексКолонок).ОписаниеТипов;
		ТаблицаЗначений.Колонки.Вставить(ИндексКолонок, ИмяКолонки, ТипКолонки, ИмяКолонки);
		
		СписокЗначений 	= МассивКолонок.Получить(ИндексКолонок).СписокЗначенийЯчеекКолонки;
		КолСтрок = СписокЗначений.Количество();
		Для ИндексСтрок = 0 По КолСтрок - 1 Цикл
			ЗначениеЯчейки = СписокЗначений.Получить(ИндексСтрок).Значение;
			Если ИндексСтрок <= ТаблицаЗначений.Количество() - 1 Тогда 
				ТаблицаЗначений.Получить(ИндексСтрок).Установить(ИндексКолонок, ЗначениеЯчейки);
			Иначе
				ТаблицаЗначений.Вставить(ИндексСтрок).Установить(ИндексКолонок, ЗначениеЯчейки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрЗапроса.Значение = ЗначениеВСтрокуВнутр(ТаблицаЗначений);
	
КонецПроцедуры

// Параметры:
//  ИмяКолонки - Строка
//  ОписаниеТипов - Структура:
//    * СписокЗначенийЯчеекКолонки - СписокЗначений
//    * ОписаниеТипов - ОписаниеТипов
//  СписокЗначенийЯчеекКолонки - ОписаниеТипов
// Возвращаемое значение:
//  Структура:
//   * Имя - Строка
//   * ОписаниеТипов - ОписаниеТипов
//   * СписокЗначенийЯчеекКолонки - СписокЗначений
// 
Функция КолонкиВXMLФайле(Знач ИмяКолонки, Знач ОписаниеТипов, Знач СписокЗначенийЯчеекКолонки)
	
	СтруктураКолонки = Новый Структура;
	СтруктураКолонки.Вставить("Имя", ИмяКолонки);
	СтруктураКолонки.Вставить("ОписаниеТипов", ОписаниеТипов);
	СтруктураКолонки.Вставить("СписокЗначенийЯчеекКолонки", СписокЗначенийЯчеекКолонки);
	
	Возврат СтруктураКолонки;
	
КонецФункции


// Читает Момент времени.
//
// Параметры:
//   ФайлXML - чтение XML.
//   ПараметрЗапроса - текущий параметр.
//
Процедура ПрочитатьМоментВремениИзXML(ФайлXML, ПараметрЗапроса)
	
	Пока ФайлXML.Прочитать() Цикл 
		Если ФайлXML.Имя = "item" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				Если ФайлXML.Имя = "type" Тогда
					ТипЭлемента = Тип(ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "valueRef" Тогда
					ЗначениеСсылки	= XMLЗначение(ТипЭлемента, ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "valueDate" Тогда
					ЗначениеДаты	= XMLЗначение(Тип("Дата"), ФайлXML.Значение);
				КонецЕсли;
			КонецЦикла;
			МВ = Новый МоментВремени(ЗначениеДаты, ЗначениеСсылки);
		ИначеЕсли ФайлXML.Имя <> "item" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрЗапроса.Значение	= ЗначениеВСтрокуВнутр(МВ);
	
КонецПроцедуры

// Читает Границу.
//
// Параметры:
//  ФайлXML - чтение XML.
//  ПараметрЗапроса - текущий параметр.
//
Процедура ПрочитатьГраницуИзXML(ФайлXML, ПараметрЗапроса)
	
	Пока ФайлXML.Прочитать() Цикл
		Если ФайлXML.Имя = "divide" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				Если ФайлXML.Имя = "type" Тогда
					ТипЭлемента = Тип(ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "value" Тогда
					Значение	= XMLЗначение(ТипЭлемента, ФайлXML.Значение);
				КонецЕсли;
				Если ФайлXML.Имя = "valueDiv" Тогда
					Вид	= XMLЗначение(Тип("Строка"), ФайлXML.Значение);
					Вид	= ОпределениеВидаГраницы(Вид);
				КонецЕсли;
			КонецЦикла;	
			Если ТипЭлемента = Тип("МоментВремени") Тогда
				ПрочитатьМоментВремениИзXML(ФайлXML, ПараметрЗапроса);
				Значение = ЗначениеИзСтрокиВнутр(ПараметрЗапроса.Значение);
			КонецЕсли;
			
			Граница = Новый Граница(Значение, Вид);
		ИначеЕсли ФайлXML.Имя <> "divide" Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрЗапроса.Значение = ЗначениеВСтрокуВнутр(Граница);
	
КонецПроцедуры

// Определяет условие конца тэга "query" или "parameters".
//
// Параметры:
//  ФайлXML - ЧтениеXML
//
Функция ПроверкаКонцаТэгов(ФайлXML)
	
	Если (ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "query")
		Или (ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "parameters") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ЗАПРОСОМ

// Считывает параметры из текста запроса.
//
// Параметры:
//  ТекстЗапроса - Строка
//  ИдентификаторЗапроса - Строка - уникальный идентификатор запроса.
//
// Возвращаемое значение:
//  Массив из см. ДобавлениеНовогоПараметра
//
Функция СчитатьПараметрыЗапроса(ТекстЗапроса, ИдентификаторЗапроса) Экспорт
	
	МассивСтруктуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	// Заполняем параметрами таблицу параметров.
	ПарЗап = Запрос.НайтиПараметры();
	
	Для каждого СтрПараметры Из ПарЗап Цикл
		РезультатСтруктура = ДобавлениеНовогоПараметра(СтрПараметры, ИдентификаторЗапроса);
		МассивСтруктуры.Добавить(РезультатСтруктура);
	КонецЦикла;
	
	Возврат МассивСтруктуры;
	
КонецФункции

// Добавляет новый параметр в структуру параметров.
//
// Параметры:
//  ТекущийПрочитанныйПараметр - ОписаниеПараметраЗапроса - текущий параметр, прочитанный из текста запроса.
//  ИдентификаторЗапроса - Строка - GUID запроса
//
// Возвращаемое значение:
//  Структура:
//   * ИдентификаторЗапроса - Строка
//   * Имя - Строка
//   * Тип - Строка
//   * Значение - Строка
//
Функция ДобавлениеНовогоПараметра(ТекущийПрочитанныйПараметр, ИдентификаторЗапроса)
	
	ЭлементПараметр = Новый Структура("ИдентификаторЗапроса, Имя, Тип, Значение",
		ИдентификаторЗапроса, ТекущийПрочитанныйПараметр.Имя);
	
	// Смотрим на первый тип из списка, если есть.
	ДоступныеТипы = ТекущийПрочитанныйПараметр.ТипЗначения.Типы();
	Если ДоступныеТипы.Количество()=0 Тогда
		// Считаем строкой
		ЭлементПараметр.Тип = "Строка";
		ЭлементПараметр.Значение = ЗначениеВСтрокуВнутр("");
		Возврат ЭлементПараметр;
	КонецЕсли;
	
	// Формируем описание типа из первого доступного типа.
	Массив = Новый Массив;
	Массив.Добавить( ДоступныеТипы.Получить(0) );
	НовоеОписаниеТипов = Новый ОписаниеТипов(Массив);
	
	Значение = НовоеОписаниеТипов.ПривестиЗначение(Неопределено);
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	СформироватьСписокТипов(СписокДобавленныхТипов);
	
	Флаг = Ложь;
	СтроковоеПредставлениеТипа = Строка(ТипЗнч(Значение));
	Для каждого ЭлементСписка Из СписокДобавленныхТипов Цикл
		Если ЭлементСписка.Представление = СтроковоеПредставлениеТипа Тогда
			Флаг = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементПараметр.Тип = ?(Флаг, СтроковоеПредставлениеТипа, XMLТип(ТипЗнч(Значение)).ИмяТипа);
	ЭлементПараметр.Значение = ЗначениеВСтрокуВнутр(Значение);
	
	Возврат ЭлементПараметр;
	
КонецФункции

// Загружает параметры в запрос.
// Если строковое представление значения - пустая строка, тогда значение параметра является Неопределено.
//
// Параметры:
//  Запрос - передаваемый запрос.
//  ПараметрыЗапроса - передаваемые параметры для запроса.
//
Процедура ЗагрузкаПараметровВЗапрос(Запрос, ПараметрыЗапроса)
	
	Для каждого ЭлементПараметр Из ПараметрыЗапроса Цикл
		СтрокаЗначение = ЭлементПараметр.Значение;
		Если ПустаяСтрока(СтрокаЗначение) Тогда
			Значение = Неопределено;
		Иначе
			Значение = ЗначениеИзСтрокиВнутр(СтрокаЗначение);
		КонецЕсли;
		Запрос.УстановитьПараметр(ЭлементПараметр.Имя, Значение);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запрос.
//
// Параметры:
//  ТекстЗапроса - Строка.
//  ПараметрыЗапроса - Массив - параметры запроса.
//  ТДРезультатаЗапроса - ТабличныйДокумент - результат запроса.
//  ПараметрыВыводаЗапроса - Структура:
//    * ВыводитьВременныеТаблицы - Булево.
//    * ВыводитьИдентификатор - Булево - выводить GUID для ссылок или нет.
//    * ПорядокОбхода - Строка - порядок обхода результата запроса.
//    * ИспользованиеЧередования - Булево - использовать чередование или нет в результирующем табличном документе.
//  ОтчетПоВыполнениюЗапроса - Структура:
//    * ВремяВыполнения - Число - время выполнения запроса.
//    * КоличествоСтрок - Число - количество строк в результате запроса.
//    * ТекстСообщения - Строка - текст сообщения об ошибке.
//  МеткаЗапроса - Строка - метка запроса для поиска его в технологическом журнале.
//
Функция ВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, ТДРезультатаЗапроса, ПараметрыВыводаЗапроса, ОтчетПоВыполнениюЗапроса, МеткаЗапроса) Экспорт
	
	Если ЗначениеЗаполнено(МеткаЗапроса) Тогда
		ЗаписатьМеткуЗапроса(ТекстЗапроса, МеткаЗапроса, "begin");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(МеткаЗапроса) Тогда
		ЗаписатьМеткуЗапроса(ТекстЗапроса, МеткаЗапроса, "end");
	КонецЕсли;
	
	// Массив текстов запросов.
	МассивТекстов = ПостроитьМассивТекстовЗапросов(ТекстЗапроса);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса ,"\;", ";"); // Экранирование точки с запятой.
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	// Загрузка параметров.
	ЗагрузкаПараметровВЗапрос(Запрос, ПараметрыЗапроса);
	
	// Проверка на правильность запросов.
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МассивЗапросов = Запрос.ВыполнитьПакет();
	Конец  = ТекущаяУниверсальнаяДатаВМиллисекундах() ;
	ОтчетПоВыполнениюЗапроса.ВремяВыполнения = (Конец - Начало) / 1000;
	
	МассивДанныхПоЗапросу = Новый Структура;
	МассивДанныхПоЗапросу.Вставить("Запрос", Запрос);
	МассивДанныхПоЗапросу.Вставить("МассивТекстов", МассивТекстов);
	МассивДанныхПоЗапросу.Вставить("МассивЗапросов", МассивЗапросов);
	МассивДанныхПоЗапросу.Вставить("МеткаЗапроса", МеткаЗапроса);
	
	Успешно = ВывестиРезультатЗапросов(ТДРезультатаЗапроса, МассивДанныхПоЗапросу, ПараметрыЗапроса, ПараметрыВыводаЗапроса, ОтчетПоВыполнениюЗапроса);
	Если Не Успешно Тогда
		Если ВозможноОшибкаИзЗаТочкиСЗапятой(ТекстЗапроса) Тогда 
			ОтчетПоВыполнениюЗапроса.ТекстСообщения = НСтр("ru = 'Результат запроса не был выведен. Возможно не экранирована точка с запятой. Для экранирования точки с запятой используется обратный слеш -""\;""(см. справку)'");
		Иначе
			ОтчетПоВыполнениюЗапроса.ТекстСообщения = НСтр("ru = 'Запрос не был выполнен, т.к. текст запроса некорректный'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивЗапросов;
	
КонецФункции

Процедура ЗаписатьМеткуЗапроса(ТекстЗапроса, Метка, Статус)
	
	Если Статус = "begin" Тогда
		ТекстМетки = СтрЗаменить("ВЫБРАТЬ ""[Маркер]"" КАК МЕТКА ПОМЕСТИТЬ Marker_begin", "[Маркер]", 
			"Marker_" + Метка+ "_"+ Статус);
		ТекстЗапроса = ТекстМетки + Символы.ПС + ";" + Символы.ПС + ТекстЗапроса + Символы.ПС + ";" + Символы.ПС;
	Иначе
		ТекстМетки = СтрЗаменить("ВЫБРАТЬ ""[Маркер]"" КАК МЕТКА ПОМЕСТИТЬ Marker_end", "[Маркер]", 
			"Marker_" + Метка+ "_"+ Статус);
		ТекстЗапроса =  Символы.ПС + ТекстЗапроса + ТекстМетки + Символы.ПС + ";" + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив текстов запросов.
//
// Параметры:
//  ТекстЗапроса - Строка.
//
Функция ПостроитьМассивТекстовЗапросов(знач ТекстЗапроса)
	
	МассивТекстов = Новый Массив;
	Пока Не ПустаяСтрока(ТекстЗапроса) Цикл
		ТочкаСЗапятой = ";";
		ПозицияТочкиСЗапятой = СтрНайти(ТекстЗапроса, ТочкаСЗапятой);
		Если Сред(ТекстЗапроса, ПозицияТочкиСЗапятой - 1, 1) = "\" Тогда
			ПозицияТочкиСЗапятой = 0;
		КонецЕсли;
		Если ПозицияТочкиСЗапятой = 0 Тогда
			ТекстОчередногоЗапроса 	= ТекстЗапроса;
			ПозицияТочкиСЗапятой	= СтрДлина(ТекстЗапроса);
		Иначе
			ТекстОчередногоЗапроса = Лев(ТекстЗапроса, ПозицияТочкиСЗапятой - 1);
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОчередногоЗапроса) Тогда 
			МассивТекстов.Добавить(СокрЛП(ТекстОчередногоЗапроса));
		КонецЕсли;
		ТекстЗапроса = Сред(ТекстЗапроса, ПозицияТочкиСЗапятой + 1);
	КонецЦикла;
	
	Возврат МассивТекстов;
	
КонецФункции

// Возвращает есть ли в запросе иерархия.
//
// Параметры:
//  ТекстЗапроса - Строка
//
Функция НаличиеИерархииВЗапросе(ТекстЗапроса)
	
	Итоги	= "ИТОГИ";
	Позиция	= СтрНайти(ВРег(ТекстЗапроса), Итоги);
	
	Возврат ?(Позиция = 0, Ложь, Истина);
	
КонецФункции

// Возвращает имя временной таблицы.
//
// Параметры:
//  ТекстЗапроса - Строка
//  Буфер - Строка - переменная хранения строки вида 'ПОМЕСТИТЬ %ИмяВременнойТаблицы%'.
//  Позиция - Число - позиция после слова 'ПОМЕСТИТЬ' в тексте запроса.
//
Функция ПолучитьИмяВременнойТаблицы(ТекстЗапроса, Буфер, Позиция)
	
	ИмяТаблицы		= "";
	ДлиннаТекста 	= СтрДлина(ТекстЗапроса);
	
	// Добавление пустых символов к буферу.
	Для Индекс = Позиция По ДлиннаТекста Цикл
		Символ = Сред(ТекстЗапроса, Индекс, 1);
		Если ПустаяСтрока(Символ) Тогда
			Буфер = Буфер + Символ;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление имени временной таблицы.
	Для ИндексВременнойТаблицы = Индекс По ДлиннаТекста Цикл
		Символ = Сред(ТекстЗапроса, ИндексВременнойТаблицы, 1);
		Если Не ПустаяСтрока(Символ) Тогда
			Буфер 		= Буфер + Символ;
			ИмяТаблицы  = ИмяТаблицы + Символ; 
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТаблицы;
	
КонецФункции

// Возвращает имя запроса из текста запроса.
//
// Параметры:
//  ТекстЗапроса - Строка.
//
Функция ПолучитьИмяЗапроса(знач ТекстЗапроса)
	
	РезультатЗначение = НСтр("ru = 'Запрос:'") + " ";
	ДлинаТекста = СтрДлина(ТекстЗапроса);
	ФлагПредлогаИЗ = Истина;
	
	Пока ФлагПредлогаИЗ Цикл 
		СловоИЗ = "ИЗ";
		ДлинаИЗ = СтрДлина(СловоИЗ);
		ПозицияИЗ = СтрНайти(ВРег(ТекстЗапроса), СловоИЗ);
		Если ПозицияИЗ = 0 Тогда
			Возврат РезультатЗначение;
		КонецЕсли;
		
		СимволДоИЗ = Сред(ТекстЗапроса, ПозицияИЗ - 1, 1);
		СимволПослеИЗ = Сред(ТекстЗапроса, ПозицияИЗ + ДлинаИЗ, 1);
		Если ПустаяСтрока(СимволДоИЗ) И ПустаяСтрока(СимволПослеИЗ) Тогда
			ФлагПредлогаИЗ = Ложь;
		Иначе
			ТекстЗапроса = Сред(ТекстЗапроса, ПозицияИЗ + ДлинаИЗ);
		КонецЕсли;
	КонецЦикла;
	
	НачальнаяПозиция = ПозицияИЗ + ДлинаИЗ;
	
	Для Индекс = НачальнаяПозиция По ДлинаТекста Цикл
		Символ = Сред(ТекстЗапроса, Индекс, 1);
		Если Не ПустаяСтрока(Символ) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование имени таблицы.
	Для ИндексЗапроса = Индекс По ДлинаТекста Цикл
		Символ = Сред(ТекстЗапроса, ИндексЗапроса, 1);
		Если Не ПустаяСтрока(Символ) Тогда
			РезультатЗначение = РезультатЗначение + Символ;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатЗначение;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С РЕЗУЛЬТАТОМ ЗАПРОСА

Функция ВозможноОшибкаИзЗаТочкиСЗапятой(ТекстЗапроса)
	
	Позиция = 1;
	Пока Позиция >0 Цикл
		Позиция = СтрНайти(ТекстЗапроса, ";");
		Если Позиция > 0 Тогда 
			ТекстДляПоиска = Лев(ТекстЗапроса, Позиция);
			Если СтрНайти(ТекстДляПоиска, """") >0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = Сред(ТекстЗапроса, Позиция + 1);
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Вывод результата всех запросов с временными таблицами.
// 
// Если временная таблица, то выполняется запрос из массива текстов и формируется результат.
// Если не временная таблица, то результат берется из МассиваРезультатов.
//
// Параметры:
//  ТДРезультатаЗапроса - ТабличныйДокумент - результата запроса.
//  МассивДанныхПоЗапросу - Структура - содержит данные по запроса:
//    * Запрос - Запрос - передаваемый запрос.
//    * МассивТекстов - Массив - массив текстов запросов.
//    * МассивЗапросов - Массив - массив результатов запросов.
//  ПараметрыЗапроса - Массив -  параметры запроса.
//  ПараметрыВыводаЗапроса - Структура:
//    * ВыводитьВременныеТаблицы - Булево - выводить временные таблицы или нет.
//    * ВыводитьИдентификатор - Булево - выводить GUID для ссылок или нет.
//    * ПорядокОбхода - Строка- порядок обхода результата запроса.
//    * ИспользованиеЧередования - Булево - использовать чередование или нет в результирующем табличном документе.
//  ОтчетПоВыполнениюЗапроса - Структура:
//    * ВремяВыполнения - Число - время выполнения запроса.
//    * КоличествоСтрок - Число - количество строк в результате запроса.
//    * ТекстСообщения - Строка - текст сообщения об ошибке.
//
Функция ВывестиРезультатЗапросов(ТДРезультатаЗапроса, МассивДанныхПоЗапросу, ПараметрыЗапроса, ПараметрыВыводаЗапроса, ОтчетПоВыполнениюЗапроса)
	
	МассивТекстов = МассивДанныхПоЗапросу.МассивТекстов;
	МассивЗапросов = МассивДанныхПоЗапросу.МассивЗапросов;
	МеткаЗапроса = МассивДанныхПоЗапросу.МеткаЗапроса;
	
	КоличествоТекстовЗапросов 		= МассивТекстов.Количество();
	КоличествоРезультатовЗапросов   = МассивЗапросов.Количество();
		
	Если КоличествоРезультатовЗапросов <> КоличествоТекстовЗапросов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Накапливаемый запрос необходим для вывода временных таблиц, в том числе и удаляемых.
	НакапливаемыйЗапрос = Новый Запрос;
	ЗагрузкаПараметровВЗапрос(НакапливаемыйЗапрос, ПараметрыЗапроса);
	
	СимволРазделенияЗапросов = "";
	Для Индекс = 0 По КоличествоТекстовЗапросов - 1 Цикл
		ТекстЗапросаМассива = МассивТекстов.Получить(Индекс);
		
		Если ЗначениеЗаполнено(МеткаЗапроса) И СтрНайти(ТекстЗапросаМассива, МеткаЗапроса) > 0 Тогда
			КоличествоРезультатовЗапросов = КоличествоРезультатовЗапросов - 1;
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрокОдногоЗапроса = 0;
		МассивШириныКолонок          = Новый Массив;
		Свертка                      = ОпределитьСвертку(Индекс, КоличествоРезультатовЗапросов);
		
		Поместить        = "ПОМЕСТИТЬ";
		ДлинаПоместить   = СтрДлина(Поместить);
		ПозицияПоместить = СтрНайти(ВРег(ТекстЗапросаМассива), Поместить);
		
		Если Индекс > 0 Тогда
			СимволРазделенияЗапросов = ";";
		КонецЕсли;
		
		НакапливаемыйЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		НакопленныйТекст          = НакапливаемыйЗапрос.Текст + СимволРазделенияЗапросов + МассивТекстов.Получить(Индекс);
		НакапливаемыйЗапрос.Текст = НакопленныйТекст;
		
		// Если временная таблица и выводить временные таблицы.
		Если ПозицияПоместить <> 0 И ПараметрыВыводаЗапроса.ВыводитьВременныеТаблицы Тогда
			БуферПоместить = Сред(ТекстЗапросаМассива, ПозицияПоместить, ДлинаПоместить);
			ПозицияПослеПоместить = ПозицияПоместить + ДлинаПоместить;
			ИмяТаблицы = ПолучитьИмяВременнойТаблицы(ТекстЗапросаМассива, БуферПоместить, ПозицияПослеПоместить);
			
			// Выполнение запроса.
			ИмяЗапроса = "";
			Результат = ВыполнитьЗапросСВременнойТаблицей(НакапливаемыйЗапрос, ИмяТаблицы, ИмяЗапроса);
			
			Если Результат <> Неопределено Тогда
				ТД = ВывестиРезультатОдногоЗапроса(ИмяЗапроса, Результат, Свертка, ПараметрыВыводаЗапроса, Ложь, КоличествоСтрокОдногоЗапроса, МассивШириныКолонок);
				ТДРезультатаЗапроса.Вывести(ТД);
			КонецЕсли;
		ИначеЕсли ПозицияПоместить = 0 Тогда // Если таблица не временная, то используется готовый результат.
			Результат  = МассивЗапросов.Получить(Индекс);
			ИмяЗапроса = ПолучитьИмяЗапроса(ТекстЗапросаМассива);
			Иерархия   = НаличиеИерархииВЗапросе(ТекстЗапросаМассива);
			
			ТД = ВывестиРезультатОдногоЗапроса(ИмяЗапроса, Результат, Свертка, ПараметрыВыводаЗапроса, Иерархия, КоличествоСтрокОдногоЗапроса, МассивШириныКолонок);
			ТДРезультатаЗапроса.Вывести(ТД);
		КонецЕсли;
		ОтчетПоВыполнениюЗапроса.КоличествоСтрок = ОтчетПоВыполнениюЗапроса.КоличествоСтрок + КоличествоСтрокОдногоЗапроса;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Вывод результат запроса в табличный документ.
//
// Параметры:
//   ИмяЗапроса - Строка - имя запроса.
//   РезультатЗапроса - РезультатЗапроса.
//   Открыта - Булево - свернуть результат одного запроса в выводимом табличном документе.
//  ПараметрыВыводаЗапроса - Структура:
//    * ВыводитьВременныеТаблицы - Булево - выводить временные таблицы или нет.
//    * ВыводитьИдентификатор - Булево - выводить GUID для ссылок или нет.
//    * ПорядокОбхода - Строка - порядок обхода результата запроса.
//    * ИспользованиеЧередования - Булево - использовать чередование или нет в результирующем табличном документе.
//   Иерархия - Булево - наличие итогов в запросе.
//   КоличествоСтрок - Число - количество строк в результате данного запроса.
//   МассивШириныКолонок - Массив - максимальная ширина каждой колонки.
//
Функция ВывестиРезультатОдногоЗапроса(ИмяЗапроса, РезультатЗапроса, Открыта, ПараметрыВыводаЗапроса, Иерархия, КоличествоСтрок, МассивШириныКолонок)
	
	РезультатЗапроса = ВыгрузкаРезультата(РезультатЗапроса, ПараметрыВыводаЗапроса.ПорядокОбхода, Иерархия);
	
	ВыходнойМакет = Новый ТабличныйДокумент;
	МакетОдногоЗапроса = Новый ТабличныйДокумент;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат ВыходнойМакет;
	КонецЕсли;
	
	МакетОдногоЗапроса.Очистить();
	ВыходнойМакет.Очистить();
	
	УровеньВерхний = 1;
	УровеньЗаголовкаИДеталей = 2;
	
	Если ТипЗнч(РезультатЗапроса) = Тип("ДеревоЗначений") Тогда
		КоличествоСтрок = РезультатЗапроса.Строки.Количество();
	Иначе
		КоличествоСтрок = РезультатЗапроса.Количество();
	КонецЕсли;
	
	// Вывод в табличный документ.
	ЗаголовкиКолонок = ВывестиЗаголовкиКолонок(РезультатЗапроса, МассивШириныКолонок);
	ПараметрыВыводаЗапроса.Вставить("МассивШириныКолонок", МассивШириныКолонок);
	ПараметрыВыводаЗапроса.Вставить("КоличествоСтрок", КоличествоСтрок);
	ПараметрыВыводаЗапроса.Вставить("КоличествоСтрокВыведено", 0);
	Детали = ВывестиДетали(РезультатЗапроса, ПараметрыВыводаЗапроса);
	
	Если ПараметрыВыводаЗапроса.ВыводитьРезультатыЗапроса >= 0
		 И (ПараметрыВыводаЗапроса.КоличествоСтрокВыведено < ПараметрыВыводаЗапроса.КоличествоСтрок) Тогда
		КоличествоСтрокВЗаголовок = Формат(ПараметрыВыводаЗапроса.КоличествоСтрокВыведено, "ЧГ=0; ЧН=0") + " из "
			+ ПараметрыВыводаЗапроса.КоличествоСтрок;
	Иначе
		КоличествоСтрокВЗаголовок = Формат(ПараметрыВыводаЗапроса.КоличествоСтрок, "ЧГ=0; ЧН=0");
	КонецЕсли;
	
	Заголовок = ВывестиЗаголовокЗапроса(ИмяЗапроса, КоличествоСтрокВЗаголовок);
	
	МакетОдногоЗапроса.НачатьАвтогруппировкуСтрок();
	
	МакетОдногоЗапроса.Вывести(Заголовок, УровеньВерхний);
	МакетОдногоЗапроса.Вывести(ЗаголовкиКолонок, УровеньЗаголовкаИДеталей,, Открыта);
	МакетОдногоЗапроса.Вывести(Детали, УровеньЗаголовкаИДеталей,, Открыта);
	
	МакетОдногоЗапроса.ЗакончитьАвтогруппировкуСтрок();
	
	УстановкаАвтоШирины(ВыходнойМакет, МассивШириныКолонок);
	ВыходнойМакет.Вывести(МакетОдногоЗапроса).СоздатьФорматСтрок();
	
	Возврат ВыходнойМакет;
	
КонецФункции

// Возвращает ТаблицуЗначений или ДеревоЗначений результата.
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса
//  ПорядокОбхода - Строка
//  Иерархия - Булево - есть ли иерархия в запросе. 
//
// Возвращаемое значение:
//  ТаблицаЗначений
//  ДеревоЗначений
//
Функция ВыгрузкаРезультата(РезультатЗапроса, ПорядокОбхода, Иерархия)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВРег(ПорядокОбхода) = "АВТО" Тогда
		Если Иерархия Тогда
			ВыгруженноеЗначение = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Иначе
			ВыгруженноеЗначение = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КонецЕсли;
	Иначе
		ВыгруженноеЗначение = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;
	
	Возврат ВыгруженноеЗначение;
	
КонецФункции

Функция ВывестиЗаголовокЗапроса(ИмяЗапроса,КоличествоСтрок)
	
	Заголовок 	= Новый ТабличныйДокумент;
	
	МакетВывода = ПолучитьМакет("РезультатВыполненияЗапроса");
	
	ОбластьЗаголовок 	= МакетВывода.ПолучитьОбласть("ЗапросИмя");
	ОбластьЗаголовок.Параметры.ИмяЗапроса  		= ИмяЗапроса;
	ОбластьЗаголовок.Параметры.КоличествоСтрок	= КоличествоСтрок;
	Заголовок.Вывести(ОбластьЗаголовок);
	
	Возврат Заголовок;
	
КонецФункции

Функция ВывестиЗаголовкиКолонок(Результат, МассивШириныКолонок)
	
	МакетВывода 				= ПолучитьМакет("РезультатВыполненияЗапроса");
	
	ВерхнийЗаголовокКолонок		= Новый ТабличныйДокумент;
	
	ЗаголовокКолонок				= Новый ТабличныйДокумент;
	ОбластьЗаголовкиКолонок 		= МакетВывода.ПолучитьОбласть("ОбластьЯчейки");
	
	Область 	  					= ОбластьЗаголовкиКолонок.Область();
	Область.Шрифт 					= Новый Шрифт(,, Ложь);
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Область.ЦветФона				= ЦветаСтиля.ЦветФонаШапкиТаблицы;
	
	Индекс = 0;
	// Вывод заголовка таблицы.
	Для каждого Стр Из Результат.Колонки Цикл
		УстановкаМаксимальнойШириныВМассив(Индекс, Стр.Имя, МассивШириныКолонок);
		ОбластьЗаголовкиКолонок.Параметры.Значение	= Стр.Имя;
		Об = ЗаголовокКолонок.Присоединить(ОбластьЗаголовкиКолонок);
		Об.ШиринаКолонки = МассивШириныКолонок.Получить(Индекс);
		Индекс	= Индекс + 1;
	КонецЦикла;
	ВерхнийЗаголовокКолонок.Вывести(ЗаголовокКолонок);
	
	Возврат ВерхнийЗаголовокКолонок;
	
КонецФункции

Функция ВывестиДетали(Результат, ПараметрыВыводаЗапроса)
	
	Детали = Новый ТабличныйДокумент;
	Уровень = 1;
	Детали.НачатьАвтогруппировкуСтрок();
	
	Если ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
		ИндексСтроки = 1;
		КоличествоКолонок = Результат.Колонки.Количество();
		ВывестиДеталиСИерархией(Детали, Результат, ПараметрыВыводаЗапроса, Уровень, КоличествоКолонок, ИндексСтроки);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		КоличествоКолонок = Результат.Колонки.Количество();
		ВывестиДеталиБезИерархии(Детали, Результат, ПараметрыВыводаЗапроса, Уровень, КоличествоКолонок);
	КонецЕсли;
	
	Детали.ЗакончитьАвтогруппировкуСтрок();
	Возврат Детали;
	
КонецФункции

Процедура ВывестиДеталиБезИерархии(ОбщиеДетали, Результат, ПараметрыВыводаЗапроса, Уровень, КоличествоКолонок)
	
	МакетВывода = ПолучитьМакет("РезультатВыполненияЗапроса");
	ПараметрыВыводаЗапроса.КоличествоСтрок = Результат.Количество();
	ИндексСтроки = 1;
	
	КоличествоСтрокРезультатаЗапроса = ?(ПараметрыВыводаЗапроса.ВыводитьРезультатыЗапроса = -1,ПараметрыВыводаЗапроса.КоличествоСтрок, ПараметрыВыводаЗапроса.ВыводитьРезультатыЗапроса);
	
	Для каждого Строка Из Результат Цикл
		
		Если ИндексСтроки > КоличествоСтрокРезультатаЗапроса Тогда
			Прервать;
		КонецЕсли;
		
		Детали = Новый ТабличныйДокумент;
		ОбластьДетали = МакетВывода.ПолучитьОбласть("ОбластьЯчейки");
		
		Область = ОбластьДетали.ТекущаяОбласть;
		Область.Шрифт = Новый Шрифт(,, Ложь);
		Область.ЦветФона = ОпределитьЦветФонаПоИндексу(ИндексСтроки, ПараметрыВыводаЗапроса.ИспользованиеЧередования);
		
		Для Индекс = 0 По КоличествоКолонок - 1 Цикл
			Значение = Строка.Получить(Индекс);
			
			Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
				Значение = ПреобразоватьТаблицуЗначенийВСтроке(Значение);
			КонецЕсли;
			
			ЗначениеДляПараметра = Значение;
			Если ЭтоСсылка(ТипЗнч(Значение)) И ПараметрыВыводаЗапроса.ВыводитьИдентификатор Тогда
				Попытка
					ЗначениеДляПараметра = Значение.УникальныйИдентификатор();
				Исключение
					ЗначениеДляПараметра = Значение;
				КонецПопытки;
			КонецЕсли;
			ОбластьДетали.Параметры.Значение = ЗначениеДляПараметра;
			ОбластьДетали.Параметры.Расшифровка = Значение;
			УстановкаМаксимальнойШириныВМассив(Индекс, ЗначениеДляПараметра, ПараметрыВыводаЗапроса.МассивШириныКолонок);
			Детали.Присоединить(ОбластьДетали);
		КонецЦикла;
		ИндексСтроки = ИндексСтроки + 1;
		ПараметрыВыводаЗапроса.КоличествоСтрокВыведено = ПараметрыВыводаЗапроса.КоличествоСтрокВыведено + 1;
		ОбщиеДетали.Вывести(Детали, Уровень);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДеталиСИерархией(ОбщиеДетали, Результат, ПараметрыВыводаЗапроса , Уровень, КоличествоКолонок, ИндексСтроки, ТолькоПодсчетКоличестваСтрок = Ложь)
	
	
	МакетВывода = ПолучитьМакет("РезультатВыполненияЗапроса");
	Открыта = Истина;
	Подчиненные = Результат.Строки;
	ПараметрыВыводаЗапроса.КоличествоСтрок = ПараметрыВыводаЗапроса.КоличествоСтрок + Подчиненные.Количество();
	
	Если ТолькоПодсчетКоличестваСтрок Тогда
		Для Каждого Подчиненный Из Подчиненные Цикл
			ВывестиДеталиСИерархией(ОбщиеДетали, Подчиненный, ПараметрыВыводаЗапроса, Уровень + 1, КоличествоКолонок, ИндексСтроки, Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИндексСтрокиПоУровню = 1;
	КоличествоСтрокРезультатаЗапроса = ?(ПараметрыВыводаЗапроса.ВыводитьРезультатыЗапроса = -1, Подчиненные.Количество(), ПараметрыВыводаЗапроса.ВыводитьРезультатыЗапроса);
	
	Для Каждого Подчиненный Из Подчиненные Цикл
		
		Если ИндексСтрокиПоУровню > КоличествоСтрокРезультатаЗапроса Тогда
			ВывестиДеталиСИерархией(ОбщиеДетали, Подчиненный, ПараметрыВыводаЗапроса, Уровень + 1, КоличествоКолонок, ИндексСтроки, Истина);
			Продолжить;
		КонецЕсли;
		
		Детали = Новый ТабличныйДокумент;
		ОбластьДетали = МакетВывода.ПолучитьОбласть("ОбластьЯчейки");
		
		Область = ОбластьДетали.ТекущаяОбласть;
		Область.Шрифт = Новый Шрифт(,, Ложь);
		Область.ЦветФона = ОпределитьЦветФонаПоИндексу(ИндексСтроки, ПараметрыВыводаЗапроса.ИспользованиеЧередования);
		
		Для Индекс = 0 По КоличествоКолонок - 1 Цикл
			Значение = Подчиненный.Получить(Индекс);
			
			Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
				Значение = ПреобразоватьТаблицуЗначенийВСтроке(Значение);
			КонецЕсли;
			
			ЗначениеДляПараметра = Значение;
			// Определение количество отступа по уровню.
			Пробел = ОпределениеОтступаПоУровню(Уровень, Индекс, Открыта);
			
			Если ЭтоСсылка(ТипЗнч(Значение)) И ПараметрыВыводаЗапроса.ВыводитьИдентификатор Тогда
				Попытка
					ЗначениеДляПараметра = Значение.УникальныйИдентификатор();
				Исключение
					ЗначениеДляПараметра = Значение;
				КонецПопытки;
			КонецЕсли;
			ЗначениеДляПараметра = "" + Пробел + ЗначениеДляПараметра;
			ОбластьДетали.Параметры.Значение = ЗначениеДляПараметра;
			ОбластьДетали.Параметры.Расшифровка = Значение;
			
			УстановкаМаксимальнойШириныВМассив(Индекс, ЗначениеДляПараметра, ПараметрыВыводаЗапроса.МассивШириныКолонок);
			
			Детали.Присоединить(ОбластьДетали);
			
		КонецЦикла;
		
		ОбщиеДетали.Вывести(Детали, Уровень,, Открыта);
		ИндексСтроки = ИндексСтроки + 1;
		ИндексСтрокиПоУровню = ИндексСтрокиПоУровню + 1;
		ПараметрыВыводаЗапроса.КоличествоСтрокВыведено = ПараметрыВыводаЗапроса.КоличествоСтрокВыведено + 1;
		
		ВывестиДеталиСИерархией(ОбщиеДетали, Подчиненный, ПараметрыВыводаЗапроса, Уровень + 1, КоличествоКолонок, ИндексСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет сворачивать или нет результат одного запроса.
//
// Параметры:
//  ПозицияТекущегоЗапроса - Число - порядок запроса в пакете.
//  КоличествоВсехЗапросов - Число - количество всех запросов в пакете.
//
Функция ОпределитьСвертку(знач ПозицияТекущегоЗапроса, КоличествоВсехЗапросов)
	
	ПозицияТекущегоЗапроса = ПозицияТекущегоЗапроса + 1;
	
	Если КоличествоВсехЗапросов = 1 Тогда
		РезультатЗначение = Истина;
	Иначе
		Если ПозицияТекущегоЗапроса = КоличествоВсехЗапросов Тогда
			РезультатЗначение = Истина;
		Иначе
			РезультатЗначение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗначение;
	
КонецФункции

// Выводит строку с автошириной колонок.
//
// Параметры: 
//  РезультатЗапроса - ТабличныйДокумент.
//  МассивМаксШирины - Массив из Число - ширина колонок для отдельного запроса.
//
Процедура УстановкаАвтоШирины(РезультатЗапроса, МассивМаксШирины)
	
	ВерхняяГраница = МассивМаксШирины.ВГраница();
	Если ВерхняяГраница = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По ВерхняяГраница Цикл 
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		Стр = ВременныйТабличныйДокумент.ПолучитьОбласть(1, Индекс + 1, 1, Индекс + 1);
		РезультатЗапроса.Присоединить(Стр).ШиринаКолонки = МассивМаксШирины.Получить(Индекс);
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует список возможных типов конфигурации.
//
// Параметры:
//  СписокДобавленныхТипов - СписокЗначений - список типов, добавленных "вручную".
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция СформироватьСписокТипов(СписокДобавленныхТипов = Неопределено) Экспорт
	
	МассивТипов = ДоступныеТипыДанных.Типы();
	
	НеПримитивныеТипы = Новый СписокЗначений;
	НеПримитивныеТипы.ЗагрузитьЗначения(МассивТипов);
	НеПримитивныеТипы.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("Строка", НСтр("ru = 'Строка'"));
	СписокТипов.Добавить("Число", НСтр("ru = 'Число'"));
	СписокТипов.Добавить("Дата", НСтр("ru = 'Дата'"));
	СписокТипов.Добавить("Булево", НСтр("ru = 'Булево'"));
	СписокТипов.Добавить("Граница", НСтр("ru = 'Граница'"));
	СписокТипов.Добавить("МоментВремени", НСтр("ru = 'Момент времени'"));
	СписокТипов.Добавить("СписокЗначений", НСтр("ru = 'Список значений'"));
	СписокТипов.Добавить("ТаблицаЗначений", НСтр("ru = 'Таблица значений'"));
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	СписокДобавленныхТипов = СписокТипов.Скопировать();
	
	Для каждого Стр Из НеПримитивныеТипы Цикл
		ЗначениеТипа 		= XMLТип(Стр.Значение).ИмяТипа;
		ПредставлениеТипа 	= Строка(Стр.Значение);
		СписокТипов.Добавить(ЗначениеТипа, ПредставлениеТипа);
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

// Определяет отступ по уровню.
//
// Параметры:
//  Уровень - Число - переданный уровень в дереве.
//  НомерКолонки - Число - номер колонки, отступ устанавливается только для первой колонки.
//  Открыта - Булево - открыта группа или нет.
//
Функция ОпределениеОтступаПоУровню(Уровень, НомерКолонки, Открыта)
	
	Пробел = "";
	Если НомерКолонки = 0 Тогда
		Если Уровень > 1 Тогда
			Для Индекс = 1 По Уровень Цикл
				Пробел = Пробел + Символы.Таб;
			КонецЦикла;
			Открыта = Ложь;
		Иначе
			Открыта = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Пробел;
	
КонецФункции

// Возвращает строковое представление типа по значению.
//
// Параметры:
//  Значение - Произвольный - передаваемое значение.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяТипаИзЗначения(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		ИмяТипа = "Число";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ИмяТипа = "Булево";
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ИмяТипа = "Дата";
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		ИмяТипа = "МоментВремени";
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		ИмяТипа = "ФиксированныйМассив";
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		ИмяТипа = "ТаблицаЗначений";
	Иначе
		ИмяТипа = xmlТип(ТипЗнч(Значение)).ИмяТипа;
	КонецЕсли;
	
	Возврат ИмяТипа;
	
КонецФункции

// Возвращает вид границы из ее строкового представления.
//
// Параметры:
//  Вид - Строка - строковое представление вида границы.
//
// Возвращаемое значение:
//  ВидГраницы 
//
Функция ОпределениеВидаГраницы(Вид) Экспорт
	
	Если ВРег(Вид) = "ИСКЛЮЧАЯ" Тогда
		Результат = ВидГраницы.Исключая;
	Иначе
		Результат = ВидГраницы.Включая;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление значения.
//
// Параметры:
//  Значение - Произвольный - передаваемое значение.
//
// Возвращаемое значение:
//  Строка
//
Функция ФормированиеПредставленияЗначения(Значение) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		ИтоговаяСтрока = НСтр("ru = 'Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоСтрок%", Строка(Значение.Количество()));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоКолонок%", Строка(Значение.Колонки.Количество()));
		Результат = ИтоговаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		Результат = Строка(Значение.Дата) + "; " + Строка(Значение.Ссылка);
	ИначеЕсли ТипЗнч(Значение) = Тип("Граница") Тогда 
		Результат = Строка(Значение.Значение) + "; " + Строка(Значение.ВидГраницы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Фильтрует список типов для данного контекста.
//
// Параметры:
//  СписокТипов - СписокЗначений - передаваемые типы.
//  Контекст - Строка
//
Процедура ФильтрацияСпискаТипов(СписокТипов, Контекст) Экспорт
	
	Если НРег(Контекст) = "граница" Тогда
		Элемент = СписокТипов.НайтиПоЗначению("СписокЗначений");
		СписокТипов.Удалить(Элемент);
		Элемент = СписокТипов.НайтиПоЗначению("ТаблицаЗначений");
		СписокТипов.Удалить(Элемент);
		Элемент = СписокТипов.НайтиПоЗначению("Граница");
		СписокТипов.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = СписокТипов.НайтиПоЗначению("TypeDescription"); // Тип "Описание типов" удаляется всегда.
	СписокТипов.Удалить(Элемент);
	
КонецПроцедуры

// Устанавливает максимальную ширину ячейки для каждой колонки.
//
Процедура УстановкаМаксимальнойШириныВМассив(Индекс, знач Элем, МассивШириныКолонок)
	
	МаксимальнаяШиринаЯчейки = 100;
	
	Элем = СокрП(Элем);
	Элем = СтрДлина(Элем);
	Если Индекс > МассивШириныКолонок.ВГраница() Тогда
		Если Элем < МаксимальнаяШиринаЯчейки Тогда 
			МассивШириныКолонок.Вставить(Индекс, Элем + 1);
		Иначе
			МассивШириныКолонок.Вставить(Индекс, МаксимальнаяШиринаЯчейки);
		КонецЕсли;
	Иначе
		Макс = МассивШириныКолонок.Получить(Индекс);
		Если Элем > Макс Тогда
			Если Элем < МаксимальнаяШиринаЯчейки Тогда
				МассивШириныКолонок.Установить(Индекс, Элем + 1);
			Иначе
				МассивШириныКолонок.Установить(Индекс, МаксимальнаяШиринаЯчейки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли тип ссылкой.
//
// Параметры:
//  Тип - Тип - передаваемый тип.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

// Возвращает результат выполнения временной таблицы по имени.
//
// Параметры:
//  ЗапросДляВыполнения - Запрос.
//  ИмяВременнойТаблицы - Строка
//  ИмяЗапроса - Строка
//
Функция ВыполнитьЗапросСВременнойТаблицей(знач ЗапросДляВыполнения, ИмяВременнойТаблицы, ИмяЗапроса)
	
	ЗапросДляВыполнения.Текст = ЗапросДляВыполнения.Текст + " ; " 
		+ СтрЗаменить("ВЫБРАТЬ * ИЗ &ИмяВременнойТаблицы", "&ИмяВременнойТаблицы", ИмяВременнойТаблицы);

	Попытка
		Результат = ЗапросДляВыполнения.Выполнить();
		ИмяЗапроса = НСтр("ru = 'Временная таблица:'") + " " + ИмяВременнойТаблицы;
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает цвет фона табличного документа по индексу строки и по использованию.
//
// Параметры:
//  Индекс - Число - индекс строки.
//  Использование - Булево - использовать или нет чередование.
//
// Возвращаемое значение:
//   Цвет
//
Функция ОпределитьЦветФонаПоИндексу(Индекс, Использование)
	
	ЦветЧередования = ЦветаСтиля.ЦветФонаШапкиОтчета;
	
	Если Не Использование Тогда
		Возврат WebЦвета.Белый;
	КонецЕсли;
	
	Остаток = Индекс % 2;
	Если Остаток = 0 Тогда
		Цвет = ЦветЧередования;
	Иначе
		Цвет = WebЦвета.Белый;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

Функция ПреобразоватьТаблицуЗначенийВСтроке(ТаблицаЗначений)
	
	ПредставлениеТаблицыЗначений = "";
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
		Разделитель = "";
		Для каждого ЯчейкаТаблицыЗначений Из СтрокаТаблицыЗначений Цикл
			ПредставлениеТаблицыЗначений = ПредставлениеТаблицыЗначений + Разделитель + Строка(ЯчейкаТаблицыЗначений);
			Разделитель = ";";
		КонецЦикла;
		ПредставлениеТаблицыЗначений = ПредставлениеТаблицыЗначений + Символы.ПС;
	КонецЦикла;
	
	Возврат ПредставлениеТаблицыЗначений;
	
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "")
	
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

Функция ВерсияПлатформы()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	Возврат ВерсияПлатформы;

КонецФункции

Функция ВерсияПриложенияЧисло(Знач ВерсияПриложенияСтрока)
	
	Результат = 0;
	
	ПозицияНачало = 1;
	ПозицияОкончание = 0;
	Для НомерСекции = 1 По 4 Цикл
	
		ПозицияОкончание = СтрНайти(ВерсияПриложенияСтрока,".",НаправлениеПоиска.СНачала, ПозицияНачало);
		Если ПозицияОкончание = 0 Тогда
			СтрокаСекции = СокрЛП(Сред(ВерсияПриложенияСтрока, ПозицияНачало));
		Иначе
			СтрокаСекции = СокрЛП(Сред(ВерсияПриложенияСтрока, ПозицияНачало, ПозицияОкончание - ПозицияНачало));
		КонецЕсли;
		
		Попытка
		
			Если НомерСекции = 1 Тогда
				Результат = Результат + Число(СтрокаСекции) * 1000000000;
			ИначеЕсли НомерСекции = 2 Тогда
				Результат = Результат + Число(СтрокаСекции) * 10000000;
			ИначеЕсли НомерСекции = 3 Тогда
				Результат = Результат + Число(СтрокаСекции) * 10000;
			ИначеЕсли НомерСекции = 4 Тогда
				Результат = Результат + Число(СтрокаСекции);
			КонецЕсли;
		
		Исключение
			Возврат Неопределено
		КонецПопытки;
		
		Если ПозицияОкончание = 0 ИЛИ ПозицияОкончание = СтрДлина(ВерсияПриложенияСтрока) Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияНачало = ПозицияОкончание + 1;
		ПозицияОкончание = 0;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КаталогФайловойИБ()
	
	Путь = ВРЕГ(СтрокаСоединенияИнформационнойБазы());
	ПозицияПоиска = СтрНайти(Путь, "FILE");
	Если ПозицияПоиска = 0 Тогда
		Возврат "";
	КонецЕсли;
	Путь = СтрЗаменить(Путь, """", "");
	Путь = СтрЗаменить(Путь, ";", "");
	Путь = Сред(Путь, ПозицияПоиска + 5);
	ПозицияПоиска = СтрНайти(Путь, "\",НаправлениеПоиска.СКонца);
	Путь = Сред(Путь, ПозицияПоиска + 1);
	Возврат Путь;
	
КонецФункции

// Возвращаемое значение:
//   Структура:
//     * КаталогСЛогФайлами - Неопределено
//     * ТекущееСостояниеТЖ - Структура:
//        * Включен - Булево
//        * КаталогСЛогФайлами - Строка
//     * ФильтрыСобытияТЖ - Неопределено
//     * ЗаменитьФильтры - Булево
//
Функция ПараметрыОбработкиКонфигурационногоФайла()
	
	ТекущееСостояниеТЖ = Новый Структура;
	ТекущееСостояниеТЖ.Вставить("Включен", Ложь);
	ТекущееСостояниеТЖ.Вставить("КаталогСЛогФайлами", "");

	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ЗаменитьФильтры", Ложь);
	ПараметрыОбработки.Вставить("ФильтрыСобытияТЖ", Неопределено);
	ПараметрыОбработки.Вставить("ТекущееСостояниеТЖ", ТекущееСостояниеТЖ);
	ПараметрыОбработки.Вставить("КаталогСЛогФайлами", Неопределено);
	Возврат ПараметрыОбработки;

КонецФункции

#Область РаботаСТехнологическимЖурналом

// Включает технологический журнал.
//
Процедура ВключениеТехнологическогоЖурнала(ПараметрыТехнологическогоЖурнала, РезультатВключения) Экспорт
	
	ИнформационнаяБазаФайловая = ИнформационнаяБазаФайловая();
	ВерсияПлатформы = ВерсияПлатформы();
	КаталогКонфигурацииПриложения = ПутьККонфигурационномуФайлу();
	
	Если КаталогКонфигурацииПриложения <> Неопределено Тогда
	
		ПараметрыФайлаКонфигурации = Новый Структура;
		ПараметрыФайлаКонфигурации.Вставить("КаталогКонфигурацииПриложения", КаталогКонфигурацииПриложения);
		ПараметрыФайлаКонфигурации.Вставить("КаталогСЛогФайлами", Неопределено);
		ПараметрыФайлаКонфигурации.Вставить("ФайлКонфигурации", Неопределено);
		ПараметрыФайлаКонфигурации.Вставить("Поток", Неопределено);
		
		СтруктураФайлаКонфигурации = Новый Структура;
		
		ПрочитатьКонфигурациюИзФайла(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации);
		ИзменитьКонфигурациюВключениеТЖ(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации);
		ЗаписатьКонфигурациюВФайл(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации, РезультатВключения, Истина);
		
		ЗаполнитьЗначенияСвойств(ПараметрыТехнологическогоЖурнала, ПараметрыФайлаКонфигурации, "КаталогСЛогФайлами");
		ПараметрыТехнологическогоЖурнала.ИдентификаторПроцессаОС = Формат(ИдентификаторПроцессаОС(), "ЧРД=; ЧРГ=; ЧГ=0");
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПутьККонфигурационномуФайлу()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если НЕ ((СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогаОбщихКонфигурационныхФайлов = КаталогПрограммы() + "conf";
	ФайлУказатель = Новый Файл(КаталогаОбщихКонфигурационныхФайлов + ПолучитьРазделительПутиСервера() + "conf.cfg");
	Если ФайлУказатель.Существует() Тогда
		ФайлКонфигурации = Новый ЧтениеТекста(ФайлУказатель.ПолноеИмя);
		Строка = ФайлКонфигурации.ПрочитатьСтроку();
		Пока Строка <> Неопределено Цикл
			Позиция = СтрНайти(Строка, "ConfLocation=");
			Если Позиция > 0 Тогда 
				КаталогКонфигурацииПриложения = СокрЛП(Сред(Строка, Позиция + 13));
				Прервать;
			КонецЕсли;
			Строка = ФайлКонфигурации.ПрочитатьСтроку();
		КонецЦикла;
	КонецЕсли;
	
	Возврат КаталогКонфигурацииПриложения;
	
КонецФункции

// Выключает технологический журнал.
//
Процедура ВыключениеТехнологическогоЖурнала(ПараметрыВыключенияТЖ, ИзменятьФайлКонфигурации = Истина) Экспорт
	
	ИнформационнаяБазаФайловая = ИнформационнаяБазаФайловая();
	ВерсияПлатформы = ВерсияПлатформы();
	КаталогКонфигурацииПриложения = ПутьККонфигурационномуФайлу();
	
	ПараметрыФайлаКонфигурации = Новый Структура;
	ПараметрыФайлаКонфигурации.Вставить("КаталогКонфигурацииПриложения", КаталогКонфигурацииПриложения);
	ПараметрыФайлаКонфигурации.Вставить("КаталогСЛогФайлами", ПараметрыВыключенияТЖ.КаталогСЛогФайлами);
	ПараметрыФайлаКонфигурации.Вставить("ФайлКонфигурации", Неопределено);
	ПараметрыФайлаКонфигурации.Вставить("Поток", Неопределено);
	
	СтруктураФайлаКонфигурации = Новый Структура;
	
	ПрочитатьКонфигурациюИзФайла(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации);
	Если ИзменятьФайлКонфигурации Тогда
		ИзменитьКонфигурациюВыключениеТЖ(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации);
	КонецЕсли; 
	РезультатВыключения = Новый Структура();
	ЗаписатьКонфигурациюВФайл(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации, РезультатВыключения, ИзменятьФайлКонфигурации);
	
	ЗаполнитьЗначенияСвойств(ПараметрыВыключенияТЖ, СтруктураФайлаКонфигурации, 
		"РеестрВключенныхКаталогов, РеестрУдаленныхКаталогов");
	
КонецПроцедуры

Процедура ПрочитатьКонфигурациюИзФайла(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации)
	
	СтруктураФайлаКонфигурации.Вставить("БлокиКонфигурации", Новый Массив);
	СтруктураФайлаКонфигурации.Вставить("КоличествоБлоковКонсоли", 0);
	СтруктураФайлаКонфигурации.Вставить("ЕстьPlanSql", Ложь);
	СтруктураФайлаКонфигурации.Вставить("ШаблоныТеговКонсоли", ШаблоныТеговКонсоли());
	
	Если ПараметрыФайлаКонфигурации.КаталогКонфигурацииПриложения <> Неопределено Тогда
		
		ПараметрыФайлаКонфигурации.ФайлКонфигурации = Новый Файл(ПараметрыФайлаКонфигурации.КаталогКонфигурацииПриложения
			+ ПолучитьРазделительПути() + "logcfg.xml");
		
		Если ПараметрыФайлаКонфигурации.ФайлКонфигурации.Существует() Тогда
			
			ПараметрыФайлаКонфигурации.Поток = Новый ЧтениеТекста(ПараметрыФайлаКонфигурации.ФайлКонфигурации.ПолноеИмя);
			
			ПараметрыТекста = Новый Структура;
			ПараметрыТекста.Вставить("ТекстФайлаКонфигурации", ПараметрыФайлаКонфигурации.Поток);
			ПараметрыТекста.Вставить("СтрокаТега", "");
			ПараметрыТекста.Вставить("НачальнаяСтрокаБлока", "");
			ПараметрыТекста.Вставить("ТекстБлока", "");
			ПараметрыТекста.Вставить("ТекущаяСтрока", "");
			
			Пока Истина Цикл
				Если ПрочитатьТекстДоТега(ПараметрыТекста, СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли.ОткрывающийНачало) Тогда
					ДобавитьБлокВСтруктуруКонфигурации(СтруктураФайлаКонфигурации, ПараметрыТекста, Ложь);
					ПараметрыТекста.СтрокаТега = ПараметрыТекста.ТекущаяСтрока;
					
					Если ПрочитатьТекстДоТега(ПараметрыТекста, СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли.Закрывающий, Истина) Тогда
						ДобавитьБлокВСтруктуруКонфигурации(СтруктураФайлаКонфигурации, ПараметрыТекста, Истина);
					Иначе
						ДобавитьБлокВСтруктуруКонфигурации(СтруктураФайлаКонфигурации, ПараметрыТекста, Ложь);
						Прервать;
					КонецЕсли;
				Иначе
					// В конфигурационном файле нет ни одного блока консоли
					ДобавитьБлокВСтруктуруКонфигурации(СтруктураФайлаКонфигурации, ПараметрыТекста, Ложь);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыФайлаКонфигурации.Поток.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
		
		// Получение реестра каталогов ТЖ для каждого блока конфигурации
		Попытка
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(БлокКонфигурации.Текст);
			ЧтениеXML.Прочитать();
			ПостроительDOM = Новый ПостроительDOM;
			УзелЛог = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
		Исключение
			
			ТекстОшибки = СтрЗаменить(НСтр("ru = 'Не удалось прочитать конфигурационный файл logcfg.xml по причине: %1'"),
				"%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			Возврат;
			
		КонецПопытки;
		
		СобратьКаталогиТЖПоУзламКонфигурации(УзелЛог, УзелЛог, БлокКонфигурации.РеестрКаталоговТЖ);
		
		// Наличие тега включения плана запроса
		Если НЕ СтруктураФайлаКонфигурации.ЕстьPlanSql Тогда
			Если СтрНайти(БлокКонфигурации.Текст, "<plansql/>") > 0 Тогда
				СтруктураФайлаКонфигурации.ЕстьPlanSql = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьБлокВСтруктуруКонфигурации(СтруктураФайлаКонфигурации, ПараметрыТекста, ЭтоБлокКонсоли)
	
	БлокКонфигурации = Новый Структура;
	БлокКонфигурации.Вставить("ЭтоБлокКонсоли", ЭтоБлокКонсоли);
	БлокКонфигурации.Вставить("Удалить", Ложь);
	БлокКонфигурации.Вставить("Текст", ПараметрыТекста.ТекстБлока);
	БлокКонфигурации.Вставить("ИдентификаторИБ");
	БлокКонфигурации.Вставить("ДатаВремя");
	БлокКонфигурации.Вставить("РеестрКаталоговТЖ", Новый Массив);
	
	Если ПустаяСтрока(ПараметрыТекста.ТекстБлока) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоБлокКонсоли Тогда
		
		// Расшифровка тега
		
		ШаблоныТеговКонсоли = СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли;
		
		СтрокаТега = СокрЛП(ПараметрыТекста.СтрокаТега);
		СтрокаТега = СокрЛП(Сред(СтрокаТега, СтрДлина(ШаблоныТеговКонсоли.ОткрывающийНачало) + 1));
		ПозицияРазделителя = СтрНайти(СтрокаТега, "SRVR");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрНайти(СтрокаТега, "FILE");
		КонецЕсли;
		Если ПозицияРазделителя > 1 Тогда
			СтрокаТегаДатаВремя = СокрЛП(Лев(СтрокаТега, ПозицияРазделителя - 1));
			Попытка
				БлокКонфигурации.Вставить("ДатаВремя", Дата(СтрокаТегаДатаВремя));
			Исключение
				БлокКонфигурации.Вставить("ДатаВремя");
			КонецПопытки;
			
			СтрокаТега = СокрЛП(Сред(СтрокаТега, ПозицияРазделителя));
			ПозицияРазделителя = СтрНайти(СтрокаТега, ШаблоныТеговКонсоли.ОткрывающийОкончание);
			Если ПозицияРазделителя > 1 Тогда
				БлокКонфигурации.Вставить("ИдентификаторИБ", СокрЛП(Лев(СтрокаТега, ПозицияРазделителя-1)));
			КонецЕсли;
		Иначе
			СтрокаТегаДатаВремя = СтрокаТега;
		КонецЕсли;
		
		// Получение каталога ТЖ
		СтрокаКаталогаXML = Новый ЧтениеXML;
		СтрокаКаталогаXML.УстановитьСтроку(ПараметрыТекста.НачальнаяСтрокаБлока);
		СтрокаКаталогаXML.Прочитать();
		БлокКонфигурации.Вставить("КаталогТЖ", СтрокаКаталогаXML.ПолучитьАтрибут("location"));
		
		СтруктураФайлаКонфигурации.БлокиКонфигурации.Добавить(БлокКонфигурации);
		СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли = СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли + 1;
		
	Иначе
		
		// Все части конфигурационного файла, не являющиеся блоками консоли, объединяем в один блок
		ЕстьБлокНеКонсоли = Ложь;
		Для каждого ИмеющийсяБлок Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
			Если НЕ ИмеющийсяБлок.ЭтоБлокКонсоли Тогда
				ЕстьБлокНеКонсоли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьБлокНеКонсоли Тогда
			ИмеющийсяБлок.Текст = ИмеющийсяБлок.Текст + ?(ИмеющийсяБлок.Текст = "", "", Символы.ПС) + ПараметрыТекста.ТекстБлока;
		Иначе
			СтруктураФайлаКонфигурации.БлокиКонфигурации.Добавить(БлокКонфигурации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   КонфигурацияТехЖурнала - ДокументDOM
//                          - ДокументHTML
//   ТекущийУзел - УзелHTML
//               - ДокументDOM
//               - ДокументHTML
//               - УзелDOM
//   КаталогиТЖ - Массив
//
Процедура СобратьКаталогиТЖПоУзламКонфигурации(КонфигурацияТехЖурнала, ТекущийУзел, КаталогиТЖ)

	Для Каждого Узел Из ТекущийУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла = "#document" Или Узел.ИмяУзла = "config" Тогда
			СобратьКаталогиТЖПоУзламКонфигурации(КонфигурацияТехЖурнала, Узел, КаталогиТЖ);
		КонецЕсли;
		
		Если Узел.ИмяУзла = "log" Тогда
			
			КаталогТЖ = Узел.ПолучитьАтрибут("location");
			Если КаталогТЖ <> Неопределено Тогда
				КаталогиТЖ.Добавить(СокрЛП(КаталогТЖ));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьТекстДоТега(ПараметрыТекста, ШаблонТега, ВключатьТеги = Ложь)

	ДлинаШаблона = СтрДлина(ШаблонТега);
	ПараметрыТекста.ТекстБлока = "";
	Если ВключатьТеги Тогда
		ПараметрыТекста.ТекстБлока = ПараметрыТекста.ТекущаяСтрока;
	КонецЕсли; 
	ПараметрыТекста.НачальнаяСтрокаБлока = "";
	ЭтоПерваяСтрокаБлока = Истина;
	ПараметрыТекста.ТекущаяСтрока = ПараметрыТекста.ТекстФайлаКонфигурации.ПрочитатьСтроку();
	
	Пока ПараметрыТекста.ТекущаяСтрока <> Неопределено Цикл
		
		Если СтрНайти(НРег(ПараметрыТекста.ТекущаяСтрока), "</config>") > 0 Тогда
			ПараметрыТекста.ТекстБлока = ПараметрыТекста.ТекстБлока
				+ ?(ПараметрыТекста.ТекстБлока = "", "", Символы.ПС) + ПараметрыТекста.ТекущаяСтрока;
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭтоПерваяСтрокаБлока Тогда
			ПараметрыТекста.НачальнаяСтрокаБлока = ПараметрыТекста.ТекущаяСтрока;
			ЭтоПерваяСтрокаБлока = Ложь;
		КонецЕсли;
		
		Если Лев(СокрЛП(ПараметрыТекста.ТекущаяСтрока), ДлинаШаблона) = ШаблонТега Тогда
			Если ВключатьТеги Тогда
				ПараметрыТекста.ТекстБлока = ПараметрыТекста.ТекстБлока
					+ ?(ПараметрыТекста.ТекстБлока = "", "", Символы.ПС) + ПараметрыТекста.ТекущаяСтрока;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ПараметрыТекста.ТекстБлока = ПараметрыТекста.ТекстБлока
			+ ?(ПараметрыТекста.ТекстБлока = "", "", Символы.ПС) + ПараметрыТекста.ТекущаяСтрока;
			
		ПараметрыТекста.ТекущаяСтрока = ПараметрыТекста.ТекстФайлаКонфигурации.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если ПараметрыТекста.ТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ЗаписатьКонфигурациюВФайл(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации, РезультатВключения, Записывать)
	
	СтруктураФайлаКонфигурации.Вставить("РеестрВключенныхКаталогов", Новый Массив);
	СтруктураФайлаКонфигурации.Вставить("РеестрУдаленныхКаталогов", Новый Массив);
	
	Если Записывать Тогда
	
		ЕстьPlanSql = Ложь;
		Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
			Если БлокКонфигурации.Удалить Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(БлокКонфигурации.Текст, "<plansql/>") > 0 Тогда
				ЕстьPlanSql = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекстФайлаКонфигурации = "";
		ТекстБлокаНеКонсоли = "";
		
		ТекстФайлаКонфигурации = "";
		Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
			
			Если БлокКонфигурации.ЭтоБлокКонсоли
				 И БлокКонфигурации.Удалить Тогда
				Для каждого КаталогТЖ Из БлокКонфигурации.РеестрКаталоговТЖ Цикл
					СтруктураФайлаКонфигурации.РеестрУдаленныхКаталогов.Добавить(ВРег(КаталогТЖ));
				КонецЦикла;
			ИначеЕсли БлокКонфигурации.ЭтоБлокКонсоли Тогда
				СтруктураФайлаКонфигурации.РеестрВключенныхКаталогов.Добавить(ВРег(БлокКонфигурации.КаталогТЖ));
				ТекстФайлаКонфигурации = ТекстФайлаКонфигурации + ?(ТекстФайлаКонфигурации = "", "", Символы.ПС)
				 + БлокКонфигурации.Текст;
			Иначе
				Для каждого КаталогТЖ Из БлокКонфигурации.РеестрКаталоговТЖ Цикл
					СтруктураФайлаКонфигурации.РеестрВключенныхКаталогов.Добавить(ВРег(КаталогТЖ));
				КонецЦикла;
				ТекстБлокаНеКонсоли = БлокКонфигурации.Текст;
			КонецЕсли;
			
			Если НЕ БлокКонфигурации.Удалить
				 И НЕ ЕстьPlanSql
				 И СтрНайти(БлокКонфигурации.Текст, "<plansql/>") > 0 Тогда
				ЕстьPlanSql = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьPlanSql
			 И СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли > 0 Тогда
			БлокPlanSql = СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли.ОткрывающийНачало + " -->" + Символы.ПС
				+ "<plansql/>" + Символы.ПС
				+ СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли.Закрывающий + " -->";
			ТекстФайлаКонфигурации = ТекстФайлаКонфигурации + ?(ТекстФайлаКонфигурации = "", "", Символы.ПС) + БлокPlanSql;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстФайлаКонфигурации) Тогда
			ТекстФайлаКонфигурации = СтрЗаменить(ТекстБлокаНеКонсоли, "</config>", ТекстФайлаКонфигурации + Символы.ПС + "</config>");
		Иначе
			ТекстФайлаКонфигурации = ТекстБлокаНеКонсоли;
		КонецЕсли;
		
		Попытка
			
			ПараметрыФайлаКонфигурации.Поток = Новый ЗаписьТекста(ПараметрыФайлаКонфигурации.ФайлКонфигурации.ПолноеИмя);
			ПараметрыФайлаКонфигурации.Поток.ЗаписатьСтроку(ТекстФайлаКонфигурации);
			ПараметрыФайлаКонфигурации.Поток.Закрыть();
			
		Исключение
			РезультатВключения.Вставить("Результат", Ложь);
			РезультатВключения.Вставить("Причина", НСтр("ru = 'Ошибка записи конфигурационного файла в каталоге'") + " "
				+ ПараметрыФайлаКонфигурации.КаталогКонфигурацииПриложения + Символы.ПС + НСтр("ru = 'Проверьте права доступа.'"));
		КонецПопытки;
		
	Иначе
		
		Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
			Если БлокКонфигурации.ЭтоБлокКонсоли Тогда
				СтруктураФайлаКонфигурации.РеестрВключенныхКаталогов.Добавить(ВРег(БлокКонфигурации.КаталогТЖ));
			Иначе
				Для каждого КаталогТЖ Из БлокКонфигурации.РеестрКаталоговТЖ Цикл
					СтруктураФайлаКонфигурации.РеестрВключенныхКаталогов.Добавить(ВРег(КаталогТЖ));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблоныТеговКонсоли(ИдентификаторИБ = "")
	
	Результат = Новый Структура;
	Результат.Вставить("ОткрывающийНачало", "<!-- ConsoleQueriesBegin");
	Результат.Вставить("ОткрывающийОкончание", "-->");
	Результат.Вставить("Закрывающий", "<!-- ConsoleQueriesEnd");
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьКонфигурациюВключениеТЖ(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации)

	ФильтрТекущегоСеанса = ФильтрТекущегоСеанса();
	
	Если ПараметрыФайлаКонфигурации.КаталогКонфигурацииПриложения <> Неопределено 
		 И ПараметрыФайлаКонфигурации.ФайлКонфигурации.Существует() Тогда
		// Изменение существующего файла конфигурации
		
		БлокКонфигурацииТекущегоСеанса = Неопределено;
		Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
		
			Если НЕ БлокКонфигурации.ЭтоБлокКонсоли Тогда
				Продолжить;
			КонецЕсли;
			
			Если БлокКонфигурации.ИдентификаторИБ = ФильтрТекущегоСеанса.ИдентификаторИБ Тогда
				БлокКонфигурацииТекущегоСеанса = БлокКонфигурации;
			КонецЕсли;
		
		КонецЦикла;
		
		Если БлокКонфигурацииТекущегоСеанса = Неопределено Тогда
			
			БлокКонфигурацииТекущегоСеанса = БлокКонфигурацииСеанса(ФильтрТекущегоСеанса, СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли);
			СтруктураФайлаКонфигурации.БлокиКонфигурации.Добавить(БлокКонфигурацииТекущегоСеанса);
			СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли = СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли + 1;
			
		Иначе
			// Изменяем найденный блок конфигурации
			ТекстБлокаКонфигурации = БлокКонфигурацииТекущегоСеанса.Текст;
			
			ЧтениеXML = Новый ЧтениеXML;
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<property name=""all""/>","");
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<property name=""sql""/>","");
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<property name=""plansqltext""/>","");
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<plansql/>","");
			ЧтениеXML.УстановитьСтроку(ТекстБлокаКонфигурации);
			
			ПостроительDOM = Новый ПостроительDOM;
			УзелЛог = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			ПараметрыОбработкиКонфигурации = ПараметрыОбработкиКонфигурационногоФайла();
			ПараметрыОбработкиКонфигурации.ЗаменитьФильтры = Истина;
			
			ОбойтиУзлыКонфигурацииТехЖурнала(УзелЛог, УзелЛог, ФильтрТекущегоСеанса, ПараметрыОбработкиКонфигурации);
			
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ЗаписьDOM.Записать(УзелЛог, ЗаписьXML);
			БлокКонфигурацииТекущегоСеанса.Текст = ЗаписьXML.Закрыть();
			Тэг = ТэгТекущегоСеанса(СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли, ФильтрТекущегоСеанса);
			БлокКонфигурацииТекущегоСеанса.Текст = СтрЗаменить(БлокКонфигурацииТекущегоСеанса.Текст, "<?xml version=""1.0""?>", Тэг);
			
		КонецЕсли;
		
		ПараметрыФайлаКонфигурации.Вставить("КаталогСЛогФайлами", БлокКонфигурацииТекущегоСеанса.КаталогТЖ);
		
	Иначе
		СоздатьНовуюКонфигурацию(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации, ФильтрТекущегоСеанса);
	КонецЕсли;
	
КонецПроцедуры

Функция ТэгТекущегоСеанса(ШаблоныТегов, ФильтрТекущегоСеанса)
	
	Возврат ШаблоныТегов.ОткрывающийНачало + " " + Формат(ФильтрТекущегоСеанса.ДатаВремя, "dd.MM.yyyy hh:mm:ss") + " "
		+ ФильтрТекущегоСеанса.ИдентификаторИБ + " " + ШаблоныТегов.ОткрывающийОкончание;
	
КонецФункции

Функция БлокКонфигурацииСеанса(ФильтрТекущегоСеанса, ШаблоныТегов)

	МассивСобытий = МассивСобытийКонсолиЗапросов(ИнформационнаяБазаФайловая);
	
	Текст = ТэгТекущегоСеанса(ШаблоныТегов, ФильтрТекущегоСеанса) + Символы.ПС;
	КаталогСЛогФайлами = ПолучитьИмяВременногоФайла("1c_logs");
	Текст = Текст + "<log history=""2"" location=""" + КаталогСЛогФайлами + """>" + Символы.ПС;
	Для каждого ЗначениеСобытия Из МассивСобытий Цикл
		
		Если ИнформационнаяБазаФайловая Тогда
			Если ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") Тогда
				Если ЗначениеСобытия = "SDBL" Тогда
					ТекстФильтров = "  <eq property=""DBMS"" value=""DBV8DBEng""/>" + Символы.ПС
						+ "  <eq property=""DataBase"" value=""" + ФильтрТекущегоСеанса.DataBase + """/>" + Символы.ПС;
				ИначеЕсли ЗначениеСобытия = "DBV8DBEng" Тогда
					ТекстФильтров = "  <eq property=""DataBase"" value=""" + ФильтрТекущегоСеанса.DataBase + """/>" + Символы.ПС;
				ИначеЕсли ЗначениеСобытия = "EXCP" Тогда
					ТекстФильтров = "  <eq property=""DataBase"" value=""" + ФильтрТекущегоСеанса.DataBase + """/>" + Символы.ПС;
				КонецЕсли;
			Иначе
				ТекстФильтров = "";
			КонецЕсли;
		Иначе
			ТекстФильтров = "  <eq property=""p:processName"" value=""" + ФильтрТекущегоСеанса.processname + """/>" + Символы.ПС
				+ "  <eq property=""usr"" value=""" + ФильтрТекущегоСеанса.usr + """/>" + Символы.ПС
				+ "  <eq property=""sessionid"" value=""" + ФильтрТекущегоСеанса.sessionid + """/>" + Символы.ПС;
		КонецЕсли;
		
		Текст = Текст  + "<event>" + Символы.ПС + "  <eq property=""name"" value=""" + ЗначениеСобытия + """/>" + Символы.ПС
			+ ТекстФильтров + "</event>" + Символы.ПС;
	КонецЦикла;
	
	Текст = Текст + "<property name=""all""/>" + Символы.ПС + "  <property name=""sql""/>" + Символы.ПС
		+ "  <property name=""plansqltext""/>" + Символы.ПС + "</log>" + Символы.ПС;
	Текст = Текст + ШаблоныТегов.Закрывающий + " " + ШаблоныТегов.ОткрывающийОкончание;
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоБлокКонсоли", Истина);
	Результат.Вставить("Удалить", Ложь);
	Результат.Вставить("ИдентификаторИБ", ФильтрТекущегоСеанса.ИдентификаторИБ);
	Результат.Вставить("ДатаВремя", ФильтрТекущегоСеанса.ДатаВремя);
	Результат.Вставить("КаталогТЖ", КаталогСЛогФайлами);
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("РеестрКаталоговТЖ", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьНовуюКонфигурацию(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации, ФильтрТекущегоСеанса)
	
	СтруктураФайлаКонфигурации.БлокиКонфигурации.Очистить();
	СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли = 0;
	
	// Начальный блок конфигурации
	ТекстБлокаКонфигурации = "<?xml version=""1.0"" encoding=""UTF-8""?>" + Символы.ПС+ "<config xmlns=""http://v8.1c.ru/v8/tech-log"">"
		+ Символы.ПС + "<dump create=""false"" type=""0"" prntscrn=""false""/>" + Символы.ПС + "</config>";
	
	БлокКонфигурации = Новый Структура;
	БлокКонфигурации.Вставить("ЭтоБлокКонсоли", Ложь);
	БлокКонфигурации.Вставить("Удалить", Ложь);
	БлокКонфигурации.Вставить("ИдентификаторИБ", Неопределено);
	БлокКонфигурации.Вставить("ДатаВремя", Неопределено);
	БлокКонфигурации.Вставить("КаталогТЖ", Неопределено);
	БлокКонфигурации.Вставить("Текст", ТекстБлокаКонфигурации);
	БлокКонфигурации.Вставить("РеестрКаталоговТЖ", Новый Массив);
	
	СтруктураФайлаКонфигурации.БлокиКонфигурации.Добавить(БлокКонфигурации);
	
	// Блок текущего сеанса
	БлокКонфигурации = БлокКонфигурацииСеанса(ФильтрТекущегоСеанса, СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли);
	СтруктураФайлаКонфигурации.БлокиКонфигурации.Добавить(БлокКонфигурации);
	СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли = СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли + 1;
	ПараметрыФайлаКонфигурации.Вставить("КаталогСЛогФайлами", БлокКонфигурации.КаталогТЖ);
	
КонецПроцедуры

Процедура ИзменитьКонфигурациюВыключениеТЖ(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации)
	
	ВремяЖизниБлокаМакс = 7200;
	
	ФильтрТекущегоСеанса = ФильтрТекущегоСеанса();
	
	Если ПараметрыФайлаКонфигурации.КаталогКонфигурацииПриложения <> Неопределено
		 И ПараметрыФайлаКонфигурации.ФайлКонфигурации.Существует() Тогда
		
		БлокКонфигурацииТекущегоСеанса = Неопределено;
		Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
		
			Если НЕ БлокКонфигурации.ЭтоБлокКонсоли Тогда
				Продолжить;
			КонецЕсли;
			
			БлокПросрочен = Истина;
			Если ТипЗнч(БлокКонфигурации.ДатаВремя) = Тип("Дата") Тогда
				БлокПросрочен = ФильтрТекущегоСеанса.ДатаВремя - БлокКонфигурации.ДатаВремя > ВремяЖизниБлокаМакс;
			КонецЕсли;
			
			Если БлокПросрочен Тогда
				БлокКонфигурации.Удалить = Истина;
				СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли = СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли - 1;
				Продолжить;
			КонецЕсли;
		
			Если БлокКонфигурации.ИдентификаторИБ = ФильтрТекущегоСеанса.ИдентификаторИБ Тогда
				БлокКонфигурацииТекущегоСеанса = БлокКонфигурации;
			КонецЕсли;
			
		КонецЦикла;
		
		Если БлокКонфигурацииТекущегоСеанса <> Неопределено Тогда
			
			ТекстБлокаКонфигурации = БлокКонфигурацииТекущегоСеанса.Текст;
			
			ЧтениеXML = Новый ЧтениеXML;
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<plansql/>","");
			ЧтениеXML.УстановитьСтроку(ТекстБлокаКонфигурации);
			
			ПостроительDOM = Новый ПостроительDOM;
			УзелКонсолиЗапросов = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			УзлыКУдалению = Новый Массив;
			КоличествоEvent = 0;
			НайтиУзлыКУдалению(УзелКонсолиЗапросов,ФильтрТекущегоСеанса, УзлыКУдалению, КоличествоEvent);
			
			Если КоличествоEvent = УзлыКУдалению.Количество() Тогда
				БлокКонфигурацииТекущегоСеанса.Удалить = Истина;
				СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли = СтруктураФайлаКонфигурации.КоличествоБлоковКонсоли - 1;
			Иначе
				Для Каждого Event Из УзлыКУдалению Цикл
					Event.РодительскийУзел.УдалитьДочерний(Event);
				КонецЦикла;
				
				ЗаписьDOM = Новый ЗаписьDOM;
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				ЗаписьDOM.Записать(УзелКонсолиЗапросов, ЗаписьXML);
				БлокКонфигурацииТекущегоСеанса.Текст = ЗаписьXML.Закрыть();
				Тэг = ТэгТекущегоСеанса(СтруктураФайлаКонфигурации.ШаблоныТеговКонсоли, ФильтрТекущегоСеанса);
				БлокКонфигурацииТекущегоСеанса.Текст = СтрЗаменить(БлокКонфигурацииТекущегоСеанса.Текст, "<?xml version=""1.0""?>", Тэг);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Находит в файле технологического журнала запрос и план выполнения запроса.
//
Процедура ПрочитатьТехнологическийЖурнал(ПутьКФайлу, ИДМетки, ПрочитанныеДанные) Экспорт
	
	МассивСтрок = Новый Массив;
	ДобавлятьВМассив = Ложь;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".log");
	КопироватьФайл(ПутьКФайлу, ВременныйФайл);
	
	Файл = Новый ЧтениеТекста();
	Файл.Открыть(ВременныйФайл);
	Строка = Файл.ПрочитатьСтроку();
	ВременнаяСтрока = "";
	Пока Строка <> Неопределено Цикл
		Если ДобавлятьВМассив Тогда 
			Если ДобавлятьВМассив И СтрНайти(Строка, ИДМетки + "_end") = 0 Тогда
				Если Сред(Строка, 3, 1) = ":" И Сред(Строка, 6, 1) = "." Тогда
					Если ЗначениеЗаполнено(ВременнаяСтрока) 
						И СтрНайти(ВременнаяСтрока, "Sql=") > 0
						И СтрНайти(ВременнаяСтрока, "planSQLText=") > 0 
						И СтрНайти(ВременнаяСтрока, "Marker_" + ИДМетки) = 0 Тогда
						МассивСтрок.Добавить(ВременнаяСтрока);	
					КонецЕсли;
					ВременнаяСтрока = Строка;
				Иначе
					ВременнаяСтрока = ВременнаяСтрока + Символы.ПС + Строка;
				КонецЕсли;
				Иначе
					Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(Строка, ИДМетки + "_begin") > 0 Тогда
			ДобавлятьВМассив = Истина;
		КонецЕсли;
		Строка = Файл.ПрочитатьСтроку();
	КонецЦикла;
	Файл.Закрыть();
	
	СКЛТекстИзТехЖурнала = "";
	ПланВыполненияЗапроса = "";
	
	Если МассивСтрок.Количество() > 1 Тогда
		Разделитель = Символы.ПС +  Символы.ПС;
	Иначе
		Разделитель = "";
	КонецЕсли;
	
	Для каждого Строка Из МассивСтрок Цикл
		ПозицияНачало = СтрНайти(Строка, ",");
		СтрокаСдвиг = Сред(Строка, ПозицияНачало + 1);
		ПозицияКонец = СтрНайти(СтрокаСдвиг, ",");
		ТипСУБД = ВРег(Лев(СтрокаСдвиг, ПозицияКонец -1));
		Позиция = СтрНайти(СтрокаСдвиг, "Sql=");
		Если Сред(СтрокаСдвиг, Позиция + 4, 1) = """" ИЛИ Сред(СтрокаСдвиг, Позиция + 4, 1) = "'" Тогда
			СтрокаСдвиг = Сред(СтрокаСдвиг, Позиция + 5);
		Иначе
			СтрокаСдвиг = Сред(СтрокаСдвиг, Позиция + 4);
		КонецЕсли;
		
		Если ТипСУБД = "DBMSSQL" Тогда 
			Позиция = СтрНайти(СтрокаСдвиг, ",Rows");
			СКЛТекстТекущийЗапрос = Лев(СтрокаСдвиг, Позиция-2);
			Позиция = СтрНайти(СтрокаСдвиг, "planSQLText=");
			СтрокаСдвиг = Сред(СтрокаСдвиг, Позиция + 13);
			Позиция = СтрНайти(СтрокаСдвиг, "'");
			ПланВыполненияЗапросаТекущийЗапрос = Лев(СтрокаСдвиг, Позиция-1);
		ИначеЕсли ТипСУБД = "DBPOSTGRS" Тогда 
			Позиция = СтрНайти(СтрокаСдвиг, ",planSQLText=");
			СКЛТекстТекущийЗапрос = Лев(СтрокаСдвиг, Позиция-1);
			СтрокаСдвиг = Сред(СтрокаСдвиг, Позиция + 13);
			Позиция = СтрНайти(СтрокаСдвиг, ",Result");
			ПланВыполненияЗапросаТекущийЗапрос = Лев(СтрокаСдвиг, Позиция-1);
		Иначе
			Позиция = СтрНайти(СтрокаСдвиг, "',");	
			СКЛТекстТекущийЗапрос = Лев(СтрокаСдвиг, Позиция-2);
			Позиция = СтрНайти(СтрокаСдвиг, "planSQLText=");
			СтрокаСдвиг = Сред(СтрокаСдвиг, Позиция + 13);
			Позиция = СтрНайти(СтрокаСдвиг, "'");
			ПланВыполненияЗапросаТекущийЗапрос = Лев(СтрокаСдвиг, Позиция-1);
		КонецЕсли;
		
		ПланВыполненияЗапроса = ПланВыполненияЗапроса + ПланВыполненияЗапросаТекущийЗапрос + Разделитель;
		СКЛТекстИзТехЖурнала = СКЛТекстИзТехЖурнала + СКЛТекстТекущийЗапрос +Разделитель;
		
	КонецЦикла;
	
	ПрочитанныеДанные.ТипСУБД = ТипСУБД;
	ПрочитанныеДанные.СКЛЗапрос = СокрЛП(СКЛТекстИзТехЖурнала);
	ПрочитанныеДанные.ПланВыполненияЗапроса = СокрЛП(ПланВыполненияЗапроса);
	
	УдалитьФайлы(ВременныйФайл);
	
КонецПроцедуры

Функция ИдентификаторПроцессаОС()
	
	ИДТекущегоПроцесса = Неопределено;
	ОбъектСистемы = Новый COMОбъект("WScript.Shell");
	Если ИДТекущегоПроцесса = Неопределено Тогда 
		Процесс = ОбъектСистемы.Exec("rundll32.exe kernel32,Sleep");
		ИДТекущегоПроцесса = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\CIMV2:Win32_Process.Handle='" + Формат(Процесс.ProcessID,"ЧГ=0") + "'").ParentProcessID;
		Процесс.Terminate();
	КонецЕсли;
	
	Возврат ИДТекущегоПроцесса;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Консоль запросов'", КодОсновногоЯзыка());
	
КонецФункции

Процедура ПолучитьУзелКонсолиЗапросов(ТекущийУзел, УзелКонсоли)
	
	Для Каждого Узел Из ТекущийУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла = "#document" Или Узел.ИмяУзла = "config" Тогда
			ПолучитьУзелКонсолиЗапросов(Узел, УзелКонсоли);
		КонецЕсли;
		
		Если Узел.ИмяУзла = "log" Тогда
			Если Узел.ЕстьАтрибут("repname") Тогда
				 УзелКонсоли = Узел;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивСобытийКонсолиЗапросов(ИнформационнаяБазаФайловая = Ложь)
	
	МассивСобытий = Новый Массив;
	Если НЕ ИнформационнаяБазаФайловая Тогда
		МассивСобытий.Добавить("db2");
		МассивСобытий.Добавить("dbmssql");
		МассивСобытий.Добавить("dbpostgrs");
		МассивСобытий.Добавить("dboracle");
	КонецЕсли; 
	МассивСобытий.Добавить("SDBL");
	МассивСобытий.Добавить("DBV8DBEng");
	
	Возврат МассивСобытий;
	
КонецФункции

Процедура ОбойтиУзлыКонфигурацииТехЖурнала(КонфигурацияТехЖурнала, ТекущийУзел, ФильтрТекущегоСеанса, ПараметрыОбработки)
	
	Для Каждого Узел Из ТекущийУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла = "#document" Или Узел.ИмяУзла = "config" Тогда
			 ОбойтиУзлыКонфигурацииТехЖурнала(КонфигурацияТехЖурнала, Узел, ФильтрТекущегоСеанса, ПараметрыОбработки);
		КонецЕсли;
		
		Если Узел.ИмяУзла = "log" Тогда
			
			Если НЕ ПараметрыОбработки.КаталогСЛогФайлами = Неопределено Тогда
				Узел.УстановитьАтрибут("location", ПараметрыОбработки.КаталогСЛогФайлами);
			КонецЕсли; 
			
			ПараметрыОбработки.ФильтрыСобытияТЖ = Новый Структура;
			ПараметрыОбработки.ФильтрыСобытияТЖ.Вставить("ТекущееСобытие",Неопределено);
			ПараметрыОбработки.ФильтрыСобытияТЖ.Вставить("ТекущаяБаза",Неопределено);
			ПараметрыОбработки.ФильтрыСобытияТЖ.Вставить("ТекущийПользователь",Неопределено);
			ПараметрыОбработки.ФильтрыСобытияТЖ.Вставить("sessionid",Неопределено);
			
			ОбойтиУзлыКонфигурацииТехЖурнала(КонфигурацияТехЖурнала, Узел, ФильтрТекущегоСеанса, ПараметрыОбработки);
			
			Если ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ПараметрыОбработки.ЗаменитьФильтры Тогда
				МассивСобытий = МассивСобытийКонсолиЗапросов(ИнформационнаяБазаФайловая);
				Для Каждого ЭлементСобытие Из МассивСобытий Цикл
					ДобавитьСобытиеКонсолиЗапросов(КонфигурацияТехЖурнала,Узел, ФильтрТекущегоСеанса, ЭлементСобытие);
				КонецЦикла;
				ПараметрыОбработки.ТекущееСостояниеТЖ = Новый Структура;
				ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("Включен", Истина);
				ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("КаталогСЛогФайлами", Узел.ПолучитьАтрибут("location"));
			ИначеЕсли ИнформационнаяБазаФайловая
				 И ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") 
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = ФильтрТекущегоСеанса.DataBase
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено Тогда
					ПараметрыОбработки.ТекущееСостояниеТЖ = Новый Структура;
					ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("Включен", Истина);
					ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("КаталогСЛогФайлами", Узел.ПолучитьАтрибут("location"));
			ИначеЕсли ИнформационнаяБазаФайловая
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено Тогда
					ПараметрыОбработки.ТекущееСостояниеТЖ = Новый Структура;
					ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("Включен", Истина);
					ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("КаталогСЛогФайлами", Узел.ПолучитьАтрибут("location"));
			ИначеЕсли НЕ ИнформационнаяБазаФайловая
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = ФильтрТекущегоСеанса.sessionid
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = ФильтрТекущегоСеанса.processname
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = ФильтрТекущегоСеанса.usr Тогда
					ПараметрыОбработки.ТекущееСостояниеТЖ = Новый Структура;
					ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("Включен", Истина);
					ПараметрыОбработки.ТекущееСостояниеТЖ.Вставить("КаталогСЛогФайлами", Узел.ПолучитьАтрибут("location"));
			КонецЕсли;
			
			Если ПараметрыОбработки.ЗаменитьФильтры Тогда
				ДобавитьСвойствоКонсолиЗапросов(КонфигурацияТехЖурнала,Узел, "all");
				ДобавитьСвойствоКонсолиЗапросов(КонфигурацияТехЖурнала,Узел, "sql");
				ДобавитьСвойствоКонсолиЗапросов(КонфигурацияТехЖурнала,Узел, "plansqltext");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Узел.ИмяУзла = "event" Тогда
			
			ОбойтиУзлыКонфигурацииТехЖурнала(КонфигурацияТехЖурнала, Узел, ФильтрТекущегоСеанса, ПараметрыОбработки);
			
			Если ИнформационнаяБазаФайловая
				 И ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") 
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = ФильтрТекущегоСеанса.DataBase
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено Тогда
					Возврат;
			ИначеЕсли ИнформационнаяБазаФайловая
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено Тогда
					Возврат;
			ИначеЕсли НЕ ИнформационнаяБазаФайловая
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = ФильтрТекущегоСеанса.sessionid
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = ФильтрТекущегоСеанса.processname
				 И ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = ФильтрТекущегоСеанса.usr Тогда
					Возврат;
			Иначе
				ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие = Неопределено;
				ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = Неопределено;
				ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid = Неопределено;
				ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Узел.ИмяУзла = "eq" Тогда
			
			Если Узел.ПолучитьАтрибут("property") = "name" Тогда
				ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущееСобытие = Узел.ПолучитьАтрибут("value");
			КонецЕсли;
			
			Если ИнформационнаяБазаФайловая
				 И ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") Тогда
					Если Узел.ПолучитьАтрибут("property") = "DataBase" Тогда
						ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = Узел.ПолучитьАтрибут("value");
					КонецЕсли;
			Иначе
					Если Узел.ПолучитьАтрибут("property") = "p:processName" Тогда
						ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущаяБаза = Узел.ПолучитьАтрибут("value");
					КонецЕсли;
			КонецЕсли;
			
			Если Узел.ПолучитьАтрибут("property") = "usr" Тогда
				ПараметрыОбработки.ФильтрыСобытияТЖ.ТекущийПользователь = Узел.ПолучитьАтрибут("value");
			КонецЕсли;
			
			Если Узел.ПолучитьАтрибут("property") = "sessionid" Тогда
				ПараметрыОбработки.ФильтрыСобытияТЖ.sessionid =  Узел.ПолучитьАтрибут("value");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиУзлыКУдалению(ТекущийУзел,ФильтрТекущегоСеанса,УзлыКУдалению, КоличествоEvent = 0, ФильтрыСобытияТЖ = Неопределено)
	
	Для Каждого Узел Из ТекущийУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла = "log" Тогда
			НайтиУзлыКУдалению(Узел,ФильтрТекущегоСеанса,УзлыКУдалению, КоличествоEvent, ФильтрыСобытияТЖ);
		КонецЕсли;
		
		Если Узел.ИмяУзла = "event" Тогда
			
			ФильтрыСобытияТЖ = Новый Структура;
			ФильтрыСобытияТЖ.Вставить("ТекущееСобытие",Неопределено);
			ФильтрыСобытияТЖ.Вставить("ТекущаяБаза",Неопределено);
			ФильтрыСобытияТЖ.Вставить("ТекущийПользователь",Неопределено);
			ФильтрыСобытияТЖ.Вставить("sessionid",Неопределено);
			
			НайтиУзлыКУдалению(Узел,ФильтрТекущегоСеанса,УзлыКУдалению, КоличествоEvent, ФильтрыСобытияТЖ);
			
			Если ИнформационнаяБазаФайловая
				 И ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") 
				 И ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ФильтрыСобытияТЖ.ТекущаяБаза = ФильтрТекущегоСеанса.DataBase
				 И ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено Тогда
					УзлыКУдалению.Добавить(Узел);
			ИначеЕсли ИнформационнаяБазаФайловая
				 И ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ФильтрыСобытияТЖ.sessionid = Неопределено
				 И ФильтрыСобытияТЖ.ТекущаяБаза = Неопределено
				 И ФильтрыСобытияТЖ.ТекущийПользователь = Неопределено Тогда
					УзлыКУдалению.Добавить(Узел);
			ИначеЕсли НЕ ИнформационнаяБазаФайловая
				 И ФильтрыСобытияТЖ.ТекущееСобытие <> Неопределено
				 И ФильтрыСобытияТЖ.sessionid = ФильтрТекущегоСеанса.sessionid
				 И ФильтрыСобытияТЖ.ТекущаяБаза = ФильтрТекущегоСеанса.processname
				 И ФильтрыСобытияТЖ.ТекущийПользователь = ФильтрТекущегоСеанса.usr Тогда
					УзлыКУдалению.Добавить(Узел);
			ИначеЕсли НЕ ИнформационнаяБазаФайловая
				 И ФильтрТекущегоСеанса.usr = ФильтрыСобытияТЖ.ТекущийПользователь
				 И СеансКонсолиЗапросовНеактивен(ФильтрТекущегоСеанса, ФильтрыСобытияТЖ) Тогда
					УзлыКУдалению.Добавить(Узел);
			КонецЕсли;
			
			КоличествоEvent = КоличествоEvent + 1;
			
		КонецЕсли;
		
		Если Узел.ИмяУзла = "eq" Тогда
			Если Узел.ПолучитьАтрибут("property") = "name" Тогда
				ФильтрыСобытияТЖ.ТекущееСобытие = Узел.ПолучитьАтрибут("value");
			КонецЕсли;
			
			Если ИнформационнаяБазаФайловая
				 И ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") Тогда
					Если Узел.ПолучитьАтрибут("property") = "DataBase" Тогда
						ФильтрыСобытияТЖ.ТекущаяБаза = Узел.ПолучитьАтрибут("value");
					КонецЕсли;
			Иначе
					Если Узел.ПолучитьАтрибут("property") = "p:processName" Тогда
						ФильтрыСобытияТЖ.ТекущаяБаза = Узел.ПолучитьАтрибут("value");
					КонецЕсли;
			КонецЕсли;
			
			Если Узел.ПолучитьАтрибут("property") = "usr" Тогда
				ФильтрыСобытияТЖ.ТекущийПользователь = Узел.ПолучитьАтрибут("value");
			КонецЕсли;
			
			Если Узел.ПолучитьАтрибут("property") = "sessionid" Тогда
				ФильтрыСобытияТЖ.sessionid = Узел.ПолучитьАтрибут("value");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСобытиеКонсолиЗапросов(КонфигурацияТехЖурнала,УзелРодитель,ФильтрТекущегоСеанса, ЗначениеСобытия)
	
	УзелEvent = КонфигурацияТехЖурнала.СоздатьЭлемент("event");
	УзелРодитель.ДобавитьДочерний(УзелEvent);
	
	УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "name", ЗначениеСобытия);
	
	Если ИнформационнаяБазаФайловая
		 И ВерсияПриложенияЧисло(ВерсияПлатформы) >= ВерсияПриложенияЧисло("8.3.14") Тогда
		Если ЗначениеСобытия = "SDBL" Тогда
			УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "DBMS", "DBV8DBEng");
			УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "DataBase", ФильтрТекущегоСеанса.DataBase);
		ИначеЕсли ЗначениеСобытия = "DBV8DBEng" Тогда
			УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "DataBase", ФильтрТекущегоСеанса.DataBase);
		ИначеЕсли ЗначениеСобытия = "EXCP" Тогда
			УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "DataBase", ФильтрТекущегоСеанса.DataBase);
		КонецЕсли;
	Иначе
		УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "p:processName", ФильтрТекущегоСеанса.processname);
		Если ЗначениеЗаполнено(ФильтрТекущегоСеанса.usr) Тогда
			УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "usr", ФильтрТекущегоСеанса.usr);
		КонецЕсли; 
		УстановитьФильтр(КонфигурацияТехЖурнала, УзелEvent, "sessionid", ФильтрТекущегоСеанса.sessionid);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСвойствоКонсолиЗапросов(КонфигурацияТехЖурнала,УзелРодитель, ИмяСвойства);
	
	УзелProperty = КонфигурацияТехЖурнала.СоздатьЭлемент("property");
	УзелProperty.УстановитьАтрибут("name", ИмяСвойства);
	УзелРодитель.ДобавитьДочерний(УзелProperty);
	
КонецПроцедуры

Процедура УстановитьФильтр(КонфигурацияТехЖурнала,УзелРодитель, ИмяФильтра, ЗначениеФильтра)
	
	Если ЗначениеФильтра <> Неопределено Тогда
		УзелФильтра = КонфигурацияТехЖурнала.СоздатьЭлемент("eq");
		УзелФильтра.УстановитьАтрибут("property", ИмяФильтра);
		УзелФильтра.УстановитьАтрибут("value", ЗначениеФильтра);
		УзелРодитель.ДобавитьДочерний(УзелФильтра);
	КонецЕсли;
	
КонецПроцедуры

Функция ФильтрТекущегоСеанса()
	
	ФильтрТекущегоСеанса = Новый Структура;
	ФильтрТекущегоСеанса.Вставить("ИдентификаторИБ", ВРЕГ(СтрокаСоединенияИнформационнойБазы()));
	ФильтрТекущегоСеанса.Вставить("ДатаВремя", ТекущаяДатаСеанса());
	
	Если ИнформационнаяБазаФайловая Тогда
		ФильтрТекущегоСеанса.Вставить("processname", "");
		ФильтрТекущегоСеанса.Вставить("usr","");
		ФильтрТекущегоСеанса.Вставить("sessionid","");
		ФильтрТекущегоСеанса.Вставить("DataBase", КаталогФайловойИБ());
	Иначе
		ФильтрТекущегоСеанса.Вставить("processname", ИмяСУБД());
		ФильтрТекущегоСеанса.Вставить("usr", ИмяПользователя());
		ФильтрТекущегоСеанса.Вставить("sessionid", СтрЗаменить(Строка(НомерСеансаИнформационнойБазы()),Символы.НПП,""));
	КонецЕсли;
	
	Возврат ФильтрТекущегоСеанса;
	
КонецФункции

Функция СеансКонсолиЗапросовНеактивен(ФильтрТекущегоСеанса, ФильтрыСобытияТЖ)
	
	СеансыТекущейБазы = ПолучитьСеансыИнформационнойБазы(); // Массив из СеансИнформационнойБазы
	 
	Если ФильтрыСобытияТЖ.ТекущаяБаза <> ФильтрТекущегоСеанса.processname Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СеансТекущейБазы Из СеансыТекущейБазы Цикл
		Если СеансТекущейБазы.Пользователь.Имя = ФильтрыСобытияТЖ.ТекущийПользователь
			 И Строка(СеансТекущейБазы.НомерСеанса) = ФильтрыСобытияТЖ.sessionid Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьПризнакВключенияЖурналаДляТекущегоСеанса(ПараметрыТехнологическогоЖурнала, РезультатВключения) Экспорт
	
	ИнформационнаяБазаФайловая = ИнформационнаяБазаФайловая();
	ВерсияПлатформы = ВерсияПлатформы();
	КаталогКонфигурацииПриложения = ПутьККонфигурационномуФайлу();
	
	ПараметрыФайлаКонфигурации = Новый Структура;
	ПараметрыФайлаКонфигурации.Вставить("КаталогКонфигурацииПриложения", КаталогКонфигурацииПриложения);
	ПараметрыФайлаКонфигурации.Вставить("ФайлКонфигурации", Неопределено);
	ПараметрыФайлаКонфигурации.Вставить("Поток", Неопределено);
	
	СтруктураФайлаКонфигурации = Новый Структура;
	
	ПрочитатьКонфигурациюИзФайла(СтруктураФайлаКонфигурации, ПараметрыФайлаКонфигурации);
	
	ФильтрТекущегоСеанса = ФильтрТекущегоСеанса();
	
	Если ПараметрыФайлаКонфигурации.КаталогКонфигурацииПриложения <> Неопределено 
		 И ПараметрыФайлаКонфигурации.ФайлКонфигурации.Существует() Тогда
		
		БлокКонфигурацииТекущегоСеанса = Неопределено;
		Для каждого БлокКонфигурации Из СтруктураФайлаКонфигурации.БлокиКонфигурации Цикл
		
			Если НЕ БлокКонфигурации.ЭтоБлокКонсоли Тогда
				Продолжить;
			КонецЕсли;
			
			Если БлокКонфигурации.ИдентификаторИБ = ФильтрТекущегоСеанса.ИдентификаторИБ Тогда
				БлокКонфигурацииТекущегоСеанса = БлокКонфигурации;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если БлокКонфигурацииТекущегоСеанса <> Неопределено Тогда
			
			ТекстБлокаКонфигурации = БлокКонфигурацииТекущегоСеанса.Текст;
			
			ЧтениеXML = Новый ЧтениеXML;
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<property name=""all""/>","");
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<property name=""sql""/>","");
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<property name=""plansqltext""/>","");
			ТекстБлокаКонфигурации = СтрЗаменить(ТекстБлокаКонфигурации,"<plansql/>","");
			ЧтениеXML.УстановитьСтроку(ТекстБлокаКонфигурации);
			
			ПостроительDOM = Новый ПостроительDOM;
			УзелЛог = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			ПараметрыОбработкиКонфигурации = ПараметрыОбработкиКонфигурационногоФайла();
			ОбойтиУзлыКонфигурацииТехЖурнала(УзелЛог, УзелЛог, ФильтрТекущегоСеанса, ПараметрыОбработкиКонфигурации);
			ТекущееСостояниеТЖ = ПараметрыОбработкиКонфигурации.ТекущееСостояниеТЖ;
			
			Если ТекущееСостояниеТЖ <> Неопределено Тогда
				ИдентификаторПроцессаОС = ИдентификаторПроцессаОС();
				РезультатВключения.Результат = ТекущееСостояниеТЖ.Включен;
				ПараметрыТехнологическогоЖурнала.КаталогСЛогФайлами =  ТекущееСостояниеТЖ.КаталогСЛогФайлами;
				ПараметрыТехнологическогоЖурнала.ИдентификаторПроцессаОС = Формат(ИдентификаторПроцессаОС, "ЧРД=; ЧРГ=; ЧГ=0");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автономность

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции из базовой функциональности для обеспечения автономности.

Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

Функция ИменаПодсистем() Экспорт
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), "%1", Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция КодОсновногоЯзыка()
	Если ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
		МодульОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
		Возврат МодульОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросаИПланаВыполненияЗапроса

Функция ИмяСУБД()
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	Позиция = СтрНайти(СтрокаПодключения, "Ref=""");
	Если Позиция > 0 Тогда
		СтрокаПодключения = Сред(СтрокаПодключения, Позиция + 5);
		Позиция = СтрНайти(СтрокаПодключения, """");
		Если Позиция > 0 Тогда
			Возврат Лев(СтрокаПодключения, Позиция - 1);
		Иначе
			Возврат СтрокаПодключения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Преобразовывает имена объектов запроса СУБД к имена объектов метаданных конфигурации.
//
// Возвращаемое значение:
//  Структура:
//    * ТекстЗапросаВВидеМетаданных - Строка
//    * ПланВыполненияЗапросаВМетаданных - Строка 
//
Функция ПреобразоватьВМетаданные(ТекстЗапроса, ПланВыполненияЗапроса, ТипСУБД)  Экспорт
	
	ТекстЗапросаВМетаданных = ТекстЗапроса;
	ПланЗапросаВМетаданных = ПланВыполненияЗапроса;
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	ТипСтрокаЗначение = Новый ОписаниеТипов("Строка", , );
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	СтруктураБД = ПолучитьСтруктуруХраненияБазыДанных(, Истина);
	СтруктураБД.Сортировать("ИмяТаблицыХранения УБЫВ");
	
	СоответствиеБДИндекс = Новый ТаблицаЗначений;
	СоответствиеБДИндекс.Колонки.Добавить("Ключ", ТипСтрока); 
	СоответствиеБДИндекс.Колонки.Добавить("Значение", ТипСтрокаЗначение);
	СоответствиеБДИндекс.Колонки.Добавить("КоличествоСимволов", ТипЧисло);
	СоответствиеБДИндекс.Индексы.Добавить("Ключ");
	СоответствиеБДИндекс.Индексы.Добавить("КоличествоСимволов");
	
	СоответствиеБДПоля = Новый ТаблицаЗначений;
	СоответствиеБДПоля.Колонки.Добавить("Ключ", ТипСтрока); 
	СоответствиеБДПоля.Колонки.Добавить("Значение", ТипСтрокаЗначение);
	СоответствиеБДПоля.Колонки.Добавить("КоличествоСимволов", ТипЧисло);
	СоответствиеБДПоля.Индексы.Добавить("Ключ");
	СоответствиеБДПоля.Индексы.Добавить("КоличествоСимволов");
	
	СоответствиеБД = Новый ТаблицаЗначений;
	СоответствиеБД.Колонки.Добавить("Ключ", ТипСтрока); 
	СоответствиеБД.Колонки.Добавить("Значение", ТипСтрокаЗначение);
	СоответствиеБД.Колонки.Добавить("КоличествоСимволов", ТипЧисло);
	СоответствиеБД.Индексы.Добавить("Ключ");
	СоответствиеБД.Индексы.Добавить("КоличествоСимволов");
	
	Для каждого Строка Из СтруктураБД Цикл
		НоваяСтрока = СоответствиеБД.Добавить();
		НоваяСтрока.Ключ = Строка.ИмяТаблицыХранения;
		НоваяСтрока.Значение = Строка.ИмяТаблицы;
		НоваяСтрока.КоличествоСимволов = СтрДлина(Строка.ИмяТаблицыХранения);
	КонецЦикла;
	
	СоответствиеБД.Сортировать("КоличествоСимволов Убыв, Ключ Убыв");
	
	Для каждого Строка Из СтруктураБД Цикл
		Для каждого Индекс Из Строка.Индексы Цикл
			НоваяСтрока = СоответствиеБДИндекс.Добавить();
			НоваяСтрока.Ключ = Индекс.ИмяИндексаХранения;
			СписокПоле = "";
			Разделитель = "";
			Для каждого Поле Из Индекс.Поля Цикл
				Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда
					СписокПоле = СписокПоле + Разделитель + Поле.ИмяПоля; 
				КонецЕсли;
				Разделитель = ", ";
			КонецЦикла;
			НоваяСтрока.Значение = СписокПоле;
			НоваяСтрока.КоличествоСимволов = СтрДлина(Индекс.ИмяИндексаХранения);
		КонецЦикла;
		
		Для каждого Поле Из Строка.Поля Цикл
			Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда
				НоваяСтрока = СоответствиеБДПоля.Добавить();
				НоваяСтрока.Ключ = Поле.ИмяПоляХранения;
				НоваяСтрока.Значение = Поле.ИмяПоля;
				НоваяСтрока.КоличествоСимволов = СтрДлина(Поле.ИмяПоляХранения);
			Иначе
				Позиция = СтрНайти(Поле.ИмяПоляХранения, "_IDRRef");
				Если Позиция > 1 Тогда 
					ИмяОбъекта = Лев(Поле.ИмяПоляХранения, Позиция-1);
					ИмяТаблицы =  СоответствиеБД.Найти(ИмяОбъекта, "Ключ").Значение;
					НоваяСтрока = СоответствиеБДПоля.Добавить();
					НоваяСтрока.Ключ = Поле.ИмяПоляХранения;
					НоваяСтрока.Значение = "Ссылка(" + ИмяТаблицы + ")";
					НоваяСтрока.КоличествоСимволов = СтрДлина(Поле.ИмяПоляХранения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СоответствиеБДПоля.Сортировать("КоличествоСимволов Убыв, Ключ УБЫВ");
	СоответствиеБДИндекс.Сортировать("КоличествоСимволов Убыв, Ключ УБЫВ");
	
	Если ТипСУБД = "DBPOSTGRS" Тогда
		ПланЗапросаВМетаданных = НРег(ПланЗапросаВМетаданных);
	ИначеЕсли ТипСУБД = "DBMSSQL" Тогда
		// Очистка запроса
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[" + ИмяСУБД() + "].[dbo].", "");
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[tempdb].[dbo].", "");
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "#tt", "ВременнаяТаблица");
		ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, "dbo.", "");
		ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, "#tt", "ВременнаяТаблица");
	КонецЕсли;
	
	Для каждого Поле Из СоответствиеБДИндекс Цикл
		
		Если СтрНайти(ПланЗапросаВМетаданных, Поле.Ключ) Тогда
			Если ТипСУБД = "DBPOSTGRS" Тогда
				Ключ = НРег(Поле.Ключ);
			Иначе
				Ключ = Поле.Ключ;
			КонецЕсли;
			ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Ключ, НСтр("ru = 'Индекс по'") + " " + Поле.Значение + "");
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Поле Из СоответствиеБДПоля Цикл
		Если СтрНайти(ТекстЗапросаВМетаданных, Поле.Ключ) Тогда
			ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				Ключ = НРег(Поле.Ключ);
			Иначе
				Ключ = Поле.Ключ;
			КонецЕсли;
			ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Ключ, Поле.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Поле Из СоответствиеБД Цикл
		Если СтрНайти(ТекстЗапросаВМетаданных, Поле.Ключ) Тогда
			ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, НРег(Поле.Ключ), Поле.Значение);
			ИначеЕсли ТипСУБД = "DBMSSQL" Тогда 
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[" + Поле.Ключ + "]", Поле.Значение);	
			Иначе
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВВидеМетаданных = Новый Структура();
	ВВидеМетаданных.Вставить("ТекстЗапросаВВидеМетаданных", ТекстЗапросаВМетаданных);
	ВВидеМетаданных.Вставить("ПланВыполненияЗапросаВМетаданных", ПланЗапросаВМетаданных);
	
	Возврат ВВидеМетаданных;
	
КонецФункции

// Параметры:
//   ПланЗапросаТекст - Строка
//   ПланЗапросаМетаданные - Строка
//   ДеревоПланЗапроса - ДеревоЗначений
//   СуммарнаяСтоимостьОбщая - Число
// 
Процедура ДеревоПланаВыполненияЗапроса(Знач ПланЗапросаТекст, Знач ПланЗапросаМетаданные, ДеревоПланЗапроса, СуммарнаяСтоимостьОбщая) Экспорт
	
	СуммарнаяСтоимостьОбщая = 0;
	
	Позиция = 1;
	ПредыдущаяПозиция = 0;
	СтрокаДерево = ДеревоПланЗапроса;
	Пока Позиция > 0  Цикл
		МассивЯчеек = Новый Массив;
		Для Индекс = 1 По 8 Цикл
			Позиция = СтрНайти(ПланЗапросаТекст, ",");
			МассивЯчеек.Добавить(СокрЛП(Лев(ПланЗапросаТекст, Позиция-1)));
			ПланЗапросаТекст = Сред(ПланЗапросаТекст, Позиция + 1);
		КонецЦикла;
		Позиция = СтрНайти(ПланЗапросаТекст, Символы.ПС);
		Если Позиция = 0 Тогда
			Оператор = ПланЗапросаТекст;
		Иначе
			Оператор = Лев(ПланЗапросаТекст, Позиция - 1);
		КонецЕсли;
		ПланЗапросаТекст = Сред(ПланЗапросаТекст, Позиция + 1);
	
		Для Индекс = 1 По 8 Цикл
			ПозицияМетаданные = СтрНайти(ПланЗапросаМетаданные, ",");
			ПланЗапросаМетаданные = Сред(ПланЗапросаМетаданные, ПозицияМетаданные + 1);
		КонецЦикла;
		ПозицияМетаданные = СтрНайти(ПланЗапросаМетаданные, Символы.ПС);
		Если ПозицияМетаданные > 0 Тогда
			ОператорМетаданные = Лев(ПланЗапросаМетаданные, ПозицияМетаданные - 1);
			ПланЗапросаМетаданные = Сред(ПланЗапросаМетаданные, ПозицияМетаданные + 1);
		Иначе
			ОператорМетаданные = ПланЗапросаМетаданные;
		КонецЕсли;
		
		ПозицияМетаданные = СтрНайти(ОператорМетаданные, "|--") - 4;
		
		Если ПозицияМетаданные = 0 Тогда 
			СтрокаДерево = ДеревоПланЗапроса.Строки.Добавить();
		Иначе
			Если ПредыдущаяПозиция < ПозицияМетаданные Тогда 
				СтрокаДерево = СтрокаДерево.Строки.Добавить();
			ИначеЕсли ПредыдущаяПозиция > ПозицияМетаданные Тогда 
				СтрокаДерево = НайтиПозициюВВетке(СтрокаДерево, ПозицияМетаданные); // СтрокаДереваЗначений
				Если СтрокаДерево <> Неопределено Тогда 
					СтрокаДерево = СтрокаДерево.Строки.Добавить();
				Иначе
					СтрокаДерево = ДеревоПланЗапроса.Строки.Добавить();
				КонецЕсли;
			Иначе 
				СтрокиУровнемВыше = СтрокаДерево.Родитель.Строки; // КоллекцияСтрокДереваЗначений
				СтрокаДерево = СтрокиУровнемВыше.Добавить();
				
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерево.Родитель = Неопределено Тогда
			СуммарнаяСтоимостьОбщая = СуммарнаяСтоимостьОбщая + ПреобразоватьВЧисло(МассивЯчеек[6]);
		КонецЕсли;

		ПозицияSQL = СтрНайти(Оператор, "|--");
		СтрокаДерево.Оператор = Сред(Оператор, ПозицияSQL + 3);
		СтрокаДерево.ОператорМетаданные = Сред(ОператорМетаданные, ПозицияМетаданные + 7);
		СтрокаДерево.Отступ = ПозицияМетаданные;
		СтрокаДерево.СтрокиФакт = МассивЯчеек[0];
		СтрокаДерево.ВызовыФакт = МассивЯчеек[1];
		СтрокаДерево.СтрокиПлан = МассивЯчеек[2];
		СтрокаДерево.ЗатратыВводаВывода = МассивЯчеек[3];
		СтрокаДерево.ЗагрузкаЦП = МассивЯчеек[4];
		СтрокаДерево.СреднийРазмерСтрок = МассивЯчеек[5];
		СтрокаДерево.СтоимостьОбщая = ПреобразоватьВЧисло(МассивЯчеек[6]);
		СтрокаДерево.ВызовыПлан = МассивЯчеек[7];
		ПредыдущаяПозиция = ПозицияМетаданные;
	КонецЦикла;
	
	РассчитатьСтоимостьОператоров(ДеревоПланЗапроса.Строки);
	
КонецПроцедуры

Функция РассчитатьСтоимостьОператоров(ВеткаДерева)
	
	Сумма = 0;
	
	Для каждого строка Из ВеткаДерева Цикл
		
		АккумуляторСтоимости = 0;
		
		Если Строка.Строки.Количество() > 0 Тогда
			АккумуляторСтоимости = РассчитатьСтоимостьОператоров(строка.Строки);
		КонецЕсли;
		
		СтоимостьОператора = Строка.СтоимостьОбщая - АккумуляторСтоимости;
		Строка.Стоимость = ?(СтоимостьОператора < 0, 0, СтоимостьОператора);
		Сумма = Сумма + Строка.СтоимостьОбщая;
		
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

// Параметры:
//   Ветка - СтрокаДереваЗначений:
//    * Отступ - Число
//   НомерПозиции - Число
//
// Возвращаемое значение:
//   СтрокаДереваЗначений
//   Неопределено
//
Функция НайтиПозициюВВетке(Ветка, НомерПозиции)
	
	Если Ветка.Отступ > НомерПозиции Тогда
		Возврат НайтиПозициюВВетке(Ветка.Родитель, НомерПозиции);
	ИначеЕсли Ветка.Отступ = НомерПозиции Тогда
		Возврат Ветка.Родитель;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПреобразоватьВЧисло(ЧислоСтрокой)
	
	Результат = 0;
	ЧислоСтрокой = СокрЛП(ВРег(ЧислоСтрокой));
	Если СтрДлина(ЧислоСтрокой) > 0 Тогда
		ПозицияЕ  = СтрНайти(ЧислоСтрокой, "E");
		Если ПозицияЕ = 0 Тогда 
			Результат = Число(ЧислоСтрокой);
		Иначе
			ЧислоДоЕ = Число(Лев(ЧислоСтрокой, ПозицияЕ - 1));
			ЧислоПослеЕ = Число(Сред(ЧислоСтрокой, ПозицияЕ + 1));
			Результат =  ЧислоДоЕ * Pow(10 ,ЧислоПослеЕ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
