///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ВыгружатьФайлыВКаталог = 1;
	ИзменитьВидимостьДоступность();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгружатьФайлыВКаталогПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РабочийКаталог) Тогда
		РабочийКаталог = ДобавитьКонечныйРазделительПути(РабочийКаталог);
	Иначе
		ВыгружатьФайлыВКаталог = 1;
	КонецЕсли;
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок          = НСтр("ru = 'Выберите каталог, в который выгружены файлы конфигурации'");
	ДиалогВыбора.Каталог            = РабочийКаталог(ЭтотОбъект);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("КаталогВыгрузкиКонфигурацииВФайлыЗавершениеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, ДиалогВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	#Если НЕ ВебКлиент Тогда
		
		Каталог = РабочийКаталог(ЭтотОбъект);
		Если Не ЗначениеЗаполнено(Каталог) Тогда
			Возврат;
		КонецЕсли;
		
		ФайловаяСистемаКлиент.ОткрытьПроводник(Каталог);
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектов

&НаКлиенте
Процедура ДеревоОбъектовИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные.Использование = 2 Тогда
		ТекущиеДанные.Использование = 0;
	КонецЕсли;
	
	ИзменитьПометкуРекурсивно(ТекущиеДанные, ТекущиеДанные.Использование);
	ОбновитьЛегенду();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаВыгрузкаКонфигурации Тогда
		
		Если ПустаяСтрока(РабочийКаталог) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Каталог выгрузки""'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "РабочийКаталог");
			Возврат;
		КонецЕсли;
		
		ВыгрузитьКонфигурациюИПрочитатьМетаданные();
		ОбновитьЛегенду();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиВнедрения;
		
	Иначе
		РазместитьФрагментыКода();
	КонецЕсли;
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыгрузкаКонфигурации;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовСнятьПометку(Команда)
	
	ИзменитьПометкуРекурсивно(ДеревоОбъектов, 0);
	ОбновитьЛегенду();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовУстановитьПометку(Команда)
	
	ИзменитьПометкуРекурсивно(ДеревоОбъектов, 1);
	ОбновитьЛегенду();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого ЭлементДерева Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого ЭлементДерева Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура КаталогВыгрузкиКонфигурацииВФайлыЗавершениеВыбора(ВыбранныеФайлы, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) <> Тип("Массив")
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РабочийКаталог = ДобавитьКонечныйРазделительПути(ВыбранныеФайлы[0]);
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаНастройкиВнедрения Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.Заголовок = НСтр("ru = 'Расставить фрагменты кода'");
	Иначе
		
		Элементы.ГруппаОткрытКонфигуратор.Видимость   = ОткрытКонфигуратор();
		Элементы.ГруппаКонфигурацияИзменена.Видимость = КонфигурацияБазыДанныхИзмененаДинамически()
															Или КонфигурацияИзменена();
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОформлениеВидовМетаданных = УсловноеОформление.Элементы.Добавить();
	
	ОтборУсловногоОформления                = ОформлениеВидовМетаданных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборУсловногоОформления.Использование  = Истина;
	ОтборУсловногоОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъектов.ВидМетаданных");
	ОтборУсловногоОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборУсловногоОформления.ПравоеЗначение = "ГруппаОбъектовМетаданных";
	
	ОформлениеВидовМетаданных.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	
	ПолеОформления               = ОформлениеВидовМетаданных.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ДеревоОбъектовОбъект");
	ПолеОформления.Использование = Истина;
	
	ОформлениеМетаданных = УсловноеОформление.Элементы.Добавить();
	
	ОтборУсловногоОформления                = ОформлениеМетаданных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборУсловногоОформления.Использование  = Истина;
	ОтборУсловногоОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъектов.ВидМетаданных");
	ОтборУсловногоОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборУсловногоОформления.ПравоеЗначение = "ОбъектМетаданных";
	
	ОформлениеМетаданных.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	
	ПолеОформления               = ОформлениеМетаданных.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ДеревоОбъектовОбъект");
	ПолеОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЛегенду()
	
	ВсегоФорм     = 0;
	УжеВстроено   = 0;
	БудетВстроено = 0;
	
	ОбновитьСчетчики(ДеревоОбъектов);
	
	Легенда = НСтр("ru = 'Всего форм: %1.
		|Уже встроено: %2.
		|Будет встроено: %3.'");
	Элементы.ДекорацияЛегенда.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Легенда,
			ВсегоФорм, УжеВстроено, БудетВстроено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчики(ЭлементДерева)
	
	КоллекцияЭлементов = ЭлементДерева.ПолучитьЭлементы();
	Если КоллекцияЭлементов.Количество() = 0 Тогда
		ВсегоФорм     = ВсегоФорм + 1;
		УжеВстроено   = УжеВстроено + ?(ЭлементДерева.Использование = 2, 1, 0);
		БудетВстроено = БудетВстроено + ?(ЭлементДерева.Использование = 1, 1, 0);
	Иначе
		
		Для Каждого ЭлементВетви Из КоллекцияЭлементов Цикл
			ОбновитьСчетчики(ЭлементВетви);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуРекурсивно(СтрокаДерева, Значение)
	
	ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыДерева Цикл
		ПодчиненныйЭлемент.Использование = Значение;
		ИзменитьПометкуРекурсивно(ПодчиненныйЭлемент, Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьКонфигурациюИПрочитатьМетаданные()
	
	КаталогВыгрузки = СтрЗаменить(РабочийКаталог(ЭтотОбъект), "\", ПолучитьРазделительПути());
	Если ВыгружатьФайлыВКаталог Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузки, Пользователь, Пароль);
	КонецЕсли;
	
	ЭлементыКорня = ДеревоОбъектов.ПолучитьЭлементы();
	ВидМетаданных = "ГруппаОбъектовМетаданных";
	
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	ДобавитьМетаданные(КаталогВыгрузки, Метаданные, ВидМетаданных, "ОбщиеФормы", ЭлементыКорня);
	ДобавитьМетаданные(КаталогВыгрузки, Метаданные, ВидМетаданных, "Справочники", ЭлементыКорня);
	ДобавитьМетаданные(КаталогВыгрузки, Метаданные, ВидМетаданных, "Документы", ЭлементыКорня);
	ДобавитьМетаданные(КаталогВыгрузки, Метаданные, ВидМетаданных, "Обработки", ЭлементыКорня);
	ДобавитьМетаданные(КаталогВыгрузки, Метаданные, ВидМетаданных, "БизнесПроцессы", ЭлементыКорня);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьФрагментыКода()
	
	ИзмененныеФайлы = Новый Массив;
	РазместитьФрагментыВВыбранныхФормах(РабочийКаталог, ДеревоОбъектов, ИзмененныеФайлы);
	УстановитьПометкуЗавершенных(ДеревоОбъектов);
	
	БудетВстроено = 0;
	Легенда = НСтр("ru = 'Всего форм: %1.
		|Уже встроено: %2.
		|Будет встроено: %3.'");
	Элементы.ДекорацияЛегенда.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Легенда,
			ВсегоФорм, УжеВстроено, БудетВстроено);
	
	Если ВыгружатьФайлыВКаталог Тогда
		ЗагрузитьКонфигурациюИзXML(РабочийКаталог, Пользователь, Пароль, ИзмененныеФайлы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуЗавершенных(ЭлементДерева)
	
	Для Каждого ПодчиненныйЭлемент Из ЭлементДерева.ПолучитьЭлементы() Цикл
		
		Если ПодчиненныйЭлемент.Использование = 1 Тогда
			
			Если ПодчиненныйЭлемент.ВидМетаданных = "Форма" Тогда
				УжеВстроено = УжеВстроено + 1;
				ПодчиненныйЭлемент.Использование = 2;
			Иначе
				ПодчиненныйЭлемент.Использование = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПометкуЗавершенных(ПодчиненныйЭлемент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьКонфигурациюВXML(РабочийКаталог, Пользователь, Пароль)
	
	ПСТаб = Символы.ПС + Символы.Таб;
	Если ФайлСуществует(РабочийКаталог) Тогда
		УдалитьФайлы(РабочийКаталог, "*");
	Иначе
		СоздатьКаталог(РабочийКаталог);
	КонецЕсли;
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	КаталогКопии1CD = Неопределено;
	
	Если ОткрытКонфигуратор() Тогда
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПутьККонфигурации).file;
			КаталогКопии1CD = РабочийКаталог + "BaseCopy" + ПолучитьРазделительПути();
			СоздатьКаталог(КаталогКопии1CD);
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогКопии1CD + "1Cv8.1CD");
			ПутьККонфигурации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"File=""%1"";", КаталогКопии1CD);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Для выгрузки модулей закройте конфигуратор.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФайлаСообщений = РабочийКаталог + "Выгрузка.log";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(ПутьККонфигурации);
	Если Не ПустаяСтрока(Пользователь) Тогда 
		
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Пользователь);
		Если Не ПустаяСтрока(Пароль) Тогда
			КомандаЗапуска.Добавить("/P");
			КомандаЗапуска.Добавить(Пароль);
		КонецЕсли;
		
	КонецЕсли;
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(РабочийКаталог);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог выгрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости выгрузки модулей;
	//		Template - признак необходимости выгрузки шаблонов;
	//		Help - признак необходимости выгрузки справочной информации;
	//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	
	Если КаталогКопии1CD <> Неопределено Тогда
		
		Попытка
			УдалитьФайлы(КаталогКопии1CD);
		Исключение
			// Если сейчас каталог еще занят другим процессом, то он будет удален позднее автоматически.
		КонецПопытки;
		
	КонецЕсли;
	
	Если Результат.КодВозврата <> 0 Тогда
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		Исключение
			Сообщения = "";
		КонецПопытки;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выгрузить конфигурацию в XML (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, ПСТаб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаСообщений);
	Исключение
		// Если сейчас файл еще занят другим процессом, то он будет удален позднее автоматически.
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьКонфигурациюИзXML(РабочийКаталог, Пользователь, Пароль, ИзмененныеФайлы)
	
	ИмяФайлаИзмененныеФайлы = РабочийКаталог + "ИзмененныеФайлы.txt";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаИзмененныеФайлы, КодировкаТекста.UTF8, , Ложь);
	ЗаписьТекста.Записать(СтрСоединить(ИзмененныеФайлы, Символы.ПС));
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ИмяФайлаОшибок = РабочийКаталог + "OutUpload.txt";
	
	//	/LoadConfigFromFiles <каталог загрузки> [-Extension <имя расширения>] [-AllExtensions][-files][-listfile][-format]
	//	- загрузка конфигурации из файлов. Загрузка расширения в основную конфигурацию (и наоборот) не поддерживается.
	//	Допустимо использование следующих опций:
	//		<каталог загрузки> - каталог, содержащий XML-файлы конфигурации;
	//		Extension <Имя расширения> - обработка расширения с указанным именем.
	//			Если расширение успешно обработано возвращает код возврата 0.
	//			В противном случае (если расширение с указанным именем не существует или в процессе работы произошли ошибки) - 1.
	//		AllExtensions - загрузка только расширений (всех).
	//			Если требуемое расширение не существует, оно будет создано.
	//			Для каждого подкаталога указанного каталога будет выполнена попытка создать расширение.
	//			При попытке загрузить расширение в основную конфигурацию или наоборот, будет выведена ошибка.
	//		files - содержит список файлов, которые требуется загрузить. Список разделяется запятыми.
	//			Не используется, если указана опция-listfile.
	//		listfile - указывает файл, в котором перечислены файлы, которые требуется загрузить.
	//			Не используется, если указана опция -files. 
	//			Указываемый файл должен удовлетворять следующим требованиям:
	//			- Файл должен быть в кодировке UTF-8.
	//			- Имена файлов должны быть указаны через перенос.
	//				Поддерживаются символы переноса \r\n ("следующая строка") и \r ("возврат каретки").
	//			- Файл не должен содержать пустые строки между именами файлов.
	//		format - используется для частичной загрузки. Указывает формат загрузки файлов.
	//			По умолчанию загрузка производится в иерархическом формате:
	//			Hierarchical - загрузка выполняется в иерархическом формате.
	//			Plain - загрузка выполняется в линейном формате.
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединенияИнформационнойБазы());
	Если Не ПустаяСтрока(Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/LoadConfigFromFiles");
	КомандаЗапуска.Добавить(РабочийКаталог);
	КомандаЗапуска.Добавить("-listFile");
	КомандаЗапуска.Добавить(ИмяФайлаИзмененныеФайлы);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаОшибок);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	АдресФайлаРучнойЗагрузки = РабочийКаталог + "load.cmd";
	ЗаписьТекста = Новый ЗаписьТекста(АдресФайлаРучнойЗагрузки, КодировкаТекста.OEM);
	ЗаписьТекста.Записать(ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска));
	ЗаписьТекста.Закрыть();
	
	Если ОткрытКонфигуратор() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Конфигурация не загружена, т.к. открыт конфигуратор.
				|Загрузку можно выполнить в конфигураторе из каталога ""%1"" (или запустив файл ""%2"").'"),
			РабочийКаталог,
			АдресФайлаРучнойЗагрузки);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		
		Если Не ФайлСуществует(ИмяФайлаОшибок) Тогда
			ТекстПричины = "";
		Иначе
			
			Ошибки = Новый ТекстовыйДокумент;
			Ошибки.Прочитать(ИмяФайлаОшибок);
			
			ТекстПричины = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По причине: %1.'"), Ошибки.ПолучитьТекст());
			
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить XML конфигурации (код ошибки ""%1""). %2'"),
			Результат.КодВозврата, ТекстПричины);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьМетаданные(РабочийКаталог, ОбъектМетаданных, ВидМетаданных, ДобавляемыйУровень, УровеньДобавления)
	
	Если ВидМетаданных = "ОбъектМетаданных"
		И ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТекущегоУровня = УровеньДобавления.Добавить();
	СтрокаТекущегоУровня.Объект = ?(ВидМетаданных = "ГруппаОбъектовМетаданных", ДобавляемыйУровень, ОбъектМетаданных.Имя);
	СтрокаТекущегоУровня.ВидМетаданных = ВидМетаданных;
	
	ЭлементыУровня = СтрокаТекущегоУровня.ПолучитьЭлементы();
	Если ВидМетаданных <> "Форма" Тогда
		
		Для Каждого ПодчиненныйОбъект Из ОбъектМетаданных[ДобавляемыйУровень] Цикл
			
			Если ДобавляемыйУровень = "ОбщиеФормы"
				ИЛИ ДобавляемыйУровень = "Формы" Тогда
				УровеньПодчиненных = Неопределено;
				ВидПодчиненныхМетаданных = "Форма";
			ИначеЕсли ДобавляемыйУровень = "ОбъектМетаданных" Тогда
				УровеньПодчиненных = "Формы";
				ВидПодчиненныхМетаданных = "Форма";
			ИначеЕсли ДобавляемыйУровень = "Справочники"
				ИЛИ ДобавляемыйУровень = "Документы"
				ИЛИ ДобавляемыйУровень = "Обработки"
				ИЛИ ДобавляемыйУровень = "БизнесПроцессы" Тогда
				УровеньПодчиненных = "Формы";
				ВидПодчиненныхМетаданных = "ОбъектМетаданных";
			КонецЕсли;
			
			ДобавитьМетаданные(РабочийКаталог, ПодчиненныйОбъект, ВидПодчиненныхМетаданных, УровеньПодчиненных, ЭлементыУровня);
			
		КонецЦикла;
		
		Если ЭлементыУровня.Количество() = 0 Тогда
			УровеньДобавления.Удалить(СтрокаТекущегоУровня);
		КонецЕсли;
		
	Иначе
		
		ПутьКОписаниюФормы = КаталогФормы(РабочийКаталог, СтрокаТекущегоУровня);
		СтрокаТекущегоУровня.Использование = НеобходимостьВнедрения(ПутьКОписаниюФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытКонфигуратор()
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимостьВнедрения(Путь)
	
	ФайлОписания = СтрЗаменить(Путь + "Form.xml", "\", ПолучитьРазделительПути());
	Если Не ФайлСуществует(ФайлОписания) Тогда
		ВызватьИсключение НСтр("ru = 'Выгруженные файлы не соответствуют актуальной конфигурации.'");
	КонецЕсли;
	
	МодульФормы = СтрЗаменить(Путь + "Form\Module.bsl", "\", ПолучитьРазделительПути());
	Если Не ФайлСуществует(МодульФормы) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(МодульФормы);
	
	ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
	Если СтрНайти(НРег(ТекстМодуля), НРег("РаботаСФайлами.ПриСозданииНаСервере(")) > 0 Тогда
		Возврат 2;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОписания);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM    = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	Выражение             = "/xmlns:Form/xmlns:Attributes/xmlns:Attribute/xmlns:MainAttribute[text()='true']/parent::*/xmlns:Type/v8:Type";
	РезультатXPath        = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	ТипОсновногоРеквизита = РезультатXPath.ПолучитьСледующий();
	Если ТипОсновногоРеквизита = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипДанных = ИзXMLТипа(Новый ТипДанныхXML(СтрЗаменить(ТипОсновногоРеквизита.ТекстовоеСодержимое, "cfg:", ""), ""));
	Если ТипДанных = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипСтрокой = СтроковоеПредставлениеТипа(ТипДанных);
	Если ТипСтрокой <> Неопределено Тогда
		
		ТипыВладельцев = Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.Типы();
		Если ТипыВладельцев.Найти(Тип(ТипСтрокой)) <> Неопределено Тогда
			Возврат 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазместитьФрагментыВВыбранныхФормах(РабочийКаталог, ЭлементДерева, МассивИзмененныхФайлов)
	
	Для Каждого ЭлементВетви Из ЭлементДерева.ПолучитьЭлементы() Цикл
		
		Если ЭлементВетви.ВидМетаданных = "Форма" Тогда
			Если ЭлементВетви.Использование = 1 Тогда
				ПутьКОписаниюФормы = КаталогФормы(РабочийКаталог, ЭлементВетви);
				ДобавитьФрагментВФорму(ПутьКОписаниюФормы, МассивИзмененныхФайлов, ЭлементВетви.Объект);
			КонецЕсли;
		Иначе
			РазместитьФрагментыВВыбранныхФормах(РабочийКаталог, ЭлементВетви, МассивИзмененныхФайлов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КаталогФормы(РабочийКаталог, СтрокаДерева)
	
	ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
	Если ТекущийРодитель.ВидМетаданных = "ГруппаОбъектовМетаданных" Тогда
		ПутьКОписаниюФормы = РабочийКаталог + "CommonForms\" + СтрокаДерева.Объект + "\Ext\";
	Иначе
		
		ШаблонПути = "[ВидОбъекта]\[ИмяОбъекта]\Forms\[ИмяФормы]\Ext\";
		
		Родитель = ТекущийРодитель.ПолучитьРодителя();
		СтруктураПараметров = Новый Структура("ВидОбъекта");
		Если Родитель.Объект = "Справочники" Тогда
			СтруктураПараметров.ВидОбъекта = "Catalogs";
		ИначеЕсли Родитель.Объект = "Документы" Тогда
			СтруктураПараметров.ВидОбъекта = "Documents";
		ИначеЕсли Родитель.Объект = "Обработки" Тогда
			СтруктураПараметров.ВидОбъекта = "DataProcessors";
		ИначеЕсли Родитель.Объект = "БизнесПроцессы" Тогда
			СтруктураПараметров.ВидОбъекта = "BusinessProcesses";
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ИмяФормы"  , СтрокаДерева.Объект);
		СтруктураПараметров.Вставить("ИмяОбъекта", ТекущийРодитель.Объект);
		
		ПутьКОписаниюФормы = РабочийКаталог
				+ СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПути, СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат ПутьКОписаниюФормы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьФрагментВФорму(Путь, МассивИзмененныхФайлов, ИмяФормы)
	
	Разделитель  = ПолучитьРазделительПути();
	ФайлОписания = СтрЗаменить(Путь + "Form.xml", "\", Разделитель);
	Если Не ФайлСуществует(ФайлОписания) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОписания);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM    = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	Выражение             = "/xmlns:Form/xmlns:Attributes/xmlns:Attribute/xmlns:MainAttribute[text()='true']/parent::*/xmlns:Type/v8:Type";
	РезультатXPath        = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	ТипОсновногоРеквизита = РезультатXPath.ПолучитьСледующий();
	Если ТипОсновногоРеквизита <> Неопределено Тогда
	
		ТипДанных = ИзXMLТипа(Новый ТипДанныхXML(СтрЗаменить(ТипОсновногоРеквизита.ТекстовоеСодержимое, "cfg:", ""), ""));
		Если ТипДанных <> Неопределено Тогда
			
			ТипСтрокой = СтроковоеПредставлениеТипа(ТипДанных);
			Если ТипСтрокой <> Неопределено Тогда
				
				ТипыВладельцев = Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.Типы();
				Если ТипыВладельцев.Найти(Тип(ТипСтрокой)) <> Неопределено Тогда
					ИсключитьОбщуюКоманду(ДокументDOM);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьСобытияФормы(ДокументDOM);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлОписания);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ФайлМодуля = СтрЗаменить(Путь + "Form\Module.bsl", "\", Разделитель);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Если Не ФайлСуществует(ФайлМодуля) Тогда
		ТекстМодуля = "";
		СоздатьКаталог(СтрЗаменить(Путь + "Form", "\", Разделитель));
	Иначе
		ТекстовыйДокумент.Прочитать(ФайлМодуля);
		ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
	КонецЕсли;
	
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура ПриСозданииНаСервере");
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура ПриОткрытии");
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура ОбработкаОповещения");
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура Подключаемый_ПолеПредпросмотраНажатие");
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания");
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура Подключаемый_ПолеПредпросмотраПеретаскивание");
	ОбработкаСтандартнойПроцедуры(ТекстМодуля, "Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов");
	
	ТекстМетодаНажатие        = ТекстМетода(ТекстМодуля, "Процедура Подключаемый_ПолеПредпросмотраНажатие");
	ТекстМетодаПроверки       = ТекстМетода(ТекстМодуля, "Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания");
	ТекстМетодаПеретаскивание = ТекстМетода(ТекстМодуля, "Процедура Подключаемый_ПолеПредпросмотраПеретаскивание");
	
	НачалоМетодаНажатие        = СтрНайти(ТекстМодуля, ТекстМетодаНажатие);
	НачалоМетодаПроверки       = СтрНайти(ТекстМодуля, ТекстМетодаПроверки);
	НачалоМетодаПеретаскивание = СтрНайти(ТекстМодуля, ТекстМетодаПеретаскивание);
	
	Если НачалоМетодаНажатие < НачалоМетодаПроверки Тогда
		Если НачалоМетодаПеретаскивание < НачалоМетодаНажатие Тогда
			ТекстМетода = ТекстМетодаПеретаскивание;
		Иначе
			ТекстМетода = ТекстМетодаНажатие;
		КонецЕсли;
	Иначе
		Если НачалоМетодаПеретаскивание < НачалоМетодаПроверки Тогда
			ТекстМетода = ТекстМетодаПеретаскивание;
		Иначе
			ТекстМетода = ТекстМетодаПроверки;
		КонецЕсли;
	КонецЕсли;
	
	РасставитьКомментарии(ТекстМодуля, ТекстМетода, Истина, Ложь);
	
	Если НачалоМетодаНажатие > НачалоМетодаПроверки Тогда
		Если НачалоМетодаПеретаскивание > НачалоМетодаНажатие Тогда
			ТекстМетода = ТекстМетодаПеретаскивание;
		Иначе
			ТекстМетода = ТекстМетодаНажатие;
		КонецЕсли;
	Иначе
		Если НачалоМетодаПеретаскивание > НачалоМетодаПроверки Тогда
			ТекстМетода = ТекстМетодаПеретаскивание;
		Иначе
			ТекстМетода = ТекстМетодаПроверки;
		КонецЕсли;
	КонецЕсли;
	
	РасставитьКомментарии(ТекстМодуля, ТекстМетода, Ложь, Истина);
	
	ТекстМетода = ТекстМетода(ТекстМодуля, "Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов");
	РасставитьКомментарии(ТекстМодуля, ТекстМетода);
	
	ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
	ТекстовыйДокумент.Записать(ФайлМодуля);
	
	КорневойЭлемент = СтрЗаменить(Путь, Разделитель + "Ext" + Разделитель, ".xml");
	МассивИзмененныхФайлов.Добавить(КорневойЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодключитьСобытияФормы(ДокументDOM)
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	Результат = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Form", ДокументDOM, Разыменователь);
	УзелФормы = Результат.ПолучитьСледующий();
	
	Результат = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Form/xmlns:Events", ДокументDOM, Разыменователь);
	УзелСобытий = Результат.ПолучитьСледующий();
	Если УзелСобытий = Неопределено Тогда
		УзелСобытий = УзелФормы.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Events"));
	КонецЕсли;
	
	ДобавитьСобытие(ДокументDOM, Разыменователь, УзелСобытий, "OnCreateAtServer", "ПриСозданииНаСервере");
	ДобавитьСобытие(ДокументDOM, Разыменователь, УзелСобытий, "OnOpen", "ПриОткрытии");
	ДобавитьСобытие(ДокументDOM, Разыменователь, УзелСобытий, "NotificationProcessing", "ОбработкаОповещения");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСобытие(ДокументDOM, Разыменователь, УзелСобытий, ИмяСобытия, ИмяПроцедуры)

	Выражение = "/xmlns:Form/xmlns:Events/xmlns:Event[@name='" + ИмяСобытия + "']";
	Результат = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	УзелСобытия = Результат.ПолучитьСледующий();
	Если УзелСобытия = Неопределено Тогда
		УзелСобытия = ДокументDOM.СоздатьЭлемент("Event");
		УзелСобытия.УстановитьАтрибут("name", ИмяСобытия);
		УзелСобытия.ДобавитьДочерний(ДокументDOM.СоздатьТекстовыйУзел(ИмяПроцедуры));
		УзелСобытий.ДобавитьДочерний(УзелСобытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсключитьОбщуюКоманду(ДокументDOM)
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	Результат = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Form", ДокументDOM, Разыменователь);
	УзелФормы = Результат.ПолучитьСледующий();
	
	Результат = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Form/xmlns:CommandInterface", ДокументDOM, Разыменователь);
	УзелКомандногоИнтерфейса = Результат.ПолучитьСледующий();
	Если УзелКомандногоИнтерфейса = Неопределено Тогда
		УзелКомандногоИнтерфейса = УзелФормы.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("CommandInterface"));
	КонецЕсли;
	
	ВыражениеПанельНавигации = "/xmlns:Form/xmlns:CommandInterface/xmlns:NavigationPanel";
	Результат = ДокументDOM.ВычислитьВыражениеXPath(ВыражениеПанельНавигации, ДокументDOM, Разыменователь);
	УзелПанельНавигации = Результат.ПолучитьСледующий();
	Если УзелПанельНавигации = Неопределено Тогда
		УзелПанельНавигации = УзелКомандногоИнтерфейса.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("NavigationPanel"));
	КонецЕсли;
	
	ВыражениеКоманды = "/xmlns:Form/xmlns:CommandInterface/xmlns:NavigationPanel/xmlns:Item/xmlns:Command[text()='CommonCommand.ПрисоединенныеФайлы']/parent::*";
	Результат        = ДокументDOM.ВычислитьВыражениеXPath(ВыражениеКоманды, ДокументDOM, Разыменователь);
	УзелКоманды      = Результат.ПолучитьСледующий();
	Если УзелКоманды = Неопределено Тогда
		
		УзелКоманды = УзелПанельНавигации.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Item"));
		ДобавитьСвойствоУзла(ДокументDOM, УзелКоманды, "Command", "CommonCommand.ПрисоединенныеФайлы");
		ДобавитьСвойствоУзла(ДокументDOM, УзелКоманды, "Type", "Auto");
		ДобавитьСвойствоУзла(ДокументDOM, УзелКоманды, "CommandGroup", "FormNavigationPanelGoTo");
		ДобавитьСвойствоУзла(ДокументDOM, УзелКоманды, "DefaultVisible", "false");
		
		УзелСвойства = УзелКоманды.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Visible"));
		ДобавитьСвойствоУзла(ДокументDOM, УзелСвойства, "xr:Common", "false");
		
	Иначе
		
		Результат = ДокументDOM.ВычислитьВыражениеXPath(ВыражениеКоманды + "/xmlns:DefaultVisible", ДокументDOM, Разыменователь);
		УзелСвойства = Результат.ПолучитьСледующий();
		Если УзелСвойства <> Неопределено Тогда
			УзелКоманды.УдалитьДочерний(УзелСвойства);
		КонецЕсли;
		
		ДобавитьСвойствоУзла(ДокументDOM, УзелКоманды, "DefaultVisible", "false");
		
		ВыражениеКоманды = ВыражениеКоманды + "/xmlns:Visible";
		Результат = ДокументDOM.ВычислитьВыражениеXPath(ВыражениеКоманды, ДокументDOM, Разыменователь);
		УзелСвойства = Результат.ПолучитьСледующий();
		Если УзелСвойства <> Неопределено Тогда
			УзелКоманды.УдалитьДочерний(УзелСвойства);
		КонецЕсли;
		
		УзелСвойства = УзелКоманды.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Visible"));
		ДобавитьСвойствоУзла(ДокументDOM, УзелСвойства, "xr:Common", "false");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСвойствоУзла(ДокументDOM, Узел, ИмяСвойства, Значение)
	
	УзелСвойства = Узел.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент(ИмяСвойства));
	УзелСвойства.ДобавитьДочерний(ДокументDOM.СоздатьТекстовыйУзел(Значение));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтроковоеПредставлениеТипа(ТипДанных)
	
	ТипСтрокой = "";
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДанных);
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ТипСтрокой = "СправочникСсылка";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ТипСтрокой = "ДокументСсылка";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		ТипСтрокой = "БизнесПроцессСсылка";
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		ТипСтрокой = "ЗадачаСсылка";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТипСтрокой + "." + ОбъектМетаданных.Имя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФайлСуществует(ПолноеИмяФайла)
	
	// АПК:566-выкл обработка работает только синхронно.
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
	// АПК:566-вкл
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога)
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РабочийКаталог(Форма)
	
	Если ЗначениеЗаполнено(Форма.РабочийКаталог) Тогда
		Возврат Форма.РабочийКаталог;
	ИначеЕсли СтрНачинаетсяС(Форма.Элементы.РабочийКаталог.ПодсказкаВвода, "<") Тогда
		Возврат "";
	Иначе
		Возврат Форма.Элементы.РабочийКаталог.ПодсказкаВвода;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОбласти(ТекстМодуля, ИмяОбласти)
	
	ПолноеИмяОбласти = "#область " + НРег(ИмяОбласти);
	
	НачалоОбласти = СтрНайти(НРег(ТекстМодуля), ПолноеИмяОбласти);
	Если НачалоОбласти > 0 Тогда
		
		ТекстОбласти = Сред(ТекстМодуля, НачалоОбласти);
		ТекстПоиска = Сред(ТекстОбласти, 3);
		
		СтекОбластей = Новый Массив;
		СтекОбластей.Добавить("НачалоОбласти");
		Пока СтекОбластей.Количество() > 0 Цикл
			
			КонецОбласти = СтрНайти(НРег(ТекстПоиска), НРег("#КонецОбласти"));
			НачалоСледующейОбласти = СтрНайти(НРег(ТекстПоиска), НРег("#Область"));
			Если НачалоСледующейОбласти = 0 Тогда
				НачалоСледующейОбласти = СтрДлина(ТекстПоиска);
			КонецЕсли;
			
			Если НачалоСледующейОбласти < КонецОбласти Тогда
				
				СтекОбластей.Вставить(0, "НачалоОбласти");
				ТекстПоиска = Сред(ТекстПоиска, НачалоСледующейОбласти + 3);
				
			Иначе
				
				СтекОбластей.Удалить(0);
				ТекстПоиска = Сред(ТекстПоиска, КонецОбласти + 3);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОбласти = Лев(ТекстОбласти, СтрДлина(ТекстОбласти) - СтрДлина(ТекстПоиска) + 10);
		
	Иначе
		ТекстОбласти = ДобавитьОбласть(ТекстМодуля, ИмяОбласти);
	КонецЕсли;
	
	Возврат ТекстОбласти;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьОбласть(ТекстМодуля, ИмяОбласти)
	
	ТекстОбласти = "#Область " + ИмяОбласти + "
			|
			|#КонецОбласти";
	
	Если ИмяОбласти = "ОбработчикиСобытийФормы" Тогда
		ТекстМодуля = ТекстОбласти + Символы.ПС
				+ Символы.ПС + ТекстМодуля;
	Иначе
		ТекстМодуля = ТекстМодуля + Символы.ПС
				+ Символы.ПС + ТекстОбласти;
	КонецЕсли;
	
	Возврат ТекстОбласти;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстМетода(ТекстОбластиПоиска, Заголовок)
	
	ТекстМетода   = "";
	ИмяМетодаНРег = НРег(Заголовок) + "(";
	НачалоМетода  = СтрНайти(НРег(ТекстОбластиПоиска), ИмяМетодаНРег);
	Если НачалоМетода > 0 Тогда
		
		ТекстМетода        = Сред(ТекстОбластиПоиска, НачалоМетода);
		ОкончаниеПроцедуры = СтрНайти(НРег(ТекстМетода), ?(СтрНачинаетсяС(ИмяМетодаНРег, "процедура"), НРег("КонецПроцедуры"), НРег("КонецФункции")));
		ТекстМетода        = Лев(ТекстМетода, ОкончаниеПроцедуры + ?(СтрНачинаетсяС(ИмяМетодаНРег, "процедура"), 13, 11));
		
	КонецЕсли;
	
	Возврат ТекстМетода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМетодВОбласть(ТекстОбласти, ИмяОбласти, Заголовок, Параметры, Директива, ВНачало)
	
	ТекстМетода = Заголовок + Параметры + "
					|
					|" + ?(СтрНачинаетсяС(Заголовок, "Процедура"), "КонецПроцедуры", "КонецФункции");
	
	ТекстДобавления = Директива + "
					|" + ТекстМетода;
	
	Если ВНачало Тогда
		
		НачалоОбласти  = Лев(ТекстОбласти, СтрДлина(ИмяОбласти) + 9);
		ТекстДляЗамены = НачалоОбласти + Символы.ПС + Символы.ПС + ТекстДобавления;
		ТекстОбласти   = ТекстДляЗамены + Прав(ТекстОбласти, СтрДлина(ТекстОбласти) - СтрДлина(НачалоОбласти));
		
	Иначе
		
		ОкончаниеОбласти = Прав(ТекстОбласти, 13);
		ТекстДляЗамены   = ТекстДобавления + Символы.ПС + Символы.ПС + ОкончаниеОбласти;
		ТекстОбласти     = Лев(ТекстОбласти, СтрДлина(ТекстОбласти) - 13) + ТекстДляЗамены;
		
	КонецЕсли;
	
	Возврат ТекстМетода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьМетод(ТекстМетода, ТекстВставки)
	
	Если СтрЗаканчиваетсяНа(ТекстМетода, ";") Тогда
		ТекстМетода = Лев(ТекстМетода, СтрДлина(ТекстМетода - 1));
	КонецЕсли;
	
	ОкончаниеМетода = Прав(ТекстМетода, ?(СтрЗаканчиваетсяНа(НРег(ТекстМетода), НРег("КонецПроцедуры")), 14, 12));
	Возврат СтрЗаменить(ТекстМетода, ОкончаниеМетода, ТекстВставки + Символы.ПС + Символы.ПС + ОкончаниеМетода);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаСтандартнойПроцедуры(ТекстМодуля, ЗаголовокМетода)
	
	Директива        = "&НаКлиенте";
	ОчищатьМетод     = Ложь;
	ДобавлятьВНачало = Ложь;
	Если ЗаголовокМетода = "Процедура ПриСозданииНаСервере" Тогда
		
		Директива               = "&НаСервере";
		ИмяОбласти              = "ОбработчикиСобытийФормы";
		ДобавлятьВНачало        = Истина;
		ПараметрыМетода         = "(Отказ, СтандартнаяОбработка)";
		ТекстСтандартнойВставки = "	// СтандартныеПодсистемы.РаботаСФайлами
				|	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
				|	ГиперссылкаФайлов.Размещение = ""КоманднаяПанель"";
				|	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
				|	// Конец СтандартныеПодсистемы.РаботаСФайлами";
	
	ИначеЕсли ЗаголовокМетода = "Процедура ПриОткрытии" Тогда
		
		ИмяОбласти              = "ОбработчикиСобытийФормы";
		ПараметрыМетода         = "(Отказ)";
		ТекстСтандартнойВставки = "	// СтандартныеПодсистемы.РаботаСФайлами
				|	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
				|	// Конец СтандартныеПодсистемы.РаботаСФайлами";
		
	ИначеЕсли ЗаголовокМетода = "Процедура ОбработкаОповещения" Тогда
		
		ИмяОбласти              = "ОбработчикиСобытийФормы";
		ПараметрыМетода         = "(ИмяСобытия, Параметр, Источник)";
		ТекстСтандартнойВставки = "	// СтандартныеПодсистемы.РаботаСФайлами
				|	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
				|	// Конец СтандартныеПодсистемы.РаботаСФайлами";
		
	ИначеЕсли ЗаголовокМетода = "Процедура Подключаемый_ПолеПредпросмотраНажатие" Тогда
		
		ИмяОбласти              = "ОбработчикиСобытийЭлементовШапкиФормы";
		ОчищатьМетод            = Истина;
		ПараметрыМетода         = "(Элемент, СтандартнаяОбработка)";
		ТекстСтандартнойВставки = "	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);";
		
	ИначеЕсли ЗаголовокМетода = "Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания" Тогда
		
		ИмяОбласти              = "ОбработчикиСобытийЭлементовШапкиФормы";
		ОчищатьМетод            = Истина;
		ПараметрыМетода         = "(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)";
		ТекстСтандартнойВставки = "	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				|				ПараметрыПеретаскивания, СтандартнаяОбработка);";
		
	ИначеЕсли ЗаголовокМетода = "Процедура Подключаемый_ПолеПредпросмотраПеретаскивание" Тогда
		
		ИмяОбласти              = "ОбработчикиСобытийЭлементовШапкиФормы";
		ОчищатьМетод            = Истина;
		ПараметрыМетода         = "(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)";
		ТекстСтандартнойВставки = "	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				|				ПараметрыПеретаскивания, СтандартнаяОбработка);";
		
	ИначеЕсли ЗаголовокМетода = "Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов" Тогда
		
		ИмяОбласти              = "ОбработчикиКомандФормы";
		ОчищатьМетод            = Истина;
		ПараметрыМетода         = "(Команда)";
		ТекстСтандартнойВставки = "	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);";
		
	КонецЕсли;
	
	ТекстОбласти = "";
	ТекстМетода = ТекстМетода(ТекстМодуля, ЗаголовокМетода);
	Если ПустаяСтрока(ТекстМетода) Тогда
		
		ТекстОбласти = ТекстОбласти(ТекстМодуля, ИмяОбласти);
		ТекстЗамены  = ТекстОбласти;
		ТекстМетода  = ДобавитьМетодВОбласть(ТекстЗамены, ИмяОбласти,
				ЗаголовокМетода, ПараметрыМетода, Директива, ДобавлятьВНачало);
		ТекстМодуля  = СтрЗаменить(ТекстМодуля, ТекстОбласти, ТекстЗамены);
		ТекстОбласти = ТекстЗамены;
		
	КонецЕсли;
	
	НачалоВставки = СтрНайти(НРег(ТекстМетода), НРег("// СтандартныеПодсистемы.РаботаСФайлами"));
	Если НачалоВставки = 0 Тогда
		ТекстСуществующейВставки = "";
	Иначе
		
		Если Сред(ТекстМетода, НачалоВставки - 1, 1) = Символы.Таб Тогда
			НачалоВставки = НачалоВставки - 1;
		КонецЕсли;
		
		ТекстВставки             = Сред(ТекстМетода, НачалоВставки);
		ТекстОкончанияВставки    = НРег("// Конец СтандартныеПодсистемы.РаботаСФайлами");
		ОкончаниеВставки         = СтрНайти(НРег(ТекстВставки), ТекстОкончанияВставки);
		ТекстСуществующейВставки = Лев(ТекстВставки, ОкончаниеВставки - 1 + СтрДлина(ТекстОкончанияВставки));
		
	КонецЕсли;
	
	ТекстМетода = ТекстМетода(ТекстМодуля, ЗаголовокМетода);
	ТекстДляЗамены = ТекстМетода;
	Если Не ПустаяСтрока(ТекстСуществующейВставки) Тогда
		ТекстДляЗамены = СтрЗаменить(ТекстДляЗамены, ТекстСуществующейВставки, ТекстСтандартнойВставки);
	Иначе
		
		Если ОчищатьМетод Тогда
			
			ТекстДляЗамены = ЗаголовокМетода + ПараметрыМетода + "
						|
						|" + ?(СтрНачинаетсяС(ЗаголовокМетода, "Процедура"), "КонецПроцедуры", "КонецФункции");
			
		КонецЕсли;
		
		ТекстДляЗамены = ДополнитьМетод(ТекстДляЗамены, ТекстСтандартнойВставки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОбласти) Тогда
		ТекущийТекстОбласти = СтрЗаменить(ТекстОбласти, ТекстМетода, ТекстДляЗамены);
		ТекстМодуля         = СтрЗаменить(ТекстМодуля, ТекстОбласти, ТекущийТекстОбласти);
	Иначе
		ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстМетода, ТекстДляЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасставитьКомментарии(ТекстМодуля, ТекстМетода, ВНачале = Истина, ВКонце = Истина)
	
	Если ВНачале Тогда
		
		НачалоМетода = СтрНайти(ТекстМодуля, ТекстМетода);
		ТекстДоМетода = Лев(ТекстМодуля, НачалоМетода - 1);
		ТекстСКомментарием = ТекстМетода;
		Если СтрЗаканчиваетсяНа(СокрЛП(НРег(ТекстДоМетода)), НРег("&НаКлиенте")) Тогда
			
			ТекстСКомментарием = "&НаКлиенте
					|" + ТекстСКомментарием;
			
			ТекстМетода = "&НаКлиенте
					|" + ТекстМетода;
			
			ТекстДоМетода = Лев(ТекстДоМетода, СтрДлина(ТекстДоМетода) - 11);
			
		КонецЕсли;
		
		Если Не СтрЗаканчиваетсяНа(СокрЛП(НРег(ТекстДоМетода)), НРег(".РаботаСФайлами")) Тогда
			ТекстСКомментарием = "// СтандартныеПодсистемы.РаботаСФайлами
					|" + ТекстСКомментарием;
		КонецЕсли;
		
		ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстМетода, ТекстСКомментарием);
		
	КонецЕсли;
	
	Если ВКонце Тогда
		
		НачалоМетода = СтрНайти(ТекстМодуля, ТекстМетода);
		ТекстСКомментарием = ТекстМетода;
		ТекстПослеМетода = Прав(ТекстМодуля, СтрДлина(ТекстМодуля) - НачалоМетода - СтрДлина(ТекстСКомментарием));
		Если Не СтрНачинаетсяС(СокрЛП(НРег(ТекстПослеМетода)), НРег("// Конец СтандартныеПодсистемы.РаботаСФайлами")) Тогда
			
			ТекстСКомментарием = ТекстСКомментарием + "
					|// Конец СтандартныеПодсистемы.РаботаСФайлами";
			
		КонецЕсли;
		
		ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстМетода, ТекстСКомментарием);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти