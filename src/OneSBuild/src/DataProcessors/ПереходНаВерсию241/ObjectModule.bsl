///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ПСТаб;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияПомощника

// События, возникающие в процессе перебора объектов метаданных.

Процедура ПриЧтенииОсновныхНастроек(Параметры)
	ПодключаемыеКоманды_ПриЧтенииОсновныхНастроек(Параметры);
	Файлы_ПриЧтенииОсновныхНастроек(Параметры);
	Свойства_ПриЧтенииОсновныхНастроек(Параметры);
	ДатыЗапретаИзменения_ПриЧтенииОсновныхНастроек(Параметры);
КонецПроцедуры

Процедура ПриАнализеОбъекта(Параметры, СтрокаОбъекта)
	ПодключаемыеКоманды_ПриАнализеОбъекта(Параметры, СтрокаОбъекта);
	ДатыЗапретаИзменения_ПриАнализеОбъекта(Параметры, СтрокаОбъекта);
КонецПроцедуры

Процедура ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	ПодключаемыеКоманды_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
	Свойства_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
КонецПроцедуры

Процедура ПриАнализеОбщегоМодуля(Параметры, СтрокаОбъекта)
	ПодключаемыеКоманды_ПриАнализеОбщегоМодуля(Параметры, СтрокаОбъекта);
	Свойства_ПриАнализеОбщегоМодуля(Параметры, СтрокаОбъекта);
КонецПроцедуры

Процедура ПослеАнализаДереваМетаданных(Параметры)
	ПодключаемыеКоманды_ПослеАнализаДереваМетаданных(Параметры);
	ДатыЗапретаИзменения_ПослеАнализаДереваМетаданных(Параметры);
	Файлы_ПослеАнализаДереваМетаданных(Параметры);
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсДляРаботыСВыгруженнымиФайлами

// Работа с текстами модулей.

Функция НайтиОбласть(ТекстМодуля, ИмяОбласти, ВключаяКомментарии = Истина)
	СтрокаНачала = "#Область " + ИмяОбласти;
	СтрокаОкончания = "#КонецОбласти";
	ТекстМодуляНРег = НРег(ТекстМодуля);
	Область = Новый Структура("Начало, Окончание, Содержимое, НачалоТела, ОкончаниеТела, Комментарии");
	Область.Начало = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуляНРег, НРег(СтрокаНачала));
	Если Область.Начало = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Область.НачалоТела    = СтрНайти(ТекстМодуля, Символы.ПС, , Область.Начало);
	Область.ОкончаниеТела = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуляНРег, НРег(СтрокаОкончания), Область.Начало);
	Область.Окончание     = СтрНайти(ТекстМодуля, Символы.ПС, , Область.ОкончаниеТела);
	
	Пока Истина И Область.Начало > 2 Цикл
		ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, Область.Начало - 2);
		СтрокаПередНачалом = СокрЛП(Сред(ТекстМодуля, ПозицияВозвратаКаретки, Область.Начало - 2 - ПозицияВозвратаКаретки));
		Если ВключаяКомментарии И СтрНачинаетсяС(СтрокаПередНачалом, "//") Тогда
			Область.Начало = ПозицияВозвратаКаретки + 1;
			Область.Комментарии = СокрП(СтрокаПередНачалом + Символы.ПС + Область.Комментарии);
		ИначеЕсли ПустаяСтрока(СтрокаПередНачалом) Тогда
			Область.Начало = ПозицияВозвратаКаретки + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Область;
КонецФункции

Функция НайтиМетод(ТекстМодуля, ИмяМетода, ВключаяКомментарии = Истина, ВключаяДирективы = Истина, ПолныеИменаСкобокПодсистем = "")
	ТекстМодуляНРег = НРег(ТекстМодуля);
	Метод = Новый Структура("Начало, Окончание, ЭтоФункция, Параметры, Экспорт, Содержимое, НачалоТела, ОкончаниеТела, Комментарии, Директивы, СкобкиПодсистемы");
	Метод.Начало = СтрНайтиПроцедуруИлиФункцию(ТекстМодуляНРег, НРег(ИмяМетода), Метод.ЭтоФункция);
	Если Метод.Начало = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрокаОкончания = ?(Метод.ЭтоФункция, "КонецФункции", "КонецПроцедуры");
	Метод.ОкончаниеТела = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуляНРег, НРег(СтрокаОкончания), Метод.Начало);
	Метод.Окончание     = Метод.ОкончаниеТела + СтрДлина(СтрокаОкончания);
	
	ТекстСПараметрами = Сред(ТекстМодуля, Метод.Начало, Метод.ОкончаниеТела - Метод.Начало);
	ПозицияОткрывающейСкобки = СтрНайтиНеКомментарийИНеСтроку(ТекстСПараметрами, "(");
	ПозицияЗакрывающейСкобки = СтрНайтиНеКомментарийИНеСтроку(ТекстСПараметрами, ")");
	Метод.Параметры = Сред(ТекстСПараметрами, ПозицияОткрывающейСкобки + 1, ПозицияЗакрывающейСкобки - ПозицияОткрывающейСкобки - 1);
	
	Метод.НачалоТела = Метод.Начало + ПозицияЗакрывающейСкобки;
	
	Метод.Содержимое = Сред(ТекстСПараметрами, ПозицияЗакрывающейСкобки + 1);
	ТелоНРег = НРег(Метод.Содержимое);
	Если СтрНачинаетсяС(СокрЛ(ТелоНРег), НРег("Экспорт")) Тогда
		Позиция = СтрНайти(ТелоНРег, НРег("Экспорт"));
		Метод.НачалоТела = Метод.НачалоТела + Позиция + 6;
		Метод.Содержимое = Сред(Метод.Содержимое, Позиция + 7);
		Метод.Экспорт = Истина;
	Иначе
		Метод.Экспорт = Ложь;
	КонецЕсли;
	
	// Также надо расширить область при помощи комментариев и директив &.
	Метод.Содержимое = СокрЛП(Метод.Содержимое);
	Метод.Комментарии = "";
	Метод.Директивы = "";
	Метод.СкобкиПодсистемы = "";
	
	Если ВключаяДирективы И Метод.Начало > 2 Тогда
		ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, Метод.Начало - 2);
		СтрокаПередНачалом = СокрЛП(Сред(ТекстМодуля, ПозицияВозвратаКаретки, Метод.Начало - 2 - ПозицияВозвратаКаретки));
		Если СтрНачинаетсяС(СтрокаПередНачалом, "&") Тогда
			Метод.Начало = ПозицияВозвратаКаретки + 1;
			Метод.Директивы = СокрП(СтрокаПередНачалом + Символы.ПС + Метод.Директивы);
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ПолныеИменаСкобокПодсистем) Тогда
		ИменаПодсистем = СтрРазделить(ПолныеИменаСкобокПодсистем, "/");
		Для Каждого ПолноеИмяПодсистемы Из ИменаПодсистем Цикл
			Если РасширитьФрагментЗаСчетСкобокПодсистемы(ТекстМодуляНРег, Метод, ПолноеИмяПодсистемы) Тогда
				Метод.СкобкиПодсистемы = ПолноеИмяПодсистемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НайденаПустаяСтрока = Ложь;
	Пока Метод.Начало > 2 Цикл
		ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, Метод.Начало - 2);
		СтрокаПередНачалом = СокрЛП(Сред(ТекстМодуля, ПозицияВозвратаКаретки + 1, Метод.Начало - ПозицияВозвратаКаретки - 1));
		Если Не НайденаПустаяСтрока И ВключаяКомментарии И СтрНачинаетсяС(СтрокаПередНачалом, "//") Тогда
			Метод.Начало = ПозицияВозвратаКаретки + 1;
			Метод.Комментарии = СокрП(СтрокаПередНачалом + Символы.ПС + Метод.Комментарии);
		ИначеЕсли ПустаяСтрока(СтрокаПередНачалом) Тогда
			Метод.Начало = ПозицияВозвратаКаретки + 1;
			НайденаПустаяСтрока = Истина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВключаяКомментарии Тогда
		Длина = СтрДлина(ТекстМодуля);
		Пока Метод.Окончание + 1 < Длина Цикл
			ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, , Метод.Окончание + 1);
			СтрокаПослеОкончания = СокрЛП(Сред(ТекстМодуля, Метод.Окончание, ПозицияВозвратаКаретки - Метод.Окончание));
			Если СтрНачинаетсяС(СтрокаПослеОкончания, "//") Тогда
				Метод.Окончание = ПозицияВозвратаКаретки;
				Метод.Комментарии = СокрЛ(Метод.Комментарии + Символы.ПС + СтрокаПослеОкончания);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Метод;
КонецФункции

Функция УдалитьМетод(ТекстМодуля, Имя, ВключаяКомментарии = Истина, ВключаяДирективы = Истина, ПолныеИменаСкобокПодсистем = "")
	// Возвращает позицию где найден и удален метод.
	Метод = НайтиМетод(ТекстМодуля, Имя, ВключаяКомментарии, ВключаяДирективы, ПолныеИменаСкобокПодсистем);
	Если Метод = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	ФрагментДоМетода = СокрП(Лев(ТекстМодуля, Метод.Начало - 1));
	ФрагментПослеМетода = СокрЛ(Сред(ТекстМодуля, Метод.Окончание + 1));
	Если ФрагментДоМетода = "" Или ФрагментПослеМетода = "" Тогда
		Промежуток = "";
	Иначе
		Промежуток = Символы.ПС + Символы.ПС;
	КонецЕсли;
	ТекстМодуля = ФрагментДоМетода + Промежуток + ФрагментПослеМетода;
	Возврат СтрДлина(ФрагментДоМетода);
КонецФункции

Функция ОбъединитьМетоды(ТекстМодуля, ИменаМетодов, ВключаяКомментарии, ВключаяДирективы, 
	ПолныеИменаСкобокПодсистем = "", ТекстМодуляИзменен = Неопределено)
	
	Результат = Новый Структура("Начало, Окончание, Тело, СкобкиПодсистемы, ТаблицаМетодов, НеНайденныеМетоды");
	Результат.НеНайденныеМетоды = Новый Соответствие;
	
	ТаблицаМетодов = ТаблицаМетодов();
	Результат.ТаблицаМетодов = ТаблицаМетодов;
	
	Массив = СтрРазделить(ИменаМетодов, "/");
	Для Каждого ИмяМетода Из Массив Цикл
		Найденный = НайтиМетод(ТекстМодуля, ИмяМетода, ВключаяКомментарии, ВключаяДирективы, ПолныеИменаСкобокПодсистем);
		Если Найденный = Неопределено Тогда
			Результат.НеНайденныеМетоды.Вставить(ИмяМетода);
		Иначе
			Метод = ТаблицаМетодов.Добавить();
			Метод.ИмяМетода = ИмяМетода;
			ЗаполнитьЗначенияСвойств(Метод, Найденный);
		КонецЕсли;
	КонецЦикла;
	Количество = ТаблицаМетодов.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Количество = 1 Тогда
		ЗаполнитьЗначенияСвойств(Результат, ТаблицаМетодов[0]);
		Результат.Тело = Сред(ТекстМодуля, Результат.Начало, Результат.Окончание - Результат.Начало);
		Возврат Результат;
	КонецЕсли;
	
	// Чем меньше символов между методами, тем выше приоритет их "склеивания".
	// Размеры зазоров вычислить имея список методов, отсортированный по их позиции.
	// Т.е. например:
	//  "  [метод1]        [метод2]        [метод3]  "
	//             \зазор1/        \зазор2/          .
	ТаблицаЗазоров = Новый ТаблицаЗначений;
	ТаблицаЗазоров.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ТаблицаЗазоров.Колонки.Добавить("МетодСлева");
	ТаблицаЗазоров.Колонки.Добавить("МетодСправа");
	
	ТаблицаМетодов.Сортировать("Начало Возр");
	МетодСлева = ТаблицаМетодов[0];
	Для Индекс = 1 По Количество-1 Цикл
		МетодСправа = ТаблицаМетодов.Получить(Индекс);
		Зазор = ТаблицаЗазоров.Добавить();
		Зазор.МетодСлева = МетодСлева;
		Зазор.МетодСправа = МетодСправа;
		Зазор.Размер = МетодСправа.Начало - МетодСлева.Окончание - 1;
		МетодСлева.ЗазорСправа = Зазор;
		МетодСправа.ЗазорСлева = Зазор;
		МетодСлева = МетодСправа;
	КонецЦикла;
	
	ИменаПодсистем = СтрРазделить(ПолныеИменаСкобокПодсистем, "/");
	ТаблицаЗазоров.Сортировать("Размер Возр");
	Для Каждого Зазор Из ТаблицаЗазоров Цикл
		МетодСлева = Зазор.МетодСлева;
		МетодСправа = Зазор.МетодСправа; // СтрокаТаблицыЗначений: см. ТаблицаМетодов
		ГруппаМетодов = Новый Структура("Начало, Окончание, СкобкиПодсистемы, ЗазорСлева, ЗазорСправа, НеНайденныеМетоды");
		ЗаполнитьЗначенияСвойств(ГруппаМетодов, МетодСлева);
		
		// Двигаем правый метод к левому.
		ФрагментМежду = Сред(ТекстМодуля, МетодСлева.Окончание, МетодСправа.Начало - МетодСлева.Окончание);
		Если ПустаяСтрока(ФрагментМежду) Тогда
			ГруппаМетодов.Окончание = МетодСправа.Окончание;
			Если МетодСлева.СкобкиПодсистемы = "" И МетодСправа.СкобкиПодсистемы = "" Тогда
				ТекстМодуляНРег = НРег(ТекстМодуля);
				Для Каждого ПолноеИмяПодсистемы Из ИменаПодсистем Цикл
					Если РасширитьФрагментЗаСчетСкобокПодсистемы(ТекстМодуляНРег, ГруппаМетодов, ПолноеИмяПодсистемы) Тогда
						ГруппаМетодов.СкобкиПодсистемы = ПолноеИмяПодсистемы;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ФрагментДо = Лев(ТекстМодуля, МетодСлева.Окончание - 1);
			ТелоПравогоМетода = Сред(ТекстМодуля, МетодСправа.Начало, МетодСправа.Окончание - МетодСправа.Начало);
			ФрагментПосле = Сред(ТекстМодуля, МетодСправа.Окончание);
			ТекстМодуля = ФрагментДо + ТелоПравогоМетода + ФрагментМежду + ФрагментПосле;
			ТекстМодуляИзменен = Истина;
			МетодСправа.Начало = МетодСлева.Окончание;
			МетодСправа.Окончание = МетодСправа.Начало + СтрДлина(ТелоПравогоМетода);
			ГруппаМетодов.Окончание = МетодСправа.Окончание;
		КонецЕсли;
		Если МетодСлева.СкобкиПодсистемы <> МетодСправа.СкобкиПодсистемы Тогда
			ГруппаМетодов.СкобкиПодсистемы = "";
		КонецЕсли;
		
		// Меняем ссылки на методы на ссылки на группы.
		Если МетодСлева.ЗазорСлева <> Неопределено Тогда
			ГруппаМетодов.ЗазорСлева = МетодСлева.ЗазорСлева;
			МетодСлева.ЗазорСлева.МетодСправа = ГруппаМетодов;
		КонецЕсли;
		Если МетодСправа.ЗазорСправа <> Неопределено Тогда
			ГруппаМетодов.ЗазорСправа = МетодСправа.ЗазорСправа;
			МетодСправа.ЗазорСправа.МетодСлева = ГруппаМетодов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Результат, ГруппаМетодов);
	Результат.Тело = Сред(ТекстМодуля, Результат.Начало, Результат.Окончание - Результат.Начало);
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//   ТаблицаЗначений:
//   * ИмяМетода - Строка
//   * Начало - Число
//   * Окончание - Число
//   * Обработан - Булево
//   * Содержимое - Строка
//   * СкобкиПодсистемы - Строка
//   * ЗазорСлева - СтрокаТаблицыЗначений
//   * ЗазорСправа - СтрокаТаблицыЗначений
//
Функция ТаблицаМетодов()
	Перем ТаблицаМетодов;
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("ИмяМетода",        Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("Начало",           Новый ОписаниеТипов("Число"));
	ТаблицаМетодов.Колонки.Добавить("Окончание",        Новый ОписаниеТипов("Число"));
	ТаблицаМетодов.Колонки.Добавить("Обработан",        Новый ОписаниеТипов("Булево"));
	ТаблицаМетодов.Колонки.Добавить("Содержимое",       Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("СкобкиПодсистемы", Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("ЗазорСлева");
	ТаблицаМетодов.Колонки.Добавить("ЗазорСправа");
	Возврат ТаблицаМетодов
КонецФункции

Функция НайтиВызовМетода(ФрагментКода, ТекстНачалаВызова, НачальнаяПозиция = 1, ПолныеИменаСкобокПодсистем = "")
	Вызов = Новый Структура("Параметры, Начало, Окончание, Тело, СкобкиПодсистемы");
	
	ФрагментНРег = НРег(ФрагментКода);
	ТекстНачалаВызоваНРег = НРег(ТекстНачалаВызова);
	Вызов.Начало = СтрНайтиНеКомментарийИНеСтроку(ФрагментНРег, ТекстНачалаВызоваНРег, НачальнаяПозиция);
	Если Вызов.Начало = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДлинаСловаМодуль = СтрДлина("Модуль");
	Если ДлинаСловаМодуль < Вызов.Начало
		И Сред(ФрагментНРег, Вызов.Начало-ДлинаСловаМодуль, ДлинаСловаМодуль) = НРег("Модуль") Тогда
		Вызов.Начало = Вызов.Начало-ДлинаСловаМодуль;
		ТекстНачалаВызоваНРег = НРег("Модуль") + ТекстНачалаВызоваНРег;
	КонецЕсли;
	Если Вызов.Начало > 1 И Не ПустаяСтрока(Сред(ФрагментНРег, Вызов.Начало-1, 1)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Вызов.Параметры = Новый Массив;
	ОчереднойПараметр = "";
	ОткрытоКвадратныхСкобок = 0;
	ОткрытоКруглыхСкобок = 0;
	ДлинаНачала = СтрДлина(ТекстНачалаВызоваНРег);
	
	АнализируемыйКод = Сред(ФрагментКода, Вызов.Начало + ДлинаНачала);
	ПоследовательноеЧтение = СоздатьПоследовательноеЧтение(АнализируемыйКод);
	Пока Истина Цикл
		ПоследнийСимвол = Неопределено;
		Блок = ПрочитатьБлокСОстановкойПоСимволу(ПоследовательноеЧтение, "[](),", ПоследнийСимвол);
		Если ПоследнийСимвол = Неопределено
			Или (ПустаяСтрока(ПоследнийСимвол) И ПустаяСтрока(Блок)) Тогда
			Возврат Неопределено; // Дошли до конца.
		КонецЕсли;
		
		Если ПоследнийСимвол = ")" Тогда
			ОткрытоКруглыхСкобок = ОткрытоКруглыхСкобок - 1;
			Если ОткрытоКруглыхСкобок = -1 Тогда
				ОчереднойПараметр = ОчереднойПараметр + Блок;
				Прервать; // Нашли окончание вызова.
			КонецЕсли;
		ИначеЕсли ПоследнийСимвол = "]" Тогда
			ОткрытоКвадратныхСкобок = ОткрытоКвадратныхСкобок - 1;
		КонецЕсли;
		
		Если ОткрытоКвадратныхСкобок > 0 Или ОткрытоКруглыхСкобок > 0 Тогда
			ОчереднойПараметр = ОчереднойПараметр + Блок + ПоследнийСимвол;
		Иначе
			ОчереднойПараметр = ОчереднойПараметр + Блок;
			Если ПоследнийСимвол = "," Тогда
				Вызов.Параметры.Добавить(СокрЛП(ОчереднойПараметр));
				ОчереднойПараметр = "";
			Иначе
				ОчереднойПараметр = ОчереднойПараметр + ПоследнийСимвол;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоследнийСимвол = "(" Тогда
			ОткрытоКруглыхСкобок = ОткрытоКруглыхСкобок + 1;
		ИначеЕсли ПоследнийСимвол = "[" Тогда
			ОткрытоКвадратныхСкобок = ОткрытоКвадратныхСкобок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОчереднойПараметр) Или Вызов.Параметры.Количество() > 0 Тогда
		Вызов.Параметры.Добавить(СокрЛП(ОчереднойПараметр));
	КонецЕсли;
	Вызов.Окончание = Вызов.Начало + ДлинаНачала + ПоследовательноеЧтение.НомерСимвола + 1;
	
	Если Не ПустаяСтрока(ПолныеИменаСкобокПодсистем) Тогда
		ИменаПодсистем = СтрРазделить(ПолныеИменаСкобокПодсистем, "/");
		Для Каждого ПолноеИмяПодсистемы Из ИменаПодсистем Цикл
			Если РасширитьФрагментЗаСчетСкобокПодсистемы(ФрагментНРег, Вызов, ПолноеИмяПодсистемы) Тогда
				Вызов.СкобкиПодсистемы = ПолноеИмяПодсистемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Вызов.Тело = Сред(ФрагментКода, Вызов.Начало, Вызов.Окончание - Вызов.Начало);
	
	Возврат Вызов;
КонецФункции

Процедура УдалитьВызовМетода(ТекстМодуля, ТекстНачалаВызова, НачальнаяПозиция = 1, ПолныеИменаСкобокПодсистем = "")
	Если ТипЗнч(ТекстНачалаВызова) = Тип("Строка") Тогда
		Вызов = НайтиВызовМетода(ТекстМодуля, ТекстНачалаВызова, НачальнаяПозиция, ПолныеИменаСкобокПодсистем);
	Иначе
		Вызов = ТекстНачалаВызова;
	КонецЕсли;
	Если Вызов <> Неопределено Тогда
		ФрагментДо = Лев(ТекстМодуля, Вызов.Начало - 1);
		ФрагментПосле = Сред(ТекстМодуля, Вызов.Окончание);
		ТекстМодуля = СокрП(ФрагментДо) + ФрагментПосле;
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, НачалоКомментария)
	Результат = "";
	Остаток = ТекстМодуля;
	ОстатокНРег = НРег(Остаток);
	НачалоКомментарияНРег = НРег(НачалоКомментария);
	Пока Истина Цикл
		Позиция = СтрНайти(ОстатокНРег, НачалоКомментарияНРег);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Окончание = СтрНайти(ОстатокНРег, Символы.ПС, , Позиция);
		Начало = СтрНайти(ОстатокНРег, Символы.ПС, НаправлениеПоиска.СКонца, Позиция);
		Если Окончание = 0 Тогда
			ФрагментПосле = "";
			Окончание = СтрДлина(Остаток);
		Иначе
			ФрагментПосле = Сред(Остаток, Окончание + 1);
		КонецЕсли;
		Отступ = Сред(Остаток, Начало, Позиция - Начало);
		Если Отступ = "" Тогда // В модуле, вне процедуры или функции.
			ФрагментДо = СокрП(Лев(Остаток, Начало)) + Символы.ПС + Символы.ПС;
			ФрагментПосле = СокрЛ(ФрагментПосле);
			ТекстМодуляИзменен = Истина;
		ИначеЕсли ПустаяСтрока(Отступ) Тогда // Внутри процедуры или функции.
			ФрагментДо = Лев(Остаток, Начало);
			ТекстМодуляИзменен = Истина;
		Иначе // Когда перед "//" что-то есть, то фрагмент нельзя вырезать.
			ФрагментДо = Лев(Остаток, Окончание);
		КонецЕсли;
		Результат = Результат + ФрагментДо;
		Остаток = ФрагментПосле;
		ОстатокНРег = НРег(Остаток);
	КонецЦикла;
	ТекстМодуля = Результат + Остаток;
КонецПроцедуры

// Работа со строками и ошибками.

Функция СтрЛев(Знач Строка, Знач Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоРазделителя = Строка;
		Остаток = "";
	Иначе
		СтрокаДоРазделителя = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЕсли;
	Возврат СтрокаДоРазделителя;
КонецФункции

Процедура ЗаписатьГлобальноеСообщение(Параметры, Текст, Порядок)
	ГлобальныеСообщения = Параметры.ГлобальныеСообщения; // ТаблицаЗначений
	Сообщение = ГлобальныеСообщения.Добавить();
	Сообщение.ТекстГС   = Текст;
	Сообщение.ПорядокГС = Порядок;
КонецПроцедуры

// Параметры:
//   Параметры - см. ДатыЗапретаИзменения_КодПоДобавлениюОбъектовМетаданныхВМассив.Параметры
//   СтрокаОбъекта - Структура:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//   СтрокаФормы - Структура:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//   ТипСообщения - Строка
//   Текст - Строка
//
Процедура ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, ТипСообщения, Текст)
	СтрокаВида = СтрокаОбъекта.Родитель;
	
	СообщенияПоОбъектам = Параметры.СообщенияПоОбъектам; // ТаблицаЗначений
	Сообщение = СообщенияПоОбъектам.Добавить();
	Сообщение.ПриоритетВида    = Параметры.ПриоритетыВидов[СтрокаВида.Имя];
	Сообщение.Вид              = СтрокаВида.ПредставлениеСписка;
	Сообщение.ОбъектМетаданных = СтрокаОбъекта.ПолноеИмя;
	Сообщение.Форма            = СтрокаФормы.Имя;
	Сообщение.ТипСообщения     = ТипСообщения;
	Сообщение.Текст            = Текст;
КонецПроцедуры

Функция ИмяУдовлетворяетТребованиямИменованияПеременных(Имя)
	Структура = Новый Структура;
	Попытка
		Структура.Вставить(Имя, Неопределено);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ОсталосьСделать()
	Возврат Символ(84) + Символ(79) + Символ(68)+ Символ(79);
КонецФункции

// Работа с DOM и XPath (общего назначения).

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь)
	Возврат ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
КонецФункции

Функция НайтиДочернийУзел(ДокументDOM, Разыменователь, ЭлементDOM, ВыражениеДляПоискаДочернего)
	Возврат ДокументDOM.ВычислитьВыражениеXPath(ВыражениеДляПоискаДочернего, ЭлементDOM, Разыменователь).ПолучитьСледующий();
КонецФункции

// Работа в DOM и XPath (управляемая форма).

Функция НайтиЭлементФормы(ДокументDOM, Разыменователь, ИмяЭлемента)
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:ChildItems/xmlns:*[@name='"+ИмяЭлемента+"']", ДокументDOM, Разыменователь);
	Возврат РезультатXPath.ПолучитьСледующий();
КонецФункции

Функция НайтиОсновнойРеквизитФормы(ДокументDOM, Разыменователь)
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Attributes/xmlns:Attribute/xmlns:MainAttribute[text()='true']/..", ДокументDOM, Разыменователь);
	Возврат РезультатXPath.ПолучитьСледующий();
КонецФункции

Функция НайтиРеквизитФормы(ДокументDOM, Разыменователь, ИмяРеквизита)
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Attributes/xmlns:Attribute[@name='"+ИмяРеквизита+"']", ДокументDOM, Разыменователь);
	Возврат РезультатXPath.ПолучитьСледующий();
КонецФункции

Процедура ВставитьФрагментXMLВУзелФормы(ДокументDOM, Разыменователь, КудаВставлять, ВставляемыйФрагментXML, ПередЧемВставлять = Неопределено)
	ФрагментXML =
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<Form xmlns=""http://v8.1c.ru/8.3/xcf/logform"" xmlns:app=""http://v8.1c.ru/8.2/managed-application/core"" xmlns:cfg=""http://v8.1c.ru/8.1/data/enterprise/current-config"" xmlns:dcscor=""http://v8.1c.ru/8.1/data-composition-system/core"" xmlns:dcsset=""http://v8.1c.ru/8.1/data-composition-system/settings"" xmlns:ent=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:lf=""http://v8.1c.ru/8.2/managed-application/logform"" xmlns:style=""http://v8.1c.ru/8.1/data/ui/style"" xmlns:sys=""http://v8.1c.ru/8.1/data/ui/fonts/system"" xmlns:v8=""http://v8.1c.ru/8.1/data/core"" xmlns:v8ui=""http://v8.1c.ru/8.1/data/ui"" xmlns:web=""http://v8.1c.ru/8.1/data/ui/colors/web"" xmlns:win=""http://v8.1c.ru/8.1/data/ui/colors/windows"" xmlns:xr=""http://v8.1c.ru/8.3/xcf/readable"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" version=""2.1"">
	|" + ВставляемыйФрагментXML + "
	|</Form>";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ФрагментXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДополнительныйДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	ЧтениеXML = Неопределено;
	
	СписокУзлов = ДополнительныйДокументDOM.ПервыйДочерний.ДочерниеУзлы;
	Для Каждого ПрототипЭлементаDOM Из СписокУзлов Цикл
		Если ПередЧемВставлять = Неопределено Тогда
			КудаВставлять.ДобавитьДочерний(ПрототипЭлементаDOM.КлонироватьУзел(Истина));
		Иначе
			КудаВставлять.ВставитьПеред(ПрототипЭлементаDOM.КлонироватьУзел(Истина), ПередЧемВставлять);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция МаксимальныйИдентификаторЭлементовФормы(ДокументDOM, Разыменователь)
	ПоЭлементамФормы = МаксимальноеЗначениеАтрибутаDOM(ДокументDOM, Разыменователь, "/xmlns:Form/xmlns:ChildItems//@id");
	ПоЭлементамКоманднойПанели = МаксимальноеЗначениеАтрибутаDOM(ДокументDOM, Разыменователь, "/xmlns:Form/xmlns:AutoCommandBar//@id");
	Возврат Макс(ПоЭлементамФормы, ПоЭлементамКоманднойПанели);
КонецФункции

Функция МаксимальныйИдентификаторРеквизитовФормы(ДокументDOM, Разыменователь)
	Возврат МаксимальноеЗначениеАтрибутаDOM(ДокументDOM, Разыменователь, "/xmlns:Form/xmlns:Attributes//@id");
КонецФункции

Функция СледующийИдентификатор(Идентификатор)
	Идентификатор = Идентификатор + 1;
	Возврат Формат(Идентификатор, "ЧН=0; ЧГ=");
КонецФункции

#КонецОбласти

#Область Свойства

Процедура Свойства_ПриЧтенииОсновныхНастроек(Параметры)
	Параметры.Вставить("ЕстьСвойства", ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства"));
КонецПроцедуры

// Параметры:
//   Параметры - см. ДатыЗапретаИзменения_КодПоДобавлениюОбъектовМетаданныхВМассив.Параметры
//   СтрокаОбъекта - см. ЗаписатьСообщениеПоОбъекту.СтрокаОбъекта
//
Процедура Свойства_ПриАнализеОбщегоМодуля(Параметры, СтрокаОбъекта)
	Если Не Параметры.ЕстьСвойства Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаОбъекта.Имя = "ДатыЗапретаИзмененияПереопределяемый" Тогда
		Параметры.Вставить("СтрокаОбъектаОбщийМодульДатыЗапретаИзмененияПереопределяемый", СтрокаОбъекта);
	КонецЕсли;
КонецПроцедуры

Процедура Свойства_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	Если Не Параметры.ЕстьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяСхемы  = СтрокаФормы.Каталог + "Ext\Form.xml";
	ПолноеИмяМодуля = СтрокаФормы.Каталог + "Ext\Form\Module.bsl";
	ТекстМодуля = ПрочитатьТекстМодуля(ПолноеИмяМодуля);
	
	Если Не ФайлСуществует(ПолноеИмяСхемы) Или ТекстМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриСоздании = НайтиМетод(ТекстМодуля, "ПриСозданииНаСервере", Ложь, Истина);
	Если ПриСоздании = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМодуляИзменен = Ложь;
	Метод = НайтиМетод(ТекстМодуля, "Подключаемый_РедактироватьСоставСвойств", Ложь, Ложь);
	Если Метод <> Неопределено Тогда
		ТекстПроцедуры = Сред(ТекстМодуля, Метод.Начало, Метод.Окончание - Метод.Начало);
		
		НовыйМетод = 
			"Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
			|	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
			|КонецПроцедуры";
		ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстПроцедуры, НовыйМетод);
		ТекстМодуляИзменен = Истина;
	КонецЕсли;
	
	Если Метод = Неопределено Тогда
		ВызовМетода = НайтиВызовМетода(ТекстМодуля, "УправлениеСвойствами.ПриСозданииНаСервере(");
		СвойстваВстроены = ВызовМетода <> Неопределено;
		Если СвойстваВстроены Тогда
			НовыйФрагмент = 
				"// СтандартныеПодсистемы.Свойства
				|&НаКлиенте
				|Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
				|	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
				|КонецПроцедуры
				|// Конец СтандартныеПодсистемы.Свойства";
			
			Область = НайтиОбласть(ТекстМодуля, "СлужебныеПроцедурыИФункции");
			Если Область = Неопределено Тогда
				ТекстМодуля = СокрП(ТекстМодуля) + Символы.ПС
				+ Символы.ПС
				+ "#Область СлужебныеПроцедурыИФункции" + Символы.ПС
				+ Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ Символы.ПС
				+ "#КонецОбласти" + Символы.ПС;
			Иначе
				ФрагментДо = Лев(ТекстМодуля, Область.ОкончаниеТела - 1);
				ФрагментПосле = Сред(ТекстМодуля, Область.ОкончаниеТела);
				ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
				+ Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ Символы.ПС
				+ СокрЛ(ФрагментПосле);
			КонецЕсли;
			ТекстМодуляИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстМодуляИзменен Тогда
		ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля);
	КонецЕсли;
	Если ТекстМодуляИзменен Тогда
		Если Параметры.ИзмененныеФайлы.Найти(ПолноеИмяСхемы) = Неопределено Тогда
			Параметры.ИзмененныеФайлы.Добавить(ПолноеИмяСхемы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

Процедура Файлы_ПриЧтенииОсновныхНастроек(Параметры)
	Параметры.Вставить("ЕстьФайлы", ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами"));
	Параметры.Вставить("ЕстьЭлектронныеПодписи", ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись"));
КонецПроцедуры

Процедура Файлы_ПослеАнализаДереваМетаданных(Параметры)
	Если Не Параметры.ЕстьФайлы Тогда
		Возврат; // Нет подсистемы ПрисоединенныеФайлы.
	КонецЕсли;
	
	Если Параметры.ЕстьЭлектронныеПодписи Тогда
		
		СправочникиПрисоединенныхФайлов = НайтиФайлы(Параметры.РабочийКаталог + "FunctionalOptions", "*ИспользоватьЭлектронныеПодписи*.xml");
		
		ИмяРегистра = "НаличиеПрисоединенныхФайлов";
		ИмяИзмерения = "ОбъектСФайлами";
		ТипОбъекта = "InformationRegister";
		
		Для Каждого СправочникПрисоединенныхФайлов Из СправочникиПрисоединенныхФайлов Цикл
			ДобавитьПрефиксУдалить(СправочникПрисоединенныхФайлов, ИмяРегистра, ИмяИзмерения, ТипОбъекта);
		КонецЦикла;
		
		СправочникиПрисоединенныхФайлов = НайтиФайлы(Параметры.РабочийКаталог + "FunctionalOptions", "*ИспользоватьШифрование*.xml");
		
		ИмяРегистра = "НаличиеПрисоединенныхФайлов";
		ИмяИзмерения = "ОбъектСФайлами";
		ТипОбъекта = "InformationRegister";
		
		Для Каждого СправочникПрисоединенныхФайлов Из СправочникиПрисоединенныхФайлов Цикл
			ДобавитьПрефиксУдалить(СправочникПрисоединенныхФайлов, ИмяРегистра, ИмяИзмерения, ТипОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	СправочникиПрисоединенныхФайлов = НайтиФайлы(Параметры.РабочийКаталог + "Catalogs", "*ПрисоединенныеФайлы.xml");
	
	ИмяРегистра = "НаличиеПрисоединенныхФайлов";
	ИмяИзмерения = "ОбъектСФайлами";
	ТипОбъекта = "InformationRegister";
	
	Для Каждого СправочникПрисоединенныхФайлов Из СправочникиПрисоединенныхФайлов Цикл
		ДополнитьСоставОпределяемогоТипаИзРеквизита(СправочникПрисоединенныхФайлов, ИмяРегистра, ИмяИзмерения, ТипОбъекта, Параметры);
	КонецЦикла;
	
КонецПроцедуры

// Присоединенные файлы
Процедура ДобавитьПрефиксУдалить(ФайлСправочника, ИмяОбъекта, ИмяРеквизита, ТипОбъекта)
	
	ФлагОшибки = Ложь;
	ПутьКФайлуОбъекта = ФайлСправочника.ПолноеИмя;
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOMОбъекта = ПрочитатьДокументDOM(ПутьКФайлуОбъекта);
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространстваИмен());
	СоответствиеВыражений = СоответствиеВыражений();
	
	Выражение = СоответствиеВыражений.Получить("FunctionalOption");
	РезультатXPath1 = ДокументDOMОбъекта.ВычислитьВыражениеXPath(Выражение, ДокументDOMОбъекта, Разыменователь);
	СписокРеквизитовИТЧ = РезультатXPath1.ПолучитьСледующий().ДочерниеУзлы;
	
	Для Каждого ЭлементФО Из СписокРеквизитовИТЧ Цикл
		
		Если СтрНайти(ЭлементФО.ТекстовоеСодержимое, "ЭлектронныеПодписи") > 0 И СтрНайти(ЭлементФО.ТекстовоеСодержимое, "УдалитьЭлектронныеПодписи") = 0 Тогда
			ЭлементФО.ТекстовоеСодержимое = СтрЗаменить(ЭлементФО.ТекстовоеСодержимое, "ЭлектронныеПодписи", "УдалитьЭлектронныеПодписи");
		ИначеЕсли СтрНайти(ЭлементФО.ТекстовоеСодержимое, "СертификатыШифрования") > 0 И СтрНайти(ЭлементФО.ТекстовоеСодержимое, "УдалитьСертификатыШифрования") = 0 Тогда
			ЭлементФО.ТекстовоеСодержимое = СтрЗаменить(ЭлементФО.ТекстовоеСодержимое, "СертификатыШифрования", "УдалитьСертификатыШифрования");
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДокументDOM(ДокументDOMОбъекта, ПутьКФайлуОбъекта);
	
КонецПроцедуры

// Для измерения регистра сведений.
Процедура ДополнитьСоставОпределяемогоТипаИзРеквизита(ФайлСправочника, ИмяОбъекта, ИмяРеквизита, ТипОбъекта, Параметры)
	
	ПутьКФайлуОбъекта           = ФайлСправочника.ПолноеИмя;
	ЕстьРеквизитДатаЗаема       = Ложь;
	ЕстьРеквизитХранитьВерсии   = Ложь;
	XMLФормыИзменен             = Ложь;
	ФлагОшибки                  = Ложь;
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВыражений = СоответствиеВыражений();
	ДокументDOMОбъекта = ПрочитатьДокументDOM(ПутьКФайлуОбъекта);
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространстваИмен());
	
	Выражение = СоответствиеВыражений.Получить("Catalog");
	РезультатXPath1 = ДокументDOMОбъекта.ВычислитьВыражениеXPath(Выражение, ДокументDOMОбъекта, Разыменователь);
	ДатаМодификацииУниверсальная = Неопределено;
	СтатусИзвлеченияТекста  = Неопределено;
	СписокРеквизитовИТЧ = РезультатXPath1.ПолучитьСледующий().ДочерниеУзлы;
	
	Для Каждого РеквизитСправочника Из СписокРеквизитовИТЧ Цикл
		Если РеквизитСправочника.ИмяУзла = "TabularSection" Тогда
			ИмяТЧ = РеквизитСправочника.ПервыйДочерний.ПервыйДочерний.Атрибуты[1].ЗначениеУзла;
			Если СтрНайти(ИмяТЧ, "ЭлектронныеПодписи") > 0 И СтрНайти(ИмяТЧ, "УдалитьЭлектронныеПодписи") = 0 Тогда
				РеквизитСправочника.ПервыйДочерний.ПервыйДочерний.Атрибуты[1].ЗначениеУзла
				= СтрЗаменить(РеквизитСправочника.ПервыйДочерний.ПервыйДочерний.Атрибуты[1].ЗначениеУзла,
				"ЭлектронныеПодписи",
				"УдалитьЭлектронныеПодписи");
				РеквизитСправочника.ПервыйДочерний.ДочерниеУзлы[1].Атрибуты[1].ЗначениеУзла
				= СтрЗаменить(РеквизитСправочника.ПервыйДочерний.ДочерниеУзлы[1].Атрибуты[1].ЗначениеУзла,
				"ЭлектронныеПодписи",
				"УдалитьЭлектронныеПодписи");
				
				РеквизитСправочника.ДочерниеУзлы[1].ПервыйДочерний.ТекстовоеСодержимое =
				"Удалить" + РеквизитСправочника.ДочерниеУзлы[1].ПервыйДочерний.ТекстовоеСодержимое;
				РеквизитСправочника.ДочерниеУзлы[1].ДочерниеУзлы[1].ПервыйДочерний.ДочерниеУзлы[1].ТекстовоеСодержимое = 
				НСтр("ru = '(не используется) электронные подписи'")
			ИначеЕсли СтрНайти(ИмяТЧ, "СертификатыШифрования") > 0 И СтрНайти(ИмяТЧ, "УдалитьСертификатыШифрования") = 0 Тогда
				РеквизитСправочника.ПервыйДочерний.ПервыйДочерний.Атрибуты[1].ЗначениеУзла
				= СтрЗаменить(РеквизитСправочника.первыйДочерний.ПервыйДочерний.Атрибуты[1].ЗначениеУзла,
				"СертификатыШифрования",
				"УдалитьСертификатыШифрования");
				РеквизитСправочника.ПервыйДочерний.ДочерниеУзлы[1].Атрибуты[1].ЗначениеУзла
				= СтрЗаменить(РеквизитСправочника.первыйДочерний.ДочерниеУзлы[1].Атрибуты[1].ЗначениеУзла,
				"СертификатыШифрования",
				"УдалитьСертификатыШифрования");
				
				РеквизитСправочника.ДочерниеУзлы[1].ПервыйДочерний.ТекстовоеСодержимое
				= "Удалить" + РеквизитСправочника.ДочерниеУзлы[1].ПервыйДочерний.ТекстовоеСодержимое;
				РеквизитСправочника.ДочерниеУзлы[1].ДочерниеУзлы[1].ПервыйДочерний.ДочерниеУзлы[1].ТекстовоеСодержимое = 
				НСтр("ru = '(не используется) Сертификаты шифрования'")
			КонецЕсли;
		ИначеЕсли РеквизитСправочника.ИмяУзла = "Attribute" Тогда
			
			СписокРеквизитов = РеквизитСправочника.ДочерниеУзлы[0];
			
			Если СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "ДатаМодификацииУниверсальная" Тогда
				ДатаМодификацииУниверсальная = СписокРеквизитов.РодительскийУзел;
			ИначеЕсли СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "ДатаЗаема" Тогда
				ЕстьРеквизитДатаЗаема     = Истина;
			ИначеЕсли СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "ХранитьВерсии" Тогда
				ЕстьРеквизитХранитьВерсии = Истина;
			ИначеЕсли СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "СтатусИзвлеченияТекста" Тогда
				СтатусИзвлеченияТекста = СписокРеквизитов.РодительскийУзел;
			ИначеЕсли СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "Автор" 
				Или СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "Редактирует"
				Или СписокРеквизитов.ПервыйДочерний.ТекстовоеСодержимое = "Изменил" Тогда
				ТипРеквизиты = СписокРеквизитов.ДочерниеУзлы[3];
				УзелТипРеквизита = ДобавитьДочернийУзел(ДокументDOMОбъекта, ТипРеквизиты, "v8:Type", "");
				УзелТипРеквизита.ТекстовоеСодержимое = "cfg:CatalogRef.УчетныеЗаписиСинхронизацииФайлов";
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьРеквизитДатаЗаема Тогда
		// добавление реквизита ДатаЗаема
		СоставОпределяемогоТипа = ДатаМодификацииУниверсальная.РодительскийУзел;
		
		НовыйУзел = ДокументDOMОбъекта.СоздатьЭлемент("Attribute");
		НовыйУзел.УстановитьАтрибут("uuid", Строка(Новый УникальныйИдентификатор));
		УзелProperties = ДокументDOMОбъекта.СоздатьЭлемент("Properties");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Name", "ДатаЗаема");
		УзелSynonym = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Synonym", "");
		
		УзелV8Item = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелSynonym, "v8:item", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:lang", "ru");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:content", НСтр("ru = 'Дата заема'"));
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Comment", "");
		
		УзелType = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Type", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелType, "v8:Type", "xs:dateTime");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелType, "v8:DateQualifiers", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелType, "v8:DateFractions", "DateTime");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "PasswordMode", "false");
		УзелFormat = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Format", "");
		УзелV8Item = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелFormat, "v8:item", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:lang", "ru");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:content", "ДЛФ=ДВ");
		
		УзелEditFormat = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "EditFormat", "");
		УзелV8Item = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелEditFormat, "v8:item", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:lang", "ru");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:content", "ДЛФ=ДВ");
		
		УзелToolTip = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ToolTip", "");
		УзелV8Item  = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелToolTip, "v8:item", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:lang", "ru");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:content", НСтр("ru = 'Дата, когда файл был занят для редактирования'"));
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MarkNegatives", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Mask", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MultiLine", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ExtendedEdit", "false");
		
		УзелMinValue = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MinValue", "");
		УзелMinValue.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance" , "xsi:nil", "true");
		
		УзелMaxValue = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MinValue", "");
		УзелMaxValue.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance" , "xsi:nil", "true");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FillFromFillingValue", "false");
		
		УзелFillValue = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FillValue", "");
		УзелFillValue.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance" ,"xsi:nil", "true");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FillChecking", "DontCheck");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceFoldersAndItems", "Items");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceParameterLinks", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceParameters", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "QuickChoice", "Auto");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "CreateOnInput", "Auto");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceForm", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "LinkByType", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceHistoryOnInput", "Auto");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Use", "ForItem");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Indexing", "DontIndex");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FullTextSearch", "Use");
		
		НовыйУзел.ДобавитьДочерний(УзелProperties);
		
		СоставОпределяемогоТипа.ВставитьПеред(НовыйУзел, ДатаМодификацииУниверсальная);
		
		XMLФормыИзменен = Истина;
		
	КонецЕсли;
	
	Если НЕ ЕстьРеквизитХранитьВерсии Тогда
		// ХранитьВерсии
		СоставОпределяемогоТипа = СтатусИзвлеченияТекста.РодительскийУзел;
		
		НовыйУзел = ДокументDOMОбъекта.СоздатьЭлемент("Attribute");
		НовыйУзел.УстановитьАтрибут("uuid", Строка(Новый УникальныйИдентификатор));
		УзелProperties = ДокументDOMОбъекта.СоздатьЭлемент("Properties");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Name", "ХранитьВерсии");
		УзелSynonym = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Synonym", "");
		
		УзелV8Item = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелSynonym, "v8:item", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:lang", "ru");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:content", НСтр("ru = 'Хранить версии'"));
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Comment", "");
		
		УзелType = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Type", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелType, "v8:Type", "xs:boolean");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "PasswordMode", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Format", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "EditFormat", "");
		
		УзелToolTip = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ToolTip", "");
		УзелV8Item  = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелToolTip, "v8:item", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:lang", "ru");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелV8Item, "v8:content", НСтр("ru = 'Добавлять версии файла при окончании редактирования. Если отключить, тогда будет хранится только последняя версия.'"));
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MarkNegatives", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Mask", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MultiLine", "false");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ExtendedEdit", "false");
		
		УзелMinValue = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MinValue", "");
		УзелMinValue.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance" , "xsi:nil", "true");
		
		УзелMaxValue = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "MinValue", "");
		УзелMaxValue.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance" , "xsi:nil", "true");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FillFromFillingValue", "false");
		
		УзелFillValue = ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FillValue", "false");
		УзелFillValue.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance" ,"xsi:boolean", "true");
		
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FillChecking", "DontCheck");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceFoldersAndItems", "Items");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceParameterLinks", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceParameters", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "QuickChoice", "Auto");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "CreateOnInput", "Auto");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceForm", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "LinkByType", "");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "ChoiceHistoryOnInput", "Auto");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Use", "ForItem");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "Indexing", "DontIndex");
		ДобавитьДочернийУзел(ДокументDOMОбъекта, УзелProperties, "FullTextSearch", "Use");
		
		НовыйУзел.ДобавитьДочерний(УзелProperties);
		
		СоставОпределяемогоТипа.ДобавитьДочерний(НовыйУзел);
		
		XMLФормыИзменен = Истина;
		
	КонецЕсли;
	
	Если XMLФормыИзменен Тогда
		ЗаписатьДокументDOM(ДокументDOMОбъекта , ПутьКФайлуОбъекта);
		Если Параметры.ИзмененныеФайлы.Найти(ПутьКФайлуОбъекта) = Неопределено Тогда
			Параметры.ИзмененныеФайлы.Добавить(ПутьКФайлуОбъекта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьДочернийУзел(ДокументDOMОбъекта, Узел, ИмяУзла, ТекстовоеСодержимое)
	
	НовыйУзел = ДокументDOMОбъекта.СоздатьЭлемент(ИмяУзла);
	НовыйУзел.ТекстовоеСодержимое = ТекстовоеСодержимое;
	Узел.ДобавитьДочерний(НовыйУзел);
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СоответствиеВыражений()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("CommonCommand", "/ns:MetaDataObject/ns:CommonCommand/ns:Properties/ns:CommandParameterType");
	Соответствие.Вставить("EventSubscription", "/ns:MetaDataObject/ns:EventSubscription/ns:Properties/ns:Source");
	Соответствие.Вставить("DefinedType", "/ns:MetaDataObject/ns:DefinedType/ns:Properties/ns:Type");
	Соответствие.Вставить("FunctionalOption", "/ns:MetaDataObject/ns:FunctionalOption/ns:Properties/ns:Content");
	Соответствие.Вставить("Catalog", "/ns:MetaDataObject/ns:Catalog/ns:ChildObjects");
	
	Возврат Соответствие;
	
КонецФункции

Функция СоответствиеПространстваИмен()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ns", "http://v8.1c.ru/8.3/MDClasses");
	Соответствие.Вставить("app", "http://v8.1c.ru/8.2/managed-application/core");
	Соответствие.Вставить("cfg","http://v8.1c.ru/8.1/data/enterprise/current-config");
	Соответствие.Вставить("cmi", "http://v8.1c.ru/8.2/managed-application/cmi");
	Соответствие.Вставить("ent", "http://v8.1c.ru/8.1/data/enterprise");
	Соответствие.Вставить("lf", "http://v8.1c.ru/8.2/managed-application/logform");
	Соответствие.Вставить("style", "http://v8.1c.ru/8.1/data/ui/style");
	Соответствие.Вставить("sys", "http://v8.1c.ru/8.1/data/ui/fonts/system");
	Соответствие.Вставить("v8", "http://v8.1c.ru/8.1/data/core" );
	Соответствие.Вставить("v8ui", "http://v8.1c.ru/8.1/data/ui");
	Соответствие.Вставить("web", "http://v8.1c.ru/8.1/data/ui/colors/web");
	Соответствие.Вставить("win", "http://v8.1c.ru/8.1/data/ui/colors/windows");
	Соответствие.Вставить("xen", "http://v8.1c.ru/8.3/xcf/enums");
	Соответствие.Вставить("xpr", "http://v8.1c.ru/8.3/xcf/predef");
	Соответствие.Вставить("xr", "http://v8.1c.ru/8.3/xcf/readable");
	Соответствие.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	Соответствие.Вставить("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ПодключаемыеКоманды_ПриЧтенииОсновныхНастроек(Параметры)
	Параметры.Вставить("ЕстьПечать",             ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать"));
	Параметры.Вставить("ЕстьЗаполнениеОбъектов", ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды"));
	Параметры.Вставить("ЕстьВариантыОтчетов",    ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов"));
	Параметры.Вставить("ЕстьДополнительныеОтчетыИОбработки", ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"));
	Если Параметры.ЕстьПечать Тогда
		Параметры.Вставить("МодульУправлениеПечатью", ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью"));
	КонецЕсли;
	Если Параметры.ЕстьЗаполнениеОбъектов Тогда
		Параметры.Вставить("МодульЗаполнениеОбъектов", ОбщегоНазначения.ОбщийМодуль("ЗаполнениеОбъектов"));
	КонецЕсли;
	Если Параметры.ЕстьВариантыОтчетов Тогда
		Параметры.Вставить("МодульВариантыОтчетов", ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов"));
	КонецЕсли;
	Если Параметры.ЕстьДополнительныеОтчетыИОбработки Тогда
		Параметры.Вставить("МодульДополнительныеОтчетыИОбработки", ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки"));
	КонецЕсли;
	
	ОбъектыСКомандами = Новый Структура;
	ОбъектыСКомандами.Вставить("Печать",                         Новый Массив);
	ОбъектыСКомандами.Вставить("ЗаполнениеОбъектов",             Новый Массив); 
	ОбъектыСКомандами.Вставить("ВариантыОтчетов",                Новый Массив);
	ОбъектыСКомандами.Вставить("ДополнительныеОтчетыИОбработки", Новый Массив);
	
	Параметры.Вставить("ОбъектыСКомандами", ОбъектыСКомандами);
	
	Параметры.Вставить("НовыеОбъектыСКомандами", ОбщегоНазначения.СкопироватьРекурсивно(ОбъектыСКомандами));
	Параметры.НовыеОбъектыСКомандами.ЗаполнениеОбъектов = Новый Массив;
	
	Если Параметры.ЕстьПечать Тогда
		ОбъектыСКомандами.Печать = Параметры.МодульУправлениеПечатью.ИсточникиКомандПечати();
	Иначе
		ОбъектыСКомандами.Печать = Новый Массив;
	КонецЕсли;
	Если Параметры.ЕстьЗаполнениеОбъектов Тогда
		ОбъектыСКомандами.ЗаполнениеОбъектов = Параметры.МодульЗаполнениеОбъектов.ОбъектыСКомандамиЗаполнения();
	Иначе
		ОбъектыСКомандами.ЗаполнениеОбъектов = Новый Массив;
	КонецЕсли;
	Если Параметры.ЕстьВариантыОтчетов Тогда
		ОбъектыСКомандами.ВариантыОтчетов = Параметры.МодульВариантыОтчетов.ОбъектыСКомандамиОтчетов();
	Иначе
		ОбъектыСКомандами.ВариантыОтчетов = Новый Массив;
	КонецЕсли;
	
	Если Параметры.ЕстьДополнительныеОтчетыИОбработки Тогда
		ОписаниеТипов = Метаданные.ОпределяемыеТипы.Найти("ОбъектСДополнительнымиКомандами").Тип;
		Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных <> Неопределено Тогда
				ОбъектыСКомандами.ДополнительныеОтчетыИОбработки.Добавить(ОбъектМетаданных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПодключаемыеКоманды_ПриАнализеОбъекта(Параметры, СтрокаОбъекта)
	Если Не Параметры.ЕстьПечать
		И Не Параметры.ЕстьДополнительныеОтчетыИОбработки
		И Не Параметры.ЕстьЗаполнениеОбъектов Тогда
		Возврат; // Нет ни одной из подсистем.
	КонецЕсли;
	
	ПолноеИмяМодуля = СтрокаОбъекта.Каталог + "Ext\ManagerModule.bsl";
	ТекстМодуля = ПрочитатьТекстМодуля(ПолноеИмяМодуля);
	Если ТекстМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстМодуляИзменен = Ложь;
	
	// Замена "УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды" на "ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды".
	Если СтрНайти(ТекстМодуля, "УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(") > 0 Тогда
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(", "ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(");
		ТекстМодуляИзменен = Истина;
	КонецЕсли;
	
	// Если в модуле менеджера есть процедура "ДобавитьКомандыЗаполнения", то этот объект подключен к подменю "Заполнить".
	Метод = НайтиМетод(ТекстМодуля, "ДобавитьКомандыЗаполнения", Истина, Ложь);
	Если Метод <> Неопределено Тогда
		ПодключаемыеКоманды_ЗарегистрироватьПоставщикаКоманд(Параметры, СтрокаОбъекта.Метаданные, "ЗаполнениеОбъектов");
	КонецЕсли;
	
	Если ТекстМодуляИзменен Тогда
		ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля);
		Если Параметры.ИзмененныеФайлы.Найти(ПолноеИмяМодуля) = Неопределено Тогда
			Параметры.ИзмененныеФайлы.Добавить(ПолноеИмяМодуля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключаемыеКоманды_ПриАнализеОбщегоМодуля(Параметры, СтрокаОбъекта)
	Если Не Параметры.ЕстьПечать
		И Не Параметры.ЕстьДополнительныеОтчетыИОбработки
		И Не Параметры.ЕстьЗаполнениеОбъектов Тогда
		Возврат; // Нет ни одной из подсистем.
	КонецЕсли;
	
	ПолноеИмяМодуля = СтрокаОбъекта.Каталог + "Ext\Module.bsl";
	ТекстМодуля = ПрочитатьТекстМодуля(ПолноеИмяМодуля);
	Если ТекстМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Замена "УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды" на "ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды".
	Если СтрНайти(ТекстМодуля, "УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(") > 0 Тогда
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(", "ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(");
		ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля);
		Если Параметры.ИзмененныеФайлы.Найти(ПолноеИмяМодуля) = Неопределено Тогда
			Параметры.ИзмененныеФайлы.Добавить(ПолноеИмяМодуля);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодключаемыеКоманды_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	Если Не Параметры.ЕстьПечать
		И Не Параметры.ЕстьДополнительныеОтчетыИОбработки
		И Не Параметры.ЕстьЗаполнениеОбъектов Тогда
		Возврат; // Нет ни одной из подсистем.
	КонецЕсли;
	
	ПолноеИмяСхемы  = СтрокаФормы.Каталог + "Ext\Form.xml";
	ПолноеИмяМодуля = СтрокаФормы.Каталог + "Ext\Form\Module.bsl";
	ТекстМодуля = ПрочитатьТекстМодуля(ПолноеИмяМодуля);
	
	Если Не ФайлСуществует(ПолноеИмяСхемы) Или ТекстМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПрочитатьДокументDOM(ПолноеИмяСхемы);
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	ПриСоздании = НайтиМетод(ТекстМодуля, "ПриСозданииНаСервере", Ложь, Истина);
	Если ПриСоздании = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Анализ модуля формы.
	
	ЭтоСтандартноеВнедрениеПечати = Истина;
	ПочемуЭтоНестандартноеВнедрениеПечати = "";
	ПричиныОтказаВАвтоматическойЗамене = Новый Массив;
	
	ИмяЭлементаФормыСКомандамиПечати = Неопределено;
	ПараметрОбъектИлиТаблицаФормы = Неопределено;
	ПараметрКоманднаяПанель = Неопределено;
	ПараметрИсточники = Неопределено;
	ПараметрИмяСписка = Неопределено;
	
	ТекстМодуляИзменен = Ложь;
	XMLФормыИзменен = Ложь;
	ИдентификаторПоследнегоЭлемента = МаксимальныйИдентификаторЭлементовФормы(ДокументDOM, Разыменователь);
	
	СодержимоеНРег = НРег(ПриСоздании.Содержимое);
	КоличествоВызовов = СтрЧислоВхождений(СодержимоеНРег, НРег("УправлениеПечатью.ПриСозданииНаСервере("));
	ВнедренаПечать = (КоличествоВызовов > 0);
	Если КоличествоВызовов > 1 Тогда
		// Если вызовов "УправлениеПечатью.ПриСозданииНаСервере" несколько, то это нестандартное внедрение.
		ЭтоСтандартноеВнедрениеПечати = Ложь;
		ПочемуЭтоНестандартноеВнедрениеПечати = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обнаружено несколько вызовов (%1) процедуры ""%2"".'"),
			КоличествоВызовов,
			"УправлениеПечатью.ПриСозданииНаСервере");
	ИначеЕсли КоличествоВызовов = 1 Тогда
		// Определить параметры вызова:
		Вызов = НайтиВызовМетода(ПриСоздании.Содержимое, "УправлениеПечатью.ПриСозданииНаСервере(");
		Если Вызов <> Неопределено Тогда
			КоличествоПараметров = Вызов.Параметры.Количество();
			// 2й параметр - <МестоРазмещенияКомандПоУмолчанию>.
			// Если имя элемента задано неявно (через переменную), то это нестандартное внедрение.
			// В противном случае полученное имя элемента формы используется далее при анализе XML формы.
			Если КоличествоПараметров > 1 Тогда
				ФрагментПараметра = СокрЛП(Вызов.Параметры[1]);
				ФрагментПараметраНРег = НРег(ФрагментПараметра);
				Если ФрагментПараметраНРег <> НРег("Неопределено") Тогда
					Если СтрНачинаетсяС(ФрагментПараметраНРег, НРег("Элементы.Найти("""))
						И СтрЗаканчиваетсяНа(ФрагментПараметраНРег, НРег(""")")) Тогда
						Длина = СтрДлина("Элементы.Найти(""");
						ИмяЭлемента = Сред(ФрагментПараметра, Длина + 1, СтрДлина(ФрагментПараметра) - Длина - 2);
					ИначеЕсли СтрНачинаетсяС(ФрагментПараметраНРег, НРег("Элементы.")) Тогда
						Начало = СтрДлина("Элементы.") + 1;
						КоличествоСимволов = СтрДлина(ФрагментПараметра) - Начало + 1;
						Если СтрЗаканчиваетсяНа(ФрагментПараметраНРег, НРег(".КоманднаяПанель"))
							И КоличествоСимволов > СтрДлина(".КоманднаяПанель") Тогда
							КоличествоСимволов = КоличествоСимволов - СтрДлина(".КоманднаяПанель");
						КонецЕсли;
						ИмяЭлемента = Сред(ФрагментПараметра, Начало, КоличествоСимволов);
					Иначе
						ИмяЭлемента = ФрагментПараметра;
					КонецЕсли;
					
					// Стандартное имя подменю указывать не обязательно (и менять не требуется).
					Если ИмяЭлемента <> Неопределено
						И НРег(ИмяЭлемента) <> НРег("ПодменюПечать")
						И НРег(ИмяЭлемента) <> НРег("ФормаКоманднаяПанель")
						И НРег(ИмяЭлемента) <> НРег("ЭтотОбъект")
						И НРег(ИмяЭлемента) <> НРег("ЭтаФорма")
						И НРег(ИмяЭлемента) <> НРег("ЭтотОбъект.КоманднаяПанель")
						И НРег(ИмяЭлемента) <> НРег("ЭтаФорма.КоманднаяПанель") Тогда
						Если ИмяУдовлетворяетТребованиямИменованияПеременных(ИмяЭлемента) Тогда
							ИмяЭлементаФормыСКомандамиПечати = ИмяЭлемента;
						Иначе
							ЭтоСтандартноеВнедрениеПечати = Ложь;
							ПочемуЭтоНестандартноеВнедрениеПечати = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Имя элемента формы в вызове ""%1"" задано неявно.'"),
								Вызов.Тело);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			// 3й параметр - <ОбъектыПечати>.
			// Если этот параметр задан, то это нестандартное внедрение.
			Если КоличествоПараметров > 2 Тогда
				ФрагментПараметра = Вызов.Параметры[2];
				ФрагментПараметраНРег = НРег(ФрагментПараметра);
				Если ФрагментПараметраНРег <> НРег("Неопределено") Тогда
					ПараметрИсточники = ФрагментПараметра;
					Текст = НСтр("ru = 'Рекомендуется проверить открытие формы и проверить содержимое подменю ""Печать"".'");
					ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "Тестирование", Текст);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Найти вызов "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере" и определить 2й параметр - <ТипФормы>.
	Вызов = НайтиВызовМетода(ПриСоздании.Содержимое, "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(");
	ВнедреныДополнительныеОтчетыИОбработки = (Вызов <> Неопределено);
	
	ВнедреноЗаполнение = (СтрНайти(СодержимоеНРег, НРег("ПодключаемыеКоманды.ПриСозданииНаСервере(")) > 0);
	
	Если Не ВнедренаПечать И Не ВнедреныДополнительныеОтчетыИОбработки И Не ВнедреноЗаполнение Тогда
		Возврат; // Нечего переводить.
	КонецЕсли;
	
	// Найти вызов "УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати" и определить 3й параметр - <Источник>.
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		Метод = НайтиМетод(ТекстМодуля, "Подключаемый_ВыполнитьКомандуПечати", Ложь, Ложь);
		Если Метод <> Неопределено Тогда
			Вызов = НайтиВызовМетода(Метод.Содержимое, "УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(");
			Если Вызов <> Неопределено И Вызов.Параметры.Количество() > 2 Тогда
				ПараметрОбъектИлиТаблицаФормы = СокрЛП(Вызов.Параметры[2]);
				ПодключаемыеКоманды_ПроверитьПараметрОбъектИлиТаблицаФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		Метод = НайтиМетод(ТекстМодуля, "Подключаемый_ОбновитьКоманды", Ложь, Ложь);
		Если Метод <> Неопределено Тогда
			Вызов = НайтиВызовМетода(Метод.Содержимое, "УправлениеПечатьюКлиентСервер.ОбновитьКоманды(");
			Если Вызов <> Неопределено И Вызов.Параметры.Количество() > 1 Тогда
				ПараметрОбъектИлиТаблицаФормы = СокрЛП(Вызов.Параметры[1]);
				ПодключаемыеКоманды_ПроверитьПараметрОбъектИлиТаблицаФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
			КонецЕсли;
			Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
				Вызов = НайтиВызовМетода(Метод.Содержимое, "ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(");
				Если Вызов <> Неопределено И Вызов.Параметры.Количество() > 1 Тогда
					ПараметрОбъектИлиТаблицаФормы = СокрЛП(Вызов.Параметры[1]);
					ПодключаемыеКоманды_ПроверитьПараметрОбъектИлиТаблицаФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		Метод = НайтиМетод(ТекстМодуля, "Подключаемый_ВыполнитьКомандуПечати", Ложь, Ложь);
		Если Метод <> Неопределено Тогда
			Вызов = НайтиВызовМетода(Метод.Содержимое, "УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(");
			Если Вызов <> Неопределено И Вызов.Параметры.Количество() > 2 Тогда
				ПараметрОбъектИлиТаблицаФормы = СокрЛП(Вызов.Параметры[2]);
				ПодключаемыеКоманды_ПроверитьПараметрОбъектИлиТаблицаФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		ПараметрОбъектИлиТаблицаФормы = ПодключаемыеКоманды_ОпределитьИсточник(ДокументDOM, Разыменователь, СтрокаФормы, ПричиныОтказаВАвтоматическойЗамене);
	КонецЕсли;
	Если ПараметрОбъектИлиТаблицаФормы <> Неопределено И СтрНачинаетсяС(НРег(ПараметрОбъектИлиТаблицаФормы), НРег("Элементы.")) Тогда
		ПараметрИмяСписка = Сред(ПараметрОбъектИлиТаблицаФормы, СтрНайти(ПараметрОбъектИлиТаблицаФормы, ".") + 1);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Анализ и изменение XML формы.
	
	// Определить тип элемента с именем <МестоРазмещенияКомандПоУмолчанию>.
	Если ЭтоСтандартноеВнедрениеПечати И ИмяЭлементаФормыСКомандамиПечати <> Неопределено Тогда
		ЭлементDOM = НайтиЭлементФормы(ДокументDOM, Разыменователь, ИмяЭлементаФормыСКомандамиПечати);
		Если ЭлементDOM = Неопределено Тогда
			ВидГруппы = Неопределено;
		Иначе
			ВидГруппы = ЭлементDOM.ИмяУзла;
		КонецЕсли;
		Если ВидГруппы = "Table" Тогда
			АвтоКоманднаяПанель = НайтиДочернийУзел(ДокументDOM, Разыменователь, ЭлементDOM, "xmlns:AutoCommandBar");
			Если АвтоКоманднаяПанель <> Неопределено Тогда
				ВидГруппы = "CommandBar";
				ИмяЭлементаФормыСКомандамиПечати = АвтоКоманднаяПанель.ПолучитьАтрибут("name");
			КонецЕсли;
		КонецЕсли;
		Если ВидГруппы = "Popup" Тогда
			// Если это подменю, тогда требуется переименование элемента с именем <МестоРазмещенияКомандПоУмолчанию> в "ПодменюПечать".
			// Если в модуле формы этот элемент используется более 1 раза, то переименовывать нельзя (добавить ручной шаг).
			Если СтрЧислоВхождений(НРег(ТекстМодуля), НРег("Элементы." + ИмяЭлементаФормыСКомандамиПечати)) > 1 Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Переименовать подменю ""%1"" в ""%2"" (используется в модуле формы).'"),
					ИмяЭлементаФормыСКомандамиПечати,
					"ПодменюПечать");
				ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "РучноеДействие", Текст);
			Иначе
				ЭлементDOM.УстановитьАтрибут("name", "ПодменюПечать");
				РасширеннаяПодсказка = НайтиДочернийУзел(ДокументDOM, Разыменователь, ЭлементDOM, "xmlns:ExtendedTooltip");
				Если РасширеннаяПодсказка <> Неопределено Тогда
					РасширеннаяПодсказка.УстановитьАтрибут("name", "ПодменюПечатьРасширеннаяПодсказка");
				КонецЕсли;
				XMLФормыИзменен = Истина;
			КонецЕсли;
		ИначеЕсли ВидГруппы = "ButtonGroup" Или ВидГруппы = "CommandBar" Или ВидГруппы = "ContextMenu" Тогда
			// Если это командная панель или группа кнопок, тогда данный параметр требуется передавать в новый параметр <КоманднаяПанель>
			// вызова ПодключаемыеКоманды.ПриСозданииНаСервере.
			ПараметрКоманднаяПанель = ИмяЭлементаФормыСКомандамиПечати;
			ИмяЭлементаФормыСКомандамиПечати = Неопределено;
		ИначеЕсли ВидГруппы = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти элемент формы, передававшийся в параметрах вызова %1.
				|Для основного списка подменю должно называться ""%2"", для дополнительного - ""%3"".'"),
				"УправлениеПечатью.ПриСозданииНаСервере",
				"ПодменюПечать",
				"<ИмяСписка>ПодменюПечать");
			ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "РучноеДействие", Текст);
		Иначе
			Текст = НСтр("ru = 'В параметрах вызова %1 передана группа ""%2"" нестандартного типа ""%3"".
			|Если в данную группу следует выводить отдельные команды печати, то группу следует указывать в настройке ""%4"" команд печати.
			|Если в данную группу следует выводить все команды печати (в том числе команды расширений), то ее следует переименовать в ""%5"".'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Текст,
				"УправлениеПечатью.ПриСозданииНаСервере",
				ИмяЭлементаФормыСКомандамиПечати,
				ВидГруппы,
				"МестоРазмещения",
				"ПодменюПечать");
			ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "РучноеДействие", Текст);
		КонецЕсли;
	КонецЕсли;
	
	// Найти и заменить подменю с именем "ПодменюДополнительныхОбработокЗаполнения" на "ПодменюЗаполнить".
	// Если в модуле формы это подменю используется, то переименовывать нельзя (добавить ручной шаг).
	ЕстьПодменюЗаполнить = (НайтиЭлементФормы(ДокументDOM, Разыменователь, "ПодменюЗаполнить") <> Неопределено);
	ЭлементDOM = НайтиЭлементФормы(ДокументDOM, Разыменователь, "ПодменюДополнительныхОбработокЗаполнения");
	Если ЭлементDOM <> Неопределено Тогда
		Если СтрЧислоВхождений(НРег(ТекстМодуля), НРег("Элементы.ПодменюДополнительныхОбработокЗаполнения")) > 0 Тогда
			Если ЕстьПодменюЗаполнить Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Удалить элемент ""%1"".'"),
					"ПодменюДополнительныхОбработокЗаполнения");
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заменить имя элемента ""%1"" на ""%2"".'"),
					"ПодменюДополнительныхОбработокЗаполнения",
					"ПодменюЗаполнить");
			КонецЕсли;
			ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "РучноеДействие", Текст);
		Иначе
			XMLФормыИзменен = Истина;
			Если ЕстьПодменюЗаполнить Тогда
				РодительскийЭлементDOM = ЭлементDOM.РодительскийУзел;
				РодительскийЭлементDOM.УдалитьДочерний(ЭлементDOM);
			Иначе
				ЭлементDOM.УстановитьАтрибут("name", "ПодменюЗаполнить");
				ЕстьПодменюЗаполнить = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вставка реквизита "ПараметрыПодключаемыхКоманды".
	РеквизитФормы = НайтиРеквизитФормы(ДокументDOM, Разыменователь, "ПараметрыПодключаемыхКоманд");
	Если РеквизитФормы = Неопределено Тогда
		XMLФормыИзменен = Истина;
		
		РеквизитыФормы = ВычислитьВыражениеXPath("/xmlns:Form/xmlns:Attributes", ДокументDOM, Разыменователь).ПолучитьСледующий();
		Если РеквизитыФормы = Неопределено Тогда
			Форма = ВычислитьВыражениеXPath("/xmlns:Form", ДокументDOM, Разыменователь).ПолучитьСледующий();
			РеквизитыФормы = Форма.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент(Форма.URIПространстваИмен, "Attributes"));
		КонецЕсли;
		
		ИдентификаторПоследнегоРеквизита = МаксимальныйИдентификаторРеквизитовФормы(ДокументDOM, Разыменователь);
		ВставляемыйФрагментXML = 
		"<Attribute name=""ПараметрыПодключаемыхКоманд"" id=""" + СледующийИдентификатор(ИдентификаторПоследнегоРеквизита) + """>
		|	<Title>
		|		<v8:item>
		|			<v8:lang>ru</v8:lang>
		|			<v8:content>" + НСтр("ru = 'Параметры подключаемых команд'") + "</v8:content>
		|		</v8:item>
		|	</Title>
		|	<Type/>
		|</Attribute>";
		
		ВставитьФрагментXMLВУзелФормы(ДокументDOM, Разыменователь, РеквизитыФормы, ВставляемыйФрагментXML);
	КонецЕсли;
	
	// Вставка подменю с подгруппами "Важное/Обычное/См. также".
	Если ВнедренаПечать Тогда
		
		ВидПодменю = Новый Структура;
		ВидПодменю.Вставить("ИмяПодменю", "ПодменюПечать");
		ВидПодменю.Вставить("ИмяОбщейКартинки", "Печать");
		ВидПодменю.Вставить("ПредставлениеПодменю", НСтр("ru = 'Печать'"));
		
		МестоПодменю = Новый Структура;
		МестоПодменю.Вставить("КоманднаяПанель", ПараметрКоманднаяПанель);
		МестоПодменю.Вставить("ИмяСписка", ПараметрИмяСписка);
		МестоПодменю.Вставить("ИдентификаторПоследнегоЭлемента", ИдентификаторПоследнегоЭлемента);
		
		XMLФормыИзменен = XMLФормыИзменен 
			Или ПодключаемыеКоманды_ВстроитьПодменю(ДокументDOM, Разыменователь, ВидПодменю, МестоПодменю);
	КонецЕсли;
	Если ВнедреноЗаполнение
		Или ЕстьПодменюЗаполнить
		Или Параметры.ОбъектыСКомандами.ЗаполнениеОбъектов.Найти(СтрокаОбъекта.Метаданные) <> Неопределено Тогда
		
		ВидПодменю = Новый Структура;
		ВидПодменю.Вставить("ИмяПодменю", "ПодменюЗаполнить");
		ВидПодменю.Вставить("ИмяОбщейКартинки", "ЗаполнитьФорму");
		ВидПодменю.Вставить("ПредставлениеПодменю", НСтр("ru = 'Заполнить'"));
		
		МестоПодменю = Новый Структура;
		МестоПодменю.Вставить("КоманднаяПанель", ПараметрКоманднаяПанель);
		МестоПодменю.Вставить("ИмяСписка", ПараметрИмяСписка);
		МестоПодменю.Вставить("ИдентификаторПоследнегоЭлемента", ИдентификаторПоследнегоЭлемента);
		
		XMLФормыИзменен = XMLФормыИзменен
			Или ПодключаемыеКоманды_ВстроитьПодменю(ДокументDOM, Разыменователь, ВидПодменю, МестоПодменю);
	КонецЕсли;
	
	// Удаление мест использования общих команд "ОтчетыОбъекта" и "ЗаполнениеОбъекта".
	
	////////////////////////////////////////////////////////////////////////////////
	// 3. Изменение модуля формы.
	
	Если СтрНайти(ТекстМодуля, "СтандартныеПодсистемы.БазоваяФункциональность") > 0 Тогда
		ТекстМодуля = СтрЗаменить(
			ТекстМодуля,
			"СтандартныеПодсистемы.БазоваяФункциональность",
			"СтандартныеПодсистемы.ПодключаемыеКоманды");
		ТекстМодуляИзменен = Истина;
	КонецЕсли;
	
	ПодключаемыеКоманды_ПриСоздании = НайтиВызовМетода(
		ТекстМодуля,
		"ПодключаемыеКоманды.ПриСозданииНаСервере(",
		ПриСоздании.Начало,
		"СтандартныеПодсистемы.ПодключаемыеКоманды");
	
	// Заменить вызов "УправлениеПечатью.ПриСозданииНаСервере" на "ПодключаемыеКоманды.ПриСозданииНаСервере"
	// используя параметр <КоманднаяПанель> и <ТипФормы>.
	// Если ТипФормы не совпадает с определенным автоматически, то явно передавать "ПрефиксГрупп".
	Если ВнедренаПечать Тогда
		Печать_ПриСоздании = НайтиВызовМетода(
			ТекстМодуля,
			"УправлениеПечатью.ПриСозданииНаСервере(",
			ПриСоздании.Начало,
			"СтандартныеПодсистемы.Печать");
		Если ЭтоСтандартноеВнедрениеПечати Тогда
			СтараяВставкаОтПечати = "";
		Иначе
			СтараяВставкаОтПечати = Сред(ТекстМодуля, Печать_ПриСоздании.Начало, Печать_ПриСоздании.Окончание - Печать_ПриСоздании.Начало);
			СтараяВставкаОтПечати = СтрЗаменить(ПСТаб + СокрЛП(СтараяВставкаОтПечати), ПСТаб, ПСТаб + "//");
			СтараяВставкаОтПечати = ПСТаб + "// " + ОсталосьСделать() + ": " + НСтр("ru = 'Пересмотреть нестандартное внедрение в пользу стандартного.'") + СтараяВставкаОтПечати;
		КонецЕсли;
		Если ПодключаемыеКоманды_ПриСоздании = Неопределено Тогда
			НовыйФрагмент = ПодключаемыеКоманды_ПриСоздании_ТекстВызова(ПараметрКоманднаяПанель, ПараметрИсточники, СтараяВставкаОтПечати);
			ТекстМодуля = СтрЗаменить(ТекстМодуля, Печать_ПриСоздании.Тело, НовыйФрагмент);
		Иначе
			Если ПодключаемыеКоманды_ПриСоздании.Параметры.Количество() = 1 Тогда
				СтарыйФрагмент = ПодключаемыеКоманды_ПриСоздании.Тело;
				ПодключаемыеКоманды_ПриСоздании.Тело = ПодключаемыеКоманды_ПриСоздании_ТекстВызова(ПараметрКоманднаяПанель, ПараметрИсточники, СтараяВставкаОтПечати);
				ТекстМодуля = СтрЗаменить(ТекстМодуля, СтарыйФрагмент, ПодключаемыеКоманды_ПриСоздании.Тело);
			КонецЕсли;
			УдалитьВызовМетода(ТекстМодуля, "УправлениеПечатью.ПриСозданииНаСервере(", ПриСоздании.Начало, "СтандартныеПодсистемы.Печать");
		КонецЕсли;
		ТекстМодуляИзменен = Истина;
	ИначеЕсли ВнедреныДополнительныеОтчетыИОбработки Тогда
		Если ПодключаемыеКоманды_ПриСоздании = Неопределено Тогда
			ДополнительныеОтчетыИОбработки_ПриСоздании = НайтиВызовМетода(
				ТекстМодуля,
				"ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(",
				ПриСоздании.Начало,
				"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
			ПозицияНачалаСкобок = СтрНайти(ТекстМодуля, "// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки", , ПриСоздании.Начало);
			ПозицияВставки = Мин(?(ПозицияНачалаСкобок = 0, ПриСоздании.ОкончаниеТела, ПозицияНачалаСкобок), 
				?(ДополнительныеОтчетыИОбработки_ПриСоздании.Начало = 0, ПриСоздании.ОкончаниеТела, ДополнительныеОтчетыИОбработки_ПриСоздании.Начало), ПриСоздании.ОкончаниеТела);
			ПозицияВставки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияВставки);
			НовыйФрагмент = ПодключаемыеКоманды_ПриСоздании_ТекстВызова(ПараметрКоманднаяПанель, ПараметрИсточники);
			ТекстМодуля = Лев(ТекстМодуля, ПозицияВставки) + Символы.Таб + НовыйФрагмент + Символы.ПС + Сред(ТекстМодуля, ПозицияВставки + 1);
		Иначе
			Если ПодключаемыеКоманды_ПриСоздании.Параметры.Количество() = 1 Тогда
				СтарыйФрагмент = ПодключаемыеКоманды_ПриСоздании.Тело;
				ПодключаемыеКоманды_ПриСоздании.Тело = ПодключаемыеКоманды_ПриСоздании_ТекстВызова(ПараметрКоманднаяПанель, ПараметрИсточники);
				ТекстМодуля = СтрЗаменить(ТекстМодуля, СтарыйФрагмент, ПодключаемыеКоманды_ПриСоздании.Тело);
			КонецЕсли;
			УдалитьВызовМетода(ТекстМодуля, "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(", ПриСоздании.Начало, "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
		КонецЕсли;
		ТекстМодуляИзменен = Истина;
	КонецЕсли;
	
	ТекстМодуля = СтрЗаменить(
		ТекстМодуля,
		"УправлениеПечатьюКлиентСервер.ОбновитьКоманды",
		"ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды");
	ТекстМодуля = СтрЗаменить(
		ТекстМодуля,
		"УправлениеПечатьюКлиент.НачатьОбновлениеКоманд",
		"ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд");
	
	// Заменить метод "Подключаемый_ВыполнитьКомандуПечати" на "Подключаемый_ВыполнитьКоманду" 
	// и "Подключаемый_ВыполнитьКомандуНаСервере" используя параметр <Источник>.
	
	ПодключаемыеКоманды_СерияМетодов = ОбъединитьМетоды(
		ТекстМодуля,
		"Подключаемый_ВыполнитьКоманду/Подключаемый_ВыполнитьКомандуНаСервере/Подключаемый_ВыполнитьКомандуПечати/Подключаемый_ОбновитьКоманды",
		Ложь,
		Истина,
		"СтандартныеПодсистемы.ПодключаемыеКоманды/СтандартныеПодсистемы.Печать/СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки",
		ТекстМодуляИзменен);
	НовыйФрагмент = ПодключаемыеКоманды_ТекстСерииМетодов(ПараметрОбъектИлиТаблицаФормы, ТекстМодуля, ПодключаемыеКоманды_СерияМетодов, ПричиныОтказаВАвтоматическойЗамене);
	Если ПодключаемыеКоманды_СерияМетодов = Неопределено Тогда
		ТекстМодуляИзменен = Истина;
		Область = НайтиОбласть(ТекстМодуля, "СлужебныеПроцедурыИФункции");
		Если Область = Неопределено Тогда
			ТекстМодуля = СокрП(ТекстМодуля) + Символы.ПС
			+ Символы.ПС
			+ "#Область СлужебныеПроцедурыИФункции" + Символы.ПС
			+ Символы.ПС
			+ НовыйФрагмент + Символы.ПС
			+ Символы.ПС
			+ "#КонецОбласти" + Символы.ПС;
		Иначе
			ФрагментДо = Лев(ТекстМодуля, Область.ОкончаниеТела - 1);
			ФрагментПосле = Сред(ТекстМодуля, Область.ОкончаниеТела);
			ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
			+ Символы.ПС
			+ НовыйФрагмент + Символы.ПС
			+ Символы.ПС
			+ СокрЛ(ФрагментПосле);
		КонецЕсли;
	Иначе
		Если СокрЛП(ПодключаемыеКоманды_СерияМетодов.Тело) <> НовыйФрагмент Тогда
			ТекстМодуляИзменен = Истина;
			ФрагментДо = Лев(ТекстМодуля, ПодключаемыеКоманды_СерияМетодов.Начало - 1);
			ФрагментПосле = Сред(ТекстМодуля, ПодключаемыеКоманды_СерияМетодов.Окончание);
			ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
			+ Символы.ПС
			+ НовыйФрагмент + Символы.ПС
			+ Символы.ПС
			+ СокрЛ(ФрагментПосле);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстМодуляИзменен Или ВнедреныДополнительныеОтчетыИОбработки Тогда
		ТекстМодуляИзменен = Истина;
		
		// Удалить вызов "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере".
		УдалитьВызовМетода(ТекстМодуля, "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(", ПриСоздании.Начало, "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
		
		// Удалить обработчик "Подключаемый_ВыполнитьНазначаемуюКоманду".
		УдалитьМетод(ТекстМодуля, "Подключаемый_ВыполнитьНазначаемуюКоманду", , , "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
		
		// Удалить обработчик "ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере".
		УдалитьМетод(ТекстМодуля, "ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере", , , "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	КонецЕсли;
	
	// Очистка старых скобок подсистем.
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// СтандартныеПодсистемы.Печать");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// Конец СтандартныеПодсистемы.Печать");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// Обработчик подсистемы ""Печать""");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// Обработчик подсистемы ""Внешние обработки""");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// Обработчик подсистемы ""Дополнительные отчеты и обработки""");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// ДополнительныеОтчетыИОбработки");
	УдалитьКомментарии(ТекстМодуля, ТекстМодуляИзменен, "// Конец ДополнительныеОтчетыИОбработки");
	
	Результат = ПодключаемыеКоманды_РасстановкаСобытийВФорме(ТекстМодуля, ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
	ТекстМодуляИзменен = ТекстМодуляИзменен Или Результат.ТекстМодуляИзменен;	
	XMLФормыИзменен = XMLФормыИзменен Или Результат.XMLФормыИзменен;	
		
	Если ТекстМодуляИзменен Тогда
		ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля);
	КонецЕсли;
	Если XMLФормыИзменен Тогда
		ЗаписатьДокументDOM(ДокументDOM, ПолноеИмяСхемы);
	КонецЕсли;
	Если ТекстМодуляИзменен Или XMLФормыИзменен Тогда
		Если Параметры.ИзмененныеФайлы.Найти(ПолноеИмяСхемы) = Неопределено Тогда
			Параметры.ИзмененныеФайлы.Добавить(ПолноеИмяСхемы);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочемуЭтоНестандартноеВнедрениеПечати) Тогда
		Текст = ПочемуЭтоНестандартноеВнедрениеПечати
			+ Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Переход на ""%1"" следует завершить вручную, с использованием 2го параметра.'"),
				"ПодключаемыеКоманды.ПриСозданииНаСервере");
		ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "РучноеДействие", Текст);
	КонецЕсли;
	
	Если ПричиныОтказаВАвтоматическойЗамене.Количество() > 0 Тогда
		Текст = СтрСоединить(ПричиныОтказаВАвтоматическойЗамене, Символы.ПС) + Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Переход на подключаемые команды следует завершить вручную (см. поиском фрагментов кода с ""%1"").'"),
			ОсталосьСделать());
		ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "РучноеДействие", Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключаемыеКоманды_ПослеАнализаДереваМетаданных(Параметры)
	Если Параметры.ЕстьЗаполнениеОбъектов И Параметры.НовыеОбъектыСКомандами.ЗаполнениеОбъектов.Количество() > 0 Тогда
		ПолноеИмяМодуля = ПолноеИмяОбщегоМодуля(Параметры, "ЗаполнениеОбъектовПереопределяемый");
		ТекстМодуля = ПрочитатьТекстМодуля(ПолноеИмяМодуля);
		Если ТекстМодуля = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден текст общего модуля ""%1"".'"),
				ПолноеИмяМодуля);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
			Возврат;
		КонецЕсли;
		
		Метод = НайтиМетод(ТекстМодуля, "ПриОпределенииОбъектовСКомандамиЗаполнения");
		Если Метод = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В общем модуле ""%1"" не найдена процедура ""%2"".'"),
				"ЗаполнениеОбъектовПереопределяемый",
				"ПриОпределенииОбъектовСКомандамиЗаполнения");
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
			Возврат;
		КонецЕсли;
		
		НовыйФрагмент = ПодключаемыеКоманды_КодПоДобавлениюОбъектовМетаданныхВМассив(Параметры, Параметры.НовыеОбъектыСКомандами.ЗаполнениеОбъектов);
		ФрагментДо = Лев(ТекстМодуля, Метод.ОкончаниеТела - 1);
		ФрагментПосле = Сред(ТекстМодуля, Метод.ОкончаниеТела);
		ТекстМодуля = СокрП(ФрагментДо)
			+ ПСТаб + Символы.ПС
			+ НовыйФрагмент
			+ ПСТаб + Символы.ПС
			+ СокрЛ(ФрагментПосле);
		
		ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля);
		Если Параметры.ИзмененныеФайлы.Найти(ПолноеИмяМодуля) = Неопределено Тогда
			Параметры.ИзмененныеФайлы.Добавить(ПолноеИмяМодуля);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодключаемыеКоманды_ПроверитьПараметрОбъектИлиТаблицаФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы)
	// Проверка корректности и исправление мелких ошибок внедрения (Элементы.Объект вместо Объект и т.п.).
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрОбъектИлиТаблицаФормы = СокрЛП(ПараметрОбъектИлиТаблицаФормы);
	Если СтрНачинаетсяС(НРег(ПараметрОбъектИлиТаблицаФормы), НРег("Элементы.")) Тогда
		ИмяТаблицыФормы = Сред(ПараметрОбъектИлиТаблицаФормы, СтрДлина("Элементы.") + 1);
		ТаблицаФормы = НайтиЭлементФормы(ДокументDOM, Разыменователь, ИмяТаблицыФормы);
		Если ТаблицаФормы = Неопределено Или ТаблицаФормы.ИмяУзла <> "Table" Тогда // Указана не таблица формы.
			РеквизитФормы = НайтиРеквизитФормы(ДокументDOM, Разыменователь, ИмяТаблицыФормы);
			Если РеквизитФормы <> Неопределено Тогда
				ПараметрОбъектИлиТаблицаФормы = ИмяТаблицыФормы; // При указании объекта следует указывать реквизит формы, а не элемент.
			Иначе
				ПараметрОбъектИлиТаблицаФормы = Неопределено; // Указан несуществующий элемент формы.
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТаблицаФормы = НайтиЭлементФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
		Если ТаблицаФормы <> Неопределено И ТаблицаФормы.ИмяУзла = "Table" Тогда
			ПараметрОбъектИлиТаблицаФормы = "Элементы." + ПараметрОбъектИлиТаблицаФормы; // При указании таблицы формы следует указывать элемент, а не реквизит.
		Иначе
			РеквизитФормы = НайтиРеквизитФормы(ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы);
			Если РеквизитФормы = Неопределено Тогда
				ПараметрОбъектИлиТаблицаФормы = Неопределено; // Указан несуществующий реквизит формы.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПодключаемыеКоманды_ОпределитьИсточник(ДокументDOM, Разыменователь, СтрокаФормы, ПричиныОтказаВАвтоматическойЗамене)
	РеквизитФормы = НайтиОсновнойРеквизитФормы(ДокументDOM, Разыменователь);
	Если РеквизитФормы = Неопределено Тогда
		ПричиныОтказаВАвтоматическойЗамене.Добавить(НСтр("ru = 'Не найден основной реквизит формы.'"));
		Возврат Неопределено; // В неосновных формах велик риск "не попасть" в нужный реквизит.
	КонецЕсли;
	Имя = РеквизитФормы.ПолучитьАтрибут("name");
	ЭтоДинамическийСписок = (Имя = "Список")
		Или (НайтиДочернийУзел(ДокументDOM, Разыменователь, РеквизитФормы, "xmlns:Type/v8:Type[text()='cfg:DynamicList']") <> Неопределено);
	Если Не ЭтоДинамическийСписок И Не СтрокаФормы.Ссылочный Тогда
		ПричиныОтказаВАвтоматическойЗамене.Добавить(НСтр("ru = 'Не удалось определить источник подключаемых команд.'"));
		Возврат Неопределено; // В формах нессылочных объектов метаданных велик риск "не попасть" в нужный реквизит.
	КонецЕсли;
	Если Имя = "Объект" Тогда
		Возврат Имя;
	ИначеЕсли Имя = "Список" И НайтиЭлементФормы(ДокументDOM, Разыменователь, Имя) <> Неопределено Тогда
		Возврат "Элементы." + Имя;
	КонецЕсли;
	
	Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"//xmlns:ChildItems/xmlns:Table/xmlns:DataPath[text()='%1']/..",
		Имя);
	РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	ТаблицаФормы = РезультатXPath.ПолучитьСледующий();
	Если ТаблицаФормы <> Неопределено И ТаблицаФормы.ИмяУзла = "Table" Тогда
		ИмяТаблицыФормы = ТаблицаФормы.ПолучитьАтрибут("name");
		Возврат "Элементы." + ИмяТаблицыФормы;
	Иначе
		Возврат Имя;
	КонецЕсли;
КонецФункции

Функция ПодключаемыеКоманды_ПриСоздании_ТекстВызова(ПараметрКоманднаяПанель, ПараметрИсточники, СтараяВставкаОтПечати = "")
	НаполнениеВторогоПараметра = "";
	Если ПараметрКоманднаяПанель <> Неопределено Тогда
		НаполнениеВторогоПараметра = НаполнениеВторогоПараметра
			+ ПСТаб + "ПараметрыРазмещения.КоманднаяПанель = Элементы." + ПараметрКоманднаяПанель + ";"
	КонецЕсли;
	Если ПараметрИсточники <> Неопределено Тогда
		НаполнениеВторогоПараметра = НаполнениеВторогоПараметра
			+ ПСТаб + "ПараметрыРазмещения.Источники = " + ПараметрИсточники + ";"
	КонецЕсли;
	Если НаполнениеВторогоПараметра = "" Тогда
		Результат = "ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);"
	Иначе
		Результат = "ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();"
			+ НаполнениеВторогоПараметра
			+ ПСТаб + "ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);";
	КонецЕсли;
	Результат = "// СтандартныеПодсистемы.ПодключаемыеКоманды" + СтараяВставкаОтПечати
		+ ПСТаб + Результат
		+ ПСТаб + "// Конец СтандартныеПодсистемы.ПодключаемыеКоманды";
	Возврат Результат;
КонецФункции

Функция ПодключаемыеКоманды_ТекстСерииМетодов(ПараметрОбъектИлиТаблицаФормы, ТекстМодуля, ТекущаяСерияМетодов, ПричиныОтказаВАвтоматическойЗамене)
	Вставка1 = "";
	Вставка2 = "";
	Если ТекущаяСерияМетодов <> Неопределено Тогда
		Метод1 = ТекущаяСерияМетодов.ТаблицаМетодов.Найти("Подключаемый_ВыполнитьКомандуПечати", "ИмяМетода");
		Если Метод1 <> Неопределено И СтрЧислоВхождений(Метод1.Содержимое, ";") > 1 Тогда
			Вставка1 = ПСТаб
			+ "// " + ОсталосьСделать() + ": " + НСтр("ru = 'Пересмотреть нестандартное внедрение в пользу стандартного.'") + ПСТаб
			+ "//" + СтрЗаменить(СокрЛП(Метод1.Содержимое), ПСТаб, ПСТаб + "//") + ПСТаб;
		КонецЕсли;
		Метод2 = ТекущаяСерияМетодов.ТаблицаМетодов.Найти("Подключаемый_ОбновитьКоманды", "ИмяМетода");
		Если Метод2 <> Неопределено И СтрЧислоВхождений(Метод2.Содержимое, ";") > 1 Тогда
			Вставка2 = ПСТаб
			+ "// " + ОсталосьСделать() + ": " + НСтр("ru = 'Пересмотреть нестандартное внедрение в пользу стандартного.'") + ПСТаб
			+ "//" + СтрЗаменить(СокрЛП(Метод2.Содержимое), ПСТаб, ПСТаб + "//") + ПСТаб;
		КонецЕсли;
	КонецЕсли;
	Если Вставка1 <> "" Или Вставка2 <> "" Тогда
		ПричиныОтказаВАвтоматическойЗамене.Добавить(НСтр("ru = 'В обработчиках событий подсистемы был написан дополнительный код.'"));
	КонецЕсли;
	
	Результат = "// СтандартныеПодсистемы.ПодключаемыеКоманды
	|&НаКлиенте
	|Процедура Подключаемый_ВыполнитьКоманду(Команда)"+ Вставка1 +"
	|	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, %1);
	|КонецПроцедуры
	|
	|&НаСервере
	|Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	|	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, %1, Результат);
	|КонецПроцедуры
	|
	|&НаКлиенте
	|Процедура Подключаемый_ОбновитьКоманды()"+ Вставка2 +"
	|	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, %1);
	|КонецПроцедуры
	|// Конец СтандартныеПодсистемы.ПодключаемыеКоманды";
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		Источник = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<%1: %2 или %3>'"),
			ОсталосьСделать(), "Объект", "Элементы.ИмяТаблицы");
	Иначе
		Источник = ПараметрОбъектИлиТаблицаФормы;
	КонецЕсли;
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, Источник);
	Возврат Результат;
КонецФункции

Процедура ПодключаемыеКоманды_ЗарегистрироватьПоставщикаКоманд(Параметры, ОбъектМетаданных, Имя)
	ОбъектСКомандами = Параметры.ОбъектыСКомандами[Имя]; // Массив
	Если ОбъектСКомандами.Найти(ОбъектМетаданных) = Неопределено Тогда
		ОбъектСКомандами.Добавить(ОбъектМетаданных);
		НовыйОбъектСКомандами = Параметры.НовыеОбъектыСКомандами[Имя]; // Массив
		НовыйОбъектСКомандами.Добавить(ОбъектМетаданных);
	КонецЕсли;
КонецПроцедуры

Функция ПодключаемыеКоманды_КодПоДобавлениюОбъектовМетаданныхВМассив(Параметры, МассивОбъектовМетаданных)
	Фрагменты = Новый Массив;
	Шаблон = "	Объекты.Добавить(Метаданные.%1);";
	
	Для Каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Остаток = Неопределено;
		Вид = СтрЛев(ПолноеИмя, ".", Остаток);
		ВидВоМножественном = Параметры.РусскийИзЕдинственногоВоМножественный[НРег(Вид)];
		Если ВидВоМножественном = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено описание вида объектов метаданных ""%1"" во множественном числе.'"),
				Вид);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 10);
			Продолжить;
		КонецЕсли;
		Фрагмент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			ВидВоМножественном + "." + Остаток);
		Фрагменты.Добавить(Фрагмент);
	КонецЦикла;
	
	Возврат СтрСоединить(Фрагменты, Символы.ПС);
КонецФункции

Функция ПодключаемыеКоманды_РасстановкаСобытийВФорме(ТекстМодуля, ДокументDOM, Разыменователь, ПараметрОбъектИлиТаблицаФормы)
	
	Результат = Новый Структура("ТекстМодуляИзменен,XMLФормыИзменен", Ложь, Ложь);
	Если ПараметрОбъектИлиТаблицаФормы = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ЭтоСписок = СтрНачинаетсяС(НРег(ПараметрОбъектИлиТаблицаФормы), НРег("Элементы."));
	Если ЭтоСписок Тогда
		ИмяТаблицыФормы = Неопределено;
		СтрЛев(ПараметрОбъектИлиТаблицаФормы, ".", ИмяТаблицыФормы);
		ТаблицаФормы = НайтиЭлементФормы(ДокументDOM, Разыменователь, ИмяТаблицыФормы);
		СобытиеТаблицыПриАктивизацииСтроки = НайтиДочернийУзел(ДокументDOM, Разыменователь, ТаблицаФормы, "xmlns:Events/xmlns:Event[@name='OnActivateRow']");
		Если СобытиеТаблицыПриАктивизацииСтроки = Неопределено Тогда
			Результат.XMLФормыИзменен = Истина;
			
			ИмяСобытия = ИмяТаблицыФормы + "ПриАктивизацииСтроки";
			Номер = 0;
			Пока СтрНайти(НРег(ТекстМодуля), НРег("Процедура " + ИмяСобытия + "(")) > 0 Цикл
				Номер = Номер + 1;
				ИмяСобытия = ИмяТаблицыФормы + "ПриАктивизацииСтроки" + XMLСтрока(Номер);
			КонецЦикла;
			Метод = Неопределено;
			
			СобытияТаблицы = НайтиДочернийУзел(ДокументDOM, Разыменователь, ТаблицаФормы, "xmlns:Events");
			Если СобытияТаблицы = Неопределено Тогда
				ВложенныеЭлементы = НайтиДочернийУзел(ДокументDOM, Разыменователь, ТаблицаФормы, "xmlns:ChildItems");
				НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(ТаблицаФормы.URIПространстваИмен, "Events");
				СобытияТаблицы = ТаблицаФормы.ВставитьПеред(НовыйЭлементDOM, ВложенныеЭлементы);
			КонецЕсли;
			НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(ТаблицаФормы.URIПространстваИмен, "Event");
			СобытиеТаблицыПриАктивизацииСтроки = СобытияТаблицы.ДобавитьДочерний(НовыйЭлементDOM);
			СобытиеТаблицыПриАктивизацииСтроки.УстановитьАтрибут("name", "OnActivateRow");
			СобытиеТаблицыПриАктивизацииСтроки.ТекстовоеСодержимое = ИмяСобытия;
		Иначе
			ИмяСобытия = СобытиеТаблицыПриАктивизацииСтроки.ТекстовоеСодержимое;
			Метод = НайтиМетод(ТекстМодуля, ИмяСобытия, Ложь, Истина);
		КонецЕсли;
		
		Если Метод = Неопределено Тогда
			Результат.ТекстМодуляИзменен = Истина;
			НовыйФрагмент = 
			"&НаКлиенте
			|Процедура "+ ИмяСобытия + "(Элемент)
			|	
			|	// СтандартныеПодсистемы.ПодключаемыеКоманды
			|	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
			|	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			|	
			|КонецПроцедуры";
			
			Область = НайтиОбласть(ТекстМодуля, "ОбработчикиСобытийЭлементовТаблицыФормы" + ИмяТаблицыФормы);
			Если Область = Неопределено Тогда
				НовыйФрагмент = "#Область ОбработчикиСобытийЭлементовТаблицыФормы" + ИмяТаблицыФормы + Символы.ПС
				+ Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ Символы.ПС
				+ "#КонецОбласти";
				ПредыдущаяОбласть = НайтиОбласть(ТекстМодуля, "ОбработчикиСобытийЭлементовШапкиФормы");
				Если ПредыдущаяОбласть = Неопределено Тогда
					ПредыдущаяОбласть = НайтиОбласть(ТекстМодуля, "ОбработчикиСобытийФормы");
				КонецЕсли;
				Если ПредыдущаяОбласть = Неопределено Тогда
					ТекстМодуля = СокрП(ТекстМодуля) + Символы.ПС
					+ Символы.ПС
					+ НовыйФрагмент + Символы.ПС;
				Иначе
					ФрагментДо = Лев(ТекстМодуля, ПредыдущаяОбласть.Окончание - 1);
					ФрагментПосле = Сред(ТекстМодуля, ПредыдущаяОбласть.Окончание);
					ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
					+ Символы.ПС
					+ НовыйФрагмент + Символы.ПС
					+ Символы.ПС
					+ СокрЛ(ФрагментПосле);
				КонецЕсли;
			Иначе
				ФрагментДо = Лев(ТекстМодуля, Область.ОкончаниеТела - 1);
				ФрагментПосле = Сред(ТекстМодуля, Область.ОкончаниеТела);
				ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
				+ Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ Символы.ПС
				+ СокрЛ(ФрагментПосле);
			КонецЕсли;
		ИначеЕсли СтрНайти(НРег(Метод.Содержимое), НРег("ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(")) = 0 Тогда
			Результат.ТекстМодуляИзменен = Истина;
			НовыйФрагмент = 
			"	// СтандартныеПодсистемы.ПодключаемыеКоманды
			|	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
			|	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды";
			ФрагментДо = Лев(ТекстМодуля, Метод.ОкончаниеТела - 1);
			ФрагментПосле = Сред(ТекстМодуля, Метод.ОкончаниеТела);
			ТекстМодуля = СокрП(ФрагментДо)
			+ ПСТаб + Символы.ПС
			+ НовыйФрагмент
			+ ПСТаб + Символы.ПС
			+ СокрЛ(ФрагментПосле);
		КонецЕсли;
		
	Иначе
		
		ОсновнойРеквизитФормы = НайтиОсновнойРеквизитФормы(ДокументDOM, Разыменователь);
		ДобавлятьСобытиеПриЧтенииНаСервере = Ложь;
		Если ОсновнойРеквизитФормы <> Неопределено Тогда
			УзелТипа = НайтиДочернийУзел(ДокументDOM, Разыменователь, ОсновнойРеквизитФормы, "xmlns:Type/v8:Type");
			Если УзелТипа <> Неопределено И СтрНачинаетсяС(УзелТипа.ТекстовоеСодержимое, "cfg:") Тогда
				Тип = Сред(УзелТипа.ТекстовоеСодержимое, СтрДлина("cfg:" + 1));
				Вид = СтрЛев(Тип, ".");
				Если Вид = "ChartOfAccountsObject" // ПланСчетовОбъект
					Или Вид = "ChartOfCalculationTypesObject" // ПланВидовРасчетаОбъект
					Или Вид = "ExchangePlanObject" // ПланОбменаОбъект
					Или Вид = "TaskObject" // ЗадачаОбъект
					Или Вид = "BusinessProcessObject" // БизнесПроцессОбъект
					Или Вид = "CatalogObject" // СправочникОбъект
					Или Вид = "ChartOfCharacteristicTypesObject" // ПланВидовХарактеристикОбъект
					Или Вид = "ConstantsSet" // КонстантыНабор
					Или Вид = "DocumentObject" // ДокументОбъект
					Или Вид = "InformationRegisterRecordManager" // РегистрСведенийМенеджерЗаписи
					Или Вид = "InformationRegisterRecordSet" // РегистрСведенийНаборЗаписей
					Или Вид = "AccumulationRegisterRecordSet" // РегистрНакопленияНаборЗаписей
					Или Вид = "AccountingRegisterRecordSet" // РегистрБухгалтерииНаборЗаписей
					Или Вид = "CalculationRegisterRecordSet" Тогда // РегистрРасчетаНаборЗаписей
					ДобавлятьСобытиеПриЧтенииНаСервере = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьСобытиеПриЧтенииНаСервере Тогда
			РезультатXPath = ВычислитьВыражениеXPath("/xmlns:Form/xmlns:Events/xmlns:Event[@name='OnReadAtServer']", ДокументDOM, Разыменователь);
			СобытиеПриЧтенииНаСервере = РезультатXPath.ПолучитьСледующий();
			Если СобытиеПриЧтенииНаСервере = Неопределено Тогда
				Результат.XMLФормыИзменен = Истина;
				
				ИмяСобытия = "ПриЧтенииНаСервере";
				Метод = НайтиМетод(ТекстМодуля, ИмяСобытия, Ложь, Истина);
				
				РезультатXPath = ВычислитьВыражениеXPath("/xmlns:Form/xmlns:Events", ДокументDOM, Разыменователь);
				СобытияФормы = РезультатXPath.ПолучитьСледующий();
				Если СобытияФормы = Неопределено Тогда
					РезультатXPath = ВычислитьВыражениеXPath("/xmlns:Form", ДокументDOM, Разыменователь);
					Форма = РезультатXPath.ПолучитьСледующий();
					
					НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(Форма.URIПространстваИмен, "Events");
					СобытияФормы = Форма.ДобавитьДочерний(НовыйЭлементDOM);
				КонецЕсли;
				НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(СобытияФормы.URIПространстваИмен, "Event");
				СобытиеПриЧтенииНаСервере = СобытияФормы.ДобавитьДочерний(НовыйЭлементDOM);
				СобытиеПриЧтенииНаСервере.УстановитьАтрибут("name", "OnReadAtServer");
				СобытиеПриЧтенииНаСервере.ТекстовоеСодержимое = ИмяСобытия;
			Иначе
				ИмяСобытия = СобытиеПриЧтенииНаСервере.ТекстовоеСодержимое;
				Метод = НайтиМетод(ТекстМодуля, ИмяСобытия, Ложь, Истина);
			КонецЕсли;
			
			Если Метод = Неопределено Тогда
				Результат.ТекстМодуляИзменен = Истина;
				НовыйФрагмент = 
				"&НаСервере
				|Процедура "+ ИмяСобытия + "(ТекущийОбъект)
				|	
				|	// СтандартныеПодсистемы.ПодключаемыеКоманды
				|	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, "+ ПараметрОбъектИлиТаблицаФормы +");
				|	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
				|	
				|КонецПроцедуры";
				
				Область = НайтиОбласть(ТекстМодуля, "ОбработчикиСобытийФормы");
				Если Область = Неопределено Тогда
					ТекстМодуля = СокрП(ТекстМодуля) + Символы.ПС
					+ Символы.ПС
					+ "#Область ОбработчикиСобытийФормы" + Символы.ПС
					+ Символы.ПС
					+ НовыйФрагмент + Символы.ПС
					+ Символы.ПС
					+ "#КонецОбласти" + Символы.ПС;
				Иначе
					ФрагментДо = Лев(ТекстМодуля, Область.ОкончаниеТела - 1);
					ФрагментПосле = Сред(ТекстМодуля, Область.ОкончаниеТела);
					ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
					+ Символы.ПС
					+ НовыйФрагмент + Символы.ПС
					+ Символы.ПС
					+ СокрЛ(ФрагментПосле);
				КонецЕсли;
			ИначеЕсли СтрНайти(НРег(Метод.Содержимое), НРег("ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(")) = 0 Тогда
				НовыйФрагмент =
				"	// СтандартныеПодсистемы.ПодключаемыеКоманды
				|	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, "+ ПараметрОбъектИлиТаблицаФормы +");
				|	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды";
				Результат.ТекстМодуляИзменен = Истина;
				ФрагментДо = Лев(ТекстМодуля, Метод.ОкончаниеТела - 1);
				ФрагментПосле = Сред(ТекстМодуля, Метод.ОкончаниеТела);
				ТекстМодуля = СокрП(ФрагментДо)
				+ ПСТаб + Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ СокрЛ(ФрагментПосле);
			КонецЕсли;
		КонецЕсли;
		
		
		РезультатXPath = ВычислитьВыражениеXPath("/xmlns:Form/xmlns:Events/xmlns:Event[@name='OnOpen']", ДокументDOM, Разыменователь);
		СобытиеПриОткрытии = РезультатXPath.ПолучитьСледующий();
		Если СобытиеПриОткрытии = Неопределено Тогда
			Результат.XMLФормыИзменен = Истина;
			
			ИмяСобытия = "ПриОткрытии";
			Метод = НайтиМетод(ТекстМодуля, ИмяСобытия, Ложь, Истина);
			
			РезультатXPath = ВычислитьВыражениеXPath("/xmlns:Form/xmlns:Events", ДокументDOM, Разыменователь);
			СобытияФормы = РезультатXPath.ПолучитьСледующий();
			Если СобытияФормы = Неопределено Тогда
				РезультатXPath = ВычислитьВыражениеXPath("/xmlns:Form", ДокументDOM, Разыменователь);
				Форма = РезультатXPath.ПолучитьСледующий();
				
				НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(Форма.URIПространстваИмен, "Events");
				СобытияФормы = Форма.ДобавитьДочерний(НовыйЭлементDOM);
			КонецЕсли;
			НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(СобытияФормы.URIПространстваИмен, "Event");
			СобытиеПриОткрытии = СобытияФормы.ДобавитьДочерний(НовыйЭлементDOM);
			СобытиеПриОткрытии.УстановитьАтрибут("name", "OnOpen");
			СобытиеПриОткрытии.ТекстовоеСодержимое = ИмяСобытия;
		Иначе
			ИмяСобытия = СобытиеПриОткрытии.ТекстовоеСодержимое;
			Метод = НайтиМетод(ТекстМодуля, ИмяСобытия, Ложь, Истина);
		КонецЕсли;
		
		Если Метод = Неопределено Тогда
			Результат.ТекстМодуляИзменен = Истина;
			НовыйФрагмент = 
			"&НаКлиенте
			|Процедура "+ ИмяСобытия + "(Отказ)
			|	
			|	// СтандартныеПодсистемы.ПодключаемыеКоманды
			|	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
			|	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			|	
			|КонецПроцедуры";
			
			Область = НайтиОбласть(ТекстМодуля, "ОбработчикиСобытийФормы");
			Если Область = Неопределено Тогда
				ТекстМодуля = СокрП(ТекстМодуля) + Символы.ПС
				+ Символы.ПС
				+ "#Область ОбработчикиСобытийФормы" + Символы.ПС
				+ Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ Символы.ПС
				+ "#КонецОбласти" + Символы.ПС;
			Иначе
				ФрагментДо = Лев(ТекстМодуля, Область.ОкончаниеТела - 1);
				ФрагментПосле = Сред(ТекстМодуля, Область.ОкончаниеТела);
				ТекстМодуля = СокрП(ФрагментДо) + Символы.ПС
				+ Символы.ПС
				+ НовыйФрагмент + Символы.ПС
				+ Символы.ПС
				+ СокрЛ(ФрагментПосле);
			КонецЕсли;
		ИначеЕсли СтрНайти(НРег(Метод.Содержимое), НРег("ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(")) = 0 Тогда
			НовыйФрагмент =
			"	// СтандартныеПодсистемы.ПодключаемыеКоманды
			|	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
			|	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды";
			Результат.ТекстМодуляИзменен = Истина;
			ФрагментДо = Лев(ТекстМодуля, Метод.ОкончаниеТела - 1);
			ФрагментПосле = Сред(ТекстМодуля, Метод.ОкончаниеТела);
			ТекстМодуля = СокрП(ФрагментДо)
			+ ПСТаб + Символы.ПС
			+ НовыйФрагмент + Символы.ПС
			+ СокрЛ(ФрагментПосле);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодключаемыеКоманды_ВстроитьПодменю(ДокументDOM, Разыменователь, ВидПодменю, МестоПодменю)
	
	XMLФормыИзменен = Ложь;

	Подменю = НайтиЭлементФормы(ДокументDOM, Разыменователь, ВидПодменю.ИмяПодменю);
	
	ВставляемыйФрагментXMLСПодгруппами = "";
	Подгруппы = Новый Структура;
	Подгруппы.Вставить("Важное", НСтр("ru = 'Важное'"));
	Подгруппы.Вставить("Обычное", НСтр("ru = 'Обычное'"));
	Подгруппы.Вставить("СмТакже", НСтр("ru = 'См. также'"));
	Для Каждого КлючИЗначение Из Подгруппы Цикл
		ИмяПодгруппы = КлючИЗначение.Ключ;
		ПредставлениеПодгруппы = КлючИЗначение.Значение;
		Если НайтиЭлементФормы(ДокументDOM, Разыменователь, ВидПодменю.ИмяПодменю + ИмяПодгруппы) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВставляемыйФрагментXMLСПодгруппами = ВставляемыйФрагментXMLСПодгруппами + "
		|		<ButtonGroup name=""" + ВидПодменю.ИмяПодменю + ИмяПодгруппы + """ id=""" + СледующийИдентификатор(МестоПодменю.ИдентификаторПоследнегоЭлемента) + """>
		|			<Title>
		|				<v8:item>
		|					<v8:lang>ru</v8:lang>
		|					<v8:content>" + ВидПодменю.ПредставлениеПодменю + " (" + ПредставлениеПодгруппы + ")</v8:content>
		|				</v8:item>
		|			</Title>
		|			<ToolTip>
		|				<v8:item>
		|					<v8:lang>ru</v8:lang>
		|					<v8:content>" + ВидПодменю.ПредставлениеПодменю + " (" + ПредставлениеПодгруппы + ")</v8:content>
		|				</v8:item>
		|			</ToolTip>
		|			<ExtendedTooltip name=""" + ВидПодменю.ИмяПодменю + ИмяПодгруппы + "РасширеннаяПодсказка"" id=""" + СледующийИдентификатор(МестоПодменю.ИдентификаторПоследнегоЭлемента) + """/>
		|		</ButtonGroup>";
	КонецЦикла;
	
	Если Подменю = Неопределено Тогда
		Если МестоПодменю.КоманднаяПанель = Неопределено Тогда
			КоманднаяПанель = Неопределено;
		Иначе
			КоманднаяПанель = НайтиЭлементФормы(ДокументDOM, Разыменователь, МестоПодменю.КоманднаяПанель);
		КонецЕсли;
		Если КоманднаяПанель = Неопределено Тогда
			КоманднаяПанель = НайтиЭлементФормы(ДокументDOM, Разыменователь, "ПодключаемыеКоманды");
			Если КоманднаяПанель = Неопределено Тогда
				КоманднаяПанель = НайтиЭлементФормы(ДокументDOM, Разыменователь, "КоманднаяПанель");
				Если КоманднаяПанель = Неопределено Тогда
					КоманднаяПанель = НайтиЭлементФормы(ДокументDOM, Разыменователь, "ОсновнаяКоманднаяПанель");
					Если КоманднаяПанель = Неопределено И ЗначениеЗаполнено(МестоПодменю.ИмяСписка) Тогда
						КоманднаяПанель = НайтиЭлементФормы(ДокументDOM, Разыменователь, МестоПодменю.ИмяСписка + "ПодключаемыеКоманды");
						Если КоманднаяПанель = Неопределено Тогда
							КоманднаяПанель = НайтиЭлементФормы(ДокументDOM, Разыменователь, МестоПодменю.ИмяСписка + "КоманднаяПанель");
						КонецЕсли;
					КонецЕсли;
					Если КоманднаяПанель = Неопределено Тогда
						КоманднаяПанель = ВычислитьВыражениеXPath("/xmlns:Form/xmlns:AutoCommandBar", ДокументDOM, Разыменователь).ПолучитьСледующий();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КоманднаяПанель = Неопределено Тогда
			Возврат XMLФормыИзменен;
		КонецЕсли;
		Если ВставляемыйФрагментXMLСПодгруппами <> "" Тогда
			ВставляемыйФрагментXMLСПодгруппами = "<ChildItems>" + ПСТаб + Символы.Таб + ВставляемыйФрагментXMLСПодгруппами + ПСТаб + "</ChildItems>";
		КонецЕсли;
		
		XMLФормыИзменен = Истина;
		
		ВставляемыйФрагментXML = 
		"<Popup name=""" + ВидПодменю.ИмяПодменю + """ id=""" + СледующийИдентификатор(МестоПодменю.ИдентификаторПоследнегоЭлемента) + """>
		|	<Title>
		|		<v8:item>
		|			<v8:lang>ru</v8:lang>
		|			<v8:content>" + ВидПодменю.ПредставлениеПодменю + "</v8:content>
		|		</v8:item>
		|	</Title>
		|	<ToolTip>
		|		<v8:item>
		|			<v8:lang>ru</v8:lang>
		|			<v8:content>" + ВидПодменю.ПредставлениеПодменю + "</v8:content>
		|		</v8:item>
		|	</ToolTip>
		|	<Picture>
		|		<xr:Ref>CommonPicture." + ВидПодменю.ИмяОбщейКартинки + "</xr:Ref>
		|		<xr:LoadTransparent>true</xr:LoadTransparent>
		|	</Picture>
		|	<Representation>Picture</Representation>
		|	<ExtendedTooltip name=""" + ВидПодменю.ИмяПодменю + "РасширеннаяПодсказка"" id=""" + СледующийИдентификатор(МестоПодменю.ИдентификаторПоследнегоЭлемента) + """/>
		|	" + ВставляемыйФрагментXMLСПодгруппами + "
		|</Popup>";
		
		ВставитьФрагментXMLВУзелФормы(ДокументDOM, Разыменователь, КоманднаяПанель, ВставляемыйФрагментXML);
		
	ИначеЕсли Не ПустаяСтрока(ВставляемыйФрагментXMLСПодгруппами) Тогда
		XMLФормыИзменен = Истина;
		
		ДочерниеЭлементы = НайтиДочернийУзел(ДокументDOM, Разыменователь, Подменю, "xmlns:ChildItems");
		Если ДочерниеЭлементы = Неопределено Тогда
			ДочерниеЭлементы = Подменю.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент(Подменю.URIПространстваИмен, "ChildItems"));
		КонецЕсли;
		
		ВставитьФрагментXMLВУзелФормы(ДокументDOM, Разыменователь, ДочерниеЭлементы, ВставляемыйФрагментXMLСПодгруппами);
	КонецЕсли;
	
	Возврат XMLФормыИзменен;
	
КонецФункции

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ДатыЗапретаИзменения_ПриЧтенииОсновныхНастроек(Параметры)
	
	Параметры.Вставить("ЕстьДатыЗапретаИзменения", ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения"));
	
	Если Не Параметры.ЕстьДатыЗапретаИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("СвойстваРазделовДатЗапрета",
		ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.СвойстваРазделовДатЗапрета());
	
	Параметры.Вставить("НовыеПредопределенныеРазделыДатЗапрета", Новый Массив);
	
КонецПроцедуры

Процедура ДатыЗапретаИзменения_ПриАнализеОбъекта(Параметры, СтрокаОбъекта)
	
	Если Не Параметры.ЕстьДатыЗапретаИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаОбъекта.ПолноеИмя <> "ПланВидовХарактеристик.РазделыДатЗапретаИзменения" Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = СтрокаОбъекта.Каталог + "Ext\Predefined.xml";
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ПрочитатьДокументDOM(ПолноеИмяФайла);
	
	УзлыПредопределенных = ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы;
	
	Для Каждого УзелПредопределенного Из УзлыПредопределенных Цикл
		ТекущийИдентификатор = УзелПредопределенного.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение;
		РазделСсылка = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ТекущийИдентификатор));
		
		Если Параметры.СвойстваРазделовДатЗапрета.Разделы.Получить(РазделСсылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеТипы = Новый Массив;
		Для Каждого Узел Из УзелПредопределенного.ДочерниеУзлы Цикл
			Если Узел.ИмяЭлемента = "Name" Тогда
				ТекущееИмя = Узел.ТекстовоеСодержимое;
				Если СтрНачинаетсяС(ТекущееИмя, "Удалить") Тогда
					ТекущееИмя = Сред(ТекущееИмя, 8);
				КонецЕсли;
			КонецЕсли;
			Если Узел.ИмяЭлемента = "Description" Тогда
				ТекущееПредставление = Узел.ТекстовоеСодержимое;
			КонецЕсли;
			Если Узел.ИмяЭлемента = "Type" Тогда
				Для Каждого УзелТипа Из Узел.ДочерниеУзлы Цикл
					ТекущееИмяТипа = УзелТипа.ТекстовоеСодержимое;
					Если Не СтрНачинаетсяС(ТекущееИмяТипа, "d4p1:") Тогда
						Продолжить;
					КонецЕсли;
					ТекущиеТипы.Добавить(Тип(Сред(ТекущееИмяТипа, 6)));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийРаздел = Новый Структура;
		ТекущийРаздел.Вставить("Имя",           ТекущееИмя);
		ТекущийРаздел.Вставить("Идентификатор", ТекущийИдентификатор);
		ТекущийРаздел.Вставить("Представление", ТекущееПредставление);
		ТекущийРаздел.Вставить("ИменаТипов",    Новый Массив);
		
		Для Каждого Тип Из ТекущиеТипы Цикл
			Если Тип = Тип("ПланВидовХарактеристикСсылка.РазделыДатЗапретаИзменения")
			 Или Тип = Тип("ПеречислениеСсылка.ВидыНазначенияДатЗапрета")
			 Или Не ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			ИмяТипаСсылки = СтрЗаменить(ПолноеИмя, ".", "Ссылка.");
			ТекущийРаздел.ИменаТипов.Добавить(ИмяТипаСсылки);
		КонецЦикла;
		
		НовыеПредопределенныеРазделыДатЗапрета = Параметры.НовыеПредопределенныеРазделыДатЗапрета; // Массив
		НовыеПредопределенныеРазделыДатЗапрета.Добавить(ТекущийРаздел);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДатыЗапретаИзменения_ПослеАнализаДереваМетаданных(Параметры)
	
	Если Не Параметры.ЕстьДатыЗапретаИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.ЕстьЗаполнениеОбъектов
	 Или Параметры.НовыеПредопределенныеРазделыДатЗапрета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяМодуля = ПолноеИмяОбщегоМодуля(Параметры, "ДатыЗапретаИзмененияПереопределяемый");
	ТекстМодуля = ПрочитатьТекстМодуля(ПолноеИмяМодуля);
	
	Если ТекстМодуля = Неопределено Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден текст общего модуля ""%1"".'"),
			ПолноеИмяМодуля);
		ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
		Возврат;
	КонецЕсли;
	
	Метод = НайтиМетод(ТекстМодуля, "ПриЗаполненииРазделовДатЗапретаИзменения");
	Если Метод = Неопределено Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В общем модуле ""%1"" не найдена процедура ""%2"".'"),
			"ДатыЗапретаИзмененияПереопределяемый",
			"ПриЗаполненииРазделовДатЗапретаИзменения");
		ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
		Возврат;
	КонецЕсли;
	
	НовыйФрагмент = ДатыЗапретаИзменения_КодПоДобавлениюОбъектовМетаданныхВМассив(Параметры,
		Параметры.НовыеПредопределенныеРазделыДатЗапрета);
	
	ФрагментДо    = Лев(ТекстМодуля, Метод.ОкончаниеТела - 1);
	ФрагментПосле = Сред(ТекстМодуля, Метод.ОкончаниеТела);
	
	ТекстМодуля = СокрП(ФрагментДо)
		+ ПСТаб + Символы.ПС
		+ НовыйФрагмент
		+ ПСТаб + Символы.ПС
		+ СокрЛ(ФрагментПосле);
	
	ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля);
	
	Если Параметры.ИзмененныеФайлы.Найти(ПолноеИмяМодуля) = Неопределено Тогда
		Параметры.ИзмененныеФайлы.Добавить(ПолноеИмяМодуля);
	КонецЕсли;
	
	СтрокаОбъекта = Параметры.СтрокаОбъектаОбщийМодульДатыЗапретаИзмененияПереопределяемый;
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В конце процедуры %1 добавлено
		           |описание разделов дат запрета, по имеющимся предопределенным элементам
		           |плана видов характеристик %2.
		           |Следует проверить описание разделов и перенести в соответствующие общие модули.
		           |Предопределенные элементы должны быть переименованы в ""%3"".'"),
		           "ПриЗаполненииРазделовДатЗапретаИзменения", "РазделыДатЗапретаИзменения", "Удалить<ИмяПредопределенного>");
	ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаОбъекта, "РучноеДействие", Текст);
	
КонецПроцедуры

// Параметры:
//   Параметры - см. ИзменитьВыгруженныеТексты.Параметры
//   НовыеПредопределенныеРазделыДатЗапрета - Массив из Структура:
//   * Имя - Строка
//   * Идентификатор - Строка
//   * Представление - Строка
//   * ИменаТипов - Массив из Строка
// Возвращаемое значение:
//   Строка
//
Функция ДатыЗапретаИзменения_КодПоДобавлениюОбъектовМетаданныхВМассив(Параметры, НовыеПредопределенныеРазделыДатЗапрета)
	
	Фрагменты = Новый Массив;
	
	Шаблон = 
	"	Раздел = Разделы.Добавить();
	|	Раздел.Имя  = ""%1"";
	|	Раздел.Идентификатор = Новый УникальныйИдентификатор(""%2"");
	|	Раздел.Представление = НСтр(""ru = '%3'"");
	|";
	
	ШаблонТипа =
	"	Раздел.ТипыОбъектов.Добавить(Тип(""%1""));
	|";
	
	Для Каждого Свойства Из НовыеПредопределенныеРазделыДатЗапрета Цикл
		Фрагмент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
			Свойства.Имя, Свойства.Идентификатор, Свойства.Представление);
		
		Для Каждого ИмяТипаСсылки Из Свойства.ИменаТипов Цикл
			Фрагмент = Фрагмент + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТипа, ИмяТипаСсылки);
		КонецЦикла;
		
		Фрагменты.Добавить(Фрагмент);
	КонецЦикла;
	
	Возврат СтрСоединить(Фрагменты, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПомощника

// Обработчики фоновых заданий.

Процедура Внедрение(Параметры, АдресРезультата) Экспорт
	Если Не ЗначениеЗаполнено(Параметры.РабочийКаталог) Тогда
		ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла("DevTools"));
		СоздатьКаталог(ПутьККаталогу);
		Параметры.РабочийКаталог = ПутьККаталогу;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Параметры.Пользователь = ИмяПользователя();
	КонецЕсли;
	
	ПрочитатьОсновныеНастройки(Параметры);
	Если Параметры.ВыгружатьФайлыВКаталог Тогда
		ВыгрузитьКонфигурациюВXML(Параметры);
	КонецЕсли;
	ИзменитьВыгруженныеТексты(Параметры);
	ЗагрузитьКонфигурациюИзXML(Параметры);
	
	Результат = Новый Структура;
	Результат.Вставить("РабочийКаталог",    Параметры.РабочийКаталог);
	Результат.Вставить("ДеревоМетаданных",  Параметры.ДеревоМетаданных);
	Результат.Вставить("ТабличныйДокумент", СформироватьОтчет(Параметры));
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

// Функции, используемые из формы и из этого модуля.

Функция ОткрытКонфигуратор() Экспорт
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Чтение метаданных текущей конфигурации.

Процедура ПрочитатьОсновныеНастройки(Параметры)
	ПСТаб = Символы.ПС + Символы.Таб;
	
	ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Чтение основных настроек из переопределяемых модулей...'"));
	
	Параметры.Вставить("СКД", ПолучитьМакет("СхемаКомпоновкиДанных"));
	Параметры.Вставить("ГлобальныеСообщения", СоздатьТаблицуПоСхемеНабора(Параметры.СКД, "ГлобальныеСообщения"));
	Параметры.Вставить("СообщенияПоОбъектам", СоздатьТаблицуПоСхемеНабора(Параметры.СКД, "СообщенияПоОбъектам"));
	Параметры.Вставить("ИзмененныеФайлы", Новый Массив);
	
	ПриЧтенииОсновныхНастроек(Параметры);
	
	ДлительныеОперации.СообщитьПрогресс(2, НСтр("ru = 'Построение дерева метаданных...'"));
	ЗарегистрироватьСоответствияДляБыстрогоПреобразованияИмен(Параметры);
	
	Параметры.Вставить("КоличествоОбъектов", 0);
	Параметры.Вставить("ДеревоМетаданных", ДеревоМетаданных());
	Параметры.Вставить("ПриоритетВида", 0);
	Параметры.Вставить("ПриоритетыВидов", Новый Соответствие);

	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ОбщиеМодули", НСтр("ru = 'Общие модули'"), НСтр("ru = 'Общий модуль'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ОбщиеФормы", НСтр("ru = 'Общие формы'"), НСтр("ru = 'Общая форма'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыОбмена", НСтр("ru = 'Планы обмена'"), НСтр("ru = 'План обмена'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Справочники", НСтр("ru = 'Справочники'"), НСтр("ru = 'Справочник'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Документы", НСтр("ru = 'Документы'"), НСтр("ru = 'Документ'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ЖурналыДокументов", НСтр("ru = 'Журналы документов'"), НСтр("ru = 'Журнал документов'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Отчеты", НСтр("ru = 'Отчеты'"), НСтр("ru = 'Отчет'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Обработки", НСтр("ru = 'Обработки'"), НСтр("ru = 'Обработка'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), НСтр("ru = 'План видов характеристик'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыСчетов", НСтр("ru = 'Планы счетов'"), НСтр("ru = 'План счетов'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"), НСтр("ru = 'План видов расчета'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыСведений", НСтр("ru = 'Регистры сведений'"), НСтр("ru = 'Регистр сведений'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыНакопления", НСтр("ru = 'Регистры накопления'"), НСтр("ru = 'Регистр накопления'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"), НСтр("ru = 'Регистр бухгалтерии'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыРасчета", НСтр("ru = 'Регистры расчета'"), НСтр("ru = 'Регистр расчета'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "БизнесПроцессы", НСтр("ru = 'Бизнес-процессы'"), НСтр("ru = 'Бизнес-процесс'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Задачи", НСтр("ru = 'Задачи'"), НСтр("ru = 'Задача'"), Истина);

	Параметры.Удалить("ПриоритетВида");
	
КонецПроцедуры

// Возвращаемое значение:
//  ДеревоЗначений:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//  
Функция ДеревоМетаданных()
	
	ДеревоМетаданных = Новый ДеревоЗначений();
	
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеСписка", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеОбъекта", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ДеревоМетаданных.Колонки.Добавить("Ссылочный", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоМетаданных;
	
КонецФункции

Функция СоздатьТаблицуПоСхемеНабора(СхемаКомпоновкиДанных, ИмяНабораДанных)
	Результат = Новый ТаблицаЗначений;
	ПоляНабораДанныхСхемыКД = СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля;
	Для Каждого ЭлементКД Из ПоляНабораДанныхСхемыКД Цикл
		Если ТипЗнч(ЭлементКД) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ИмяКолонки = СтрЗаменить(Строка(ЭлементКД.Поле), ".", "_");
			Результат.Колонки.Добавить(ИмяКолонки, ЭлементКД.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Параметры:
//   Параметры - Структура:
//   * ДеревоМетаданных - ДеревоЗначений:
//   ** Метаданные - ОбъектМетаданных
//   ** Имя - Строка
//   ** ПолноеИмя - Строка
//   ** ПредставлениеСписка - Строка
//   ** ПредставлениеОбъекта - Строка
//   ** Каталог - Строка
//   ** НомерКартинки - Число
//   ** Ссылочный - Булево
//
Процедура ЗарегистрироватьКоллекциюМетаданных(Параметры, Вид, ПредставлениеСписка, ПредставлениеОбъекта, Ссылочный)
	Параметры.ПриоритетВида = Параметры.ПриоритетВида + 1;
	Параметры.ПриоритетыВидов.Вставить(Вид, Параметры.ПриоритетВида);
	
	Коллекция = Метаданные[Вид];
	Количество = Коллекция.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	Параметры.КоличествоОбъектов = Параметры.КоличествоОбъектов + Количество;
	
	ДеревоВПараметрах = Параметры.ДеревоМетаданных;
	СтрокаВида = ДеревоВПараметрах.Строки.Добавить();
	СтрокаВида.Имя       = Вид;
	СтрокаВида.ПолноеИмя = Вид;
	СтрокаВида.ПредставлениеСписка  = ПредставлениеСписка;
	СтрокаВида.ПредставлениеОбъекта = ПредставлениеОбъекта;
	СтрокаВида.НомерКартинки = Параметры.НомераКартинок[НРег(Вид)];
	СтрокаВида.Ссылочный = Ссылочный;
	
	Для Каждого ОбъектМетаданных Из Коллекция Цикл
		Если ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда
			Продолжить; // Объект расширения.
		КонецЕсли;
		
		СтрокаОбъекта = СтрокаВида.Строки.Добавить();
		СтрокаОбъекта.Метаданные         = ОбъектМетаданных;
		СтрокаОбъекта.Имя                = ОбъектМетаданных.Имя;
		СтрокаОбъекта.ПолноеИмя          = ОбъектМетаданных.ПолноеИмя();
		СтрокаОбъекта.НомерКартинки      = СтрокаВида.НомерКартинки;
		ЗаполнитьПредставлениеОбъектаМетаданных(СтрокаОбъекта, ОбъектМетаданных);
		СтрокаОбъекта.Ссылочный = Ссылочный;
		
		Если Вид = "ОбщиеФормы" Или Вид = "ОбщиеМодули" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого МетаданныеФормы Из ОбъектМетаданных.Формы Цикл
			СтрокаФормы = СтрокаОбъекта.Строки.Добавить();
			СтрокаФормы.Метаданные = МетаданныеФормы;
			СтрокаФормы.Имя        = МетаданныеФормы.Имя;
			СтрокаФормы.ПолноеИмя  = МетаданныеФормы.ПолноеИмя();
			СтрокаФормы.ПредставлениеСписка  = МетаданныеФормы.Представление();
			СтрокаФормы.ПредставлениеОбъекта = СтрокаФормы.ПредставлениеСписка;
			СтрокаФормы.Ссылочный = Ссылочный;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПредставлениеОбъектаМетаданных(СтрокаОбъекта, ОбъектМетаданных)
	СтандартныеСвойства = Новый Структура("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Тогда
		СтрокаОбъекта.ПредставлениеОбъекта = СтандартныеСвойства.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Тогда
		СтрокаОбъекта.ПредставлениеОбъекта = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
	Иначе
		СтрокаОбъекта.ПредставлениеОбъекта = ОбъектМетаданных.Представление();
	КонецЕсли;
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеСписка) Тогда
		СтрокаОбъекта.ПредставлениеСписка = СтандартныеСвойства.ПредставлениеСписка;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеСписка) Тогда
		СтрокаОбъекта.ПредставлениеСписка = СтандартныеСвойства.РасширенноеПредставлениеСписка;
	Иначе
		СтрокаОбъекта.ПредставлениеСписка = ОбъектМетаданных.Представление();
	КонецЕсли;
КонецПроцедуры

// Выгрузка и загрузка конфигурации из XML.

Функция ВыгрузитьКонфигурациюВXML(Параметры)
	
	Если ФайлСуществует(Параметры.РабочийКаталог) Тогда
		УдалитьФайлы(Параметры.РабочийКаталог, "*");
	Иначе
		СоздатьКаталог(Параметры.РабочийКаталог);
	КонецЕсли;
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	КаталогКопии1CD = Неопределено;
	
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			ДлительныеОперации.СообщитьПрогресс(5, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Копирование %1, т.к. не закрыт конфигуратор...'"),
				"1Cv8.1CD"));
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПутьККонфигурации).file;
			КаталогКопии1CD = Параметры.РабочийКаталог + "BaseCopy" + ПолучитьРазделительПути();
			СоздатьКаталог(КаталогКопии1CD);
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогКопии1CD + "1Cv8.1CD");
			ПутьККонфигурации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"File=""%1"";", КаталогКопии1CD);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для выгрузки модулей закройте конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + "Выгрузка.log";
	
	ДлительныеОперации.СообщитьПрогресс(10, НСтр("ru = 'Выгрузка конфигурации в XML...'"));
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(ПутьККонфигурации);
	Если Не ПустаяСтрока(Параметры.Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Параметры.Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Параметры.Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(Параметры.РабочийКаталог);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог выгрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости выгрузки модулей;
	//		Template - признак необходимости выгрузки шаблонов;
	//		Help - признак необходимости выгрузки справочной информации;
	//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	
	Если КаталогКопии1CD <> Неопределено Тогда
		Попытка
			УдалитьФайлы(КаталогКопии1CD);
		Исключение
			// Если сейчас каталог еще занят другим процессом, то он будет удален позднее автоматически.
		КонецПопытки;
	КонецЕсли;
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выгрузить конфигурацию в XML (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, ПСТаб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаСообщений);
	Исключение
		// Если сейчас файл еще занят другим процессом, то он будет удален позднее автоматически.
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ЗагрузитьКонфигурациюИзXML(Параметры)
	
	Если Параметры.ИзмененныеФайлы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Файлы конфигурации не изменены, загрузка не требуется.'");
		ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 90);
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаИзмененныеФайлы = Параметры.РабочийКаталог + "ИзмененныеФайлы.txt";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаИзмененныеФайлы, КодировкаТекста.UTF8, , Ложь);
	ЗаписьТекста.Записать(СтрСоединить(Параметры.ИзмененныеФайлы, Символы.ПС));
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + "Загрузка.log";
	
	//	/LoadConfigFromFiles <каталог загрузки> [-Extension <имя расширения>] [-AllExtensions][-files][-listfile][-format]
	//	- загрузка конфигурации из файлов. Загрузка расширения в основную конфигурацию (и наоборот) не поддерживается.
	//	Допустимо использование следующих опций:
	//		<каталог загрузки> - каталог, содержащий XML-файлы конфигурации;
	//		Extension <Имя расширения> - обработка расширения с указанным именем.
	//			Если расширение успешно обработано возвращает код возврата 0.
	//			В противном случае (если расширение с указанным именем не существует или в процессе работы произошли ошибки) - 1.
	//		AllExtensions - загрузка только расширений (всех).
	//			Если требуемое расширение не существует, оно будет создано.
	//			Для каждого подкаталога указанного каталога будет выполнена попытка создать расширение.
	//			При попытке загрузить расширение в основную конфигурацию или наоборот, будет выведена ошибка.
	//		files - содержит список файлов, которые требуется загрузить. Список разделяется запятыми.
	//			Не используется, если указана опция-listfile.
	//		listfile - указывает файл, в котором перечислены файлы, которые требуется загрузить.
	//			Не используется, если указана опция -files. 
	//			Указываемый файл должен удовлетворять следующим требованиям:
	//			- Файл должен быть в кодировке UTF-8.
	//			- Имена файлов должны быть указаны через перенос.
	//				Поддерживаются символы переноса \r\n ("следующая строка") и \r ("возврат каретки").
	//			- Файл не должен содержать пустые строки между именами файлов.
	//		format - используется для частичной загрузки. Указывает формат загрузки файлов.
	//			По умолчанию загрузка производится в иерархическом формате:
	//			Hierarchical - загрузка выполняется в иерархическом формате.
	//			Plain - загрузка выполняется в линейном формате.
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединенияИнформационнойБазы());
	Если Не ПустаяСтрока(Параметры.Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Параметры.Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Параметры.Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/LoadConfigFromFiles");
	КомандаЗапуска.Добавить(Параметры.РабочийКаталог);
	КомандаЗапуска.Добавить("-listfile");
	КомандаЗапуска.Добавить(ИмяФайлаИзмененныеФайлы);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	АдресФайлаРучнойЗагрузки = Параметры.РабочийКаталог + "load.cmd";
	ЗаписьТекста = Новый ЗаписьТекста(АдресФайлаРучнойЗагрузки, КодировкаТекста.OEM);
	ЗаписьТекста.Записать(ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска));
	ЗаписьТекста.Закрыть();
	
	Если ОткрытКонфигуратор() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Конфигурация не загружена, т.к. открыт конфигуратор.
				|Загрузку можно выполнить в конфигураторе из каталога ""%1"" (или запустив файл ""%2"").'"),
			Параметры.РабочийКаталог,
			АдресФайлаРучнойЗагрузки);
		ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 10);
		Возврат Ложь;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(90, НСтр("ru = 'Загрузка конфигурации из XML...'"));
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить XML конфигурации (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, ПСТаб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Анализ и изменение файлов конфигурации.
// 
// Параметры:
//   Параметры - Структура:
//   * ВыгружатьВКаталог - Булево
//   * РабочийКаталог - Строка
//   * Пользователь - СправочникСсылка.Пользователи
//   * Пароль - Строка
//   * СКД - СхемаКомпоновкиДанных
//   * ГлобальныеСообщения - ТаблицаЗначений
//   * СообщенияПоОбъектам - ТаблицаЗначений
//   * ИзмененныеФайлы - Массив из Строка
//   * КоличествоОбъектов - Число
//   * ДеревоМетаданных - см. ДеревоМетаданных
//   * ПриоритетВида - Соответствие из КлючИЗначение:
//   ** Ключ - Строка
//   ** Значение - Число
//   * ОбъектыСКомандами - Структура:
//   ** Печать - Массив
//   ** ЗаполнениеОбъектов - Массив
//   ** ВариантыОтчетов - Массив
//   ** ДополнительныеОтчетыИОбработки - Массив
//   * НовыеОбъектыСКомандами - Структура:
//   ** Печать - Массив
//   ** ЗаполнениеОбъектов - Массив
//   ** ВариантыОтчетов - Массив
//   ** ДополнительныеОтчетыИОбработки - Массив
//   * СвойстваРазделовДатЗапрета - см. ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.СвойстваРазделовДатЗапрета
//   * НовыеПредопределенныеРазделыДатЗапрета - Массив
//
Процедура ИзменитьВыгруженныеТексты(Параметры)
	ДостигнутыйПроцент = 20;
	Диапазон = 90 - ДостигнутыйПроцент;
	Всего = Параметры.КоличествоОбъектов;
	Номер = 0;
	Для Каждого СтрокаВида Из Параметры.ДеревоМетаданных.Строки Цикл
		ВидНаАнглийском = Параметры.РусскоАнглийскийВоМножественном[НРег(СтрокаВида.Имя)];
		Если ВидНаАнглийском = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен перевод имени ""%1"" на английский язык.'"),
				СтрокаВида.Имя);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
			Продолжить;
		КонецЕсли;
		СтрокаВида.Каталог = Параметры.РабочийКаталог + ВидНаАнглийском + ПолучитьРазделительПути();
		Если Не ФайлСуществует(СтрокаВида.Каталог) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен каталог ""%1"".'"),
				СтрокаВида.Каталог);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 10);
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаОбъекта Из СтрокаВида.Строки Цикл
			// Прогресс анализа.
			Номер = Номер + 1;
			Процент = ДостигнутыйПроцент + Диапазон*Номер/Всего;
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Анализируется %1 ""%2""...'"),
				НРег(СтрокаВида.ПредставлениеОбъекта),
				СтрокаОбъекта.Имя);
			ДлительныеОперации.СообщитьПрогресс(Процент, Текст);
			
			// Анализ форм.
			СтрокаОбъекта.Каталог = СтрокаВида.Каталог + СтрокаОбъекта.Имя + ПолучитьРазделительПути();
			Для Каждого СтрокаФормы Из СтрокаОбъекта.Строки Цикл
				СтрокаФормы.Каталог = СтрокаОбъекта.Каталог + "Forms" + ПолучитьРазделительПути() + СтрокаФормы.Имя + ПолучитьРазделительПути();
				Если Не ФайлСуществует(СтрокаФормы.Каталог) Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не обнаружен каталог ""%1"".'"),
						СтрокаФормы.Каталог);
					ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "Ошибка", Текст);
					Продолжить;
				КонецЕсли;
				
				ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
			КонецЦикла;
			
			// Анализ модулей объекта.
			Если СтрокаВида.Имя = "ОбщиеФормы" Тогда
				ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаОбъекта);
			ИначеЕсли СтрокаВида.Имя = "ОбщиеМодули" Тогда
				ПриАнализеОбщегоМодуля(Параметры, СтрокаОбъекта);
			Иначе
				ПриАнализеОбъекта(Параметры, СтрокаОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПослеАнализаДереваМетаданных(Параметры);
КонецПроцедуры

// Формирование результирующего отчета.

Функция СформироватьОтчет(Параметры)
	НастройкиКД = Параметры.СКД.ВариантыНастроек.Основной.Настройки;
	
	ВнешниеНаборыДанных = Новый Структура("ГлобальныеСообщения, СообщенияПоОбъектам");
	ЗаполнитьЗначенияСвойств(ВнешниеНаборыДанных, Параметры);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(Параметры.СКД, НастройкиКД);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	Возврат ДокументРезультат;
КонецФункции

// Работа с файлами.

Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога) Экспорт
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

// Преобразования.

Процедура ЗарегистрироватьСоответствияДляБыстрогоПреобразованияИмен(Параметры)
	Параметры.Вставить("РусскоАнглийскийВЕдинственном", Новый Соответствие);
	Параметры.Вставить("РусскоАнглийскийВоМножественном", Новый Соответствие);
	Параметры.Вставить("РусскийИзЕдинственногоВоМножественный", Новый Соответствие);
	Параметры.Вставить("РусскийИзМножественногоВЕдинственный", Новый Соответствие);
	Параметры.Вставить("НомераКартинок", Новый Соответствие);
	
	// Виды объектов метаданных.
	ЗарегистрироватьТермин(Параметры, "WebСервис", "WebСервисы", "WebService", "WebServices", -1);
	ЗарегистрироватьТермин(Параметры, "WSСсылка", "WSСсылки", "WSReference", "", -1);
	ЗарегистрироватьТермин(Параметры, "БизнесПроцесс", "БизнесПроцессы", "BusinessProcess", "BusinessProcesses", 19);
	ЗарегистрироватьТермин(Параметры, "ГруппаКоманд", "ГруппыКоманд", "CommandGroup", "CommandGroups", -1);
	ЗарегистрироватьТермин(Параметры, "Документ", "Документы", "Document", "Documents", 12);
	ЗарегистрироватьТермин(Параметры, "ЖурналДокументов", "ЖурналыДокументов", "DocumentJournal", "DocumentJournals");
	ЗарегистрироватьТермин(Параметры, "Задача", "Задачи", "Task", "Tasks", 21);
	ЗарегистрироватьТермин(Параметры, "Константа", "Константы", "Constant", "Constants", 25);
	ЗарегистрироватьТермин(Параметры, "Конфигурация", "", "Configuration", "Configurations", -1);
	ЗарегистрироватьТермин(Параметры, "КритерийОтбора", "КритерииОтбора", "FilterCriterion", "FilterCriteria");
	ЗарегистрироватьТермин(Параметры, "НумераторДокументов", "НумераторыДокументов", "DocumentNumerator", "", -1);
	ЗарегистрироватьТермин(Параметры, "Обработка", "Обработки", "DataProcessor", "DataProcessors");
	ЗарегистрироватьТермин(Параметры, "ОбщаяКартинка", "ОбщиеКартинки", "CommonPicture", "CommonPictures", БиблиотекаКартинок.Картинка);
	ЗарегистрироватьТермин(Параметры, "ОбщаяКоманда", "ОбщиеКоманды", "CommonCommand", "CommonCommands", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщаяФорма", "ОбщиеФормы", "CommonForm", "CommonForms", БиблиотекаКартинок.Форма);
	ЗарегистрироватьТермин(Параметры, "ОбщийМакет", "ОбщиеМакеты", "CommonTemplate", "CommonTemplates", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщийМодуль", "ОбщиеМодули", "CommonModule", "CommonModules", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщийРеквизит", "ОбщиеРеквизиты", "CommonAttribute", "CommonAttributes", 3);
	ЗарегистрироватьТермин(Параметры, "ОпределяемыйТип", "ОпределяемыеТипы", "DefinedType", "DefinedTypes", -1);
	ЗарегистрироватьТермин(Параметры, "Отчет", "Отчеты", "Report", "Reports");
	ЗарегистрироватьТермин(Параметры, "ПакетXDTO", "ПакетыXDTO", "XDTOPackage", "XDTOPackages", -1);
	ЗарегистрироватьТермин(Параметры, "ПараметрСеанса", "ПараметрыСеанса", "SessionParameter", "SessionParameters", -1);
	ЗарегистрироватьТермин(Параметры, "ПараметрФункциональныхОпций", "ПараметрыФункциональныхОпций", "FunctionalOptionsParameter", "FunctionalOptionsParameters", -1);
	ЗарегистрироватьТермин(Параметры, "Перечисление", "Перечисления", "Enum", "Enums");
	ЗарегистрироватьТермин(Параметры, "ПланВидовРасчета", "ПланыВидовРасчета", "ChartOfCalculationTypes", "ChartsOfCalculationTypes", 17);
	ЗарегистрироватьТермин(Параметры, "ПланВидовХарактеристик", "ПланыВидовХарактеристик", "ChartOfCharacteristicTypes", "ChartsOfCharacteristicTypes", 3);
	ЗарегистрироватьТермин(Параметры, "ПланОбмена", "ПланыОбмена", "ExchangePlan", "ExchangePlans", 23);
	ЗарегистрироватьТермин(Параметры, "ПланСчетов", "ПланыСчетов", "ChartOfAccounts", "ChartsOfAccounts", 15);
	ЗарегистрироватьТермин(Параметры, "ПодпискаНаСобытие", "ПодпискиНаСобытия", "EventSubscription", "EventSubscriptions", -1);
	ЗарегистрироватьТермин(Параметры, "Подсистема", "Подсистемы", "Subsystem", "Subsystems");
	ЗарегистрироватьТермин(Параметры, "Последовательность", "Последовательности", "Sequence", "Sequences", -1);
	ЗарегистрироватьТермин(Параметры, "РегистрБухгалтерии", "РегистрыБухгалтерии", "AccountingRegister", "AccountingRegisters", 34);
	ЗарегистрироватьТермин(Параметры, "РегистрНакопления", "РегистрыНакопления", "AccumulationRegister", "AccumulationRegisters", 28);
	ЗарегистрироватьТермин(Параметры, "РегистрРасчета", "РегистрыРасчета", "CalculationRegister", "CalculationRegisters", 38);
	ЗарегистрироватьТермин(Параметры, "РегистрСведений", "РегистрыСведений", "InformationRegister", "InformationRegisters", 26);
	ЗарегистрироватьТермин(Параметры, "РегламентноеЗадание", "РегламентныеЗадания", "ScheduledJob", "ScheduledJobs");
	ЗарегистрироватьТермин(Параметры, "Роль", "Роли", "Role", "Roles", -1);
	ЗарегистрироватьТермин(Параметры, "Справочник", "Справочники", "Catalog", "Catalogs");
	ЗарегистрироватьТермин(Параметры, "Стиль", "Стили", "Style", "", -1);
	ЗарегистрироватьТермин(Параметры, "ФункциональнаяОпция", "ФункциональныеОпции", "FunctionalOption", "FunctionalOptions", БиблиотекаКартинок.УстановитьФлажки);
	ЗарегистрироватьТермин(Параметры, "ХранилищеНастроек", "ХранилищаНастроек", "SettingsStorage", "SettingsStorages");
	ЗарегистрироватьТермин(Параметры, "ЭлементСтиля", "ЭлементыСтиля", "StyleItem", "StyleItems", -1);
	ЗарегистрироватьТермин(Параметры, "Язык", "Языки", "Language", "Languages", -1);
	
	// Типы вложенных объектов метаданных.
	ЗарегистрироватьТермин(Параметры, "Модуль", "", "Module", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульМенеджера", "", "ManagerModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульОбъекта", "", "ObjectModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульКоманды", "", "CommandModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульНабораЗаписей", "", "RecordSetModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульМенеджераЗначения", "", "ValueManagerModule", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "МодульВнешнегоСоединения", "", "ExternalConnectionModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульУправляемогоПриложения", "", "ManagedApplicationModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульОбычногоПриложения", "", "OrdinaryApplicationModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульСеанса", "", "SessionModule", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "Справка", "", "Help", "");
	ЗарегистрироватьТермин(Параметры, "Форма", "Формы", "Form", "Forms");
	ЗарегистрироватьТермин(Параметры, "КартаМаршрута", "", "Flowchart", "", -1);
	ЗарегистрироватьТермин(Параметры, "Картинка", "Картинки", "Picture", "Pictures");
	ЗарегистрироватьТермин(Параметры, "КомандныйИнтерфейс", "", "CommandInterface", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "Макет", "Макеты", "Template", "Templates", -1);
	ЗарегистрироватьТермин(Параметры, "Команда", "Команды", "Command", "Commands", -1);
	ЗарегистрироватьТермин(Параметры, "Агрегаты", "", "Aggregates", "", -1);
	ЗарегистрироватьТермин(Параметры, "Перерасчет", "Перерасчеты", "Recalculation", "Recalculations", -1);
	ЗарегистрироватьТермин(Параметры, "Предопределенные", "", "Predefined", "", -1);
	ЗарегистрироватьТермин(Параметры, "Состав", "", "Content", "", -1);
	ЗарегистрироватьТермин(Параметры, "Права", "", "Rights", "", -1);
	ЗарегистрироватьТермин(Параметры, "Расписание", "", "Schedule", "", -1);
	
	// Типы элементов форм.
	ЗарегистрироватьТермин(Параметры, "ГруппаКнопок", "", "ButtonGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "ГруппаКолонок", "", "ColumnGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "КоманднаяПанель", "", "CommandBar", "", -1);
	ЗарегистрироватьТермин(Параметры, "КонтекстноеМеню", "", "ContextMenu", "", -1);
	ЗарегистрироватьТермин(Параметры, "ОбычнаяГруппа", "", "UsualGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "Подменю", "", "Popup", "", -1);
	ЗарегистрироватьТермин(Параметры, "Страница", "", "Page", "", -1);
	ЗарегистрироватьТермин(Параметры, "Страницы", "", "Pages", "", -1);
	
КонецПроцедуры

Процедура ЗарегистрироватьТермин(Параметры, РусскийВЕдинственном, РусскийВоМножественном, АнглийскийВЕдинственном, 
	АнглийскийВоМножественном, НомерКартинки = 0)
	Если РусскийВоМножественном = "" Тогда
		РусскийВоМножественном = РусскийВЕдинственном;
	КонецЕсли;
	Если АнглийскийВоМножественном = "" Тогда
		АнглийскийВоМножественном = АнглийскийВЕдинственном;
	КонецЕсли;
	Параметры.РусскоАнглийскийВЕдинственном.Вставить(НРег(РусскийВЕдинственном), АнглийскийВЕдинственном);
	Параметры.РусскоАнглийскийВоМножественном.Вставить(НРег(РусскийВоМножественном), АнглийскийВоМножественном);
	Параметры.РусскийИзЕдинственногоВоМножественный.Вставить(НРег(РусскийВЕдинственном), РусскийВоМножественном);
	Параметры.РусскийИзМножественногоВЕдинственный.Вставить(НРег(РусскийВоМножественном), РусскийВЕдинственном);
	Если НомерКартинки = 0 Тогда
		НомерКартинки = БиблиотекаКартинок[РусскийВЕдинственном];
	КонецЕсли;
	Параметры.НомераКартинок.Вставить(НРег(РусскийВоМножественном), НомерКартинки);
КонецПроцедуры

// Работа с файлами модулей.

Функция ПолноеИмяОбщегоМодуля(Параметры, ИмяМодуля)
	Возврат Параметры.РабочийКаталог + "CommonModules\" + ИмяМодуля + "\Ext\Module.bsl";
КонецФункции

Функция ПрочитатьТекстМодуля(ПолноеИмяМодуля)
	Если Не ФайлСуществует(ПолноеИмяМодуля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяМодуля);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат ТекстМодуля;
КонецФункции

Процедура ЗаписатьТекстМодуля(Параметры, ПолноеИмяМодуля, ТекстМодуля)
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяМодуля, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстМодуля);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

// Работа с DOM и XPath.

Функция ПрочитатьДокументDOM(ПутьКФайлу)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

Процедура ЗаписатьДокументDOM(ДокументDOM, ИмяФайла)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
КонецПроцедуры

Функция МаксимальноеЗначениеАтрибутаDOM(ДокументDOM, Разыменователь, Запрос)
	РезультатXPath = ВычислитьВыражениеXPath("(" + Запрос + "[not(. < " + Запрос + ")])[1]", ДокументDOM, Разыменователь);
	АтрибутDOM = РезультатXPath.ПолучитьСледующий();
	Если АтрибутDOM = Неопределено Тогда
		Возврат 0;
	Иначе
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		Возврат ОписаниеТипаЧисло.ПривестиЗначение(АтрибутDOM.ТекстовоеСодержимое);
	КонецЕсли;
КонецФункции

// Работа с текстами модулей.

Функция СтрНайтиНеКомментарийИНеСтроку(Строка, ПодстрокаПоиска, Знач НачальнаяПозиция = 1, Знач НомерВхождения = 1, 
	СтрокаМеждуВозвратомКареткиИПодстрокой = "")
	Пока Истина Цикл
		ПозицияПервогоСимвола = СтрНайти(Строка, ПодстрокаПоиска, , НачальнаяПозиция, НомерВхождения);
		Если ПозицияПервогоСимвола = 0 Тогда
			Возврат 0;
		КонецЕсли;
		ПозицияВозвратаКаретки = СтрНайти(Строка, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияПервогоСимвола);
		Если ПозицияВозвратаКаретки = ПозицияПервогоСимвола - 1 Тогда
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		СтрокаМеждуВозвратомКареткиИПодстрокой = СокрЛП(Сред(Строка, ПозицияВозвратаКаретки, ПозицияПервогоСимвола - ПозицияВозвратаКаретки));
		Если СтрокаМеждуВозвратомКареткиИПодстрокой = "" Тогда
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		ЧетноеКоличествоКавычек = (СтрЧислоВхождений(СтрокаМеждуВозвратомКареткиИПодстрокой, """")%2 = 0);
		ЭтоПродолжениеСтроки = СтрНачинаетсяС(СтрокаМеждуВозвратомКареткиИПодстрокой, "|");
		Если ЧетноеКоличествоКавычек <> ЭтоПродолжениеСтроки // Все кавычки закрыты.
			И СтрНайти(СтрокаМеждуВозвратомКареткиИПодстрокой, "//") = 0 Тогда // Комментарий Не открыт.
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		НачальнаяПозиция = ПозицияПервогоСимвола + 1;
		НомерВхождения = 1;
	КонецЦикла;
	Возврат 0;
КонецФункции

Функция СтрНайтиПроцедуруИлиФункцию(Строка, ПодстрокаПоиска, ЭтоФункция, Знач НачальнаяПозиция = 1)
	Длина = СтрДлина(ПодстрокаПоиска);
	Пока Истина Цикл
		ПозицияПервогоСимвола = СтрНайти(Строка, ПодстрокаПоиска, , НачальнаяПозиция);
		Если ПозицияПервогоСимвола = 0 Тогда
			Возврат 0;
		КонецЕсли;
		ПозицияСкобки = СтрНайти(Строка, "(", , ПозицияПервогоСимвола);
		Если ПозицияСкобки = 0 Тогда
			Возврат 0;
		КонецЕсли;
		СтрокаМеждуСкобкойИПодстрокой = Сред(Строка, ПозицияПервогоСимвола + Длина, ПозицияСкобки - ПозицияПервогоСимвола - Длина);
		Если Не ПустаяСтрока(СтрокаМеждуСкобкойИПодстрокой) Тогда
			НачальнаяПозиция = ПозицияПервогоСимвола + 1;
			Продолжить;
		КонецЕсли;
		ПозицияВозвратаКаретки = СтрНайти(Строка, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияПервогоСимвола);
		СтрокаМеждуВозвратомКареткиИПодстрокой = СокрЛП(Сред(Строка, ПозицияВозвратаКаретки, ПозицияПервогоСимвола - ПозицияВозвратаКаретки));
		ВидМетода = НРег(СокрЛП(СтрокаМеждуВозвратомКареткиИПодстрокой));
		Если ВидМетода = "процедура" Тогда
			ЭтоФункция = Ложь;
			Прервать;
		ИначеЕсли ВидМетода = "функция" Тогда
			ЭтоФункция = Истина;
			Прервать;
		КонецЕсли;
		НачальнаяПозиция = ПозицияПервогоСимвола + 1;
	КонецЦикла;
	Возврат ПозицияВозвратаКаретки + 1;
КонецФункции

Функция РасширитьФрагментЗаСчетСкобокПодсистемы(ФрагментНРег, Вызов, ПолноеИмяСкобокПодсистемы)
	ОткрывающаяНРег = НРег("// " + ПолноеИмяСкобокПодсистемы);
	ПозицияОткрывающей = СтрНайти(ФрагментНРег, ОткрывающаяНРег, НаправлениеПоиска.СКонца, Вызов.Начало);
	Если ПозицияОткрывающей <> 0 Тогда
		ПозицияПС = СтрНайти(ФрагментНРег, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияОткрывающей);
		ФрагментМеждуОткрывающейИНачалом = Сред(ФрагментНРег, ПозицияПС, Вызов.Начало - ПозицияПС);
		Если ПустаяСтрока(ФрагментМеждуОткрывающейИНачалом) Тогда
			ЗакрывающаяНРег = НРег("// Конец " + ПолноеИмяСкобокПодсистемы);
			ПозицияЗакрывающей = СтрНайти(ФрагментНРег, ЗакрывающаяНРег, НаправлениеПоиска.СНачала, Вызов.Окончание);
			Если ПозицияЗакрывающей <> 0 Тогда
				ПозицияПС = СтрНайти(ФрагментНРег, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияЗакрывающей);
				ФрагментМеждуОкончаниемИЗакрывающей = Сред(ФрагментНРег, Вызов.Окончание, ПозицияПС - Вызов.Окончание);
				Если ПустаяСтрока(ФрагментМеждуОкончаниемИЗакрывающей) Тогда
					Вызов.Начало    = ПозицияОткрывающей;
					Вызов.Окончание = СтрНайти(ФрагментНРег, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияЗакрывающей);
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Последовательное чтение.

Функция СоздатьПоследовательноеЧтение(СтрокаИлиЧтениеТекста)
	ПоследовательноеЧтение = Новый Структура("ЭтоЧтениеТекста, ВыводЗавершен, Строка, НомерСимвола, ДлинаСтроки, НомерСтроки, ТекущийБлок, Комментарий");
	ПоследовательноеЧтение.ЭтоЧтениеТекста = ТипЗнч(СтрокаИлиЧтениеТекста) = Тип("ЧтениеТекста");
	ПоследовательноеЧтение.ВыводЗавершен   = Ложь;
	ПоследовательноеЧтение.НомерСтроки     = 0;
	ПоследовательноеЧтение.ТекущийБлок     = "";
	ПоследовательноеЧтение.Комментарий     = "";
	Если ПоследовательноеЧтение.ЭтоЧтениеТекста Тогда
		ПоследовательноеЧтение.Вставить("ЧтениеТекста", СтрокаИлиЧтениеТекста);
	Иначе
		ПоследовательноеЧтение.Строка = СтрокаИлиЧтениеТекста;
		ПоследовательноеЧтение.НомерСимвола = 0;
		ПоследовательноеЧтение.ДлинаСтроки  = СтрДлина(ПоследовательноеЧтение.Строка);
		ПоследовательноеЧтение.НомерСтроки  = ПоследовательноеЧтение.НомерСтроки + 1;
	КонецЕсли;
	Возврат ПоследовательноеЧтение;
КонецФункции

Функция ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, Символ)
	Если ПоследовательноеЧтение.НомерСимвола = ПоследовательноеЧтение.ДлинаСтроки Тогда
		Если ПоследовательноеЧтение.ЭтоЧтениеТекста Тогда
			ПоследовательноеЧтение.Строка = ПоследовательноеЧтение.ЧтениеТекста.ПрочитатьСтроку();
			Если ПоследовательноеЧтение.Строка = Неопределено Тогда
				Символ = "";
				ПоследовательноеЧтение.ВыводЗавершен = Истина;
				Возврат Ложь;
			КонецЕсли;
			Символ = Символы.ПС;
			ПоследовательноеЧтение.НомерСимвола = 0;
			ПоследовательноеЧтение.ДлинаСтроки  = СтрДлина(ПоследовательноеЧтение.Строка);
		Иначе
			Символ = "";
			ПоследовательноеЧтение.ВыводЗавершен = Истина;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПоследовательноеЧтение.НомерСимвола = ПоследовательноеЧтение.НомерСимвола + 1;
		Символ = Сред(ПоследовательноеЧтение.Строка, ПоследовательноеЧтение.НомерСимвола, 1);
	КонецЕсли;
	Если Символ = Символы.ПС Тогда
		ПоследовательноеЧтение.НомерСтроки = ПоследовательноеЧтение.НомерСтроки + 1;
	КонецЕсли;
	ПоследовательноеЧтение.ТекущийБлок = ПоследовательноеЧтение.ТекущийБлок + Символ;
	Возврат Истина;
КонецФункции

Функция СледующийСимволОбъектаБезРегистрацииВПеременных(ПоследовательноеЧтение)
	Если ПоследовательноеЧтение.НомерСимвола = ПоследовательноеЧтение.ДлинаСтроки Тогда
		Если ПоследовательноеЧтение.ЭтоЧтениеТекста Тогда
			Символ = Символы.ПС;
		Иначе
			Символ = Неопределено;
		КонецЕсли;
	Иначе
		Символ = Сред(ПоследовательноеЧтение.Строка, ПоследовательноеЧтение.НомерСимвола + 1, 1);
	КонецЕсли;
	Возврат Символ;
КонецФункции

Функция ЗачитатьОбъектДоСимвола(ПоследовательноеЧтение, СимволОстановкиЧтения)
	РезультатЧтения = "";
	Символ = Неопределено;
	Пока ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, Символ) Цикл
		Если Символ = СимволОстановкиЧтения Тогда
			Возврат РезультатЧтения;
		Иначе
			РезультатЧтения = РезультатЧтения + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатЧтения;
КонецФункции

Функция ПрочитатьБлокСОстановкойПоСимволу(ПоследовательноеЧтение, НаборСимволовОстановкиЧтения, ЛокальныйСимвол, ПустаяСтрокаЯвляетсяРазделителем = Ложь)
	Кавычка = """";
	Блок = "";
	Пока ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, ЛокальныйСимвол) Цикл
		Если СтрНайти(НаборСимволовОстановкиЧтения, ЛокальныйСимвол) <> 0 Тогда
			Прервать;
		ИначеЕсли ПустаяСтрокаЯвляетсяРазделителем И ПустаяСтрока(ЛокальныйСимвол) Тогда
			Если Блок <> "" Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЛокальныйСимвол = Кавычка Тогда
			Пока Истина Цикл
				Блок = Блок + Кавычка + ЗачитатьОбъектДоСимвола(ПоследовательноеЧтение, Кавычка) + Кавычка;
				Если СледующийСимволОбъектаБезРегистрацииВПеременных(ПоследовательноеЧтение) = Кавычка Тогда // Двойная кавычка.
					ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, Неопределено);
					Блок = Блок + Кавычка; // Продолжить чтение.
				Иначе
					Прервать; // Закончили чтение.
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЛокальныйСимвол = "/" И СледующийСимволОбъектаБезРегистрацииВПеременных(ПоследовательноеЧтение) = "/" Тогда
			ДочитатьБлокКомментария(ПоследовательноеЧтение);
		Иначе
			Блок = Блок + ЛокальныйСимвол;
		КонецЕсли;
	КонецЦикла;
	Возврат Блок;
КонецФункции

Процедура ДочитатьБлокКомментария(ПоследовательноеЧтение)
	БлокКодаДоНачалаАнализа = Лев(ПоследовательноеЧтение.ТекущийБлок, СтрДлина(ПоследовательноеЧтение.ТекущийБлок) - 1);
	Комментарий = "/" + ЗачитатьОбъектДоСимвола(ПоследовательноеЧтение, Символы.ПС);
	Если ПоследовательноеЧтение.Комментарий = "" Тогда
		ПоследовательноеЧтение.Комментарий = Комментарий;
	Иначе
		ПоследовательноеЧтение.Комментарий = ПоследовательноеЧтение.Комментарий + Символы.ПС + Комментарий;
	КонецЕсли;
	ПоследовательноеЧтение.ТекущийБлок = БлокКодаДоНачалаАнализа;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли