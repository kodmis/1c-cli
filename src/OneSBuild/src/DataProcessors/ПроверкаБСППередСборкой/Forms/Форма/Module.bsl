///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатыОтчета;
&НаСервере
Перем СоответствиеОбъектовИПодсистем;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗапуститьИЗавершить               = Параметры.ЗапуститьИЗавершить;
	КаталогВыгрузкиМодулей            = Параметры.КаталогВыгрузкиМодулей;
	АвтоматическоеТестирование        = Параметры.АвтоматическоеТестирование;
	ПолныйПутьКФайлуПроверки          = Параметры.ПолныйПутьКФайлуПроверки;
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	// Список метаданных, которые необходимо пропускать при проверке прав.
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить(Метаданные.Справочники.ДополнительныеОтчетыИОбработки.Имя);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок.Имя);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.Имя);
	СписокИсключений.Добавить(Метаданные.Константы.КлючОбластиДанных.Имя);
	
	ЗаполнитьИнструментыРазработчика(Метаданные.Подсистемы._ДемоИнструментыРазработчика);
	
	// Блок описания текущих проверок.
	
	// В этом месте необходимо добавить описание любой проверки в формате:
	// ДобавитьПроверку(<Текстовое представление проверки для пользователя>, <Наименование функции проверки>);
	ДобавитьПроверку(НСтр("ru = 'Модули обычного и управляемого приложения должны совпадать'"), 
		"Подключаемый_ПроверитьСовпадениеМодулейУправляемогоИОбычногоПриложений()");
	
	ДобавитьПроверку(НСтр("ru = 'Каждый объект должен принадлежать хотя бы одной подсистеме'"), 
		"Подключаемый_ПроверитьПринадлежностьОбъектовПодсистемам()");
	
	ДобавитьПроверку(НСтр("ru = 'Демонстрационные объекты не должны включаться в поставляемые подсистемы'"), 
		"Подключаемый_ПроверитьПринадлежностьДемонстрационныхОбъектов()");
	
	ДобавитьПроверку(НСтр("ru = 'Демонстрационные примеры должны быть правильно закомментированы'"), 
		"Подключаемый_ПроверитьКорректностьКомментированияДемоПримеров()");
	
	ДобавитьПроверку(НСтр("ru = 'Демонстрационные объекты должны быть правильно названы'"), 
		"Подключаемый_ПроверитьПравильностьИменованияДемоОбъектов()");
	
	ДобавитьПроверку(НСтр("ru = 'Роль и вид доступа должны быть включены хотя бы в одно описание профиля'"), 
		"Подключаемый_ПроверитьВхождениеРолейИВидовДоступаВПрофили()");
	
	ДобавитьПроверку(НСтр("ru = 'Комментарии блоков кода, относящихся к той или иной подсистемы должны быть корректными'"), 
		"Подключаемый_ПроверитьКомментарииДляБлоковКодаПодсистем()");
	
	ДобавитьПроверку(НСтр("ru = 'Использование функции проверки существования подсистем'"), 
		"Подключаемый_ПроверитьПравильностьУсловныхВызовов()");
	
	ДобавитьПроверку(НСтр("ru = 'Недопустимо наличие недокументированных жестких связей между подсистемами'"), 
		"Подключаемый_НекорректныеСвязиМеждуПодсистемами()");
	
	ДобавитьПроверку(НСтр("ru = 'У поставляемых подсистем должен быть снят флаг ""Включать в содержание справки""'"), 
		"Подключаемый_ПроверитьЗначениеФлагаВключатьВСодержаниеСправки()");
	
	ДобавитьПроверку(НСтр("ru = 'Нерекомендуемые настройки ролей'"), 
		"Подключаемый_НайтиНерекомендуемыеНастройкиРолей()");
	
	ДобавитьПроверку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подсистемы верхнего уровня (а также подчиненные им подсистемы), отображаемые в главном командном интерфейсе, должны иметь право
		|просмотр в роли %1<%2>'"), "Подсистема", "ИмяПодсистемы"),
		"Подключаемый_ПроверкаПраваПросмотрПодсистемКомандногоИнтерфейса()");
	
	ДобавитьПроверку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Недопустимо наличие ""%1"" в текстах модулей'"), "TO" + "DO"), 
		"Подключаемый_ВыполнитьПоискЗапрещенныхКомментариев()");
	
	ДобавитьПроверку(НСтр("ru = 'Платформенная проверка конфигурации не должна содержать ошибок.'"),
		"Подключаемый_ПлатформеннаяПроверкаКонфигурации()",
		Ложь);
	
	ДобавитьПроверку(НСтр("ru = 'Недопустимо наличие права ""Интерактивное удаление""'"), 
		"Подключаемый_ПроверитьНаличиеПраваИнтерактивноеУдаление()",
		Ложь);
	
	ДобавитьПроверку(НСтр("ru = 'Дополнительные команды открытия списков должны иметь в ролях те же права, что и объекты метаданных.'"), 
		"Подключаемый_ПроверитьПравоПросмотраКомандОткрытияСписковВРолях()",
		Ложь);
	
	ДобавитьПроверку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'У отложенных обработчиков обновления должны быть заполнены свойства %1, %2'"),
		"ЧитаемыеОбъекты", "ИзменяемыеОбъекты"),
		"Подключаемый_ПроверкаОтложенныхОбработчиковОбновления()",
		Ложь);
	
	ДобавитьПроверку(НСтр("ru = 'Роли должны давать права на объекты только своей подсистемы.'"),
		"Подключаемый_ПроверкаРолейНаНесанкционированныйДоступ()",
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
#Если ВебКлиент Тогда
	ВызватьИсключение НСтр("ru = 'Обработка не поддерживает работу в режиме веб-клиента.'");
#ИначеЕсли МобильныйКлиент Тогда
	ВызватьИсключение НСтр("ru = 'Обработка не поддерживает работу в режиме мобильного клиента.'");
#КонецЕсли
	
	Если ЗапуститьИЗавершить Тогда
		ЗапуститьПроверку();
	КонецЕсли;
	
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	Элементы.СравнитьФайлыПриложений.Видимость = Истина;
#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
#Если Не ВебКлиент Тогда
	Если Не ЗапуститьИЗавершить Тогда
		ОчиститьКаталогДляВыгрузки(КаталогВыгрузкиМодулей);
	КонецЕсли;
	ВыполнитьПроверку();
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонфигуратор(Команда)
#Если Не ВебКлиент Тогда
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(ПутьКИБ);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяАдминистратораИБ);
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить(ПарольАдминистратораИБ);
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(КомандаЗапуска);
	
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеПроверки(Команда)
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.ПроводитьПроверку = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПроверки(Команда)
	Для Каждого Проверка Из Объект.Проверки Цикл
		Проверка.ПроводитьПроверку = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрошлыеРезультатыПроверки(Команда)
	РезультатыОтчета.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СравнитьФайлыПриложений(Команда)
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	Сравнение = Новый СравнениеФайлов;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	ПервыйФайл = НайтиФайлы(КаталогВыгрузкиМодулей, "ManagedApplicationModule.bsl", Истина);
	ВторойФайл = НайтиФайлы(КаталогВыгрузкиМодулей, "OrdinaryApplicationModule.bsl", Истина);
	
	Если ПервыйФайл.Количество() = 0 Или ВторойФайл.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не найдены файлы приложений'"));
		Возврат;
	КонецЕсли;
	
	Сравнение.ПервыйФайл = ПервыйФайл[0].ПолноеИмя;
	Сравнение.ВторойФайл = ВторойФайл[0].ПолноеИмя;
	
	Сравнение.ИгнорироватьПустоеПространство = Истина;
	Сравнение.УчитыватьРазделителиСтрок = Ложь;
	Сравнение.УчитыватьРегистр = Ложь;
	Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
	Сравнение.ПоказатьРазличия();
	
#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьПроверку()
	КомандаВыполнить(Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

&НаКлиенте
Процедура ОчиститьКаталогДляВыгрузки(КаталогВыгрузкиМодулей)
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;
КонецПроцедуры
// АПК:78-выкл используется для пакетного вызова.
&НаКлиенте
Процедура ВыполнитьПроверку(СписокВывода = Неопределено) Экспорт
	СписокВывода     = Новый СписокЗначений;
	ОшибкиВыполнения = "";
	Для Каждого Проверка Из Объект.Проверки Цикл
		Если Проверка.ПроводитьПроверку Тогда
			Попытка
				Состояние(НСтр("ru = 'Проверка правила:'") + " " + Проверка.НаименованиеПроверки);
				МассивПроверок = СтрРазделить(Проверка.НаименованиеПроцедурыПроверки, ",", Ложь);
				Для Каждого ПромежуточнаяПроверка Из МассивПроверок Цикл
					СтруктураОшибок = Вычислить(СокрЛП(ПромежуточнаяПроверка));
					Если СтруктураОшибок <> Неопределено Тогда
						Если ТипЗнч(СтруктураОшибок) = Тип("Массив") Тогда
							Для каждого ЭлементМассива Из СтруктураОшибок Цикл
								СписокВывода.Добавить(ЭлементМассива);
							КонецЦикла;
						Иначе
							СписокВывода.Добавить(СтруктураОшибок);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Исключение
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Проверка перед сборкой'"), "Ошибка", ПредставлениеОшибки);
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить проверку ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Проверка.НаименованиеПроверки);
				
				ОшибкиВыполнения = ?(ОшибкиВыполнения = "", ТекстСообщения, ОшибкиВыполнения + Символы.ПС + ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	ТабДок = ВывестиОшибки(СписокВывода, ЕстьОшибки);
	ТабДок.ОтображатьГруппировки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Если ЗапуститьИЗавершить Тогда
		Если Не АвтоматическоеТестирование Тогда
			Если СтрЗаканчиваетсяНа(ПолныйПутьКФайлуПроверки, ".txt") Тогда
				ВывестиОшибкиВТекстовыйФайл(СписокВывода);
			Иначе
				ТабДок.Записать(ПолныйПутьКФайлуПроверки);
			КонецЕсли;
			ПрекратитьРаботуСистемы(Ложь);
		КонецЕсли;
	Иначе
		ТабДок.Показать();
		ОбновитьГиперссылку();
		РезультатыОтчета = ТабДок;
		ОчиститьКаталогДляВыгрузки(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкиВыполнения) Тогда
		ВызватьИсключение ОшибкиВыполнения;
	КонецЕсли;
	
КонецПроцедуры
// АПК:78-вкл
&НаКлиенте
Процедура ОбновитьГиперссылку()
	ШаблонЗаголовка = НСтр("ru = 'Открыть результаты проверки на: %1'"); 
	Элементы.ОткрытьРезультатыПроверки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, Строка(ДатаСеанса()));
	Элементы.ОткрытьРезультатыПроверки.Доступность = Истина;
КонецПроцедуры

&НаСервере
Функция ДатаСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции	

&НаСервере
Процедура ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации)
	
	Если Не ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		Каталог = Новый Файл(КаталогВыгрузкиКонфигурации);
		Если Не Каталог.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не существует.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		Если НайтиФайлы(КаталогВыгрузкиКонфигурации, "Configuration.xml", Истина).Количество() = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не содержит файлов выгрузки конфигурации.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		КаталогВыгрузки = КаталогВыгрузкиКонфигурации;
		Возврат;
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("");
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	СоздатьКаталог(КаталогВыгрузки);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогВыгрузки + "\1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки закройте конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = КаталогВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяПользователя());
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить();
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(КаталогВыгрузки);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
	КаталогВыгрузкиКонфигурации = КаталогВыгрузки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроверку(ИмяПроверки, ИмяПроцедурыПроверки, ПроводитьПроверку = Истина)
	НоваяСтрокаПроверки = Объект.Проверки.Добавить();
	НоваяСтрокаПроверки.ПроводитьПроверку = ПроводитьПроверку;
	НоваяСтрокаПроверки.НаименованиеПроверки = ИмяПроверки;
	НоваяСтрокаПроверки.НаименованиеПроцедурыПроверки = ИмяПроцедурыПроверки;
КонецПроцедуры

&НаСервере
Функция ВывестиОшибки(СписокОшибок, ЕстьОшибки)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.НачатьАвтогруппировкуСтрок();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетаСОшибками");
	
	Для Каждого ЭлементСтруктураОшибок Из СписокОшибок Цикл
		СтруктураОшибок = ЭлементСтруктураОшибок.Значение;
		ОшибочныеДанные = СтруктураОшибок.ОшибочныеДанные;
		
		Если ОшибочныеДанные = Неопределено
			Или ОшибочныеДанные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьПравила = Макет.ПолучитьОбласть("ИмяПравила");
		ОбластьПравила.Параметры.ИмяПравила = СтруктураОшибок.ПредставлениеОшибки;
		ОбластьПравила.Параметры.КоличествоОшибок = ?(ОшибочныеДанные = Неопределено, 0, ОшибочныеДанные.Количество());
		ТабДок.Вывести(ОбластьПравила, 0);
		
		ОбластьИсправления = Макет.ПолучитьОбласть("ОписаниеИсправления");
		ОбластьИсправления.Параметры.МетодикаИсправления = СтруктураОшибок.ОписаниеИсправления;
		ТабДок.Вывести(ОбластьИсправления,1);
		
		Если ТипЗнч(ОшибочныеДанные) = Тип("СписокЗначений") Тогда
			Для Каждого Ошибка Из ОшибочныеДанные Цикл
				ОбластьОшибки = Макет.ПолучитьОбласть("Объект");
				ОбластьОшибки.Параметры.ИмяОбъекта = Ошибка.Значение;
				ТабДок.Вывести(ОбластьОшибки,2);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		ОбластьПравила = Макет.ПолучитьОбласть("ИмяПравила");
		ОбластьПравила.Параметры.ИмяПравила = НСтр("ru = 'Ошибок не обнаружено'");
		ОбластьПравила.Параметры.КоличествоОшибок = 0;
		ТабДок.Вывести(ОбластьПравила, 0);
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура ВывестиОшибкиВТекстовыйФайл(СписокОшибок)
	
	ЕстьОшибки = Ложь;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Для Каждого ЭлементСтруктураОшибок Из СписокОшибок Цикл
		СтруктураОшибок = ЭлементСтруктураОшибок.Значение;
		ОшибочныеДанные = СтруктураОшибок.ОшибочныеДанные;
		
		Если ОшибочныеДанные = Неопределено
			Или ОшибочныеДанные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПроверки = СтруктураОшибок.ПредставлениеОшибки;
		ОписаниеПроверки = СтруктураОшибок.ОписаниеИсправления;
		
		ТекстовыйДокумент.ДобавитьСтроку("--------------------------------------------------");
		ТекстовыйДокумент.ДобавитьСтроку(Символы.ПС);
		ТекстовыйДокумент.ДобавитьСтроку("- " + НСтр("ru = 'Проверка'")+ ":");
		ТекстовыйДокумент.ДобавитьСтроку(ИмяПроверки);
		Если ЗначениеЗаполнено(ОписаниеПроверки) Тогда
			ТекстовыйДокумент.ДобавитьСтроку("- " + НСтр("ru = 'Описание'")+ ":");
			ТекстовыйДокумент.ДобавитьСтроку(ОписаниеПроверки);
		КонецЕсли;
		ТекстовыйДокумент.ДобавитьСтроку("- " + НСтр("ru = 'Ошибки'")+ ":");
		
		Если ТипЗнч(ОшибочныеДанные) = Тип("СписокЗначений") Тогда
			Для Каждого Ошибка Из ОшибочныеДанные Цикл
				ТекстовыйДокумент.ДобавитьСтроку(Ошибка.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку(Символы.ПС);
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Ошибок не обнаружено'"));
	КонецЕсли;
	
	ТекстовыйДокумент.Записать(ПолныйПутьКФайлуПроверки);
	
КонецПроцедуры

&НаСервере
Функция ТипыМетаданныхДляПроверки()
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("WebСервисы");
	СписокТипов.Добавить("WSСсылки");
	СписокТипов.Добавить("БизнесПроцессы");
	СписокТипов.Добавить("ГруппыКоманд");
	СписокТипов.Добавить("Документы");
	СписокТипов.Добавить("ЖурналыДокументов");
	СписокТипов.Добавить("Задачи");
	СписокТипов.Добавить("Интерфейсы");
	СписокТипов.Добавить("Константы");
	СписокТипов.Добавить("КритерииОтбора");
	СписокТипов.Добавить("НумераторыДокументов");
	СписокТипов.Добавить("Обработки");
	СписокТипов.Добавить("ОбщиеКартинки");
	СписокТипов.Добавить("ОбщиеКоманды");
	СписокТипов.Добавить("ОбщиеМакеты");
	СписокТипов.Добавить("ОбщиеМодули");
	СписокТипов.Добавить("ОбщиеФормы");
	СписокТипов.Добавить("Отчеты");
	СписокТипов.Добавить("ПакетыXDTO");
	СписокТипов.Добавить("ПараметрыСеанса");
	СписокТипов.Добавить("ПараметрыФункциональныхОпций");
	СписокТипов.Добавить("Перечисления");
	СписокТипов.Добавить("ПланыВидовРасчета");
	СписокТипов.Добавить("ПланыВидовХарактеристик");
	СписокТипов.Добавить("ПланыОбмена");
	СписокТипов.Добавить("ПланыСчетов");
	СписокТипов.Добавить("ПодпискиНаСобытия");
	СписокТипов.Добавить("Последовательности");
	СписокТипов.Добавить("РегистрыБухгалтерии");
	СписокТипов.Добавить("РегистрыНакопления");
	СписокТипов.Добавить("РегистрыРасчета");
	СписокТипов.Добавить("РегистрыСведений");
	СписокТипов.Добавить("РегламентныеЗадания");
	СписокТипов.Добавить("Роли");
	СписокТипов.Добавить("Справочники");
	СписокТипов.Добавить("Стили");
	СписокТипов.Добавить("ФункциональныеОпции");
	СписокТипов.Добавить("ХранилищаНастроек");
	СписокТипов.Добавить("ЭлементыСтиля");
	СписокТипов.Добавить("Языки");
	Возврат СписокТипов;
	
КонецФункции

&НаСервере
Функция ОбъектыПодсистем()
	
	СоответствиеОбъектовПодсистемам = Новый ТаблицаЗначений;
	СоответствиеОбъектовПодсистемам.Колонки.Добавить("Подсистема");
	СоответствиеОбъектовПодсистемам.Колонки.Добавить("Объект");
	
	// Проведем проверку аналогично АПК - до второго уровня вложенности подсистем.
	
	Для Каждого ПодсистемаПервогоУровня Из Метаданные.Подсистемы Цикл
		Для Каждого ПодсистемаВторогоУровня Из ПодсистемаПервогоУровня.Подсистемы Цикл
			Для Каждого ПодсистемаТретьегоУровня Из ПодсистемаВторогоУровня.Подсистемы Цикл
				ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ПодсистемаТретьегоУровня);
			КонецЦикла;
			ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ПодсистемаВторогоУровня);
		КонецЦикла;
		ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ПодсистемаПервогоУровня);
	КонецЦикла;
	
	Возврат СоответствиеОбъектовПодсистемам;
	
КонецФункции

&НаСервере
Процедура ДополнитьСоответствиеОбъектамиПодсистемы(СоответствиеОбъектовПодсистемам, ИсследуемаяПодсистема)
	Для Каждого ОбъектСостава Из ИсследуемаяПодсистема.Состав Цикл
		Если ЭтоОбъектНеДемоРасширения(ОбъектСостава) Тогда
			// Проверяются только демо-расширения.
			Продолжить;
		КонецЕсли;
		
		НовоеСоответствие = СоответствиеОбъектовПодсистемам.Добавить();
		НовоеСоответствие.Подсистема = ИсследуемаяПодсистема;
		НовоеСоответствие.Объект = ОбъектСостава;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстовыйФайлПоПути(КаталогОбмена, ИмяФайла)
	ФайлПоиска = НайтиФайлы(КаталогОбмена, ИмяФайла, Истина);
	Если ФайлПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстФайла = Новый ТекстовыйДокумент;
	ТекстФайла.Прочитать(ФайлПоиска[0].ПолноеИмя);
	Возврат ТекстФайла;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подключаемые функции
//
// Описание функций проверки:
// Функция проверки может проводиться как на клиенте, так и на сервере.
// Возвращаемое значение : Неопределено, если ошибок не обнаружено, либо.
//
// Структура ("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
//  <Пользовательское представление ошибки - строка>, <Пользовательское описание метода исправления - строка>.
//  <Список текстовых представлений ошибок - список значений>).
//
// Если для описания ошибки достаточно только пользовательского представления (например, если
// надо сообщить, что модули не совпадают без уточнения места), тогда в качестве второго параметра
// структуры необходимо указывать Неопределено.

&НаСервере
Функция Подключаемый_ПроверитьПравильностьИменованияДемоОбъектов()
	
	СписокТиповМетаданных = ТипыМетаданныхДляПроверки();
	СписокНеПодчиненныхОбъектов = Новый СписокЗначений;
	
	Для Каждого ТипМетаданныхВСписке Из СписокТиповМетаданных Цикл
		ТипМетаданных = ТипМетаданныхВСписке.Значение;
		Для Каждого ОбъектМетаданныхЗаданногоТипа Из Метаданные[ТипМетаданных] Цикл
			Если ТипМетаданных = "ПараметрыСеанса"
				Или ТипМетаданных = "Роли"
				Или СтрНачинаетсяС(ОбъектМетаданныхЗаданногоТипа.Имя, "КлючиДоступаКРегистру_Демо") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоОбъектНеДемоРасширения(ОбъектМетаданныхЗаданногоТипа) Тогда
				// Проверяются только демо-расширения.
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ОбъектМетаданныхЗаданногоТипа.Имя, "_Демо") > 0 И Лев (ОбъектМетаданныхЗаданногоТипа.Имя, 5) <> "_Демо" Тогда
				СписокНеПодчиненныхОбъектов.Добавить(ИмяОбъектаМетаданного(ОбъектМетаданныхЗаданногоТипа), 
					ОбъектМетаданныхЗаданногоТипа.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ОписаниеИсправления = НСтр("ru = 'Демо-объекты именуются с префиксом ""_Демо"" в начале имени. Исключение - объекты типа ""Параметры сеанса"" и ""Роли"", где данный префикс
			|может находиться в середине имени.'");
	Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		НСтр("ru = 'Неправильно названы демо-объекты'"), 
		ОписаниеИсправления, СписокНеПодчиненныхОбъектов);
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьПринадлежностьОбъектовПодсистемам()
	
	Результат = Новый Массив();
	ОшибочныеОбъекты = ВыполнитьПроверкуПоПринадлежностиОбъектов();
	
	ПредставлениеОшибки = НСтр("ru = 'Объекты не принадлежат ни одной поставляемой подсистеме.'");
	ОписаниеИсправления = НСтр("ru = 'Все объекты метаданных в конфигурации должны быть подчинены одной поставляемой подсистеме.
		|Исключение составляют только те объекты, которые не могут быть подчинены подсистемам в текущей версии платформы.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеОбъекты.НеПодчиненныеОбъекты);
	Результат.Добавить(СтруктураОшибок);
	
	ПредставлениеОшибки = НСтр("ru = 'Объекты принадлежат более чем одной поставляемой подсистеме.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеОбъекты.ИзбыточноПодчиненныеОбъекты);
	Результат.Добавить(СтруктураОшибок);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьПринадлежностьДемонстрационныхОбъектов()

	СписокОшибочныхОбъектов = Новый СписокЗначений;
	СписокОбъектовПодсистем = ОбъектыПодсистем();
	
	Для Каждого ПодчинениеОбъектаПодсистеме Из СписокОбъектовПодсистем Цикл
		
		Если ЭтоПоставляемаяПодсистема(ПодчинениеОбъектаПодсистеме.Подсистема)
			И СтрНачинаетсяС(ПодчинениеОбъектаПодсистеме.Объект.Имя, "_Демо") Тогда
			СписокОшибочныхОбъектов.Добавить(Строка(ПодчинениеОбъектаПодсистеме.Объект), 
				ПодчинениеОбъектаПодсистеме.Объект.ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеИсправления = НСтр("ru = 'Демонстрационные объекты не должны быть включены в поставляемые подсистемы'");
	ПредставлениеОшибки = НСтр("ru = 'Следующие демонстрационные объекты включены в поставляемые подсистемы'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьКорректностьКомментированияДемоПримеров()

	ТекстФайла = Новый ТекстовыйДокумент;
	СписокОшибочныхОбъектов  = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.bsl", Истина);
	
	Для Каждого ФайлМодуля Из МассивМодулей Цикл
		
		Если СтрНайти(ФайлМодуля.ПолноеИмя, "ПереходНаВерсию") > 0
			Или СтрНайти(ФайлМодуля.ПолноеИмя, "ПроверкаВнедренияБСП") > 0
			Или СтрНайти(ФайлМодуля.ПолноеИмя, "СообщенияВыгрузкиКонфигурацииВФайлы") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТекущейСтроки = 0;
		ТекстФайла.Прочитать(ФайлМодуля.ПолноеИмя);
		КоличествоСтрок = ТекстФайла.КоличествоСтрок();
		
		Пока НомерТекущейСтроки < КоличествоСтрок Цикл
			
			СтрокаПроверки = ТекстФайла.ПолучитьСтроку(НомерТекущейСтроки);
			Если СтрНайти(СтрокаПроверки, "Демо ") = 0 Тогда
				НомерТекущейСтроки = НомерТекущейСтроки + 1;
				Продолжить;
			Иначе
				Если (СтрНайти(СтрокаПроверки, "_Демо начало примера") = 0 И СтрНайти(СтрокаПроверки, "_Демо конец примера") = 0) 
						И СтрНайти(СтрокаПроверки, "//")> 0 Тогда
					СтрокаОшибки = "%1 : %2";
					ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлМодуля.ПолноеИмя, ФайлМодуля.Имя);
					СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, ПолноеИмяСтруктура.ПолноеИмяМодуля, "Строка " + НомерТекущейСтроки);
					СписокОшибочныхОбъектов.Добавить(СтрокаОшибки, ПолноеИмяСтруктура.ПолноеИмяОбъекта);
				КонецЕсли;
			КонецЕсли;
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Возможно неправильное комментирование демонстрационных примеров'");
	ОписаниеИсправления = НСтр("ru = 'Демонстрационные примеры выделяются в коде с помощью комментариев вида 
		|//_Демо начало примера
		|<Код примера>
		|//_Демо конец примера
		|Другие представления демонстрационных примеров в коде запрещены.'");
	СтруктураОшибок =  Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьПравоПросмотраКомандОткрытияСписковВРолях()
	
	КоллекцииОбъектомМетаданных = Новый Массив;
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.Документы);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ЖурналыДокументов);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыСведений);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыНакопления);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыБухгалтерии);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.РегистрыРасчета);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.БизнесПроцессы);
	КоллекцииОбъектомМетаданных.Добавить(Метаданные.Задачи);
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Для каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектомМетаданных Цикл
		Для каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			Команда = ОбъектМетаданных.Команды.Найти(ОбъектМетаданных.Имя);
			Если Команда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для каждого Роль Из Метаданные.Роли Цикл
				ПравоОбъекта = ПравоДоступа("Просмотр", ОбъектМетаданных, Роль);
				ПравоКоманды = ПравоДоступа("Просмотр", Команда, Роль);
				Если ПравоОбъекта И НЕ ПравоКоманды Тогда
					
					// Пропускаем команды, которые открывают формы для редактирования объектов (списков объектов).
					// Такие команды не должны входить в роли, предназначенные только для просмотра объектов.
					КомандаДляРедактированияОбъекта = НСтр("ru = 'Открывает форму для редактирования'");
					Если СтрНачинаетсяС(Команда.Комментарий, КомандаДляРедактированияОбъекта)
						И НЕ ПравоДоступа("Редактирование", ОбъектМетаданных, Роль) Тогда
						Продолжить;
					КонецЕсли;
					
					СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не хватает права Просмотр для дополнительной команды ""%1"" объекта метаданных ""%2"" в роли ""%3"".'"),
						Команда.Имя,
						ОбъектМетаданных.ПолноеИмя(),
						Роль.Имя), ИмяОбъектаМетаданного(ОбъектМетаданных));
						
				ИначеЕсли НЕ ПравоОбъекта И ПравоКоманды Тогда
					СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Лишнее право Просмотр для дополнительной команды ""%1"" объекта метаданных ""%2"" в роли ""%3"".'"),
						Команда.Имя,
						ОбъектМетаданных.ПолноеИмя(),
						Роль.Имя), ИмяОбъектаМетаданного(ОбъектМетаданных));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Объекты имеют различный доступ со своими дополнительными командами открытия списков'");
	ОписаниеИсправления = НСтр("ru = 'Все объекты метаданных должны иметь одинаковые права на просмотр со своими дополнительными командами открытия списков.'");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаСервере
Функция Подключаемый_ПроверитьВхождениеРолейИВидовДоступаВПрофили()
	
	РолиИсключения = Новый Соответствие;
	РолиИсключения.Вставить("Администрирование", Истина);
	РолиИсключения.Вставить("ЗапускAutomation", Истина);
	РолиИсключения.Вставить("ЗапускВнешнегоСоединения", Истина);
	РолиИсключения.Вставить("ЗапускТолстогоКлиента", Истина);
	РолиИсключения.Вставить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок", Истина);
	РолиИсключения.Вставить("ОбновлениеКонфигурацииБазыДанных", Истина);
	РолиИсключения.Вставить("РежимТехническогоСпециалиста", Истина);
	РолиИсключения.Вставить("ОбновлениеКонфигурацииБазыДанных", Истина);
	РолиИсключения.Вставить("Подсистема_ДемоИнструментыРазработчика", Истина);
	РолиИсключения.Вставить("УдаленныйДоступОбменСообщениями", Истина);
	РолиИсключения.Вставить("УдаленныйДоступOData", Истина);
	РолиИсключения.Вставить("УдаленныйДоступОбменДаннымиВМоделиСервиса", Истина);
	РолиИсключения.Вставить("УдаленныйКонтроль", Истина);
	
	ВидыДоступаИсключения = Новый Соответствие;
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	УправлениеДоступомСлужебный.ОбновитьОписаниеСвойствВидовДоступа();
	Справочники.ПрофилиГруппДоступа.ОбновитьОписаниеПоставляемыхПрофилей();
	ОбновитьПовторноИспользуемыеЗначения();
	СвойстваВидовДоступа = УправлениеДоступомСлужебный.СвойстваВидовДоступа();
	ОписанияПрофилей     = УправлениеДоступомСлужебный.ПоставляемыеПрофили().ОписанияПрофилей;
	ВидыДоступаМассив    = СвойстваВидовДоступа.Массив;
	
	РолиПрофилей = Новый Соответствие;
	ВидыДоступаПрофилей = Новый Соответствие;
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Значение.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Роль Из ОписаниеПрофиля.Значение.Роли Цикл
			РолиПрофилей.Вставить(Роль, Истина);
		КонецЦикла;
		Для Каждого Строка Из ОписаниеПрофиля.Значение.ВидыДоступа Цикл
			ВидыДоступаПрофилей.Вставить(Строка.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СвойстваВидаДоступа Из ВидыДоступаМассив Цикл
		ИмяВидаДоступа = СвойстваВидаДоступа.Имя;
		
		Если ВидыДоступаИсключения.Получить(ИмяВидаДоступа) <> Неопределено
		 Или ВидыДоступаПрофилей.Получить(ИмяВидаДоступа) <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вид доступа ""%1"".'"), ИмяВидаДоступа));
	КонецЦикла;
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Роль.РасширениеКонфигурации() <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРоли = Роль.Имя;
		
		Если СтрНайти(ИмяРоли, "_Демо") = 0 И Не РольБСП(Роль) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РолиИсключения.Получить(ИмяРоли) <> Неопределено
		 Или РолиПрофилей.Получить(ИмяРоли) <> Неопределено
		 Или СтрНайти(ИмяРоли, "Профиль_") > 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		СписокОшибочныхОбъектов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Роль ""%1"".'"), ИмяРоли), Роль.ПолноеИмя());
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Роль или вид доступа не найдены ни в одном из описаний профилей'");
	ОписаниеИсправления = НСтр("ru = 'Включите роль или вид доступа в одно из описаний поставляемых или демонстрационный профилей.'");
	
	СтруктураОшибок =  Новый Структура;
	СтруктураОшибок.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
	СтруктураОшибок.Вставить("ОписаниеИсправления", ОписаниеИсправления);
	СтруктураОшибок.Вставить("ОшибочныеДанные",     СписокОшибочныхОбъектов);
	
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьКомментарииДляБлоковКодаПодсистем()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	МассивПодсистем = СписокИспользуемыхПодсистем();	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.bsl", Истина);	
	ТекстФайла = Новый ТекстовыйДокумент;
	
	Состояние(НСтр("ru = 'Проверка комментариев для блоков кода'"));
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		
		Для Каждого Подсистема Из МассивПодсистем Цикл
			ОпределитьОшибкиКомментариев(Файл, Подсистема, СтрокаТекста, СписокОшибочныхОбъектов);
		КонецЦикла;
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Указаны неверные комментарии для блоков кода подсистем'");
	ОписаниеИсправления = НСтр("ru = 'Для всех блоков кода, относящихся к той или иной подсистеме, используются начальные и конечные комментарии вида:
		|<%1>
		|...
		|Конец <%1>'");
	ОписаниеИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсправления, "ПутьКПодсистеме");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция ЭтоИсключение(ПолноеИмяОбъекта)
	
	Если ИнструментыРазработчика.НайтиПоЗначению(ПолноеИмяОбъекта) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьПравильностьУсловныхВызовов()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.bsl", Истина);
	
	СписокИспользуемыхПодсистем = СписокИспользуемыхПодсистем(Ложь);
	СписокИспользуемыхПодсистем.Добавить("СтандартныеПодсистемы");
	ТекстФайла = Новый ТекстовыйДокумент;
	
	Состояние(НСтр("ru = 'Проверка условных вызовов'"));
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		
		СтрокаУсловногоВызова = "ОбщегоНазначения.ПодсистемаСуществует(""";
		СтрокаУсловногоВызова2 = "ОбщегоНазначенияКлиент.ПодсистемаСуществует(""";
		ОпределитьОшибкиУсловныхВызовов(Файл, СтрокаТекста, СписокОшибочныхОбъектов, СписокИспользуемыхПодсистем, СтрокаУсловногоВызова);
		ОпределитьОшибкиУсловныхВызовов(Файл, СтрокаТекста, СписокОшибочныхОбъектов, СписокИспользуемыхПодсистем, СтрокаУсловногоВызова2);
	КонецЦикла;
	
	ПредставлениеОшибки = НСтр("ru = 'Несуществующая подсистема при вызове функции %1'");
	ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, "ПодсистемаСуществует");
	ОписаниеИсправления = НСтр("ru = 'Название подсистемы должно задаваться с учетом иерархии в виде - ""%1""
		|или ""%2"" :'");
	ОписаниеИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсправления,
		"СтандартныеПодсистемы.ИмяПодсистемы", "СтандартныеПодсистемы.ИмяПодсистемы1.ИмяПодсистемы2");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьНаличиеПраваИнтерактивноеУдаление()
	
	СписокОшибочныхОбъектов = ПроверкаПравРолей("ИнтерактивноеУдаление", "ВсеРоли");
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо наличие права ""Интерактивное удаление""'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_НекорректныеСвязиМеждуПодсистемами()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СписокОшибочныхОбъектов = НекорректныеСвязиМеждуПодсистемами();
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо наличие недокументированных жестких связей между подсистемами'");
	ОписаниеИсправления = НСтр("ru = 'Корректные зависимости отразите в функции %1
		|модуля объекта обработки %2, а также в документации.
		|Исключения из этого правила согласуются с ответственным за БСП и вносятся в макет
		|%3 в формате:
		|%4-%5-%6'");
	
	ОписаниеИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсправления,
		"ЗависимостиПодсистем",
		"ПервоеВнедрениеБСП",
		"Отчет.ЗависимостиПодсистем.ОбъектыИсключения",
		"ВызывающаяПодсистема", "ВызываемаяПодсистема", "ВызывающийОбъект");
	
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыполнитьПоискЗапрещенныхКомментариев()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СтрокаПоиска = "TO"+"DO";
	СписокОшибочныхОбъектов = ПоискЗапрещенныхКомментариевВКодеМодулей(СтрокаПоиска);
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо наличие комментария ""%1"" в текстах модулей.'");
	ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаПоиска);
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверкаИспользованияСвойстваГоризонтальнаяЕслиВозможно()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СписокОшибочныхОбъектов = ГруппыГоризонтальнаяЕслиВозможно();
	
	ПредставлениеОшибки = НСтр("ru = 'Недопустимо устанавливать свойство группы ""Группировка"" в значение ""Горизонтальная если возможно""'");
	ОписаниеИсправления = НСтр("ru = 'Установите свойство группы ""Группировка"" в значение ""Горизонтальная"" или ""Вертикальная""'");
	СтруктураОшибок = Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьЗначениеФлагаВключатьВСодержаниеСправки()
	
	СписокОшибочныхОбъектов = ПроцедурыСФлагомВключатьВСодержаниеСправки();
	
	ПредставлениеОшибки = НСтр("ru = 'Поставляемые подсистемы не должны содержать флаг ""Включать в содержание справки""'");
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверитьСовпадениеМодулейУправляемогоИОбычногоПриложений()
	
	ТекстФайлаОбычногоПриложения     = Новый ТекстовыйДокумент;
	ТекстФайлаУправляемогоПриложения = Новый ТекстовыйДокумент;
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	ТекстФайлаОбычногоПриложения = ПолучитьТекстовыйФайлПоПути(КаталогВыгрузкиМодулей, "OrdinaryApplicationModule.bsl");
	ТекстФайлаУправляемогоПриложения = ПолучитьТекстовыйФайлПоПути(КаталогВыгрузкиМодулей, "ManagedApplicationModule.bsl");
	
	Список = Новый СписокЗначений;
	
	// Если не найден один из файлов - ошибка.
	Если ТекстФайлаОбычногоПриложения = Неопределено Или ТекстФайлаУправляемогоПриложения = Неопределено Тогда
		Список.Добавить("Не удалось найти файлы модулей приложения.");
		Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",НСтр("ru = 'Не удалось найти файлы модулей приложения.'"),"", Список) ;
	КонецЕсли;
	
	ПредставлениеОшибки = НСтр("ru = 'Модули обычного и управляемого приложений различны.'");
	ОписаниеИсправления = НСтр("ru = 'БСП поддерживает работу как в управляемом, так и в обычном приложении.
		|Соответственно, модули обычного и управляемого приложений должны совпадать за исключением специально предусмотренных случаев'");
	
	// Если количество строк различно - ошибка.
	Если ТекстФайлаОбычногоПриложения.КоличествоСтрок() <> ТекстФайлаУправляемогоПриложения.КоличествоСтрок() Тогда
		Список.Добавить(ПредставлениеОшибки);
		Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
			ПредставлениеОшибки, ОписаниеИсправления, Список);
	КонецЕсли;
	
	НомерПроверяемойСтроки = 0;
	
	Пока НомерПроверяемойСтроки < ТекстФайлаОбычногоПриложения.КоличествоСтрок() Цикл
		
		Если СокрЛП(ТекстФайлаОбычногоПриложения.ПолучитьСтроку(НомерПроверяемойСтроки)) <> 
			СокрЛП(ТекстФайлаУправляемогоПриложения.ПолучитьСтроку(НомерПроверяемойСтроки)) Тогда
			Список.Добавить(ПредставлениеОшибки);
			Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
				ПредставлениеОшибки, ОписаниеИсправления, Список);
		КонецЕсли;
		НомерПроверяемойСтроки = НомерПроверяемойСтроки + 1;
	КонецЦикла;
	
	Возврат Новый Структура("ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные", 
		ПредставлениеОшибки, ОписаниеИсправления, Список);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверкаОтложенныхОбработчиковОбновления()
	
	СписокОшибочныхОбъектов = ПроверкаОтложенныхОбработчиков();
	
	ПредставлениеОшибки = НСтр("ru = 'У отложенных обработчиков обновления не заполнены все необходимые свойства'");
	ОписаниеИсправления = НСтр("ru = 'Заполните свойства %1, %2'");
	ОписаниеИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсправления, "ЧитаемыеОбъект", "ИзменяемыеОбъекты");
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверкаПраваПросмотрПодсистемКомандногоИнтерфейса()
	
	СписокОшибочныхОбъектов = ПроверкаПраваПросмотрПодсистемКомандногоИнтерфейса();
	
	ПредставлениеОшибки = НСтр("ru = 'Подсистемы верхнего уровня (а также подчиненные им подсистемы), отображаемые в главном командном интерфейсе,
		|должны иметь право просмотр в роли %1<%2>'");
	ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, "Подсистема", "ИмяПодсистемыВерхнегоУровня");
	
	ОписаниеИсправления = Неопределено;
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПлатформеннаяПроверкаКонфигурации()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	СписокОшибочныхОбъектов = ПлатформеннаяПроверкаКонфигурации();
	
	ПредставлениеОшибки = НСтр("ru = 'Платформенная проверка конфигурации не должна выдавать ошибок.'");
	ОписаниеИсправления = НСтр("ru = 'Если какая-то из ошибок является особенностью поведения платформы и не должна
		|или не может быть исправлена, то такую ошибку необходимо добавить в список исключений.
		|Для этого нужно скопировать всю строку ошибки и добавить ее с новой строки в макете
		|%1 обработки %2.'");
	ОписаниеИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсправления,
		"ИсключенияПлатформеннойПроверки", "ПроверкаБСППередСборкой");
	СтруктураОшибок =  Новый Структура(
		"ПредставлениеОшибки, ОписаниеИсправления, ОшибочныеДанные",
		ПредставлениеОшибки, ОписаниеИсправления, СписокОшибочныхОбъектов);
	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПроверкаРолейНаНесанкционированныйДоступ()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	Ошибки = ПроверкаКорректностиРолейБСП();
	
	Результат = Новый Массив;
	ПредставлениеОшибки = НСтр("ru = 'Найдены роли, дающие права на объекты других подсистем'");
	ОписаниеИсправления = НСтр("ru = 'Если роль должна предоставлять доступ к объектам других подсистем,
		|то необходимо добавить в список исключений, в функции ""%1""
		|модуля формы обработки ""%2"".'");
	ОписаниеИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсправления,
		"РолиИсключения", "ПроверкаБСППередСборкой");
	
	
	СтруктураОшибок = СтруктураОшибок();
	СтруктураОшибок.ПредставлениеОшибки = ПредставлениеОшибки;
	СтруктураОшибок.ОписаниеИсправления = ОписаниеИсправления;
	СтруктураОшибок.ОшибочныеДанные     = Ошибки.ДругиеПодсистемыБСП;
	СтруктураОшибок.Срочность           = "ЖелательноБыстрее";
	Результат.Добавить(СтруктураОшибок);
	
	ПредставлениеОшибки = НСтр("ru = 'Роли БСП должны давать права только на объекты БСП'");
	ОписаниеИсправления = Неопределено;
	
	СтруктураОшибок = СтруктураОшибок();
	СтруктураОшибок.ПредставлениеОшибки = ПредставлениеОшибки;
	СтруктураОшибок.ОписаниеИсправления = ОписаниеИсправления;
	СтруктураОшибок.ОшибочныеДанные     = Ошибки.СторонниеПодсистемы;
	СтруктураОшибок.Срочность           = "ВПлановомПорядке";
	Результат.Добавить(СтруктураОшибок);
	
	Возврат Результат;
	
КонецФункции

// Следующие проверки не поддерживают адресную регистрацию ошибок.

&НаСервере
Функция Подключаемый_НайтиНерекомендуемыеНастройкиРолей()
	
	Если КаталогВыгрузкиМодулей = "" Тогда
		ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиМодулей);
	КонецЕсли;
	
	Результат = НерекомендуемыеНастройкиПрав(КаталогВыгрузкиМодулей);
	
	МассивОшибок = Новый Массив;
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Результат.НекорректнаяНастройкаПрав) Тогда
		Пояснение = НСтр("ru = '1.1. См. пункт 1 стандарта ""Проверка прав доступа"" https://its.1c.ru/db/v8std#content:737:hdoc
			|1.2. Для уменьшения размера выгрузки конфигурации в файлы права на поля должны быть установлены по умолчанию.'");
		СписокОшибочныхОбъектов.Добавить(Пояснение + Символы.ПС + Результат.НекорректнаяНастройкаПрав);
	КонецЕсли;
	ПредставлениеОшибки =
		НСтр("ru = 'Право на поле отличается от права на поле по умолчанию для роли (есть права на объект)'");
	
	СтруктураОшибок = СтруктураОшибок();
	СтруктураОшибок.ПредставлениеОшибки = ПредставлениеОшибки;
	СтруктураОшибок.ОписаниеИсправления = Неопределено;
	СтруктураОшибок.ОшибочныеДанные     = СписокОшибочныхОбъектов;
	СтруктураОшибок.Срочность           = "ВПлановомПорядке";
	МассивОшибок.Добавить(СтруктураОшибок);
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Результат.ПраваНеПоУмолчанию) Тогда
		СписокОшибочныхОбъектов.Добавить(Результат.ПраваНеПоУмолчанию);
	КонецЕсли;
	
	ПредставлениеОшибки =
		НСтр("ru = 'Право на поле отличается от права на поле по умолчанию для роли (нет прав на объект)'");
	
	СтруктураОшибок = СтруктураОшибок();
	СтруктураОшибок.ПредставлениеОшибки = ПредставлениеОшибки;
	СтруктураОшибок.ОписаниеИсправления = Неопределено;
	СтруктураОшибок.ОшибочныеДанные     = СписокОшибочныхОбъектов;
	СтруктураОшибок.Срочность           = "ВПлановомПорядке";
	МассивОшибок.Добавить(СтруктураОшибок);
	
	Возврат МассивОшибок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции проверок.

&НаСервере
Функция ПроверкаКорректностиРолейБСП()
	
	Ошибки = Новый Структура("ДругиеПодсистемыБСП, СторонниеПодсистемы");
	ЗаполнитьПринадлежностьОбъектовПодсистемам();
	
	Разделитель = ПолучитьРазделительПути();
	
	КаталогВыгрузкиРолей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2Roles", КаталогВыгрузкиМодулей,
		Разделитель);
	КаталогРолей         = Новый Файл(КаталогВыгрузкиРолей);
	Если Не КаталогРолей.Существует() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Каталог выгрузки ролей ""%1"" не существует.'"),
			КаталогВыгрузкиРолей);
	КонецЕсли;
	
	ВсеПодсистемы       = ВсеПодсистемы();
	ПодсистемыБСП       = ВсеПодсистемы.ПодсистемыБСП;
	СторонниеПодсистемы = ВсеПодсистемы.СторонниеПодсистемы;
	
	РолиИсключения                     = РолиИсключения();
	ЗапретДоступаКСтороннимПодсистемам = РолиИсключения.ЗапретДоступаКСтороннимПодсистемам;
	ЗапретДоступаКДругимПодсистемамБСП = РолиИсключения.ЗапретДоступаКДругимПодсистемамБСП;
	
	Ошибки.СторонниеПодсистемы = ПроверкаРолейНаДоступ(ЗапретДоступаКСтороннимПодсистемам, ПодсистемыБСП, СторонниеПодсистемы);
	Ошибки.ДругиеПодсистемыБСП = ПроверкаРолейНаДоступ(ЗапретДоступаКДругимПодсистемамБСП, ПодсистемыБСП, ПодсистемыБСП, "БСП");
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция РолиИсключения()
	
	СтруктураИсключений = Новый Структура;
	СтруктураИсключений.Вставить("ЗапретДоступаКСтороннимПодсистемам", Новый Массив);
	СтруктураИсключений.Вставить("ЗапретДоступаКДругимПодсистемамБСП", Новый Массив);
	
	СтруктураИсключений.ЗапретДоступаКСтороннимПодсистемам.Добавить("ПолныеПрава");
	СтруктураИсключений.ЗапретДоступаКСтороннимПодсистемам.Добавить("АдминистраторСистемы");
	СтруктураИсключений.ЗапретДоступаКСтороннимПодсистемам.Добавить("УдаленныйДоступOData");
	
	СтруктураИсключений.ЗапретДоступаКДругимПодсистемамБСП.Добавить("ПолныеПрава");
	СтруктураИсключений.ЗапретДоступаКДругимПодсистемамБСП.Добавить("АдминистраторСистемы");
	СтруктураИсключений.ЗапретДоступаКДругимПодсистемамБСП.Добавить("УдаленныйДоступOData");
	СтруктураИсключений.ЗапретДоступаКДругимПодсистемамБСП.Добавить("БазовыеПраваБСП");
	СтруктураИсключений.ЗапретДоступаКДругимПодсистемамБСП.Добавить("БазовыеПраваВнешнихПользователейБСП");
	
	Возврат СтруктураИсключений;
	
КонецФункции

&НаСервере
Функция ВсеПодсистемы()
	
	СтруктураПодсистем = Новый Структура;
	СтруктураПодсистем.Вставить("СторонниеПодсистемы", Новый Массив);
	СтруктураПодсистем.Вставить("ПодсистемыБСП"      , Новый Массив);
	
	Подсистемы            = Метаданные.Подсистемы;
	СтандартныеПодсистемы = Подсистемы.СтандартныеПодсистемы;
	МассивПодсистем       = Новый Массив;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		ЗаполнитьМассивПодчиненныхПодсистем(Подсистема, МассивПодсистем);
		
	КонецЦикла;
	
	Для Каждого Подсистема Из МассивПодсистем Цикл
		
		РодительПодсистемы = РодительПодсистемы(Подсистема);
		
		Если РодительПодсистемы = СтандартныеПодсистемы Тогда
			СтруктураПодсистем.ПодсистемыБСП.Добавить(Подсистема);
		Иначе
			СтруктураПодсистем.СторонниеПодсистемы.Добавить(Подсистема);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПодсистем;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМассивПодчиненныхПодсистем(Подсистема, МассивПодсистем)
	
	Если МассивПодсистем.Найти(Подсистема) = Неопределено Тогда
		МассивПодсистем.Добавить(Подсистема);
	КонецЕсли;
	
	Подсистемы = Подсистема.Подсистемы;
	
	Для Каждого ВнутренняяПодсистема Из Подсистемы Цикл
		ЗаполнитьМассивПодчиненныхПодсистем(ВнутренняяПодсистема, МассивПодсистем);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РодительПодсистемы(Подсистема)
	
	Родитель = Подсистема.Родитель();
	Если Родитель.Родитель() = Неопределено Тогда
		Возврат Подсистема;
	Иначе
		Возврат РодительПодсистемы(Родитель);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РолиПодсистемы(Подсистема)
	
	МассивРолиПодсистемы = Новый Массив;
	СоставПодсистемы     = Подсистема.Состав;
	
	Для Каждого ЭлементСостава Из СоставПодсистемы Цикл
		Если ЭтоРоль(ЭлементСостава) Тогда
			МассивРолиПодсистемы.Добавить(ЭлементСостава);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРолиПодсистемы;
	
КонецФункции

&НаСервере
Функция ПроверкаРолейНаДоступ(РолиИсключения, ПодсистемыБСП, СторонниеПодсистемы, РазделДоступаСтрокой = "")
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Для Каждого ПодсистемаБСП Из ПодсистемыБСП Цикл
		
		РолиПодсистемы = РолиПодсистемы(ПодсистемаБСП);
		
		Для Каждого РольПодсистемы Из РолиПодсистемы Цикл
			
			Если РолиИсключения.Найти(РольПодсистемы.Имя) = Неопределено Тогда
				
				СтрокаОшибки = НесанкционированныйДоступРоли(РольПодсистемы.Имя, ПодсистемаБСП, ПодсистемыБСП, СторонниеПодсистемы,
					РазделДоступаСтрокой);
					
				Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
					СписокОшибочныхОбъектов.Добавить(СтрокаОшибки, РольПодсистемы.ПолноеИмя());
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ОбъектВходитВСоставПодсистемы(Подсистема, ПолноеИмя)
	ПодсистемыОбъекта = СоответствиеОбъектовИПодсистем[ПолноеИмя];
	Если ПодсистемыОбъекта = Неопределено Тогда
		Если Подсистема.ПолноеИмя() = ПолноеИмя Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат ПодсистемыОбъекта.Найти(Подсистема) <> Неопределено;
КонецФункции

&НаСервере
Функция ОбъектВходитВСоставСтандартныхПодсистем(ПодсистемыБСП, ОбъектРоли)
	
	ОбъектВходитВСостав = Ложь;
	
	Для Каждого ПодсистемаБСП Из ПодсистемыБСП Цикл
		Если ОбъектВходитВСоставПодсистемы(ПодсистемаБСП, ОбъектРоли) Тогда
			ОбъектВходитВСостав = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектВходитВСостав;
	
КонецФункции

&НаСервере
Функция НесанкционированныйДоступРоли(Роль, ПроверяемаяПодсистема, ПодсистемыБСП, СторонниеПодсистемы, РазделДоступаСтрокой = "")
	
	СтрокаОшибки   = "";
	СписокОбъектов = "";
	
	ОбъектыРоли  = ОбъектыРоли(Роль);
	
	Для Каждого ТекущаяПодсистема Из СторонниеПодсистемы Цикл
		
		Для Каждого ОбъектРолиКлючИЗначение Из ОбъектыРоли Цикл
			ОбъектРоли = ОбъектРолиКлючИЗначение.Ключ;
			
			Если РазделДоступаСтрокой = "БСП" Тогда
				
				Если ОбъектВходитВСоставПодсистемы(ТекущаяПодсистема, ОбъектРоли)
					И Не ОбъектВходитВСоставПодсистемы(ПроверяемаяПодсистема, ОбъектРоли)
					И ТекущаяПодсистема.ПолноеИмя() <> ПроверяемаяПодсистема.ПолноеИмя() Тогда
					
					СписокОбъектов = СписокОбъектов + ?(ЗначениеЗаполнено(СписокОбъектов), Символы.ПС + "- ", "- ")
						+ ПереводПолногоИмениОбъектаНаРусскийЯзык(ОбъектРоли)
						+ " (" + СтрЗаменить(ТекущаяПодсистема.ПолноеИмя(), "Подсистема.", "") + ")";
						
				КонецЕсли;
				
			Иначе
				
				Если ОбъектВходитВСоставПодсистемы(ТекущаяПодсистема, ОбъектРоли)
					И Не ОбъектВходитВСоставСтандартныхПодсистем(ПодсистемыБСП, ОбъектРоли) Тогда
					
					СписокОбъектов = СписокОбъектов + ?(ЗначениеЗаполнено(СписокОбъектов), Символы.ПС + "- ", "- ")
						+ ПереводПолногоИмениОбъектаНаРусскийЯзык(ОбъектРоли)
						+ " (" + СтрЗаменить(ТекущаяПодсистема.ПолноеИмя(), "Подсистема.", "") + ")";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СписокОбъектов) Тогда
		ШаблонОшибки = НСтр("ru = 'Роль:
			|- %1 (%2)
			|Дает права на объекты:
			|%3'");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			Роль, СтрЗаменить(ПроверяемаяПодсистема.ПолноеИмя(), "Подсистема.", ""), СписокОбъектов);
	КонецЕсли;
	
	Возврат СтрокаОшибки;
	
КонецФункции

&НаСервере
Функция ЭтоРоль(ОбъектМетаданных)
	
	Возврат Метаданные.Роли.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
Функция ОбъектыРоли(ИмяРоли)
	
	Разделитель = ПолучитьРазделительПути();
	ОбъектыРоли = Новый Соответствие;
	
	ПутьДоРоли = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2Roles%2%3%2Ext%2Rights.xml",
		КаталогВыгрузкиМодулей, Разделитель, ИмяРоли);
	
	ДокументDOM = ДокументDOM(ПутьДоРоли);
	Узлы        = ДокументDOM.ПолучитьЭлементыПоИмени("Object");
	СоответствиеРусскихИАнглийскихИмен = СоответствиеРусскихИАнглийскихИмен();
	Для Каждого Узел Из Узлы Цикл
		ОбъектЧастями = СтрРазделить(Узел.ПервыйДочерний.ТекстовоеСодержимое, ".");
		Если СтрНайти(Узел.ПервыйДочерний.ТекстовоеСодержимое, "Subsystem") Тогда
			НовыйОбъектЧастями = Новый Массив;
			Для Каждого ЧастьОбъекта Из ОбъектЧастями Цикл
				ЧастьОбъектаПоРусски = СоответствиеРусскихИАнглийскихИмен[ЧастьОбъекта];
				Если ЧастьОбъектаПоРусски <> Неопределено Тогда
					НовыйОбъектЧастями.Добавить(ЧастьОбъектаПоРусски);
				Иначе
					НовыйОбъектЧастями.Добавить(ЧастьОбъекта);
				КонецЕсли;
			КонецЦикла;
			ПолноеИмяОбъекта = СтрСоединить(НовыйОбъектЧастями, ".");
		Иначе
			Если ОбъектЧастями.Количество() > 2 Тогда
				// Проверяем права только на объекты.
				Продолжить;
			КонецЕсли;
			ПолноеИмяОбъекта = СоответствиеРусскихИАнглийскихИмен[ОбъектЧастями[0]] + "." + ОбъектЧастями[1];
		КонецЕсли;
		
		ОбъектыРоли.Вставить(ПолноеИмяОбъекта);
	КонецЦикла;
	
	Возврат ОбъектыРоли;
	
КонецФункции

&НаСервере
Функция ПереводПолногоИмениОбъектаНаРусскийЯзык(Знач ОбъектПеревода)
	
	ПереведенныйОбъект                 = "";
	СоответствиеРусскихИАнглийскихИмен = СоответствиеРусскихИАнглийскихИмен();
	ОбъектПеревода                     = СтрРазделить(ОбъектПеревода, ".");
	
	Для Каждого ЧастьПутиПреобразованная Из ОбъектПеревода Цикл
		ПереводЧасти       = СоответствиеРусскихИАнглийскихИмен[ЧастьПутиПреобразованная];
		ПереведенныйОбъект = ПереведенныйОбъект + ?(ЗначениеЗаполнено(ПереведенныйОбъект), ".", "")
			+ ?(ПереводЧасти = Неопределено, ЧастьПутиПреобразованная, ПереводЧасти);
	КонецЦикла;
	
	Возврат ПереведенныйОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПринадлежностьОбъектовПодсистемам(ПодсистемаПервогоУровня = Неопределено, ПодсистемаРодитель = Неопределено)
	
	Подсистемы = ?(ПодсистемаРодитель = Неопределено,
		?(ПодсистемаПервогоУровня = Неопределено,
			Метаданные,
			ПодсистемаПервогоУровня),
		ПодсистемаРодитель);
	
	Если СоответствиеОбъектовИПодсистем = Неопределено Тогда
		СоответствиеОбъектовИПодсистем = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Подсистема Из Подсистемы.Подсистемы Цикл
		Для Каждого ОбъектПодсистемы Из Подсистема.Состав Цикл
			ПодсистемыОбъекта = СоответствиеОбъектовИПодсистем[ОбъектПодсистемы.ПолноеИмя()];
			Если ПодсистемыОбъекта = Неопределено Тогда
				ПодсистемыОбъекта = Новый Массив;
			ИначеЕсли ПодсистемыОбъекта.Найти(Подсистема) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПодсистемыОбъекта.Добавить(Подсистема);
			СоответствиеОбъектовИПодсистем.Вставить(ОбъектПодсистемы.ПолноеИмя(), ПодсистемыОбъекта);
		КонецЦикла;
		
		ЗаполнитьПринадлежностьОбъектовПодсистемам(ПодсистемаПервогоУровня, Подсистема);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПраваПросмотрПодсистемКомандногоИнтерфейса()
	
	ОшибочныеОбъекты = Новый СписокЗначений;
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс Или СтрНайти(Подсистема.Имя, "_Демо") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРоли = "Подсистема" + Подсистема.Имя;
		ПроверитьПодсистемыИхДочерние(Подсистема, ИмяРоли, ОшибочныеОбъекты)
	КонецЦикла;
	
	Возврат ОшибочныеОбъекты;
	
КонецФункции

&НаСервере
Процедура ПроверитьПодсистемыИхДочерние(Подсистема, ИмяРоли, ОшибочныеОбъекты)
	
	Если Не ПравоДоступа("Просмотр", Подсистема, Метаданные.Роли[ИмяРоли]) Тогда
		Описание = НСтр("ru = 'У подсистемы ""%1"" нет права ""Просмотр"" в роли ""%2""'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Подсистема.Имя, ИмяРоли);
		ОшибочныеОбъекты.Добавить(Описание, Подсистема.ПолноеИмя());
	КонецЕсли;
	
	Для Каждого ДочерняяПодсистема Из Подсистема.Подсистемы Цикл
		ПроверитьПодсистемыИхДочерние(ДочерняяПодсистема, ИмяРоли, ОшибочныеОбъекты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОшибкиУсловныхВызовов(ФайлМодуля, Знач СтрокаТекста, Ошибки, СписокИспользуемыхПодсистем, СтрокаУсловногоВызова)
	
	ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлМодуля.ПолноеИмя, ФайлМодуля.Имя);
	
	Если ПолноеИмяСтруктура.ИмяОбъекта = "ОбщегоНазначенияКлиентСервер"
		Или ПолноеИмяСтруктура.ИмяОбъекта = "ПроверкаБСППередСборкой"
		Или ПолноеИмяСтруктура.ИмяОбъекта = "ЗависимостиПодсистем" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Пока Истина Цикл
		
		ПозицияНачалаУсловногоВызова = СтрНайти(СтрокаТекста, СтрокаУсловногоВызова);
		
		Если ПозицияНачалаУсловногоВызова = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - ПозицияНачалаУсловногоВызова + 1);
		ПозицияОкончанияУсловногоВызова = СтрНайти(ТекущаяСтрокаТекста, """)");
		Если ПозицияОкончанияУсловногоВызова = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УсловныйВызов = Сред(ТекущаяСтрокаТекста, 0, ПозицияОкончанияУсловногоВызова + 2);
		УсловныйВызов = СокрЛП(УсловныйВызов);
		Если СтрНайти(УсловныйВызов, "ИнтернетПоддержкаПользователей") > 0
			Или СтрНайти(УсловныйВызов, "ТехнологияСервиса") > 0 Тогда
			СтрокаТекста = Прав(ТекущаяСтрокаТекста, СтрДлина(ТекущаяСтрокаТекста) - ПозицияОкончанияУсловногоВызова + 1);
			Продолжить;
		КонецЕсли;
		
		Если Не ИмяПодсистемыЗаданоКорректно(УсловныйВызов, СписокИспользуемыхПодсистем) Тогда
			
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = НСтр("ru = '%1: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолноеИмяСтруктура.ПолноеИмяМодуля, УсловныйВызов);
			Иначе
				ТекстСообщения = УсловныйВызов;
			КонецЕсли;
			
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяСтруктура.ПолноеИмяОбъекта);
			
		КонецЕсли;
		
		СтрокаТекста = Прав(ТекущаяСтрокаТекста, СтрДлина(ТекущаяСтрокаТекста) - ПозицияОкончанияУсловногоВызова + 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяПодсистемыЗаданоКорректно(УсловныйВызов, СписокИспользуемыхПодсистем)
	
	ИмяЗаданоКорректно = Ложь;
	
	Если СтрНайти(УсловныйВызов, "ЭлектронноеВзаимодействие") > 0
		Или СтрНайти(УсловныйВызов, "РегламентированнаяОтчетность") > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ИспользуемаяПодсистема Из СписокИспользуемыхПодсистем Цикл
		
		Если СтрНайти(УсловныйВызов, """" +  ИспользуемаяПодсистема + """") > 0 Тогда
			ИмяЗаданоКорректно = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяЗаданоКорректно;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуПоПринадлежностиОбъектов()
	СписокОбъектовПодсистем = ОбъектыПодсистем();
	
	// Возьмем только список объектов метаданных, представленных в подсистемах.
	СписокТиповМетаданных = ТипыМетаданныхДляПроверки();
	
	// не будем проверять:
	УдалитьИзСписка(СписокТиповМетаданных,"ФункциональныеОпции");
	УдалитьИзСписка(СписокТиповМетаданных,"ПараметрыФункциональныхОпций");
	УдалитьИзСписка(СписокТиповМетаданных,"Языки");
	
	НеПодчиненныеОбъекты = Новый СписокЗначений;
	ИзбыточноПодчиненныеОбъекты = Новый СписокЗначений;
	
	Для Каждого ТипМетаданныхВСписке Из СписокТиповМетаданных Цикл
		ТипМетаданных = ТипМетаданныхВСписке.Значение;
		Для Каждого ОбъектМетаданныхЗаданногоТипа Из Метаданные[ТипМетаданных] Цикл
			// пропускаем демо-объекты
			Если Не ЭтоПоставляемыйОбъект(ОбъектМетаданныхЗаданногоТипа, ТипМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоОбъектНеДемоРасширения(ОбъектМетаданныхЗаданногоТипа) Тогда
				// Проверяются только демо-расширения.
				Продолжить;
			КонецЕсли;
			
			// Ищем объекты, которые не подчинены ни одной подсистеме.
			ПараметрыОтбора = Новый Структура("Объект",ОбъектМетаданныхЗаданногоТипа);
			ПодчиненияПодсистемам = СписокОбъектовПодсистем.НайтиСтроки(ПараметрыОтбора);
			Если ПодчиненияПодсистемам.Количество() = 0 И ОбъектМетаданныхЗаданногоТипа.РасширениеКонфигурации() = Неопределено Тогда
				СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 : %2", Строка(ТипМетаданных), ОбъектМетаданныхЗаданногоТипа.Имя);
				НеПодчиненныеОбъекты.Добавить(СтрокаНаименования, ОбъектМетаданныхЗаданногоТипа.ПолноеИмя());
			КонецЕсли;
			
			// Ищем объекты, которые подчинены более чем одной подсистеме.
			Если ПодчиненияПодсистемам.Количество() > 0 Тогда
				ЧислоПоставляемыхПодсистем = 0;
				Для Каждого РодительскаяПодсистема Из ПодчиненияПодсистемам Цикл
					Если ЭтоПоставляемаяПодсистема(РодительскаяПодсистема.Подсистема) Тогда
						ЧислоПоставляемыхПодсистем = ЧислоПоставляемыхПодсистем + 1;
					КонецЕсли;
				КонецЦикла;
				Если ЧислоПоставляемыхПодсистем > 1 Тогда
					СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 : %2", Строка(ТипМетаданных), ОбъектМетаданныхЗаданногоТипа.Имя);
					ИзбыточноПодчиненныеОбъекты.Добавить(СтрокаНаименования, ОбъектМетаданныхЗаданногоТипа.ПолноеИмя());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("НеПодчиненныеОбъекты,ИзбыточноПодчиненныеОбъекты", 
		НеПодчиненныеОбъекты, ИзбыточноПодчиненныеОбъекты);
	
КонецФункции

// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных
//   ТипМетаданных - Произвольный
// Возвращаемое значение:
//   Булево
//
&НаСервере
Функция ЭтоПоставляемыйОбъект(ОбъектМетаданных, ТипМетаданных)
	
	Если ТипМетаданных = "ПараметрыСеанса" Тогда
		ИсключениеПроверки = (СтрНайти(ОбъектМетаданных.Имя, "_Демо") > 0);
	Иначе
		ИсключениеПроверки = (Лев(ОбъектМетаданных.Имя, 5) =  "_Демо");
	КонецЕсли;
	
	Возврат НЕ ИсключениеПроверки;
КонецФункции

&НаСервере
Процедура УдалитьИзСписка(Список, ИмяОбъекта)
	УдаляемоеЗначение = Список.НайтиПоЗначению(ИмяОбъекта);
	Если УдаляемоеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Список.Удалить(УдаляемоеЗначение);
КонецПроцедуры

&НаСервере 
Функция ЭтоПоставляемаяПодсистема(ПодсистемаПроверки)
	ПоставляемаяПодсистема = Метаданные.Подсистемы.СтандартныеПодсистемы;
	Возврат ПодсистемаПроверки = ПоставляемаяПодсистема
		ИЛИ ПодсистемаПроверки.Родитель() = ПоставляемаяПодсистема
		ИЛИ ПодсистемаПроверки.Родитель().Родитель() = ПоставляемаяПодсистема;
КонецФункции

&НаСервере
Функция СписокИспользуемыхПодсистем(ТолькоСтандартныеПодсистемы = Истина)
	
	Результат = Новый Массив;
	СтандартныеПодсистемы = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если СтандартныеПодсистемы <> Неопределено Тогда
		СписокПодсистем = СтандартныеПодсистемы.Подсистемы;
		ДобавитьПодсистемы(Результат, СписокПодсистем, "", "СтандартныеПодсистемы.");
	КонецЕсли;
	
	Если Не ТолькоСтандартныеПодсистемы Тогда
		МетаданныеТехнологияСервиса = Метаданные.Подсистемы.Найти("ТехнологияСервиса");
		Если МетаданныеТехнологияСервиса <> Неопределено Тогда
			СписокПодсистем = МетаданныеТехнологияСервиса.Подсистемы;
			ДобавитьПодсистемы(Результат, СписокПодсистем, "", "ТехнологияСервиса.");
		КонецЕсли;
		
		МетаданныеИнтернетПоддержкаПользователей = Метаданные.Подсистемы.Найти("ИнтернетПоддержкаПользователей");
		Если МетаданныеИнтернетПоддержкаПользователей <> Неопределено Тогда
			СписокПодсистем = МетаданныеИнтернетПоддержкаПользователей.Подсистемы;
			ДобавитьПодсистемы(Результат, СписокПодсистем, "", "ИнтернетПоддержкаПользователей.");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПодсистемаИсключение Из ВнедряемыеПодсистемы() Цикл
		Результат.Добавить(ПодсистемаИсключение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПодсистемы(СписокПодсистем, ВложенныеПодсистемы, ПутьКПодсистеме, Префикс)
	
	Если ВложенныеПодсистемы.Количество() > 0 Тогда 
		Для Каждого Подсистема Из ВложенныеПодсистемы Цикл
			РезервныйПуть = ПутьКПодсистеме;
			ПутьКПодсистеме = ПутьКПодсистеме + "." + Строка(Подсистема.Имя);
			ДобавитьПодсистемы(СписокПодсистем, Подсистема.Подсистемы, ПутьКПодсистеме, Префикс);
			СписокПодсистем.Добавить(Префикс + Сред(ПутьКПодсистеме, 2));
			ПутьКПодсистеме = РезервныйПуть;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВнедряемыеПодсистемы()
	
	Исключения = Новый Массив;
	Исключения.Добавить("СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи");
	Исключения.Добавить("СтандартныеПодсистемы.РезервноеКопированиеОбластейДанныхМС");
	
	Возврат Исключения;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьОшибкиКомментариев(ФайлМодуля, ИмяПодсистемы, Знач СтрокаТекста, Ошибки)
	
	НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста, ИмяПодсистемы);
	Пока НачалоФрагмента > 0 Цикл
		
		ПозицияКонцаФрагмента = НайтиКонецФрагмента(СтрокаТекста, ИмяПодсистемы);
		Если ПозицияКонцаФрагмента = 0 Тогда
			ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлМодуля.ПолноеИмя, ФайлМодуля.Имя);
			Если ЭтоИсключение(ПолноеИмяСтруктура.ПолноеИмяОбъекта) Тогда
				Возврат;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: для открывающей скобки [НачалоФрагмента] не обнаружена закрывающая скобка.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ПолноеИмяСтруктура.ПолноеИмяМодуля);
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяСтруктура.ПолноеИмяОбъекта);
			Возврат;
		КонецЕсли;
		
		Если ПозицияКонцаФрагмента < НачалоФрагмента Тогда
			ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлМодуля.ПолноеИмя, ФайлМодуля.Имя);
			Если ЭтоИсключение(ПолноеИмяСтруктура.ПолноеИмяОбъекта) Тогда
				Возврат;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: для открывающей скобки [НачалоФрагмента] закрывающая скобка расположена выше по тексту.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ПолноеИмяСтруктура.ПолноеИмяМодуля);
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяСтруктура.ПолноеИмяОбъекта);
			Возврат;
		КонецЕсли;
		
		ДлинаНачалаФрагмента = СтрДлина("// " + ИмяПодсистемы);
		ПромежуточнаяСтрока = Сред(СтрокаТекста, НачалоФрагмента + ДлинаНачалаФрагмента + 1, ПозицияКонцаФрагмента - (НачалоФрагмента + ДлинаНачалаФрагмента) + 1);
		Если НайтиНачалоФрагмента(ПромежуточнаяСтрока, ИмяПодсистемы) > 0 Тогда 
			ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлМодуля.ПолноеИмя, ФайлМодуля.Имя);
			Если ЭтоИсключение(ПолноеИмяСтруктура.ПолноеИмяОбъекта) Тогда
				Возврат;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = '[ИмяФайлаМодуля]: внутри открывающейся скобки [НачалоФрагмента] есть еще одна открывающаяся скобка, до закрывающейся. Фрагмент кода: [ФрагментКода]'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", "// " + ИмяПодсистемы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ПолноеИмяСтруктура.ПолноеИмяМодуля);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ФрагментКода]", Лев(ПромежуточнаяСтрока, 200));
			Ошибки.Добавить(ТекстСообщения, ПолноеИмяСтруктура.ПолноеИмяОбъекта);
			Возврат;
		КонецЕсли;
		
		ПозицияПоследнегоСимвола = ПозицияКонцаФрагмента + СтрДлина("// Конец " + ИмяПодсистемы);
		СтрокаТекста = Сред(СтрокаТекста, ПозицияПоследнегоСимвола);
		
		НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста, ИмяПодсистемы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиНачалоФрагмента(Знач СтрокаТекста, Знач ИмяПодсистемы)
	
	СтрокаТекста  = НРег(СтрокаТекста);
	ИмяПодсистемы = НРег(ИмяПодсистемы);
	
	ПервыйВариант = "// " + ИмяПодсистемы;
	ВторойВариант = "//" + ИмяПодсистемы;
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда
			Возврат Итерация;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			Возврат Итерация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Функция НайтиКонецФрагмента(Знач СтрокаТекста, Знач ИмяПодсистемы)
	
	СтрокаТекста  = НРег(СтрокаТекста);
	ИмяПодсистемы = НРег(ИмяПодсистемы);
	
	ПервыйВариант = "// конец " + ИмяПодсистемы;
	ВторойВариант = "//конец " + ИмяПодсистемы;
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
			Возврат Итерация;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			Возврат Итерация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ПроверкаПравРолей(ТипПроверки, НазваниеРоли)
	
	СтруктураПрав = ПраваОбъектовМетаданных();
	
	НеверноЗаполненныеРоли = Новый СписокЗначений;
	
	// Проверка прав на планы обмена.
	Для Каждого Элемент Из Метаданные.ПланыОбмена Цикл
		
		ИмяОбъектаМетаданных = "ПланыОбмена";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.ПланыОбмена, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на константы.
	Для Каждого Элемент Из Метаданные.Константы Цикл
		
		ИмяОбъектаМетаданных = "Константы";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Константы, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на справочники.
	Для Каждого Элемент Из Метаданные.Справочники Цикл
		
		ИмяОбъектаМетаданных = "Справочники";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Справочники, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на документы.
	Для Каждого Элемент Из Метаданные.Документы Цикл
		
		ИмяОбъектаМетаданных = "Документы";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Документы, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на планы видов характеристик.
	Для Каждого Элемент Из Метаданные.ПланыВидовХарактеристик Цикл
		
		ИмяОбъектаМетаданных = "ПланыВидовХарактеристик";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.ПланыВидовХарактеристик, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на регистры сведений.
	Для Каждого Элемент Из Метаданные.РегистрыСведений Цикл
		
		ИмяОбъектаМетаданных = "РегистрыСведений";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.РегистрыСведений, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на регистры накопления.
	Для Каждого Элемент Из Метаданные.РегистрыНакопления Цикл
		
		ИмяОбъектаМетаданных = "РегистрыНакопления";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.РегистрыНакопления, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на бизнес-процессы.
	Для Каждого Элемент Из Метаданные.БизнесПроцессы Цикл
		
		ИмяОбъектаМетаданных = "БизнесПроцессы";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.БизнесПроцессы, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	// Проверка прав на задачи
	Для Каждого Элемент Из Метаданные.Задачи Цикл
		
		ИмяОбъектаМетаданных = "Задачи";
		НеверноЗаполненныеРоли = ПроверкаРоли(
			Элемент, СтруктураПрав.Задачи, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных);
		
	КонецЦикла;
	
	Возврат НеверноЗаполненныеРоли;
	
КонецФункции

&НаСервере
Функция ПроверкаРоли(ОбъектМД, СписокПрав, НеверноЗаполненныеРоли, ТипПроверки, НазваниеРоли, ИмяОбъектаМетаданных)
	
	ЭлементСоставаОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(ОбъектМД);
	ЭлементСоставаОбщегоВспомогательногоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхВспомогательныеДанные.Состав.Найти(ОбъектМД);
	
	ПолноеИмяОбъекта = ЭлементСоставаОбщегоРеквизита.Метаданные.ПолноеИмя();
	
	Если СписокИсключений.НайтиПоЗначению(ЭлементСоставаОбщегоРеквизита.Метаданные.Имя) <> Неопределено Тогда
		Возврат НеверноЗаполненныеРоли;
	КонецЕсли;
	
	Если ТипПроверки = "ИнтерактивноеУдаление" Тогда
		
		Если СписокПрав.НайтиПоЗначению("ИнтерактивноеУдаление") = Неопределено Тогда
			Возврат НеверноЗаполненныеРоли;
		КонецЕсли;
		
		Для Каждого ЭлементРоль Из Метаданные.Роли Цикл
			ДоступКОбъектуУстановлен = ПравоДоступа(
				"ИнтерактивноеУдаление", ЭлементСоставаОбщегоРеквизита.Метаданные, ЭлементРоль);
				
			Если ДоступКОбъектуУстановлен Тогда
				СтрокаОшибки = НСтр("ru = 'Роль %1, объект %2.%3'");
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки,
					                     ЭлементРоль.Имя,
					                     ИмяОбъектаМетаданных,
					                     ЭлементСоставаОбщегоРеквизита.Метаданные.Имя);
				НеверноЗаполненныеРоли.Добавить(СтрокаОшибки, ПолноеИмяОбъекта);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Элемент Из СписокПрав Цикл
			
			Если Элемент.Значение = "ИнтерактивноеУдаление" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НазваниеРоли = "АдминистраторСистемы" Тогда
				ДоступКОбъектуУстановлен = ПравоДоступа(
					Элемент.Значение, ЭлементСоставаОбщегоРеквизита.Метаданные, Метаданные.Роли.АдминистраторСистемы);
			ИначеЕсли НазваниеРоли = "ПолныеПрава" Тогда
				ДоступКОбъектуУстановлен = ПравоДоступа(
					Элемент.Значение, ЭлементСоставаОбщегоРеквизита.Метаданные, Метаданные.Роли.ПолныеПрава);
			КонецЕсли;
			
			Если ТипПроверки = "ПраваРазделенныхОМД" Тогда
				
				Если НазваниеРоли = "АдминистраторСистемы" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто Тогда
						
						Если ДоступКОбъектуУстановлен Тогда
							НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НазваниеРоли = "ПолныеПрава" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
						И Не ДоступКОбъектуУстановлен Тогда
						НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипПроверки = "ПраваНеразделенныхОМД" Тогда
				
				Если НазваниеРоли = "АдминистраторСистемы" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
						ВспомогательныеДанные = (ЭлементСоставаОбщегоВспомогательногоРеквизита.Использование =
							                     Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать);
						
						Если Не ДоступКОбъектуУстановлен И Не ВспомогательныеДанные Тогда
							
							НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НазваниеРоли = "ПолныеПрава" Тогда
					
					Если ЭлементСоставаОбщегоРеквизита.Использование = 
							Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
							
						Если Элемент.Значение = "Чтение"
							Или Элемент.Значение = "Просмотр"
							Или Элемент.Значение = "ВводПоСтроке" Тогда
							Продолжить;
						ИначеЕсли ДоступКОбъектуУстановлен Тогда
							НеверноЗаполненныеРоли.Добавить(ИмяОбъектаМетаданных + "." + ЭлементСоставаОбщегоРеквизита.Метаданные.Имя, ПолноеИмяОбъекта);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НеверноЗаполненныеРоли;
	
КонецФункции

&НаСервере
Функция ПраваОбъектовМетаданных()
	
	СтруктураПрав = Новый Структура;
	
	// Планы обмена
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("ПланыОбмена", СписокПрав);
	
	// Константы
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("Редактирование");
	СтруктураПрав.Вставить("Константы", СписокПрав);
	
	// Справочники
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("Справочники", СписокПрав);
	
	// Документы
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Проведение");
	СписокПрав.Добавить("ОтменаПроведения");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ИнтерактивноеПроведение");
	СписокПрав.Добавить("ИнтерактивноеПроведениеНеОперативное");
	СписокПрав.Добавить("ИнтерактивнаяОтменаПроведения");
	СписокПрав.Добавить("ИнтерактивноеИзменениеПроведенных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("Документы", СписокПрав);
	
	// Планы видов характеристик
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СтруктураПрав.Вставить("ПланыВидовХарактеристик", СписокПрав);
	
	// Регистры сведений
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("Редактирование");
	СтруктураПрав.Вставить("РегистрыСведений", СписокПрав);
	
	// Регистры накопления
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("УправлениеИтогами");
	СтруктураПрав.Вставить("РегистрыНакопления", СписокПрав);
	
	// Бизнес-процессы
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СписокПрав.Добавить("ИнтерактивнаяАктивация");
	СписокПрав.Добавить("Старт");
	СписокПрав.Добавить("ИнтерактивныйСтарт");
	СтруктураПрав.Вставить("БизнесПроцессы", СписокПрав);
	
	// Задачи
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивноеУдаление");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ВводПоСтроке");
	СписокПрав.Добавить("ИнтерактивнаяАктивация");
	СписокПрав.Добавить("Выполнение");
	СписокПрав.Добавить("ИнтерактивноеВыполнение");
	СтруктураПрав.Вставить("Задачи", СписокПрав);
	
	Возврат СтруктураПрав;
КонецФункции

&НаСервере
Функция НекорректныеСвязиМеждуПодсистемами()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	ПолныеИменаПодсистем    = ПолныеИменаПодсистем();
	
	НекорректныеСвязи = 
		Отчеты.ЗависимостиПодсистем.НекорректныеЗависимостиПодсистемБСП(КаталогВыгрузкиМодулей);
		
	КопияТаблицы = НекорректныеСвязи.Скопировать();
	КопияТаблицы.Свернуть("ВызывающаяПодсистема");
	Для Каждого СтрокаВызывающаяПодсистема Из КопияТаблицы Цикл
		
		ПараметрыОтбора = Новый Структура("ВызывающаяПодсистема", СтрокаВызывающаяПодсистема.ВызывающаяПодсистема);
		НайденныеСтроки = НекорректныеСвязи.НайтиСтроки(ПараметрыОтбора);
		СформированнаяСтрока = "";
		ТекущаяВызываемаяПодсистема = "";
		НомерСтроки = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СформированнаяСтрока = ""
				Или ТекущаяВызываемаяПодсистема <> НайденнаяСтрока.ВызываемаяПодсистема Тогда
				
				Если ЗначениеЗаполнено(СформированнаяСтрока) Тогда
					Если СтрокаВызывающаяПодсистема.ВызывающаяПодсистема = "ИнструментыРазработчика" Тогда
						СписокОшибочныхОбъектов.Добавить(СформированнаяСтрока, ПолныеИменаПодсистем[ТекущаяВызываемаяПодсистема]);
					Иначе
						СписокОшибочныхОбъектов.Добавить(СформированнаяСтрока, ПолныеИменаПодсистем[СтрокаВызывающаяПодсистема.ВызывающаяПодсистема]);
					КонецЕсли;
					СформированнаяСтрока = "";
				КонецЕсли;
				
				Если ТекущаяВызываемаяПодсистема <> ""
					И СформированнаяСтрока <> "" Тогда
					СформированнаяСтрока = СформированнаяСтрока + Символы.ПС;
				КонецЕсли;
				
				ТекущаяВызываемаяПодсистема = НайденнаяСтрока.ВызываемаяПодсистема;
				НомерСтроки = 0;
				СформированнаяСтрока = СформированнаяСтрока
				                       + НайденнаяСтрока.ВызывающаяПодсистема + " -> "
				                       + НайденнаяСтрока.ВызываемаяПодсистема + Символы.ПС;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
			СформированнаяСтрока = СформированнаяСтрока + Символы.Таб + НомерСтроки + ". "
			                       + НайденнаяСтрока.ВызывающийОбъект + " ("
			                       + НайденнаяСтрока.МестоВызова + ")";
			СформированнаяСтрока = СформированнаяСтрока
			                       + ?(НайденнаяСтрока.ВызываемыйОбъект <> "", " -> " + НайденнаяСтрока.ВызываемыйОбъект, "") + Символы.ПС;
		КонецЦикла;
		
		СформированнаяСтрока = СформированнаяСтрока + Символы.ПС;
		Если СтрокаВызывающаяПодсистема.ВызывающаяПодсистема = "ИнструментыРазработчика" Тогда
			СписокОшибочныхОбъектов.Добавить(СформированнаяСтрока, ПолныеИменаПодсистем[ТекущаяВызываемаяПодсистема]);
		Иначе
			СписокОшибочныхОбъектов.Добавить(СформированнаяСтрока, ПолныеИменаПодсистем[СтрокаВызывающаяПодсистема.ВызывающаяПодсистема]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ПолныеИменаПодсистем()
	
	Соответствие = Новый Соответствие;
	
	Для Каждого СтандартнаяПодсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Соответствие.Вставить(СтандартнаяПодсистема.Имя, СтандартнаяПодсистема.ПолноеИмя());
		Если СтандартнаяПодсистема.Имя = "РаботаВМоделиСервиса" Тогда
			// Перебор всех подсистем ВМоделиСервиса.
			Для Каждого ПодсистемаВМоделиСервиса Из СтандартнаяПодсистема.Подсистемы Цикл
				Соответствие.Вставить(ПодсистемаВМоделиСервиса.Имя, ПодсистемаВМоделиСервиса.ПолноеИмя());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПоискЗапрещенныхКомментариевВКодеМодулей(СтрокаПоиска)
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	МассивМодулей = НайтиФайлы(КаталогВыгрузкиМодулей, "*.bsl", Истина);
	ТекстФайла = Новый ТекстовыйДокумент;
	НомерСтроки = 0;
	
	Для Каждого Файл Из МассивМодулей Цикл
		
		Если СтрНайти(Файл.ПолноеИмя, "ПереходНаВерсию301") > 0 Тогда
			Продолжить; //Исключение.
		КонецЕсли;
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		СтрокаТекста = ВРег(СтрокаТекста);
		
		НомерСимвола = СтрНайти(СтрокаТекста, СтрокаПоиска);
		КомментарийНайден = (НомерСимвола > 0);
		Пока КомментарийНайден Цикл
			
			НомерСтроки = НомерСтроки(СтрокаТекста, НомерСимвола, НомерСтроки);
			ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(Файл.ПолноеИмя, Файл.Имя);
			СписокОшибочныхОбъектов.Добавить(ПолноеИмяСтруктура.ПолноеИмяМодуля + " - строка " + НомерСтроки,
				                             ПолноеИмяСтруктура.ПолноеИмяОбъекта);
			СтрокаТекста = Сред(СтрокаТекста, НомерСимвола + 4);
			
			НомерСимвола = СтрНайти(СтрокаТекста, СтрокаПоиска);
			КомментарийНайден = (НомерСимвола > 0);
			
		КонецЦикла;
		НомерСтроки = 0;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ГруппыГоризонтальнаяЕслиВозможно()
	
	СоответствиеПространстваИмен = Новый Соответствие;
	СоответствиеПространстваИмен.Вставить("ns", "http://v8.1c.ru/8.3/xcf/logform");
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространстваИмен);
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	СписокФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "Form.xml", Истина);
	
	Для Каждого ФайлФормы Из СписокФайлов Цикл
		
		ДокументDOM = ДокументDOM(ФайлФормы.ПолноеИмя);
		
		Выражение = "//ns:UsualGroup";
		РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
		
		ОбычнаяГруппа = РезультатXPath.ПолучитьСледующий();
		Пока ОбычнаяГруппа <> Неопределено Цикл
			
			ЗаданаГруппировка = Ложь;
			Для Каждого Свойство Из ОбычнаяГруппа.ДочерниеУзлы Цикл
				Если Свойство.ИмяУзла = "Group" Тогда
					ЗаданаГруппировка = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЗаданаГруппировка Тогда
				ИмяЭлемента = ОбычнаяГруппа.Атрибуты.ПолучитьИменованныйЭлемент("name").ТекстовоеСодержимое;
				ПолноеИмяСтруктура = ПолноеИмяПоИмениМодуля(ФайлФормы.ПолноеИмя, ФайлФормы.Имя);
				
				Если ЭтоОбъектБСП(ПолноеИмяСтруктура.ПолноеИмяОбъекта)
					Или СтрНачинаетсяС(ПолноеИмяСтруктура.ИмяОбъекта, "_Демо") Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 группа %2'"),
						ПолноеИмяСтруктура.ПолноеИмяМодуля, ИмяЭлемента);
					СписокОшибочныхОбъектов.Добавить(ТекстОшибки, ПолноеИмяСтруктура.ПолноеИмяОбъекта);
				КонецЕсли;
			КонецЕсли;
			
			ОбычнаяГруппа = РезультатXPath.ПолучитьСледующий();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция ЭтоОбъектБСП(ПолноеИмя)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	СтандартныеПодсистемы = Метаданные.Подсистемы.СтандартныеПодсистемы;
	
	Возврат ОбъектПринадлежитПодсистеме(СтандартныеПодсистемы, ОбъектМетаданных);
	
КонецФункции

&НаСервере
Функция ОбъектПринадлежитПодсистеме(Подсистема, ОбъектМетаданных)
	
	Если Подсистема.Состав.Содержит(ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		Если ОбъектПринадлежитПодсистеме(ПодчиненнаяПодсистема, ОбъектМетаданных) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

&НаСервере
Функция ПроцедурыСФлагомВключатьВСодержаниеСправки()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	Для Каждого Подсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Если Подсистема.ВключатьСправкуВСодержание Тогда
			СписокОшибочныхОбъектов.Добавить(Подсистема.ПолноеИмя(), Подсистема.ПолноеИмя());
		КонецЕсли;
		Для Каждого ДочерняяПодсистема Из Подсистема.Подсистемы Цикл
			Если Подсистема.ВключатьСправкуВСодержание Тогда
				СписокОшибочныхОбъектов.Добавить(ДочерняяПодсистема.ПолноеИмя(), ДочерняяПодсистема.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция НомерСтроки(СтрокаТекста, НомерСимвола, НомерСтроки)
	
	НомерСтроки = НомерСтроки + СтрЧислоВхождений(Лев(СтрокаТекста, НомерСимвола), Символы.ПС) + ?(НомерСтроки = 0, 1, 0);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаСервере
Функция ОткрытКонфигуратор()
	
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда // Конфигуратор
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция РольБСП(Роль, Подсистема = Неопределено)
	
	Если Подсистема = Неопределено Тогда
		Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы;
	КонецЕсли;
	
	Если Подсистема.Состав.Содержит(Роль) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекущаяПодсистема Из Подсистема.Подсистемы Цикл
		Если ТекущаяПодсистема.Состав.Содержит(Роль) Тогда
			Возврат Истина;
		КонецЕсли;
		Если РольБСП(Роль, ТекущаяПодсистема) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолноеИмяПоИмениМодуля(ПолныйПутьСИменем, ИмяФайлаСРасширением)
	ПутьКФорме = СтрЗаменить(ПолныйПутьСИменем, КаталогВыгрузкиМодулей + ПолучитьРазделительПути(), "");
	ИмяМодуляЧастями = СтрРазделить(ПутьКФорме, ПолучитьРазделительПути());
	
	ПолноеИмяОбъекта = "";
	ПолноеИмяМодуля  = "";
	ИмяОбъекта       = "";
	Шаг = 0;
	Для Каждого ЧастьПути Из ИмяМодуляЧастями Цикл
		Шаг = Шаг + 1;
		Если ВРег(ЧастьПути) = "EXT" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧастьПути = ИмяФайлаСРасширением Тогда
			ЧастьПути = СтрРазделить(ЧастьПути, ".")[0];
		КонецЕсли;
		
		ЧастьПутиПреобразованная = СоответствиеРусскихИАнглийскихИмен()[ЧастьПути];
		Если ЧастьПутиПреобразованная = Неопределено Тогда
			ЧастьПутиПреобразованная = ЧастьПути;
		КонецЕсли;
		
		Если Шаг < 3 Тогда
			ПолноеИмяОбъекта = ?(ПолноеИмяОбъекта = "",
				                 ЧастьПутиПреобразованная,
				                 ПолноеИмяОбъекта + "." + ЧастьПутиПреобразованная);
		КонецЕсли;
		
		Если Шаг = 2 Тогда
			ИмяОбъекта = ЧастьПути;
		КонецЕсли;
		
		ПолноеИмяМодуля = ?(ПолноеИмяМодуля = "",
			                 ЧастьПутиПреобразованная,
			                 ПолноеИмяМодуля + "." + ЧастьПутиПреобразованная);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	Результат.Вставить("ПолноеИмяМодуля", ПолноеИмяМодуля);
	Результат.Вставить("ИмяОбъекта", ИмяОбъекта);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СоответствиеРусскихИАнглийскихИмен()
	Результат = Новый Соответствие;
	
	// Виды объектов метаданных.
	Результат.Вставить("AccountingRegister", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegister", "РегистрНакопления");
	Результат.Вставить("BusinessProcess", "БизнесПроцесс");
	Результат.Вставить("CalculationRegister", "РегистрРасчета");
	Результат.Вставить("Catalog", "Справочник");
	Результат.Вставить("ChartOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroup", "ГруппаКоманд");
	Результат.Вставить("CommonAttribute", "ОбщийРеквизит");
	Результат.Вставить("CommonCommand", "ОбщаяКоманда");
	Результат.Вставить("CommonForm", "ОбщаяФорма");
	Результат.Вставить("CommonModule", "ОбщийМодуль");
	Результат.Вставить("CommonPicture", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplate", "ОбщийМакет");
	Результат.Вставить("Configuration", "Конфигурация");
	Результат.Вставить("Constant", "Константа");
	Результат.Вставить("DataProcessor", "Обработка");
	Результат.Вставить("DefinedType", "ОпределяемыйТип");
	Результат.Вставить("Document", "Документ");
	Результат.Вставить("DocumentJournal", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enum", "Перечисление");
	Результат.Вставить("EventSubscription", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlan", "ПланОбмена");
	Результат.Вставить("FilterCriterion", "КритерийОтбора");
	Результат.Вставить("FunctionalOption", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameter", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegister", "РегистрСведений");
	Результат.Вставить("Language", "Язык");
	Результат.Вставить("Report", "Отчет");
	Результат.Вставить("Role", "Роль");
	Результат.Вставить("ScheduledJob", "РегламентноеЗадание");
	Результат.Вставить("Sequence", "Последовательность");
	Результат.Вставить("SessionParameter", "ПараметрСеанса");
	Результат.Вставить("SettingsStorage", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItem", "ЭлементСтиля");
	Результат.Вставить("Subsystem", "Подсистема");
	Результат.Вставить("Task", "Задача");
	Результат.Вставить("WebService", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackage", "ПакетXDTO");
	
	// Виды объектов метаданных (во множественном числе).
	Результат.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegisters", "РегистрНакопления");
	Результат.Вставить("BusinessProcesses", "БизнесПроцесс");
	Результат.Вставить("CalculationRegisters", "РегистрРасчета");
	Результат.Вставить("Catalogs", "Справочник");
	Результат.Вставить("ChartsOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroups", "ГруппаКоманд");
	Результат.Вставить("CommonAttributes", "ОбщийРеквизит");
	Результат.Вставить("CommonCommands", "ОбщаяКоманда");
	Результат.Вставить("CommonForms", "ОбщаяФорма");
	Результат.Вставить("CommonModules", "ОбщийМодуль");
	Результат.Вставить("CommonPictures", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplates", "ОбщийМакет");
	Результат.Вставить("Configurations", "Конфигурация"); // Не используется.
	Результат.Вставить("Constants", "Константа");
	Результат.Вставить("DataProcessors", "Обработка");
	Результат.Вставить("DefinedTypes", "ОпределяемыйТип");
	Результат.Вставить("Documents", "Документ");
	Результат.Вставить("DocumentJournals", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enums", "Перечисление");
	Результат.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlans", "ПланОбмена");
	Результат.Вставить("FilterCriteria", "КритерийОтбора");
	Результат.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegisters", "РегистрСведений");
	Результат.Вставить("Languages", "Язык");
	Результат.Вставить("Reports", "Отчет");
	Результат.Вставить("Roles", "Роль");
	Результат.Вставить("ScheduledJobs", "РегламентноеЗадание");
	Результат.Вставить("Sequences", "Последовательность");
	Результат.Вставить("SessionParameters", "ПараметрСеанса");
	Результат.Вставить("SettingsStorages", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItems", "ЭлементСтиля");
	Результат.Вставить("Subsystems", "Подсистема");
	Результат.Вставить("Tasks", "Задача");
	Результат.Вставить("WebServices", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackages", "ПакетXDTO");
	
	// Типы вложенных объектов метаданных.
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Form", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Template", "Макет");
	Результат.Вставить("Command", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculation", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	// Типы вложенных объектов метаданных (во множественном числе).
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Forms", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Templates", "Макет");
	Результат.Вставить("Commands", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculations", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПроверкаОтложенныхОбработчиков()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	ОписанияПодсистем  = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	ОписанияПодсистемПоИменам = ОписанияПодсистем.ПоИменам;
	Для Каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		РежимВыполненияОтложенныхОбработчиков = ОписанияПодсистемПоИменам[ИмяПодсистемы].РежимВыполненияОтложенныхОбработчиков;
		Если РежимВыполненияОтложенныхОбработчиков = "Последовательно" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараллельноСВерсии = ОписанияПодсистемПоИменам[ИмяПодсистемы].ПараллельноеОтложенноеОбновлениеСВерсии;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
		Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РежимВыполнения", "Отложенно");
		
		НайденныеСтроки = Обработчики.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаОписания Из НайденныеСтроки Цикл
			Если СтрокаОписания.Версия = "*"
				Или (ЗначениеЗаполнено(ПараллельноСВерсии)
					И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаОписания.Версия, ПараллельноСВерсии) < 0) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОписания.ЧитаемыеОбъекты)
				И ЗначениеЗаполнено(СтрокаОписания.ИзменяемыеОбъекты) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПроцедурыЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.Процедура, ".");
			Если ИмяПроцедурыЧастями.Количество() = 2 Тогда
				ПолноеИмяОбъекта = "ОбщийМодуль" + "." + ИмяПроцедурыЧастями[0];
			Иначе
				ПолноеИмяОбъекта = СоответствиеТиповМетаданных(ИмяПроцедурыЧастями[0]) + "." + ИмяПроцедурыЧастями[1];
			КонецЕсли;
			
			СписокОшибочныхОбъектов.Добавить(СтрокаОписания.Процедура, ПолноеИмяОбъекта);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Функция СоответствиеТиповМетаданных(ИмяМенеджера)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Справочники", "Справочник");
	Соответствие.Вставить("Документы", "Документ");
	Соответствие.Вставить("ЖурналыДокументов", "ЖурналДокументов");
	Соответствие.Вставить("РегистрыСведений", "РегистрСведений");
	
	Возврат Соответствие[ИмяМенеджера];
	
КонецФункции

&НаСервере
Функция ПлатформеннаяПроверкаКонфигурации()
	
	СписокОшибочныхОбъектов = Новый СписокЗначений;
	
	ИмяФайлаСообщений = КаталогВыгрузкиМодулей + "\РезультатПроверкиКонфигурации.txt";
	
	Если ПустаяСтрока(СтрокаСоединения) Тогда
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяПользователя());
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить();
	КомандаЗапуска.Добавить("/CheckConfig");
	КомандаЗапуска.Добавить("-ConfigLogIntegrity");
	КомандаЗапуска.Добавить("-IncorrectReferences");
	КомандаЗапуска.Добавить("-ThinClient");
	КомандаЗапуска.Добавить("-WebClient");
	КомандаЗапуска.Добавить("-Server");
	КомандаЗапуска.Добавить("-ExternalConnection");
	КомандаЗапуска.Добавить("-ExternalConnectionServer");
	КомандаЗапуска.Добавить("-ThickClientManagedApplication");
	КомандаЗапуска.Добавить("-ThickClientServerManagedApplication");
	КомандаЗапуска.Добавить("-ThickClientOrdinaryApplication");
	КомандаЗапуска.Добавить("-ThickClientServerOrdinaryApplication");
	КомандаЗапуска.Добавить("-DistributiveModules");
	КомандаЗапуска.Добавить("-UnreferenceProcedures");
	КомандаЗапуска.Добавить("-HandlersExistence");
	КомандаЗапуска.Добавить("-EmptyHandlers");
	КомандаЗапуска.Добавить("-ExtendedModulesCheck");
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	МакетИсключений = Обработки.ПроверкаБСППередСборкой.ПолучитьМакет("ИсключенияПлатформеннойПроверки");
	Исключения = МакетИсключений.ПолучитьТекст();
	Попытка
		Текст = Новый ТекстовыйДокумент;
		ЕстьОшибки = Ложь;
		ПрочитатьФайлОшибокСОжиданием(Текст, ИмяФайлаСообщений, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Текст.Прочитать(ИмяФайлаСообщений);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СписокОшибочныхОбъектов.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), "Обработка.ПроверкаБСППередСборкой");
		Возврат СписокОшибочныхОбъектов;
	КонецПопытки;
	
	ДлиннаяОшибка = Ложь;
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		Строка = Текст.ПолучитьСтроку(НомерСтроки);
		Если Строка = "Соединение с хранилищем конфигурации не установлено"
			Или СтрНайти(Строка, "Подключаемый_") > 0
			Или СтрНайти(Исключения, Строка) > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка, "{") > 0 Тогда
			ДлиннаяОшибка = Истина;
		КонецЕсли;
		
		СтрокаОбработанная = СтрЗаменить(Строка, "{", "");
		
		СтрокаЧастями = СтрРазделить(СтрокаОбработанная, " ");
		ПолноеИмяОбъекта = СтрокаЧастями[0];
		ПолноеИмяОбъектаЧастями = СтрРазделить(ПолноеИмяОбъекта, ".");
		Если ПолноеИмяОбъектаЧастями.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = ПолноеИмяОбъектаЧастями[0] + "." + ПолноеИмяОбъектаЧастями[1];
		
		Если ДлиннаяОшибка Тогда
			НомерСтроки = НомерСтроки + 1;
			СледующаяСтрока = Текст.ПолучитьСтроку(НомерСтроки);
			Если СокрЛ(СледующаяСтрока) <> СледующаяСтрока Тогда
				Строка = Строка + Символы.ПС + СледующаяСтрока;
				ДлиннаяОшибка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СписокОшибочныхОбъектов.Добавить(Строка, ПолноеИмя);
	КонецЦикла;
	
	УдалитьФайлы(ИмяФайлаСообщений);
	
	Возврат СписокОшибочныхОбъектов;
	
КонецФункции

&НаСервере
Процедура ПрочитатьФайлОшибокСОжиданием(Текст, ИмяФайла, ОшибкаЧтения)
	
	Попытка
		Текст.Прочитать(ИмяФайла);
	Исключение
		ОшибкаЧтения = Истина;
		ОкончаниеЧтения = ТекущаяДатаСеанса() + 10;
		Пока ТекущаяДатаСеанса() < ОкончаниеЧтения Цикл
			// Ожидание, чтобы убедиться, что нет ошибки совместного доступа.
		КонецЦикла;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнструментыРазработчика(Подсистема)
	
	Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
		ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		Если ИнструментыРазработчика.НайтиПоЗначению(ПолноеИмяОбъекта) = Неопределено Тогда
			ИнструментыРазработчика.Добавить(ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ЗаполнитьИнструментыРазработчика(ПодчиненнаяПодсистема);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураОшибок()
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("ПредставлениеОшибки");
	СтруктураОшибок.Вставить("ОписаниеИсправления");
	СтруктураОшибок.Вставить("ОшибочныеДанные");
	СтруктураОшибок.Вставить("Срочность");
	
	Возврат СтруктураОшибок;
	
КонецФункции

// Процедуры для поиска нерекомендуемых настроек прав

// Возвращает текст с описанием настроек, которые не рекомендуются при разработке ролей.
// Не рекомендуется использовать настройки:
// а) в управляемых формах:
//    - для реквизитов: "Просмотр по ролям" и "Редактирование по ролям";
//    - для команд: "Использование по ролям";
//    - для полей: "Пользовательская видимость по ролям";
// б) в командном интерфейсе "Видимость по ролям";
// в) в ролях мусорные настройки прав на реквизиты(отличия от умолчаний, если нет прав на объект);
// г) в ролях права на реквизиты.
//
// Проверка пункта а) перенесена в АПК (стандарт "Проверка прав доступа").
// Проверка пункта б) планируется к переносу в АПК (новая версия стандарта "Проверка прав доступа").
// Проверка пункта в) планируется к переносу в проверку внедрения (с режимом автоисправления).
//
// Такие настройки сложно обнаружить, анализировать, объединять при доработках и когда требуется, объяснять в пользовательской
// документации. Кроме того, появляется жесткая зависимость от конкретной роли, чего рекомендуется избегать, так как
// такую роль крайне трудоемко или невозможно заменить при доработке конфигурации.
//
// Вместо таких настроек рекомендуется использовать программное управление видимостью и доступностью (только просмотр)
// в общем виде, например, в виде функции, которая проверяет наличие роли. В этом случае, состав настроек просто обнаружить
// по местам использования функции, проанализировать влияние, как в целом для конфигурации, так и в конкретном месте, а при
// доработке проверяемую роль легко заменить на другую роль или на другой признак.
//
// Параметры:
//  ПапкаВыгрузки - Строка - каталог, содержащий выгрузку конфигурации в файлы.
//
&НаСервере
Функция НерекомендуемыеНастройкиПрав(ПапкаВыгрузки)
	
	Ошибки = Новый Структура("НекорректнаяНастройкаПрав, ПраваНеПоУмолчанию", "", "");
	
	// Анализ командных интерфейсов.
	Файлы = НайтиФайлы(ПапкаВыгрузки, "CommandInterface.xml", Истина);
	
	Для Каждого Файл Из Файлы Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		Фабрика = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		ИмяОбъекта = ИмяОбъекта(ПапкаВыгрузки, Файл.ПолноеИмя, "Ext.CommandInterface.xml") + "CommandInterface";
		ПроверитьСвойстваОбъекта(Ошибки.НекорректнаяНастройкаПрав, Фабрика, ИмяОбъекта, "CommandsVisibility",   "Command",   "Visibility");
		ПроверитьСвойстваОбъекта(Ошибки.НекорректнаяНастройкаПрав, Фабрика, ИмяОбъекта, "SubsystemsVisibility", "Subsystem", "Visibility");
	КонецЦикла;
	
	// Анализ ролей (права на реквизиты, стандартные реквизиты, измерения, ресурсы,
	// табличные части с реквизитами, стандартные табличные части со стандартными реквизитами).
	Файлы = НайтиФайлы(ПапкаВыгрузки, "Rights.xml", Истина);
	
	Для Каждого Файл Из Файлы Цикл
		
		Описание = ПолноеИмяПоИмениМодуля(Файл.ПолноеИмя, Файл.Имя);
		Если Не ЭтоОбъектБСП(Описание.ПолноеИмяОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		Фабрика = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта(ПапкаВыгрузки, Файл.ПолноеИмя, ".Ext.Rights.xml"), "Roles.", "Role.");
		ПроверитьПраваНаРеквизиты(Ошибки, Фабрика, ИмяОбъекта);
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

// Для функции НерекомендуемыеНастройки
&НаСервере
Функция ИмяОбъекта(ПапкаВыгрузки, ПолноеИмяФайла, ОкончаниеДляУдаления)
	
	ИмяОбъекта = СтрЗаменить(ПолноеИмяФайла, ПапкаВыгрузки + ПолучитьРазделительПути(), "");
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, ПолучитьРазделительПути(), ".");
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, ОкончаниеДляУдаления, "");
	
	Возврат ИмяОбъекта;
	
КонецФункции

// Для процедуры НерекомендуемыеНастройки.
&НаСервере
Процедура ПроверитьПользовательскуюВидимость(Текст, ОписаниеЭлементов, ИмяФормы)
	
	Если ТипЗнч(ОписаниеЭлементов) = Тип("СписокXDTO") Тогда
		Для каждого ОбъектXDTO Из ОписаниеЭлементов Цикл
			ПроверитьПользовательскуюВидимость(Текст, ОбъектXDTO, ИмяФормы);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеЭлементов) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Свойство Из ОписаниеЭлементов.Свойства() Цикл
		Если Свойство.ОбъектВладелец = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСвойства = Свойство.ОбъектВладелец[Свойство.Имя];
		
		Если Свойство.Имя = "UserVisible" Тогда
			ПроверитьСвязиСРолямиСвойстваОбъекта(Текст, ОписаниеЭлементов, ИмяФормы, ЗначениеСвойства, "Item", "UserVisible");
		Иначе
			ПроверитьПользовательскуюВидимость(Текст, ЗначениеСвойства, ИмяФормы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры НерекомендуемыеНастройки.
&НаСервере
Процедура ПроверитьСвойстваОбъекта(Текст, ОбъектXDTO, ИмяФормы, ИмяСвойств, ИмяСвойства, ИмяСвязи)
	
	ОбъектСвойств = СвойствоОбъекта(ОбъектXDTO, ИмяСвойств);
	Если ОбъектСвойств = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСвойства = СвойствоОбъекта(ОбъектСвойств, ИмяСвойства, Ложь);
	Если ОбъектСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбъектов = СписокОбъектов(ОбъектСвойства);
	
	Для каждого ОбъектСвойства Из СписокОбъектов Цикл
		Связи = СвойствоОбъекта(ОбъектСвойства, ИмяСвязи);
		Если Связи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьСвязиСРолямиСвойстваОбъекта(Текст, ОбъектСвойства, ИмяФормы, Связи, ИмяСвойства, ИмяСвязи);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры НерекомендуемыеНастройки.
&НаСервере
Процедура ПроверитьПраваНаРеквизиты(Ошибки, ОбъектXDTO, ИмяРоли)
	
	ТекстОшибок = Новый Структура("НекорректнаяНастройкаПрав, ПраваНеПоУмолчанию", "", "");
	
	УстанавливатьПраваДляНовыхОбъектов = СвойствоРоли(ТекстОшибок.НекорректнаяНастройкаПрав,
		ОбъектXDTO, "setForNewObjects");
	
	УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию = СвойствоРоли(ТекстОшибок.НекорректнаяНастройкаПрав,
		ОбъектXDTO, "setForAttributesByDefault", Истина);
	
	ЗаголовокОшибки = Символы.ПС + ИмяРоли + ":" + Символы.ПС;
	
	Если ЗначениеЗаполнено(ТекстОшибок.НекорректнаяНастройкаПрав) Тогда
		Ошибки.НекорректнаяНастройкаПрав = Ошибки.НекорректнаяНастройкаПрав
			+ ЗаголовокОшибки
			+ ТекстОшибок.НекорректнаяНастройкаПрав
			+ Символы.ПС;
		Возврат;
	КонецЕсли;
	
	СписокОбъектов = СвойствоОбъекта(ОбъектXDTO, "object", Ложь);
	Если СписокОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокОбъектов = СписокОбъектов(СписокОбъектов);
	
	ИменаПодчиненныхОбъектов = Новый Соответствие;
	ИменаПодчиненныхОбъектов.Вставить("Attribute",              Истина);
	ИменаПодчиненныхОбъектов.Вставить("StandardAttribute",      Истина);
	ИменаПодчиненныхОбъектов.Вставить("TabularSection",         Истина);
	ИменаПодчиненныхОбъектов.Вставить("StandardTabularSection", Истина);
	ИменаПодчиненныхОбъектов.Вставить("Dimension",              Истина);
	ИменаПодчиненныхОбъектов.Вставить("Resource",               Истина);
	ИменаПодчиненныхОбъектов.Вставить("AddressingAttribute",    Истина);
	ИменаПодчиненныхОбъектов.Вставить("AccountingFlag",         Истина);
	ИменаПодчиненныхОбъектов.Вставить("ExtDimensionAccountingFlag", Истина);
	ИменаПодчиненныхОбъектов.Вставить("Command",                Ложь);
	
	ПропускаемыеОбъектыМетаданных = ПропускаемыеОбъектыМетаданных(СписокОбъектов,
		УстанавливатьПраваДляНовыхОбъектов);
	
	Для Каждого ОбъектСвойства Из СписокОбъектов Цикл
		ПолноеИмяОбъекта = СвойствоОбъекта(ОбъектСвойства, "name");
		Если ПолноеИмяОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЧастиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
		Если ЧастиИмени.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		ЭтоПоле = ИменаПодчиненныхОбъектов.Получить(ЧастиИмени[2]);
		Если ЭтоПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПропускаемыйОбъект = ПропускаемыеОбъектыМетаданных[ЧастиИмени[0] + "." + ЧастиИмени[1]];
		
		ПраваНаПоле = Новый Структура;
		ПраваНаПоле.Вставить("View", "НеУстановлено");
		ПраваНаПоле.Вставить("Edit", "НеУстановлено");
		
		СписокПрав = СвойствоОбъекта(ОбъектСвойства, "right", Ложь);
		Если СписокПрав <> Неопределено Тогда
			СписокПрав = СписокОбъектов(СписокПрав);
			Для каждого ОбъектПравСвойства Из СписокПрав Цикл
				ИмяПрава = СвойствоОбъекта(ОбъектПравСвойства, "name");
				Если ИмяПрава = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Не ПраваНаПоле.Свойство(ИмяПрава) Тогда
					Продолжить;
				КонецЕсли;
				ПраваНаПоле[ИмяПрава] = СвойствоОбъекта(ОбъектПравСвойства, "value");
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЭтоПоле Тогда // Это команда.
			Если (ПропускаемыйОбъект = Неопределено Или Не ПропускаемыйОбъект.View)
			   И ПраваНаПоле.View = Истина Тогда
			
				ТекстОшибок.НекорректнаяНастройкаПрав = ТекстОшибок.НекорректнаяНастройкаПрав
					+ ?(ЗначениеЗаполнено(ТекстОшибок.НекорректнаяНастройкаПрав), Символы.ПС, "")
					+ ПолноеИмяОбъекта + " " + НСтр("ru = 'лишнее право Просмотр.'");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ПраваНаПоле.View = "НеУстановлено" Тогда
			ПраваНаПоле.View = УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию;
		КонецЕсли;
		Если ПраваНаПоле.Edit = "НеУстановлено" Тогда
			ПраваНаПоле.Edit = УстанавливатьПраваДляРеквизитовИТабличныхЧастейПоУмолчанию;
		КонецЕсли;
		
		Если ПропускаемыйОбъект = Неопределено
			И (ПраваНаПоле.View <> Истина
			   Или ПраваНаПоле.Edit <> Истина) Тогда
			ТипОшибки = "ПраваНеПоУмолчанию";
		Иначе
			ТипОшибки = "НекорректнаяНастройкаПрав";
		КонецЕсли;
		
		Если ПраваНаПоле.View <> Истина Тогда
			ТекстОшибок[ТипОшибки] = ТекстОшибок[ТипОшибки]
				+ ?(ЗначениеЗаполнено(ТекстОшибок[ТипОшибки]), Символы.ПС, "")
				+ ПолноеИмяОбъекта + " " + НСтр("ru = 'без права Просмотр.'");
		КонецЕсли;
		Если ПраваНаПоле.Edit <> Истина Тогда
			ТекстОшибок[ТипОшибки] = ТекстОшибок[ТипОшибки]
				+ ?(ЗначениеЗаполнено(ТекстОшибок[ТипОшибки]), Символы.ПС, "")
				+ ПолноеИмяОбъекта + " " + НСтр("ru = 'без права Редактирование.'");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибок.НекорректнаяНастройкаПрав) Тогда
		Ошибки.НекорректнаяНастройкаПрав = Ошибки.НекорректнаяНастройкаПрав
			+ ЗаголовокОшибки
			+ ТекстОшибок.НекорректнаяНастройкаПрав
			+ Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОшибок.ПраваНеПоУмолчанию) Тогда
		Ошибки.ПраваНеПоУмолчанию = Ошибки.ПраваНеПоУмолчанию
			+ ЗаголовокОшибки
			+ ТекстОшибок.ПраваНеПоУмолчанию
			+ Символы.ПС;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Для процедуры ПроверитьПраваНаРеквизиты.
&НаСервере
Функция СвойствоРоли(Текст, ОбъектXDTO, ИмяСвойства, ТребуемоеЗначение = Неопределено)
	
	Если ИмяСвойства = "setForNewObjects" Тогда
		ПредставлениеСвойства = НСтр("ru = 'Устанавливать права для новых объектов'");
	
	ИначеЕсли ИмяСвойства = "setForAttributesByDefault" Тогда
		ПредставлениеСвойства = НСтр("ru = 'Устанавливать права для реквизитов и табличных частей по умолчанию'");
	
	ИначеЕсли ИмяСвойства = "independentRightsOfChildObjects" Тогда
		ПредставлениеСвойства = НСтр("ru = 'Независимые права подчиненных объектов'");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестное свойство роли:'") + " " + ИмяСвойства;
	КонецЕсли;
	
	Значение = СвойствоОбъекта(ОбъектXDTO, ИмяСвойства);
	Если Значение = Неопределено Тогда
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Свойство ""%1"" не найдено.'"), ПредставлениеСвойства) + Символы.ПС;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Свойство ""%1"" не типа Булево.'"), ПредставлениеСвойства) + Символы.ПС;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТребуемоеЗначение) = Тип("Булево")
	   И Значение <> ТребуемоеЗначение Тогда
		
		Если ТребуемоеЗначение Тогда
			Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свойство ""%1"" должно быть установлено.'"), ПредставлениеСвойства) + Символы.ПС;
		Иначе
			Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свойство ""%1"" должно быть снято.'"), ПредставлениеСвойства) + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Для процедуры ПроверитьПраваНаРеквизиты.
&НаСервере
Функция ПропускаемыеОбъектыМетаданных(СписокОбъектов, УстанавливатьПраваДляНовыхОбъектов)
	
	// Получение списка объектов метаданных, на которые установлены права редактирования или просмотра.
	ПропускаемыеОбъектыМетаданных = Новый Соответствие;
	
	Для Каждого ОбъектСвойства Из СписокОбъектов Цикл
		ПолноеИмяОбъекта = СвойствоОбъекта(ОбъектСвойства, "name");
		Если ПолноеИмяОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЧастиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
		Если ЧастиИмени.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ПраваНаПоле = Новый Структура;
		ПраваНаПоле.Вставить("View", "НеУстановлено");
		ПраваНаПоле.Вставить("Edit", "НеУстановлено");
		
		СписокПрав = СвойствоОбъекта(ОбъектСвойства, "right", Ложь);
		Если СписокПрав <> Неопределено Тогда
			СписокПрав = СписокОбъектов(СписокПрав);
			Для каждого ОбъектПравСвойства Из СписокПрав Цикл
				ИмяПрава = СвойствоОбъекта(ОбъектПравСвойства, "name");
				Если ИмяПрава = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Не ПраваНаПоле.Свойство(ИмяПрава) Тогда
					Продолжить;
				КонецЕсли;
				ПраваНаПоле[ИмяПрава] = СвойствоОбъекта(ОбъектПравСвойства, "value");
			КонецЦикла;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ПолноеИмяОбъекта, "DataProcessor")
		 Или СтрНачинаетсяС(ПолноеИмяОбъекта, "Report") Тогда
			
			ПраваНаПоле.Edit = Истина;
			
		ИначеЕсли ПраваНаПоле.Edit = "НеУстановлено" Тогда
			ПраваНаПоле.Edit = УстанавливатьПраваДляНовыхОбъектов;
		КонецЕсли;
		
		Если ПраваНаПоле.View = "НеУстановлено" Тогда
			ПраваНаПоле.View = УстанавливатьПраваДляНовыхОбъектов;
		КонецЕсли;
		
		Если ПраваНаПоле.Edit <> Ложь Или ПраваНаПоле.View <> Ложь Тогда
			УстановленныеПрава = Новый Структура;
			УстановленныеПрава.Вставить("View", ПраваНаПоле.View <> Ложь);
			УстановленныеПрава.Вставить("Edit", ПраваНаПоле.Edit <> Ложь);
			ПропускаемыеОбъектыМетаданных.Вставить(ПолноеИмяОбъекта, УстановленныеПрава);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПропускаемыеОбъектыМетаданных;
	
КонецФункции

// Для процедур ПроверитьСвойстваОбъекта, ПроверитьПользовательскуюВидимость.
&НаСервере
Процедура ПроверитьСвязиСРолямиСвойстваОбъекта(Текст, ОбъектXDTO, ИмяФормы, Связи, ИмяСвойства, ИмяСвязи)
	
	СвязиСРолями = СвойствоОбъекта(Связи, "Value", Ложь);
	Если СвязиСРолями = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРолей = СписокОбъектов(СвязиСРолями);
	РольНайдена = Ложь;
	
	Для каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Если Не ЗначениеЗаполнено(ОписаниеРоли.name) Тогда
			Продолжить;
		КонецЕсли;
		Если Не РольНайдена Тогда
			РольНайдена = Истина;
			Текст = Текст + ИмяФормы  + "." + ИмяСвойства
				+ "." + ОбъектXDTO.name + " " + ИмяСвязи  +":" + Символы.ПС;
		КонецЕсли;
		Текст = Текст + " - " + ОписаниеРоли.name + Символы.ПС;
	КонецЦикла;
	
	Если РольНайдена Тогда
		Текст = Текст + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ПроверитьСвойстваОбъекта, ПроверитьСвязиСРолямиСвойстваОбъекта.
&НаСервере
Функция СвойствоОбъекта(ОбъектXDTO, ИмяОбъекта, Получить = Истина)
	
	Если ОбъектXDTO.Свойства().Получить(ИмяОбъекта) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Получить Тогда
		Возврат ОбъектXDTO.Получить(ИмяОбъекта);
	Иначе
		Возврат ОбъектXDTO[ИмяОбъекта];
	КонецЕсли;
	
КонецФункции

// Для процедур ПроверитьСвойстваОбъекта, ПроверитьСвязиСРолямиСвойстваОбъекта.
&НаСервере
Функция СписокОбъектов(Данные)
	
	Если ТипЗнч(Данные) = Тип("СписокXDTO") Тогда
		Возврат Данные;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Данные);
		Возврат Массив;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИмяОбъектаМетаданного(Знач ОбъектМетаданных)
	РасширениеКонфигурации = ОбъектМетаданных.РасширениеКонфигурации(); // РасширениеКонфигурации
		ИмяКонфигурации = ?(РасширениеКонфигурации <> Неопределено, 
			НСтр("ru = 'расширение'") + " " + РасширениеКонфигурации.Имя, 
			НСтр("ru = 'конфигурация'") + " " + Метаданные.Имя);
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", 
		ОбъектМетаданных.ПолноеИмя(), ИмяКонфигурации);			
КонецФункции	

&НаСервере
Функция ЭтоОбъектНеДемоРасширения(ОбъектМетаданных)
	
	РасширениеКонфигурации = ОбъектМетаданных.РасширениеКонфигурации();
	Если РасширениеКонфигурации <> Неопределено
		И Не СтрНачинаетсяС(РасширениеКонфигурации.Имя, "_Демо") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
