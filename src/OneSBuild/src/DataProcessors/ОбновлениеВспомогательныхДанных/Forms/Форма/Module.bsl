///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИзменитьФлажки(ЭтотОбъект, Истина, Истина);
	ИзменитьФлажки(ЭтотОбъект, Истина, Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		Иначе
			СеансЗапущенБезРазделителей = Истина;
		КонецЕсли;
		
		Если СеансЗапущенБезРазделителей Тогда
			ОбновитьНеразделенныеДанные = Истина;
		Иначе
			ОбновитьРазделенныеДанные = Истина;
		КонецЕсли;
		
	Иначе
		ОбновитьНеразделенныеДанные = Истина;
		ОбновитьРазделенныеДанные   = Истина;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.РазделениеВключено()
	 ИЛИ НЕ ОбновитьНеразделенныеДанные Тогда
		
		Элементы.ОбластьДанных.Видимость                = Ложь;
		Элементы.ВойтиВУказаннуюОбластьДанных.Видимость = Ложь;
		Элементы.ТекущаяОбластьДанных.Видимость         = Ложь;
		Элементы.ВыйтиИзТекущейОбластиДанных.Видимость  = Ложь;
	КонецЕсли;
	
	ОбновитьТекущуюОбластьДанных();
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Элементы.ПодсистемаУправлениеДоступом.Видимость = Ложь;
		Элементы.ДанныеПодсистемыУправлениеДоступом.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Элементы.ДанныеПодсистемыВариантыОтчетов.Видимость = Ложь;
		Элементы.ПодсистемаВариантыОтчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформацияПриЗапуске") Тогда
		Элементы.ДанныеПодсистемыИнформацияПриЗапуске.Видимость = Ложь;
		Элементы.ПодсистемаИнформацияПриЗапуске.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Элементы.ДанныеПодсистемыКонтрольВеденияУчета.Видимость = Ложь;
		Элементы.ПодсистемаКонтрольВеденияУчета.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьВидимостьПоРежимуНастройки();
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(ПараметрЗапуска, "-ПакетныйРежим") > 0 Тогда
		ПакетныйЗапуск = Истина;
		ВыполнитьПакетныйЗапуск();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьВидимостьПоРежимуНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимНастройкиПриИзменении(Элемент)
	
	ОбновитьВидимостьПоРежимуНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВойтиВУказаннуюОбластьДанных(Команда)
	
	ОбновитьТекущуюОбластьДанных();
	
	Если ОбластьДанных = ТекущаяОбластьДанных Тогда
		ПоказатьПредупреждениеПользователю(Неопределено,
			НСтр("ru = 'Вход в указанную область данных уже выполнен.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОбластьДанных <> Неопределено Тогда
		ВыйтиИзОбластиДанныхКлиент();		
	КонецЕсли;
	
	ВойтиВОбластьДанныхКлиент();
	ОбновитьТекущуюОбластьДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзТекущейОбластиДанных(Команда)
	
	ОбновитьТекущуюОбластьДанных();
	
	Если ТекущаяОбластьДанных = Неопределено Тогда
		ПоказатьПредупреждениеПользователю(Неопределено,
			НСтр("ru = 'Вход в область данных еще не выполнен.'"));
		Возврат;
	КонецЕсли;
	
	ВыйтиИзОбластиДанныхКлиент();
	
	Если НЕ ОбновитьТекущуюОбластьДанных() Тогда
		ПоказатьПредупреждениеПользователю(Неопределено,
			НСтр("ru = 'Область данных не изменилась.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновление(Команда)
	
	ДанныеОтмечены = Ложь;
	
	Если НЕ ЗначениеЗаполнено(РежимНастройки) Тогда
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	     И (    ИдентификаторыОбъектовМетаданных И Элементы.ИдентификаторыОбъектовМетаданных.Доступность
	        ИЛИ ИдентификаторыОбъектовРасширений И Элементы.ИдентификаторыОбъектовРасширений.Доступность
	        ИЛИ КэшПрограммныхИнтерфейсов        И Элементы.КэшПрограммныхИнтерфейсов.Доступность) Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	     И (    ПроверитьНазначениеРолей И Элементы.ПроверитьНазначениеРолей.Доступность
	        ИЛИ СоставыГруппПользователей    И Элементы.СоставыГруппПользователей.Доступность) Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если НЕ ДанныеОтмечены И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка"
		   И (    ПраваРолей                                    И Элементы.ПраваРолей.Доступность
		      ИЛИ ЗависимостиПрав                               И Элементы.ЗависимостиПрав.Доступность
		      ИЛИ СвойстваВидовДоступа                          И Элементы.СвойстваВидовДоступа.Доступность
		      ИЛИ ОписаниеПоставляемыхПрофилейГруппДоступа      И Элементы.ОписаниеПоставляемыхПрофилейГруппДоступа.Доступность
		      ИЛИ ОписаниеВозможныхПравДляНастройкиПравОбъектов И Элементы.ОписаниеВозможныхПравДляНастройкиПравОбъектов.Доступность
		      
		      ИЛИ ПоставляемыеПрофилиГруппДоступа     И Элементы.ПоставляемыеПрофилиГруппДоступа.Доступность
		      ИЛИ НепоставляемыеПрофилиГруппДоступа   И Элементы.НепоставляемыеПрофилиГруппДоступа.Доступность
		      ИЛИ РолиПользователейИнформационнойБазы И Элементы.РолиПользователейИнформационнойБазы.Доступность
		      ИЛИ ПараметрыОграниченияДоступа         И Элементы.ПараметрыОграниченияДоступа.Доступность
		      ИЛИ ТаблицыГруппДоступа                 И Элементы.ТаблицыГруппДоступа.Доступность
		      ИЛИ ЗначенияГруппДоступа                И Элементы.ЗначенияГруппДоступа.Доступность
		      ИЛИ НаследованиеНастроекПравОбъектов    И Элементы.НаследованиеНастроекПравОбъектов.Доступность
		      ИЛИ НастройкиПравОбъектов               И Элементы.НастройкиПравОбъектов.Доступность
		      ИЛИ ГруппыЗначенийДоступа               И Элементы.ГруппыЗначенийДоступа.Доступность
		      ИЛИ НаборыЗначенийДоступа               И Элементы.НаборыЗначенийДоступа.Доступность) Тогда
			
			ДанныеОтмечены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если НЕ ДанныеОтмечены И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
		 ИЛИ РежимНастройки = "СложнаяНастройка"
		   И (    ОтчетыКонфигурации  И Элементы.ОтчетыКонфигурации.Доступность
		      ИЛИ ОтчетыРасширений    И Элементы.ОтчетыРасширений.Доступность
		      ИЛИ ИндексПоискаОтчетов И Элементы.ИндексПоискаОтчетов.Доступность) Тогда
		
			ДанныеОтмечены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыИнформацияПриЗапуске
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	   И ПакетыИнформацииПриЗапуске И Элементы.ПакетыИнформацииПриЗапуске.Доступность Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыКонтрольВеденияУчета
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	   И ПравилаПроверкиУчета И Элементы.ПравилаПроверкиУчета.Доступность Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	Если НЕ ДанныеОтмечены Тогда
		ПоказатьПредупреждениеПользователю(Неопределено,
			НСтр("ru = 'Отметьте данные, которые нужно обновить.'"));
		Возврат;
	КонецЕсли;
	
	// Установка обычного цвета всех пунктов.
	ПараметрыОбновления = ПараметрыОбновления();
	ВыделитьИзменения(
		ПараметрыОбновленияВСтроку(ПараметрыОбновления), Ложь);
	
	ЕстьИзменения = Ложь;
	ВыполнитьОбновлениеНаСервере(ЕстьИзменения);
	
	Если ЕстьИзменения = Неопределено Тогда
		ПоказатьПредупреждениеПользователю(Неопределено,
			НСтр("ru = 'После открытия обработки изменилась текущая область данных.
			           |Если нужно проверьте настройки и повторите команду.'"));
		Возврат;
	КонецЕсли;
	
	Если ОбновитьНеразделенныеДанные И ОбновитьРазделенныеДанные Тогда
		
		Если ЕстьИзменения Тогда
			Текст = НСтр("ru = 'Обновление выполнено успешно.'");
		Иначе
			Текст = НСтр("ru = 'Обновление не требуется.'");
		КонецЕсли;
		
	ИначеЕсли ОбновитьНеразделенныеДанные Тогда
		
		Если ЕстьИзменения Тогда
			Текст = НСтр("ru = 'Обновление неразделенных данных выполнено успешно.'");
		Иначе
			Текст = НСтр("ru = 'Обновление неразделенных данных не требуется.'");
		КонецЕсли;
	Иначе
		Если ЕстьИзменения Тогда
			Текст = НСтр("ru = 'Обновление разделенных данных выполнено успешно.'");
		Иначе
			Текст = НСтр("ru = 'Обновление разделенных данных не требуется.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПредупреждениеПользователю(Неопределено, Текст);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ИзменитьФлажки(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	ИзменитьФлажки(ЭтотОбъект, Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеПользователю(ОписаниеОповещенияОЗавершении, Текст)
	Если ПакетныйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, Текст);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакетныйЗапуск()
	
	ПараметрыОбновленияПакетногоЗапуска = СтрРазделить(ПараметрЗапуска, ";");
	
	ФайлОшибок = "";
	ИзмененныеПараметрыОбновления = Новый Структура;
	Для Каждого ПараметрОбновления Из ПараметрыОбновленияПакетногоЗапуска Цикл
		
		КлючЗначение = СтрРазделить(ПараметрОбновления, "=");
		Если КлючЗначение.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Ключ = СокрЛП(КлючЗначение[0]);
		Значение = СокрЛП(КлючЗначение[1]);
		
		Если Ключ = "ErrorLogFile" Тогда
			ФайлОшибок = Значение;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбновления = ПараметрыОбновления();
		Если НЕ ПараметрыОбновления.Свойство(Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененныеПараметрыОбновления.Вставить(Ключ, Булево(Значение));
		
	КонецЦикла;
	
	Для Каждого ПараметрОбновления Из ПараметрыОбновления() Цикл
		ЭтотОбъект[ПараметрОбновления.Ключ] = Истина;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИзмененныеПараметрыОбновления);
	РежимНастройки = "СложнаяНастройка";
	
	Попытка
		ВыполнитьОбновление(Неопределено);
		ДобавитьРольИнтерактивноеОткрытиеВнешнихОтчетовИОбработокТекущемуПользователю();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписатьОшибкуОбновленияВФайл(ФайлОшибок, ПредставлениеОшибки);
	КонецПопытки;
	
	ЗавершитьРаботуСистемы(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОбновления()
	ПараметрыОбновления = Новый Структура;
	
	ПараметрыОбновления.Вставить("ДанныеПодсистемыБазоваяФункциональность");
	ПараметрыОбновления.Вставить("ИдентификаторыОбъектовМетаданных");
	ПараметрыОбновления.Вставить("ИдентификаторыОбъектовРасширений");
	ПараметрыОбновления.Вставить("КэшПрограммныхИнтерфейсов");
	
	ПараметрыОбновления.Вставить("ДанныеПодсистемыПользователи");
	ПараметрыОбновления.Вставить("ПроверитьНазначениеРолей");
	ПараметрыОбновления.Вставить("СоставыГруппПользователей");
	
	ПараметрыОбновления.Вставить("ДанныеПодсистемыВариантыОтчетов");
	ПараметрыОбновления.Вставить("ОтчетыКонфигурации");
	ПараметрыОбновления.Вставить("ОтчетыРасширений");
	ПараметрыОбновления.Вставить("ИндексПоискаОтчетов");
	
	ПараметрыОбновления.Вставить("ДанныеПодсистемыИнформацияПриЗапуске");
	ПараметрыОбновления.Вставить("ПакетыИнформацииПриЗапуске");
	
	ПараметрыОбновления.Вставить("ДанныеПодсистемыКонтрольВеденияУчета");
	ПараметрыОбновления.Вставить("ПравилаПроверкиУчета");
	
	ПараметрыОбновления.Вставить("ДанныеПодсистемыУправлениеДоступом");
	ПараметрыОбновления.Вставить("ПраваРолей");
	ПараметрыОбновления.Вставить("ЗависимостиПрав");
	ПараметрыОбновления.Вставить("СвойстваВидовДоступа");
	ПараметрыОбновления.Вставить("ОписаниеПоставляемыхПрофилейГруппДоступа");
	ПараметрыОбновления.Вставить("ОписаниеВозможныхПравДляНастройкиПравОбъектов");
	ПараметрыОбновления.Вставить("ПоставляемыеПрофилиГруппДоступа");
	ПараметрыОбновления.Вставить("НепоставляемыеПрофилиГруппДоступа");
	ПараметрыОбновления.Вставить("РолиПользователейИнформационнойБазы");
	ПараметрыОбновления.Вставить("ПараметрыОграниченияДоступа");
	ПараметрыОбновления.Вставить("ТаблицыГруппДоступа");
	ПараметрыОбновления.Вставить("ЗначенияГруппДоступа");
	ПараметрыОбновления.Вставить("НаследованиеНастроекПравОбъектов");
	ПараметрыОбновления.Вставить("НаследованиеНастроекПравОбъектов");
	ПараметрыОбновления.Вставить("НастройкиПравОбъектов");
	ПараметрыОбновления.Вставить("ГруппыЗначенийДоступа");
	ПараметрыОбновления.Вставить("НаборыЗначенийДоступа");
	
	Возврат ПараметрыОбновления;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОбновленияВСтроку(ПараметрыОбновления)
	Ключи = Новый Массив;
	
	Для Каждого КлючЗначение Из ПараметрыОбновления Цикл
		Ключи.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат СтрСоединить(Ключи, "," + Символы.ПС);
КонецФункции

&НаСервере
Процедура ВыполнитьОбновлениеНаСервере(ЕстьИзменения)
	
	Если ОбновитьТекущуюОбластьДанных() Тогда
		ЕстьИзменения = Неопределено;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ВыполнитьОбновлениеНеразделенныхДанных(ЕстьИзменения);
		ВыполнитьОбновлениеРазделенныхДанных(ЕстьИзменения);
	Иначе
		Если ОбновитьНеразделенныеДанные Тогда
			ВернутьсяВТекущуюОбластьДанных = Ложь;
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				// Временный выход из области данных.
				ВернутьсяВТекущуюОбластьДанных = Истина;
				ВыйтиИзОбластиДанных();
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
			
			Попытка
				// Обновление общих данных.
				ВыполнитьОбновлениеНеразделенныхДанных(ЕстьИзменения);
			Исключение
				Если ВернутьсяВТекущуюОбластьДанных Тогда
					ВойтиВОбластьДанных(ТекущаяОбластьДанных);
				КонецЕсли;
				ОбновитьПовторноИспользуемыеЗначения();
				ВызватьИсключение;
			КонецПопытки;
			
			Если ВернутьсяВТекущуюОбластьДанных Тогда
				ВойтиВОбластьДанных(ТекущаяОбластьДанных);
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновитьРазделенныеДанные Тогда
			// Обновление данных области данных.
			ВыполнитьОбновлениеРазделенныхДанных(ЕстьИзменения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТекущуюОбластьДанных();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеНеразделенныхДанных(ЕстьОбщиеИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обновлять = Ложь;
	ПараметрыОбновления = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрыОбновления(Обновлять);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИдентификаторыОбъектовМетаданных Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.БазоваяФункциональность.ИдентификаторыОбъектовМетаданных.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И КэшПрограммныхИнтерфейсов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.БазоваяФункциональность.ОчиститьКэшПрограммныхИнтерфейсов.Обновлять = Истина;
		ПараметрыОбновления.ПодключаемыеКоманды.ПодключаемыеКомандыКонфигурации.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПроверитьНазначениеРолей Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.Пользователи.ПроверитьНазначениеРолей.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПраваРолей Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ПраваРолей.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ЗависимостиПрав Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ЗависимостиПрав.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И СвойстваВидовДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.СвойстваВидовДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ОписаниеПоставляемыхПрофилейГруппДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ОписаниеПоставляемыхПрофилейГруппДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ОписаниеВозможныхПравДляНастройкиПравОбъектов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ОписаниеВозможныхПравДляНастройкиПравОбъектов.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыКонфигурации Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ВариантыОтчетов.ПараметрыОтчетовКонфигурации.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ВариантыОтчетов.ПараметрыИндексаПоискаОтчетовКонфигурации.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыИнформацияПриЗапуске
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПакетыИнформацииПриЗапуске Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ИнформацияПриЗапуске.ПакетыИнформацииПриЗапуске.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыКонтрольВеденияУчета
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПравилаПроверкиУчета Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.КонтрольВеденияУчета.СистемныеПроверкиУчета.Обновлять = Истина;
	КонецЕсли;
	
	Если Не Обновлять Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ПараметрыРаботыПрограммы.ВыполнитьОбновлениеНеразделенныхДанныхВФоне(
		ПараметрыОбновления, УникальныйИдентификатор);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если ПараметрыОбновления.БазоваяФункциональность.ИдентификаторыОбъектовМетаданных.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ИдентификаторыОбъектовМетаданных");
	КонецЕсли;
	
	Если ПараметрыОбновления.БазоваяФункциональность.ОчиститьКэшПрограммныхИнтерфейсов.ЕстьИзменения
	 Или ПараметрыОбновления.ПодключаемыеКоманды.ПодключаемыеКомандыКонфигурации.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, КэшПрограммныхИнтерфейсов");
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если ПараметрыОбновления.Пользователи.ПроверитьНазначениеРолей.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыПользователи, ПроверитьНазначениеРолей");
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ПараметрыОбновления.УправлениеДоступом.ПраваРолей.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПраваРолей");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ЗависимостиПрав.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ЗависимостиПрав");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.СвойстваВидовДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, СвойстваВидовДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ОписаниеПоставляемыхПрофилейГруппДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ОписаниеПоставляемыхПрофилейГруппДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ОписаниеВозможныхПравДляНастройкиПравОбъектов.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ОписаниеВозможныхПравДляНастройкиПравОбъектов");
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ПараметрыОбновления.ВариантыОтчетов.ПараметрыОтчетовКонфигурации.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыВариантыОтчетов, ОтчетыКонфигурации");
	КонецЕсли;
	
	Если ПараметрыОбновления.ВариантыОтчетов.ПараметрыИндексаПоискаОтчетовКонфигурации.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыВариантыОтчетов, ИндексПоискаОтчетов");
	КонецЕсли;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Если ПараметрыОбновления.ИнформацияПриЗапуске.ПакетыИнформацииПриЗапуске.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыИнформацияПриЗапуске, ПакетыИнформацииПриЗапуске");
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если ПараметрыОбновления.КонтрольВеденияУчета.СистемныеПроверкиУчета.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыКонтрольВеденияУчета, ПравилаПроверкиУчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеРазделенныхДанных(ЕстьОбщиеИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обновлять = Ложь;
	ПараметрыОбновления = РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрыОбновления(Обновлять);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИдентификаторыОбъектовРасширений Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.БазоваяФункциональность.ИдентификаторыОбъектовРасширений.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И КэшПрограммныхИнтерфейсов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ПодключаемыеКоманды.ПодключаемыеКомандыРасширений.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка" И СоставыГруппПользователей Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.Пользователи.СоставыГруппПользователей.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПоставляемыеПрофилиГруппДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ПоставляемыеПрофилиГруппДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И НепоставляемыеПрофилиГруппДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.НепоставляемыеПрофилиГруппДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И РолиПользователейИнформационнойБазы Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.РолиПользователейИнформационнойБазы.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПараметрыОграниченияДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ПараметрыОграниченияДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ТаблицыГруппДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ТаблицыГруппДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ЗначенияГруппДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ЗначенияГруппДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И НаследованиеНастроекПравОбъектов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.НаследованиеНастроекПравОбъектов.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И НастройкиПравОбъектов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.НастройкиПравОбъектов.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ГруппыЗначенийДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.ГруппыЗначенийДоступа.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
	 ИЛИ РежимНастройки = "СложнаяНастройка" И НаборыЗначенийДоступа Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.УправлениеДоступом.НаборыЗначенийДоступа.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыКонфигурации Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ВариантыОтчетов.ОтчетыКонфигурации.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ВариантыОтчетов.ИндексПоискаОтчетовКонфигурации.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыРасширений Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ВариантыОтчетов.ОтчетыРасширений.Обновлять = Истина;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.ВариантыОтчетов.ИндексПоискаОтчетовРасширений.Обновлять = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если РежимНастройки = ""
		ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыКонтрольВеденияУчета
		ИЛИ РежимНастройки = "СложнаяНастройка" И ПравилаПроверкиУчета Тогда
		
		Обновлять = Истина;
		ПараметрыОбновления.КонтрольВеденияУчета.ПравилаПроверкиУчета.Обновлять = Истина;
	КонецЕсли;
	
	Если Не Обновлять Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ПараметрыРаботыВерсийРасширений.ВыполнитьОбновлениеРазделенныхДанныхВФоне(
		ПараметрыОбновления, УникальныйИдентификатор);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если ПараметрыОбновления.БазоваяФункциональность.ИдентификаторыОбъектовРасширений.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ИдентификаторыОбъектовРасширений");
	КонецЕсли;
	
	Если ПараметрыОбновления.ПодключаемыеКоманды.ПодключаемыеКомандыРасширений.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, КэшПрограммныхИнтерфейсов");
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если ПараметрыОбновления.Пользователи.СоставыГруппПользователей.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыПользователи, СоставыГруппПользователей");
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ПараметрыОбновления.УправлениеДоступом.ПоставляемыеПрофилиГруппДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПоставляемыеПрофилиГруппДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.НепоставляемыеПрофилиГруппДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НепоставляемыеПрофилиГруппДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.РолиПользователейИнформационнойБазы.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, РолиПользователейИнформационнойБазы");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ПараметрыОграниченияДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПараметрыОграниченияДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ТаблицыГруппДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ТаблицыГруппДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ЗначенияГруппДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ЗначенияГруппДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.НаследованиеНастроекПравОбъектов.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НаследованиеНастроекПравОбъектов");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.НастройкиПравОбъектов.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НастройкиПравОбъектов");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.ГруппыЗначенийДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ГруппыЗначенийДоступа");
	КонецЕсли;
	
	Если ПараметрыОбновления.УправлениеДоступом.НаборыЗначенийДоступа.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НаборыЗначенийДоступа");
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ПараметрыОбновления.ВариантыОтчетов.ОтчетыКонфигурации.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыВариантыОтчетов, ОтчетыКонфигурации");
	КонецЕсли;
	
	Если ПараметрыОбновления.ВариантыОтчетов.ИндексПоискаОтчетовКонфигурации.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыВариантыОтчетов, ИндексПоискаОтчетов");
	КонецЕсли;
	
	Если ПараметрыОбновления.ВариантыОтчетов.ОтчетыРасширений.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыВариантыОтчетов, ОтчетыРасширений");
	КонецЕсли;
	
	Если ПараметрыОбновления.ВариантыОтчетов.ИндексПоискаОтчетовРасширений.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыВариантыОтчетов, ИндексПоискаОтчетов");
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если ПараметрыОбновления.КонтрольВеденияУчета.ПравилаПроверкиУчета.ЕстьИзменения Тогда
		ЕстьОбщиеИзменения = Истина;
		ВыделитьИзменения("ДанныеПодсистемыКонтрольВеденияУчета, ПравилаПроверкиУчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементов(Форма)
	
	Элементы = Форма.Элементы;
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Элементы.ИдентификаторыОбъектовМетаданных.Доступность              = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ИдентификаторыОбъектовРасширений.Доступность              = Форма.ОбновитьРазделенныеДанные;
	Элементы.КэшПрограммныхИнтерфейсов.Доступность                     = Форма.ОбновитьНеразделенныеДанные;
	
	// СтандартныеПодсистемы Пользователи
	Элементы.ПроверитьНазначениеРолей.Доступность                      = Форма.ОбновитьНеразделенныеДанные;
	Элементы.СоставыГруппПользователей.Доступность                     = Форма.ОбновитьРазделенныеДанные;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Элементы.ПраваРолей.Доступность                                    = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ЗависимостиПрав.Доступность                               = Форма.ОбновитьНеразделенныеДанные;
	Элементы.СвойстваВидовДоступа.Доступность                          = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ОписаниеПоставляемыхПрофилейГруппДоступа.Доступность      = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ОписаниеВозможныхПравДляНастройкиПравОбъектов.Доступность = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ПоставляемыеПрофилиГруппДоступа.Доступность               = Форма.ОбновитьРазделенныеДанные;
	Элементы.НепоставляемыеПрофилиГруппДоступа.Доступность             = Форма.ОбновитьРазделенныеДанные;
	Элементы.РолиПользователейИнформационнойБазы.Доступность           = Форма.ОбновитьРазделенныеДанные;
	Элементы.ТаблицыГруппДоступа.Доступность                           = Форма.ОбновитьРазделенныеДанные;
	Элементы.ЗначенияГруппДоступа.Доступность                          = Форма.ОбновитьРазделенныеДанные;
	Элементы.НаследованиеНастроекПравОбъектов.Доступность              = Форма.ОбновитьРазделенныеДанные;
	Элементы.НастройкиПравОбъектов.Доступность                         = Форма.ОбновитьРазделенныеДанные;
	Элементы.ГруппыЗначенийДоступа.Доступность                         = Форма.ОбновитьРазделенныеДанные;
	Элементы.НаборыЗначенийДоступа.Доступность                         = Форма.ОбновитьРазделенныеДанные;
	Элементы.ПараметрыОграниченияДоступа.Доступность                   = Форма.ОбновитьРазделенныеДанные;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Элементы.ОтчетыКонфигурации.Доступность  = Форма.ОбновитьНеразделенныеДанные Или Форма.ОбновитьРазделенныеДанные;
	Элементы.ОтчетыРасширений.Доступность    = Форма.ОбновитьНеразделенныеДанные Или Форма.ОбновитьРазделенныеДанные;
	Элементы.ИндексПоискаОтчетов.Доступность = Форма.ОбновитьРазделенныеДанные;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Элементы.ПакетыИнформацииПриЗапуске.Доступность = Форма.ОбновитьНеразделенныеДанные;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Элементы.ПравилаПроверкиУчета.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПоРежимуНастройки()
	
	ОбновитьТекущуюОбластьДанных();
	
	Если РежимНастройки = "ПростаяНастройка" Тогда
		Элементы.ПростаяНастройка.Видимость = Истина;
		Элементы.СложнаяНастройка.Видимость = Ложь;
		Элементы.УстановитьФлажки.Видимость = Истина;
		Элементы.СнятьФлажки.Видимость = Истина;
		
	ИначеЕсли РежимНастройки = "СложнаяНастройка" Тогда
		Элементы.ПростаяНастройка.Видимость = Ложь;
		Элементы.СложнаяНастройка.Видимость = Истина;
		Элементы.УстановитьФлажки.Видимость = Истина;
		Элементы.СнятьФлажки.Видимость = Истина;
		
	Иначе // Без настройки
		Элементы.ПростаяНастройка.Видимость = Ложь;
		Элементы.СложнаяНастройка.Видимость = Ложь;
		Элементы.УстановитьФлажки.Видимость = Ложь;
		Элементы.СнятьФлажки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьИзменения(ИменаЭлементов, ЕстьИзменения = Истина)
	
	ЦветИзменения = Метаданные.ЭлементыСтиля.ГиперссылкаЦвет.Значение;
	ЦветОбычный   = Элементы.ОбластьДанных.ЦветТекстаЗаголовка; // Авто.
	
	ОписаниеЭлементов = Новый Структура(ИменаЭлементов);
	Для каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
		Элементы[ОписаниеЭлемента.Ключ].ЦветТекстаЗаголовка = ?(ЕстьИзменения, ЦветИзменения, ЦветОбычный);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьТекущуюОбластьДанных()
	
	Если НЕ ОбщегоНазначения.РазделениеВключено()
	 ИЛИ НЕ ОбновитьНеразделенныеДанные Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеРазделителяСеанса = Неопределено;
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЗначениеРазделителяСеанса = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	ТекущаяОбластьДанныхИзменена = ТекущаяОбластьДанных <> ЗначениеРазделителяСеанса;
	
	Если ТекущаяОбластьДанныхИзменена Тогда
		ТекущаяОбластьДанных = ЗначениеРазделителяСеанса;
	КонецЕсли;
	
	Если ТекущаяОбластьДанных = Неопределено Тогда
		ОбновитьРазделенныеДанные = Ложь;
	Иначе
		ОбновитьРазделенныеДанные = Истина;
	КонецЕсли;
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
	Возврат ТекущаяОбластьДанныхИзменена;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВойтиВОбластьДанных(Знач ОбластьДанных)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ВойтиВОбластьДанных(ОбластьДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзОбластиДанных()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ВыйтиИзОбластиДанных();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Скопировано из ОбщаяФормы.ВходВОбластьДанных.

&НаКлиенте
Процедура ВойтиВОбластьДанныхКлиент()
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УказаннаяОбластьДанныхЗаполнена(ОбластьДанных) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВойтиВОбластьДанныхЗавершение", ЭтотОбъект),
			НСтр("ru = 'Выбранная область данных не заполнена, продолжить вход?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
	Иначе
		ВойтиВОбластьДанныхЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВойтиВОбластьДанныхЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВойтиВОбластьДанныхНаСервере(ОбластьДанных);
	ОбновитьИнтерфейс();
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы", ЭтотОбъект);
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы(ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы(Результат, Контекст) Экспорт
	
	Если Результат.Отказ Тогда
		ВыйтиИзОбластиДанныхНаСервере();
		ОбновитьИнтерфейс();
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПродолжениеВходаВОбластьДанныхПослеДействийПриНачалеРаботыСистемы", ЭтотОбъект);
	
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы(ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВходаВОбластьДанныхПослеДействийПриНачалеРаботыСистемы(Результат, Контекст) Экспорт
	
	Если Результат.Отказ Тогда
		ВыйтиИзОбластиДанныхНаСервере();
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзОбластиДанныхКлиент()
	
	ВыйтиИзОбластиДанныхНаСервере();
	ОбновитьИнтерфейс();
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УказаннаяОбластьДанныхЗаполнена(Знач ОбластьДанных)
	
	РегистрОбластиДанных = СтрЗаменить("РегистрСведений.%1", "%1", "ОбластиДанных");
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДанных.Статус КАК Статус
	|ИЗ
	|	#ОбластьДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные = &ОбластьДанных";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ОбластьДанных", РегистрОбластиДанных);
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус = Перечисления["СтатусыОбластейДанных"].Используется;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВойтиВОбластьДанныхНаСервере(Знач ОбластьДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	ВойтиВОбластьДанных(ОбластьДанных);
	
	НачатьТранзакцию();
	
	Попытка
		КлючОбласти = РегистрыСведений["ОбластиДанных"].СоздатьКлючЗаписи(
			Новый Структура("ОбластьДанныхВспомогательныеДанные", ОбластьДанных));
		
		ЗаблокироватьДанныеДляРедактирования(КлючОбласти);
		
		РегистрОбластиДанных = СтрЗаменить("РегистрСведений.%1", "%1", "ОбластиДанных");
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить(РегистрОбластиДанных);
		Элемент.УстановитьЗначение("ОбластьДанныхВспомогательныеДанные", ОбластьДанных);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений["ОбластиДанных"].СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			ИмяПеречисления = "СтатусыОбластейДанных";
			МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
			МенеджерЗаписи.Статус = Перечисления[ИмяПеречисления].Используется;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(КлючОбласти);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзОбластиДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ВыйтиИзОбластиДанных();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФлажки(Форма, НовоеЗначение = Ложь, ПростаяНастройка = Неопределено)
	
	Если ПростаяНастройка = Неопределено Тогда
		Если Не ЗначениеЗаполнено(Форма.РежимНастройки) Тогда
			Возврат;
		КонецЕсли;
		ПростаяНастройка = Форма.РежимНастройки = "ПростаяНастройка";
	КонецЕсли;
	
	Если ПростаяНастройка Тогда
		Форма.ДанныеПодсистемыБазоваяФункциональность = НовоеЗначение;
		Форма.ДанныеПодсистемыПользователи = НовоеЗначение;
		Форма.ДанныеПодсистемыУправлениеДоступом = НовоеЗначение;
		Форма.ДанныеПодсистемыВариантыОтчетов = НовоеЗначение;
		Форма.ДанныеПодсистемыИнформацияПриЗапуске = НовоеЗначение;
		Форма.ДанныеПодсистемыКонтрольВеденияУчета = НовоеЗначение;
	Иначе
		// СтандартныеПодсистемы БазоваяФункциональность
		Форма.ИдентификаторыОбъектовМетаданных = НовоеЗначение;
		Форма.ИдентификаторыОбъектовРасширений = НовоеЗначение;
		Форма.КэшПрограммныхИнтерфейсов = НовоеЗначение;
		
		// СтандартныеПодсистемы Пользователи
		Форма.ПроверитьНазначениеРолей = НовоеЗначение;
		Форма.СоставыГруппПользователей = НовоеЗначение;
		
		// СтандартныеПодсистемы УправлениеДоступом
		Форма.ПраваРолей = НовоеЗначение;
		Форма.ЗависимостиПрав = НовоеЗначение;
		Форма.СвойстваВидовДоступа = НовоеЗначение;
		Форма.ОписаниеПоставляемыхПрофилейГруппДоступа = НовоеЗначение;
		Форма.ОписаниеВозможныхПравДляНастройкиПравОбъектов = НовоеЗначение;
		Форма.ПоставляемыеПрофилиГруппДоступа = НовоеЗначение;
		Форма.НепоставляемыеПрофилиГруппДоступа = НовоеЗначение;
		Форма.РолиПользователейИнформационнойБазы = НовоеЗначение;
		Форма.ПараметрыОграниченияДоступа = НовоеЗначение;
		Форма.ТаблицыГруппДоступа = НовоеЗначение;
		Форма.ЗначенияГруппДоступа = НовоеЗначение;
		Форма.НаследованиеНастроекПравОбъектов = НовоеЗначение;
		Форма.НастройкиПравОбъектов = НовоеЗначение;
		Форма.ГруппыЗначенийДоступа = НовоеЗначение;
		Форма.НаборыЗначенийДоступа = НовоеЗначение;
		
		// СтандартныеПодсистемы ВариантыОтчетов
		Форма.ОтчетыКонфигурации  = НовоеЗначение;
		Форма.ОтчетыРасширений    = НовоеЗначение;
		Форма.ИндексПоискаОтчетов = НовоеЗначение;
		
		// СтандартныеПодсистемы ИнформацияПриЗапуске
		Форма.ПакетыИнформацииПриЗапуске = НовоеЗначение;
		
		// СтандартныеПодсистемы КонтрольВеденияУчета
		Форма.ПравилаПроверкиУчета = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРольИнтерактивноеОткрытиеВнешнихОтчетовИОбработокТекущемуПользователю()
	
	УникальныйИдентификаторТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторТекущегоПользователя);
	Если ТекущийПользователь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РольИнтерактивноеОткрытиеВнешнихОтчетовИОбработок = Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок;
	Если ТекущийПользователь.Роли.Содержит(РольИнтерактивноеОткрытиеВнешнихОтчетовИОбработок) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь.Роли.Добавить(РольИнтерактивноеОткрытиеВнешнихОтчетовИОбработок);
	ТекущийПользователь.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуОбновленияВФайл(ПолноеИмяФайла, ТекстОшибки)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстОшибки);
	ТекстовыйДокумент.Записать(ПолноеИмяФайла);
	
КонецПроцедуры

#КонецОбласти