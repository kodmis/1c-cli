#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Выгружает данные информационной базы.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	Обработчики - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерОбработчиковВыгрузкиДанных - менеджер 
//		обработчиков выгрузки данных. 
//	Сериализатор - СериализаторXDTO - сериализатор XDTO с аннотацией типов. 
//
Процедура ВыгрузитьДанныеИнформационнойБазы(Контейнер, Обработчики, Сериализатор) Экспорт
	
	ИсключаемыеТипы = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыИсключаемыеИзВыгрузкиЗагрузки();
	
	ТекущийПотокЗаписиПересоздаваемыхСсылок = Обработки.ВыгрузкаЗагрузкаДанныхПотокЗаписиПересоздаваемыхСсылок.Создать();
	ТекущийПотокЗаписиПересоздаваемыхСсылок.Инициализировать(Контейнер, Сериализатор);
	
	ТекущийПотокЗаписиСопоставляемыхСсылок = Обработки.ВыгрузкаЗагрузкаДанныхПотокЗаписиСопоставляемыхСсылок.Создать();
	ТекущийПотокЗаписиСопоставляемыхСсылок.Инициализировать(Контейнер, Сериализатор);
	
	// Выгрузка с помощью плана обмена:
	//   - в монопольном режиме выгружается за один этап
	//   - без монольного режима: сначала выгружаются все данные, потом из дополнительного узла.
	
	Если Не Контейнер.ВыгрузитьДифференциальнуюКопию() Тогда
		Узел = ПланыОбмена.МиграцияПриложений.НайтиПоКоду(КодОсновногоУзла());
		ИспользоватьДифференциальноеРезервноеКопирование = Константы.ИспользоватьДифференциальноеРезервноеКопирование.Получить();
		Если ЗначениеЗаполнено(Узел) Тогда
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьВсеВыгружаемыеОбъекты(ИсключаемыеТипы, Контейнер);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
				Если Не ИспользоватьДифференциальноеРезервноеКопирование Тогда
					УзелОбъект = Узел.ПолучитьОбъект();
					УзелОбъект.ОбменДанными.Загрузка = Истина;
					УзелОбъект.Удалить();
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		ИначеЕсли ИспользоватьДифференциальноеРезервноеКопирование Тогда 
			УзелОбъект = ПланыОбмена.МиграцияПриложений.СоздатьУзел();
			УзелОбъект.Код = КодОсновногоУзла();
			УзелОбъект.Наименование = НСтр("ru = 'Резервное копирование (основной узел)'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			УзелОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныйУзел = Неопределено;
	Если Не МонопольныйРежим() Тогда
		// Перед выгрузкой нужно создать дополнительный узел, чтобы зарегистрировать все объекты, 
		// которые изменились за время выгрузки
		ДополнительныйУзел = ПланыОбмена.МиграцияПриложений.НайтиПоКоду(КодДополнительногоУзла());
		Если ЗначениеЗаполнено(ДополнительныйУзел) Тогда
			// Значит остался от прошлого раза
			НачатьТранзакцию();
			Попытка
				ЗаблокироватьВсеВыгружаемыеОбъекты(ИсключаемыеТипы, Контейнер);
				ПланыОбмена.УдалитьРегистрациюИзменений(ДополнительныйУзел);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		Иначе
			УзелОбъект = ПланыОбмена.МиграцияПриложений.СоздатьУзел();
			УзелОбъект.Код = КодДополнительногоУзла();
			УзелОбъект.Наименование = НСтр("ru = 'Резервное копирование (дополнительный узел)'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			УзелОбъект.Записать();
			ДополнительныйУзел = УзелОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойУзел = Неопределено; // Для полной копии узел не используется
	Если Контейнер.ВыгрузитьДифференциальнуюКопию() Тогда
		ОсновнойУзел = ПланыОбмена.МиграцияПриложений.НайтиПоКоду(КодОсновногоУзла());
	КонецЕсли;
		
	ВыгрузитьДанные(
		ИсключаемыеТипы,
		Контейнер,
		ОсновнойУзел,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);
	
	Если ДополнительныйУзел = Неопределено Тогда
		// Выгрузка в монопольном режиме
		ЗавершитьВыгрузку(
			ИсключаемыеТипы, 
			Контейнер, 
			Обработчики, 
			Сериализатор,
			ОсновнойУзел, 
			ТекущийПотокЗаписиПересоздаваемыхСсылок, 
			ТекущийПотокЗаписиСопоставляемыхСсылок);
				
	Иначе 
		// Выгрузка объектов измененных за время выгрузки
		// Если объектов много, то выгрузить без транзакции
		Если МиграцияПриложений.КоличествоИзмененных(ДополнительныйУзел) >= 100 Тогда
			ВыгрузитьДанные(
				ИсключаемыеТипы,
				Контейнер,
				ДополнительныйУзел,
					Обработчики,
					Сериализатор,
					ТекущийПотокЗаписиПересоздаваемыхСсылок,
					ТекущийПотокЗаписиСопоставляемыхСсылок);
			ПланыОбмена.УдалитьРегистрациюИзменений(ДополнительныйУзел, 1);
		КонецЕсли; 
		
		ВыгрузкаВТранзакцииВыполнена = Ложь;
		Для НомерПопытки = 1 По 3 Цикл
			ВыгрузкаВТранзакцииВыполнена = ЗавершитьВыгрузкуВТранзакции(
				ИсключаемыеТипы, 
				Контейнер, 
				ДополнительныйУзел, 
				Обработчики, 
				Сериализатор, 
				ТекущийПотокЗаписиПересоздаваемыхСсылок, 
				ТекущийПотокЗаписиСопоставляемыхСсылок);
			Если ВыгрузкаВТранзакцииВыполнена Тогда
				Прервать;
			КонецЕсли;
			ОбщегоНазначенияБТС.Пауза(60);
		КонецЦикла;
		
		Если Не ВыгрузкаВТранзакцииВыполнена Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось заблокировать область, резервная копия не сделана.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ВыгрузитьОбщиеДанные(
		ИсключаемыеТипы,
		Контейнер,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);
	
	ТекущийПотокЗаписиПересоздаваемыхСсылок.Закрыть();
	ТекущийПотокЗаписиСопоставляемыхСсылок.Закрыть();
	
КонецПроцедуры


// Возвращает признак возможности дифференциальной копии
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ВыгрузкаДифференциальнойКопииВозможна() Экспорт
	
	Узел = ПланыОбмена.МиграцияПриложений.НайтиПоКоду(КодОсновногоУзла());
	
	Возврат ЗначениеЗаполнено(Узел);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьДанные(ИсключаемыеТипы, Контейнер, Узел, Обработчики, Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгружаемыеТипы = Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипы;
	
	Для Каждого ОбъектМетаданных Из ВыгружаемыеТипы Цикл
		
		Если ОбъектМетаданных = Метаданные.Справочники.Пользователи
			Или Метаданные.ПланыОбмена.Найти(ОбъектМетаданных) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьОбъектМетаданных(
			Контейнер,
			ОбъектМетаданных,
			Узел,
			Обработчики,
			Сериализатор,
			ТекущийПотокЗаписиПересоздаваемыхСсылок,
			ТекущийПотокЗаписиСопоставляемыхСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПланыОбмена(ИсключаемыеТипы, Контейнер, Обработчики, Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгружаемыеТипы = Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипыОбщихДанных;
	
	Для Каждого ОбъектМетаданных Из ВыгружаемыеТипы Цикл
		
		Если Метаданные.ПланыОбмена.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьОбъектМетаданных(
			Контейнер,
			ОбъектМетаданных,
			Неопределено,
			Обработчики,
			Сериализатор,
			ТекущийПотокЗаписиПересоздаваемыхСсылок,
			ТекущийПотокЗаписиСопоставляемыхСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьОбщиеДанные(ИсключаемыеТипы, Контейнер, Обработчики, Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгружаемыеТипы = Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипыОбщихДанных;
	
	Для Каждого ОбъектМетаданных Из ВыгружаемыеТипы Цикл
		
		Если ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьОбъектМетаданных(
			Контейнер,
			ОбъектМетаданных,
			Неопределено,
			Обработчики,
			Сериализатор,
			ТекущийПотокЗаписиПересоздаваемыхСсылок,
			ТекущийПотокЗаписиСопоставляемыхСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьГраницыПоследовательности(ИсключаемыеТипы, Контейнер, Обработчики, Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгружаемыеТипы = Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипы;
	
	Для Каждого ОбъектМетаданных Из ВыгружаемыеТипы Цикл
		
		Если ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияБТС.ЭтоНаборЗаписейПоследовательности(ОбъектМетаданных) Тогда
			ВыгрузкаЗагрузкаДанныхГраницПоследовательностей.ПередВыгрузкойТипа(Контейнер,
				Сериализатор, ОбъектМетаданных, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьСправочникПользователи(ИсключаемыеТипы, Контейнер, Обработчики, Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгружаемыеТипы = Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипы;
	ОбъектМетаданных = Метаданные.Справочники.Пользователи;
	Если ВыгружаемыеТипы.Найти(ОбъектМетаданных) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;

	ВыгрузитьОбъектМетаданных(
		Контейнер,
		ОбъектМетаданных,
		Неопределено,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеРасширений(ИсключаемыеТипы, Контейнер, Обработчики, Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгружаемыеТипы = Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипы;
	
	Для Каждого ОбъектМетаданных Из ВыгружаемыеТипы Цикл
		
		Если ОбъектМетаданных.РасширениеКонфигурации() = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Метаданные.ПланыОбмена.Найти(ОбъектМетаданных) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.ПланыОбмена.МиграцияПриложений.Состав.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьОбъектМетаданных(
			Контейнер,
			ОбъектМетаданных,
			Неопределено,
			Обработчики,
			Сериализатор,
			ТекущийПотокЗаписиПересоздаваемыхСсылок,
			ТекущийПотокЗаписиСопоставляемыхСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗавершитьВыгрузкуВТранзакции(ИсключаемыеТипы, Контейнер, ДополнительныйУзел, Обработчики,
	Сериализатор, ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	Если Метаданные.ОбщиеМодули.Найти("ОповещениеПользователейБТС") <> Неопределено Тогда
		МодульОповещениеПользователейБТС = ОбщегоНазначения.ОбщийМодуль("ОповещениеПользователейБТС");
		Оповещения = Новый Массив;
		ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ФоновоеЗадание <> Неопределено Тогда
			ИдентификаторЗадания = Строка(ФоновоеЗадание.УникальныйИдентификатор);
			Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
				Если Сеанс.ИмяПриложения = "1CV8C" Или Сеанс.ИмяПриложения = "WebClient" Тогда
					Оповещение = Новый Структура("ОбластьДанных, ИмяПользователя, НомерСеанса, ОповещениеПользователя");
					Оповещение.ОбластьДанных = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
					Оповещение.ИмяПользователя = Сеанс.Пользователь.Имя;
					Оповещение.НомерСеанса = Сеанс.НомерСеанса;
					Оповещение.ОповещениеПользователя = Новый Структура(
						"ВидОповещения, ИдентификаторЗадания",
						XMLСтрока(Перечисления.ВидыОповещенийПользователей.ПредупреждениеОБлокировкеРаботы), ИдентификаторЗадания);
					Оповещения.Добавить(Оповещение);
				КонецЕсли;
			КонецЦикла;
			Если Оповещения.Количество() > 0 Тогда
				МодульОповещениеПользователейБТС.ДоставитьОповещения(Оповещения);
				ОбщегоНазначенияБТС.Пауза(30);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Попытка
			ЗаблокироватьВсеВыгружаемыеОбъекты(ИсключаемыеТипы, Контейнер);
		Исключение
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	
		КоличествоИзмененных = МиграцияПриложений.КоличествоИзмененных(ДополнительныйУзел);
	
		Если КоличествоИзмененных <> 0 Тогда	
			ВыгрузитьДанные(
				ИсключаемыеТипы,
				Контейнер,
				ДополнительныйУзел,
					Обработчики,
					Сериализатор,
					ТекущийПотокЗаписиПересоздаваемыхСсылок,
					ТекущийПотокЗаписиСопоставляемыхСсылок);
		КонецЕсли;
		
		ЗавершитьВыгрузку(
			ИсключаемыеТипы, 
			Контейнер, 
			Обработчики, 
			Сериализатор,
			ДополнительныйУзел, 
			ТекущийПотокЗаписиПересоздаваемыхСсылок, 
			ТекущийПотокЗаписиСопоставляемыхСсылок);
			
		ДополнительныйУзел.ПолучитьОбъект().Удалить();
					
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗавершитьВыгрузку(ИсключаемыеТипы, Контейнер, Обработчики,
	Сериализатор, Узел, ТекущийПотокЗаписиПересоздаваемыхСсылок, ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	ВыгрузитьПланыОбмена(
		ИсключаемыеТипы,
		Контейнер,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);
	
	ВыгрузитьГраницыПоследовательности(
		ИсключаемыеТипы,
		Контейнер,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);
	
	ВыгрузитьСправочникПользователи(
		ИсключаемыеТипы,
		Контейнер,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);

	// Если узел не заполнен, значит данные расширений были выгружены на предыдущих этапах		
	Если ЗначениеЗаполнено(Узел) Тогда
		ВыгрузитьДанныеРасширений(
			ИсключаемыеТипы,
			Контейнер,
			Обработчики,
			Сериализатор,
			ТекущийПотокЗаписиПересоздаваемыхСсылок,
			ТекущийПотокЗаписиСопоставляемыхСсылок);
	КонецЕсли;
	
КонецПроцедуры

Функция КодОсновногоУзла()
	
	Возврат "c191c628-b094-11ea-a48c-0242ac130016";
		
КонецФункции

Функция КодДополнительногоУзла()
	
	Возврат "974d5c6d-2d7e-4067-9614-dac005823e0e";
		
КонецФункции

Функция ЭтоИсключаемыйТип(ИсключаемыеТипы, ОбъектМетаданных)
	
	Если ИсключаемыеТипы.Найти(ОбъектМетаданных) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка загрузка данных. Выгрузка объекта пропущена'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		ОбъектМетаданных,,
		СтрШаблон(НСтр("ru = 'Выгрузка данных объекта метаданных %1 пропущена, т.к. он включен в
				|список объектов метаданных, исключаемых из выгрузки и загрузки данных'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбъектМетаданных.ПолноеИмя()));
		
	Возврат Истина;
	
КонецФункции

Процедура ВыгрузитьОбъектМетаданных(
	Контейнер,
	ОбъектМетаданных,
	Узел, 
	Обработчики,
	Сериализатор,
	ТекущийПотокЗаписиПересоздаваемыхСсылок,
	ТекущийПотокЗаписиСопоставляемыхСсылок)
	
	МенеджерВыгрузкиОбъекта = Создать();
	
	МенеджерВыгрузкиОбъекта.Инициализировать(
		Контейнер,
		ОбъектМетаданных,
		Узел,
		Обработчики,
		Сериализатор,
		ТекущийПотокЗаписиПересоздаваемыхСсылок,
		ТекущийПотокЗаписиСопоставляемыхСсылок);
	
	МенеджерВыгрузкиОбъекта.ВыгрузитьДанные();
	
	МенеджерВыгрузкиОбъекта.Закрыть();
	
КонецПроцедуры

Процедура ЗаблокироватьВсеВыгружаемыеОбъекты(ИсключаемыеТипы, Контейнер)
	
	Блокировка = Новый БлокировкаДанных();
	Для Каждого ОбъектМетаданных Из Контейнер.ПараметрыВыгрузки().ВыгружаемыеТипы Цикл
		Если ИсключаемыеТипы.Найти(ОбъектМетаданных) = Неопределено Тогда
			Если СтрНайти(ОбъектМетаданных.ПолноеИмя(), ".Перерасчет.") Тогда
				Блокировка.Добавить("Перерасчет." + ОбъектМетаданных.Имя + ".НаборЗаписей");
			Иначе
				Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
