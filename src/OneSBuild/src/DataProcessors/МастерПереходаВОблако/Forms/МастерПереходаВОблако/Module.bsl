
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяКонфигурации = Метаданные.Имя;
	ВерсияКонфигурации = Метаданные.Версия;
	ВерсияБТС = ТехнологияСервиса.ВерсияБиблиотеки();
	СинонимКонфигурации = Метаданные.Синоним;
	ЧасовойПояс = ЧасовойПоясСеанса();
	НаименованиеПриложения = СинонимКонфигурации;
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	
	Элементы.КартинкаКоробкаОблако.Видимость = Не РазделениеВключено;
	Элементы.КартинкаКоробкаФайл.Видимость = Не РазделениеВключено;
	Элементы.КартинкаОблакоОблако.Видимость = РазделениеВключено;
	Элементы.КартинкаОблакоФайл.Видимость = РазделениеВключено;
	
	Элементы.ПолучитьФайлВыгрузкиВМоделиСервиса.Видимость = РазделениеВключено;
	Элементы.ПолучитьФайлВыгрузки.Видимость = Не РазделениеВключено;
	Элементы.ПримечаниеТребуетсяОбновлениеВМоделиСервиса.Видимость = РазделениеВключено;
	Элементы.ПримечаниеТребуетсяОбновление.Видимость = Не РазделениеВключено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РазмерПриложений") Тогда
		МодульРазмерПриложений = ОбщегоНазначения.ОбщийМодуль("РазмерПриложений");
		ПоддерживаетсяРасчетРазмера = МодульРазмерПриложений.ПоддерживаетсяРасчетРазмераПриложений();
	Иначе
		ПоддерживаетсяРасчетРазмера = Ложь;
	КонецЕсли;
	Элементы.ГруппаРазмерПриложения.Видимость = ПоддерживаетсяРасчетРазмера;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Элементы.ПримечаниеТребуетсяОбновление.Заголовок = Строка(Элементы.ПримечаниеТребуетсяОбновление.Заголовок);
	КонецЕсли;	
	
	Если РазделениеВключено Тогда
		Элементы.ПараметрыСравненияШапка.Заголовок = СтрШаблон(НСтр("ru = 'Выберите вариант%1переноса:'"), Символы.ПС);
		Элементы.Параметр1.Заголовок = НСтр("ru = 'Можно продолжать работу в текущем приложении в процессе переноса'");
		Элементы.Параметр2.Заголовок = НСтр("ru = 'Данные автоматически обновятся до нужной версии в процессе переноса'");
		Элементы.СпособПереходаФайл.СписокВыбора[0].Представление =	НСтр("ru = 'Получите файл выгрузки для ручного переноса.'"); 
		Элементы.СпособПереходаОблако.СписокВыбора[0].Представление = СтрШаблон(
			НСтр("ru = 'Введите адрес сервиса%1для автоматического переноса:'"), Символы.ПС);
	КонецЕсли; 
	
	ЗаголовокПриветствия = ?(РазделениеВключено, 
		НСтр("ru = 'Перенос данных приложения'"),
		НСтр("ru = 'Переход в облачный сервис'"));
		
	Заголовок = ЗаголовокПриветствия;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если ЭтоВнешняяОбработка Тогда
		ПолеИспользуемоеИмяФайла = "ИспользуемоеИмяФайла";
		ИмяФайлаОбработки = ОбработкаОбъект[ПолеИспользуемоеИмяФайла];
	Иначе
		ИмяФайлаОбработки = СтрШаблон("%1.epf", ОбработкаОбъект.Метаданные().Имя);
	КонецЕсли;
	
	ВерсияОбработки = ОбработкаОбъект.Версия();
	
	Элементы.Назад.Видимость = Ложь;
	Элементы.ГруппаПредупреждениеОбОбновлении.Видимость = Ложь;
	Элементы.ПарольОткрытый.Видимость = Ложь;
	Элементы.ПарольОткрытый.КартинкаКнопкиВыбора = Элементы.КартинкаОткрыто.Картинка;
	Элементы.ПарольЗакрытый.КартинкаКнопкиВыбора = Элементы.КартинкаЗакрыто.Картинка;
	
	ВариантРегистрации = ВариантАвтоматическоеНазначениеОО();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ИдентификаторТекущегоПользователя = ТекущийПользователь.УникальныйИдентификатор();
	КонецЕсли; 
	
	Элементы.ПодобратьООАвтоматически.СписокВыбора.Добавить(
		ВариантАвтоматическоеНазначениеОО(), НСтр("ru = 'Подобрать обслуживающую организацию автоматически'"));
	Элементы.ВыбратьОО.СписокВыбора.Добавить(
		ВариантВыборОО(), НСтр("ru = 'Выбрать организацию'"));
	Элементы.ВвестиКодАктивации.СписокВыбора.Добавить(
		ВариантВводКодаАктивации(), НСтр("ru = 'Ввести код активации полученный ранее'"));
	
	ЗаполнитьПользователейИБ();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриветствие Тогда
		Если Не СпособПерехода = СпособФайл() И Не ЗначениеЗаполнено(АдресСервиса) Тогда
			Если РазделениеВключено Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не выполнена проверка доступности переноса в сервис. Укажите корректный адрес сервиса.'"),,
					"АдресСервиса",, Отказ);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не выполнена проверка доступности перехода в сервис. Укажите корректный адрес сервиса.'"),,
					"АдресСервиса",, Отказ);
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВход Тогда
		ПроверяемыеРеквизиты.Добавить("Логин");
		ПроверяемыеРеквизиты.Добавить("Пароль");
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводСведений Тогда
		Если ВариантРегистрации = ВариантВводКодаАктивации() Тогда
			ПроверяемыеРеквизиты.Добавить("КодАктивации");
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("РегистрацияИмя");
		Если ВариантРегистрации <> ВариантВводКодаАктивации() Тогда 
			ПроверяемыеРеквизиты.Добавить("РегистрацияПочта");
		КонецЕсли; 
		ПроверяемыеРеквизиты.Добавить("РегистрацияПароль");
		ПроверяемыеРеквизиты.Добавить("РегистрацияПодтверждениеПароля");
		
		Если РегистрацияПароль <> РегистрацияПодтверждениеПароля Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"),, 
				"РегистрацияПодтверждениеПароля",, Отказ); 
			Возврат;	
		КонецЕсли; 
		Если Не Подтверждение Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Требуется подтверждение'"),, 
				"Подтверждение",, Отказ); 
			Возврат;
		КонецЕсли; 	
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКодаАктивации Тогда
		ПроверяемыеРеквизиты.Добавить("КодАктивации");
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборВариантаРегистрации Тогда
		Если ВариантРегистрации = ВариантВыборОО() Тогда
			ПроверяемыеРеквизиты.Добавить("ООКод");
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборСпособаПерехода Тогда
		ПроверяемыеРеквизиты.Добавить("АбонентКод");
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСопоставлениеПользователей Тогда
		НомерСтроки = -1;
		Для Каждого Строка Из ПраваПользователей Цикл
		    НомерСтроки = НомерСтроки + 1;
			Если ЗначениеЗаполнено(Строка.Право) И Не ЗначениеЗаполнено(Строка.Идентификатор) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Для пользователя сервиса ''%1'' с правом ''%2'' не указан пользователь из базы.'"), 
						Строка.ПолноеИмя, ПредставлениеПраваПользователя(Строка.Право)),, 
					СтрШаблон("ПраваПользователей[%1].ПолноеИмяПользователяИБ", Формат(НомерСтроки,"ЧГ=0")),, Отказ); 
			КонецЕсли; 
			Если ЗначениеЗаполнено(Строка.Идентификатор) И ЗначениеЗаполнено(Строка.Логин) И Не ЗначениеЗаполнено(Строка.Право) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Для пользователя сервиса ''%1'' не указано право пользователя из базы.'"), Строка.ПолноеИмя),, 
					СтрШаблон("ПраваПользователей[%1].Право", Формат(НомерСтроки,"ЧГ=0")),, Отказ); 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.0.0.0", ВерсияБТС) > 0 Тогда 
		Форма = ПараметрыПриложения.Получить("ТехнологияСервиса.МиграцияПриложений.ФормаПереходВСервис");
	Иначе
		Форма = ПараметрыПриложения[Вычислить("МиграцияПриложенийКлиент.ИмяФормыПереходаВСервис()")];
	КонецЕсли;
	Если Форма <> Неопределено Тогда
		Закрыть();
		Если Не Форма.Открыта() Тогда
			Форма.Открыть();
		Иначе
			Форма.Активизировать();
		КонецЕсли;
	ИначеЕсли ЭтоВнешняяОбработка Тогда
        ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайлаОбработкиНаСервер", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, ИмяФайлаОбработки, Ложь, УникальныйИдентификатор);
	Иначе
		ПроверитьАдресСервиса();
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьЗаданиеПодготовки(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или ЗакрытьБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемОповещение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Закрыть помощник?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПереходаОблакоПриИзменении(Элемент)
	
	Элементы.ВизуализацииПерехода.ТекущаяСтраница = Элементы.СтраницаОблако;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПереходаФайлПриИзменении(Элемент)
	
	Элементы.ВизуализацииПерехода.ТекущаяСтраница = Элементы.СтраницаФайл;
	Элементы.Далее.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаПриИзменении(Элемент)
	
	ПроверитьАдресСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеРегистрацияОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаСтроки = СсылкаРегистрация() Тогда
		СтандартнаяОбработка = Ложь;
		Если ДоступноПриглашениеДляРегистрации Тогда
			УстановитьСтраницуВыборВариантаРегистрации(Элементы.Страницы.ТекущаяСтраница);
		Иначе
			ВариантРегистрации = ВариантЗапросНаРегистрацию();
			УстановитьСтраницуВводСведений(Элементы.Страницы.ТекущаяСтраница);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбслуживающаяОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресОблачногоСервиса", АдресСервиса);
	ПараметрыФормы.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
	ПараметрыФормы.Вставить("ХранениеФайлаОбработки", ХранениеФайлаОбработки);
	Оповещение = Новый ОписаниеОповещения("ВыборОрганизацииЗавершение", ЭтотОбъект);
	ВариантРегистрации = ВариантВыборОО();
	Если ЭтоВнешняяОбработка Тогда
		ИмяФормыВыбора = "ВнешняяОбработка.МастерПереходаВОблако.Форма.ВыборОбслуживающейОрганизации";
	Иначе
		ИмяФормыВыбора = "Обработка.МастерПереходаВОблако.Форма.ВыборОбслуживающейОрганизации";
	КонецЕсли;
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбслуживающаяОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольЗакрытыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ПарольЗакрытый.Видимость = Ложь;
	Элементы.ПарольОткрытый.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольОткрытыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ПарольЗакрытый.Видимость = Истина;
	Элементы.ПарольОткрытый.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПартнераПриИзменении(Элемент)
	
	ПриИзмененииВариантаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКодАктивацииПриИзменении(Элемент)
	
	ПриИзмененииВариантаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура КодАктивацииИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Элементы.КодАктивации.ЦветТекста = WebЦвета.Черный;
	
КонецПроцедуры

&НаКлиенте
Процедура КодАктивацииПриИзменении(Элемент)
	
	ПроверитьКодАктивации();
	
КонецПроцедуры

&НаКлиенте
Процедура КодАктивацииЗапросНаРегистрациюПриИзменении(Элемент)
	
	НачатьАктивациюКодаРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияИмяПриИзменении(Элемент)
	
	ПоказатьПризнакЗаполнения(РегистрацияИмя, Элементы.ПроверкаИмени.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияПочтаПриИзменении(Элемент)
	
	ПроверитьАдресПочты();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияТелефонПриИзменении(Элемент)
	
	ПоказатьПризнакЗаполнения(РегистрацияТелефон, Элементы.ПроверкаТелефона.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияПарольПриИзменении(Элемент)
	
	ПроверитьВводПароля();

КонецПроцедуры
 
&НаКлиенте
Процедура РегистрацияПодтверждениеПароляПриИзменении(Элемент)
	
	ПроверитьВводПароля();
   
КонецПроцедуры

&НаКлиенте
Процедура СпособПереходаВыгрузкаПриИзменении(Элемент)
	
	ПриИзмененииСпособаПерехода();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПереходаМиграцияПриИзменении(Элемент)
	
	ПриИзмененииСпособаПерехода();

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаШапкаНажатие(Элемент)
	
	СпособПерехода = СпособВыгрузка();
	ПриИзмененииСпособаПерехода();
	
КонецПроцедуры

&НаКлиенте
Процедура МиграцияШапкаНажатие(Элемент)
	
	СпособПерехода = СпособМиграция();
	ПриИзмененииСпособаПерехода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлВыгрузкиОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьСтраницуВыгрузкиДанных(Элементы.Страницы.ТекущаяСтраница, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеТребуетсяОбновлениеОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗакрытьБезусловно = Истина;
	Закрыть();
	ПерейтиПоНавигационнойСсылке("e1cib/app/Обработка.ОбновлениеПрограммы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеИнформацияОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(СтрШаблон("%1?N=%2&P=%3&OIDA-", АдресЛичногоКабинета, Логин, Пароль));
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияПочтаРасширеннаяПодсказкаОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВариантРегистрации = ВариантЗапросНаРегистрацию() Тогда
		УстановитьСтраницуВводКодаАктивации(Элементы.страницы.ТекущаяСтраница);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОбОбновленииОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЧастиИмени = СтрРазделить(ИмяФайлаОбработки, ПолучитьРазделительПути());
	ИмяФайла = ЧастиИмени.Получить(ЧастиИмени.ВГраница());
    АдресОбработки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ДанныеОбработки = ПолучитьОбработкуССервера(АдресОбработкиНаСервере, АдресОбработки);
	
	ПараметрыПередачи = ФайлыБТСКлиент.ПараметрыПолученияФайла();
	ПараметрыПередачи.ИмяФайлаИлиАдрес = ДанныеОбработки;
	ПараметрыПередачи.БлокируемаяФорма = ЭтотОбъект;
	ПараметрыПередачи.ЗаголовокДиалогаСохранения = НСтр("ru = 'Сохранение файла обработки'");
	ПараметрыПередачи.ФильтрДиалогаСохранения = СтрШаблон(НСтр("ru = 'Внешние обработки %1'"), "(*.epf)|*.epf");
	ПараметрыПередачи.ИмяФайлаДиалогаСохранения = ИмяФайла;
	
	ФайлыБТСКлиент.ПолучитьФайлИнтерактивно(ПараметрыПередачи);	
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОбработкаСсылки(Элемент, НавигационнаяСсылкаСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаСтроки = СсылкаПовторитьПопыткуСозданияПриложения() Тогда
		СоздатьПриложениеИзФайла();	
		
	ИначеЕсли НавигационнаяСсылкаСтроки = СсылкаПовторитьПопыткуПередачиДанных() Тогда
		НачатьПередачуДанных(Элементы.Страницы.ТекущаяСтраница);	
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПраваПользователей

&НаКлиенте
Процедура ПраваПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПраваПользователейГиперссылка" Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьПользователяСервиса();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	СоздатьПользователяСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваПользователейПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПользователей = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ПользователиИБ Цикл
		ЭлементСписка = СписокПользователей.Добавить(СтрокаТаблицы, СтрокаТаблицы.ПолноеИмя);
		Если СтрокаТаблицы.Идентификатор = Элементы.ПраваПользователей.ТекущиеДанные.Идентификатор Тогда
			НачальноеЗначение = ЭлементСписка;
		КонецЕсли;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ВыборПользователяИБ", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, СписокПользователей, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваПользователейПолноеИмяПользователяИБОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПраваПользователей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
		Поиск = ПользователиИБ.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
		Если Поиск.Количество() > 0 Тогда
			Поиск[0].ЛогинПользователяСервиса = "";
		КонецЕсли;
		ТекущиеДанные.Идентификатор = Неопределено;
		ТекущиеДанные.Пользователь = Неопределено;
		ТекущиеДанные.Право = Неопределено;
		ТекущиеДанные.ПолноеИмяПользователяИБ = Неопределено;
	КонецЕсли; 
	
	ДополнитьСписокНеСопоставленнымиПользователями();
	ОбновитьСтатусСопоставленияПользователей();
	
КонецПроцедуры
 
#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ПереходДалее(Элементы.Страницы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПереходНазад(Элементы.Страницы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПароль(Команда)
	
	Элементы.РегистрацияПароль.РежимПароля = Не Элементы.РегистрацияПароль.РежимПароля;
	Элементы.РегистрацияПодтверждениеПароля.РежимПароля = Не Элементы.РегистрацияПодтверждениеПароля.РежимПароля;
	Если Элементы.РегистрацияПароль.РежимПароля Тогда
		Элементы.ПоказатьСкрытьПароль.Картинка = Элементы.КартинкаЗакрыто.Картинка;
	Иначе
		Элементы.ПоказатьСкрытьПароль.Картинка = Элементы.КартинкаОткрыто.Картинка;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьВозможностьАвтоматическогоПереходаСРасширениями()
	
	Попытка
		// Поддержка обратной совместимости.
		ТекстПредупреждения = Вычислить(
			"ОбщегоНазначенияВызовСервераБТС.ТекстПредупрежденияОбАктивныхРасширенияхИзменяющихСтруктуруДанных()");
	Исключение
		ТекстПредупреждения = "";
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокиВопроса = Новый Массив;
	СтрокиВопроса.Добавить(НСтр("ru = 'Автоматический переход в сервис с расширениями, изменяющими структуру данных, в данный момент не поддерживается.'"));
	СтрокиВопроса.Добавить(Символы.ПС);
	СтрокиВопроса.Добавить(НСтр("ru = 'Для продолжения необходимо удалить все расширения, изменяющие структуру данных, или использовать вариант ручного перехода.'"));
	СтрокиВопроса.Добавить(НСтр("ru = 'Рекомендуем предварительно создать резервную копию.'"));
	СтрокиВопроса.Добавить(Символы.ПС);
	СтрокиВопроса.Добавить(ТекстПредупреждения);
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Активны расширения конфигурации, изменяющие структуру данных'");

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Неопределено,
		СтрСоединить(СтрокиВопроса, Символы.ПС),
		РежимДиалогаВопрос.ОК,
		ПараметрыВопроса);
		
	Возврат Ложь;	
		
КонецФункции

&НаКлиенте
Процедура ПослеПомещенияФайлаОбработкиНаСервер(ПомещенныеФайлы, ОбработчикЗавершения) Экспорт

	Если ПомещенныеФайлы <> Неопределено Тогда
		ПолеХранения = "Хранение";
		ХранениеФайлаОбработки = КопияОбработкиНаСервере(ПомещенныеФайлы[0][ПолеХранения]);
	КонецЕсли;
	
	ПроверитьАдресСервиса();

КонецПроцедуры

&НаСервереБезКонтекста
Функция КопияОбработкиНаСервере(АдресДанныхОбработки)

	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДанныхОбработки); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Возврат ИмяФайла;

КонецФункции
	
&НаСервере
Функция ЭтоВнешняяОбработка()
	
	ЧастиИмени = СтрРазделить(РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя(), ".");
	Возврат (ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА")
	
КонецФункции

#Область ВыгрузкаДанных

&НаКлиенте
Процедура НачатьВыгрузкуДанных()
	
	Если РежимВыгрузкиДляТехническойПоддержки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыгрузкаДанныхДляТехническойПоддержкиПроверкаЗавершение", ЭтотОбъект);
		
		ЧастиСтрокиВопроса = Новый Массив;
		ЧастиСтрокиВопроса.Добавить(
			НСтр("ru = 'В режиме выгрузки для технической поддержки не будут выгружаться присоединенные файлы, версии объектов и др.'"));
		ЧастиСтрокиВопроса.Добавить(Символы.Пс);
		ЧастиСтрокиВопроса.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Полученную выгрузку следует использовать только в целях расследования проблем и тестирования.'"), 
			Новый Шрифт(,, Истина), WebЦвета.Красный));
		ЧастиСтрокиВопроса.Добавить(Символы.Пс);
		ЧастиСтрокиВопроса.Добавить(НСтр("ru = 'Продолжить?'"));
		ПоказатьВопрос(ОписаниеОповещения, Новый ФорматированнаяСтрока(ЧастиСтрокиВопроса), 
			РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе
		ПослеПроверкиРежимаВыгрузкиДляТехническойПоддержки();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ПослеПроверкиРежимаВыгрузкиДляТехническойПоддержки()
	
	Попытка
		// Поддержка обратной совместимости.		
		ТекстПредупреждения = Вычислить(
			"ОбщегоНазначенияВызовСервераБТС.ТекстПредупрежденияОбАктивныхРасширенияхИзменяющихСтруктуруДанных()");
	Исключение
		ТекстПредупреждения = "";
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ЗапуститьВыгрузкуДанных();
		Возврат;
	КонецЕсли;

	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ПредупреждениеОбАктивныхРасширенияхИзменяющихСтруктуруДанныхЗавершение",
		ЭтотОбъект);

	ТекстВопроса =  ТекстПредупреждения + НСтр("ru = '
		|Загрузка созданного файла выгрузки в сервис будет возможна только если указанные расширения конфигурации имеются в сервисе. 
		|Продолжить выгрузку?'");

	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Активны расширения конфигурации, изменяющие структуру данных'");

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещенияОЗавершении,
		ТекстВопроса,
		РежимДиалогаВопрос.ОКОтмена,
		ПараметрыВопроса);
		
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОбАктивныхРасширенияхИзменяющихСтруктуруДанныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса.Значение <> КодВозвратаДиалога.ОК Тогда
		Возврат;	
	КонецЕсли; 
	
	ЗапуститьВыгрузкуДанных();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаДанныхДляТехническойПоддержкиПроверкаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПослеПроверкиРежимаВыгрузкиДляТехническойПоддержки();	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗапуститьВыгрузкуДанных()
	
	ТекстПредложения = НСтр("ru = 'Файл выгрузки может оказаться большим. В этом случае потребуется расширение для работы с 1С:Предприятием.
							|С этим расширением работа в веб-клиенте станет удобней не только при работе с большими файлами.'");
	
	Оповещение = Новый ОписаниеОповещения("ЗапуститьВыгрузкуДанныхПослеУстановкиРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗапуститьВыгрузкуДанныхПослеУстановкиРасширения(Подключено, ДополнительныеПараметры) Экспорт

	ЗапуститьВыгрузкуДанныхНаСервере();
	
	Заголовок = ЗаголовокВыгрузкаДанных();
	УстановитьКонтролыПоУмолчанию();
	Элементы.Назад.Доступность = Ложь;
	ПоказатьСостояниеОжидание("СостояниеКартинка");
	Элементы.СостояниеТекст.Заголовок = 
		НСтр("ru = 'Выполняется выгрузка данных. Данная операция может занять длительное время.
				 |Пожалуйста, подождите...'"); 
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Элементы.Далее.Видимость = Ложь;
	Если ВыполняетсяСохранениеФайла Тогда
		Элементы.СтраницаОжиданиеЗаголовокОписания.Видимость = Ложь;
	КонецЕсли; 
	
	ИтерацияПроверки = 1;
	ПодключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки", 5);

КонецПроцедуры

&НаСервере
Процедура ЗапуститьВыгрузкуДанныхНаСервере()
	
	Попытка
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ИмяМетодаВыгрузкиДанных = "ВыгрузкаЗагрузкаОбластейДанных.ВыгрузитьТекущуюОбластьДанныхВАрхив";
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(АдресХранилища);
		ПараметрыЗадания.Добавить(РежимВыгрузкиДляТехническойПоддержки);

		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ДанныеСхемыКонфигурации = Вычислить("СхемаКонфигурации.ДвоичныеДанныеСхемы(Ложь, Ложь)");
			ПараметрыЗадания.Добавить(ДанныеСхемыКонфигурации);
			ИмяМетодаВыгрузкиДанных = "ВыгрузкаЗагрузкаОбластейДанных.ВыгрузитьТекущуюОбластьВАрхив";
			ИмяФайлаВыгрузки = ФайлыБТС.ИмяВременногоФайлаВОбщемКаталоге("zip");
			ПараметрыЗадания.Добавить(ИмяФайлаВыгрузки);
			
			ВыгружатьДанныеРасширений = Не РаботаВМоделиСервиса.РазделениеВключено();
			ПараметрыЗадания.Добавить(ВыгружатьДанныеРасширений);
		Исключение
			// Схемы конфигурации и 8.3.17 не поддерживаются.
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяМетодаВыгрузкиДанных,	ПараметрыЗадания,,	
			НСтр("ru = 'Подготовка выгрузки области данных'"));
			
		ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОбработатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение СтрШаблон(
			ШаблонОписанияОшибкиВыгрузкиДанных(), 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьГотовностьВыгрузки()
	
	Попытка
		ГотовностьВыгрузки = ВыгрузкаГотова();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
		
		ОбработатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ПоказатьОшибкуВыгрузкиДанных(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	Если ГотовностьВыгрузки = Истина Тогда
		
		ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
		
		Если ЗначениеЗаполнено(ТекстПредупрежденийВыгрузки) Тогда
			
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
				"ПодверждениеСохраненияФайлаВыгрузкиЗавершение", ЭтотОбъект);
			
			Если ВыполняетсяСохранениеФайла Тогда
				ШаблонВопроса = НСтр("ru = 'Часть данных не выгружена. Сохранить выгрузку? 
											|
											|%1'");
			Иначе
				ШаблонВопроса = НСтр("ru = 'Часть данных не выгружена. Продолжить выгрузку? 
											|
											|%1'");
			КонецЕсли;
			
			ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекстПредупрежденийВыгрузки);

			ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
			ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
			ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
			ПараметрыВопроса.Заголовок = НСтр("ru = 'Часть данных не выгружена'");
		
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
				ОписаниеОповещенияОЗавершении,
				ТекстВопроса,
				РежимДиалогаВопрос.ОКОтмена,
				ПараметрыВопроса);
				
		Иначе
			Если ВыполняетсяСохранениеФайла Тогда
				СохранитьФайлВыгрузки();
			Иначе
				НачатьПередачуДанных(Элементы.Страницы.ТекущаяСтраница);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ИтерацияПроверки = ИтерацияПроверки + 1;
		
		Если ИтерацияПроверки = 3 Тогда
			ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
			ПодключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки", 15);
		ИначеЕсли ИтерацияПроверки = 4 Тогда
			ОтключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки");
			ПодключитьОбработчикОжидания("ПроверитьГотовностьВыгрузки", 30);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодверждениеСохраненияФайлаВыгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса.Значение = КодВозвратаДиалога.ОК Тогда
		Если ВыполняетсяСохранениеФайла Тогда
			СохранитьФайлВыгрузки();
		Иначе
			НачатьПередачуДанных(Элементы.Страницы.ТекущаяСтраница);
		КонецЕсли;
	Иначе
		УдалитьВременныеДанныеПослеСохранения();
		ЗакрытьБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура СохранитьФайлВыгрузки()
	
	Если РежимВыгрузкиДляТехническойПоддержки Тогда
		ИмяФайлаНаКлиенте = "data_dump_technical_support.zip";
	Иначе
		ИмяФайлаНаКлиенте = "data_dump.zip";
	КонецЕсли;
	
	ПараметрыПередачи = ФайлыБТСКлиент.ПараметрыПолученияФайла();
	СвойстваФайла = СвойстваВременногоФайла; // см. ФайлыБТС.СвойстваНовогоВременногоФайла
	Если ЭтоАдресВременногоХранилища(АдресДанныхВыгрузки) Тогда
		ПараметрыПередачи.ИмяФайлаИлиАдрес = АдресДанныхВыгрузки;
	Иначе
		ПараметрыПередачи.ИмяФайлаИлиАдрес = СвойстваФайла.Имя;
		ПараметрыПередачи.ПутьФайлаWindows = СвойстваФайла.ПутьWindows;
		ПараметрыПередачи.ПутьФайлаLinux = СвойстваФайла.ПутьLinux;
	КонецЕсли;
	ПараметрыПередачи.ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеСохраненияФайлаВыгрузки", ЭтотОбъект);
	ПараметрыПередачи.БлокируемаяФорма = ЭтотОбъект;
	ПараметрыПередачи.ЗаголовокДиалогаСохранения = НСтр("ru = 'Получение файла выгрузки'");
	ПараметрыПередачи.ФильтрДиалогаСохранения = СтрШаблон(НСтр("ru = 'Архивы %1'"), "(*.zip)|*.zip");
	ПараметрыПередачи.ИмяФайлаДиалогаСохранения = ИмяФайлаНаКлиенте;
	
	ФайлыБТСКлиент.ПолучитьФайлИнтерактивно(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайлаВыгрузки(ОписаниеФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаОбОшибкеПолученияФайла", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Файл выгрузки подготовлен, но не получен клиентом.%1Повторить попытку сохранения?'"),
			Символы.ПС);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	УдалитьВременныеДанныеПослеСохранения();
	
	ЗакрытьБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОбОшибкеПолученияФайла(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		УдалитьВременныеДанныеПослеСохранения();
		ЗакрытьБезусловно = Истина;
		Закрыть();
		Возврат;
		
	КонецЕсли; 
	
	СохранитьФайлВыгрузки();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныеДанныеПослеСохранения()

	Если СвойстваВременногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФайла = СвойстваВременногоФайла; // см. ФайлыБТС.СвойстваНовогоВременногоФайла
	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВСеансе(
		СвойстваФайла.Имя,
		СвойстваФайла.ПутьWindows,
		СвойстваФайла.ПутьLinux);
	
	ИмяСобытияЖР = НСтр("ru = 'Удаление файла.После сохранения файла выгрузки'", ОбщегоНазначения.КодОсновногоЯзыка());
	ФайлыБТС.УдалитьФайлыВПопытке(ИмяФайлаНаСервере, ИмяСобытияЖР);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуВыгрузкиДанных(Знач ИнформацияОбОшибке)
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'При выгрузке данных произошла ошибка.
		|%1'"),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	Элементы.СтраницыОжидания.ТекущаяСтраница = Элементы.СтраницаОшибкаОжидания;
	Элементы.Назад.Доступность = Истина;

КонецПроцедуры

&НаСервере
Функция ВыгрузкаГотова()
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			
	Если Задание = Неопределено Тогда
		РезультатВыгрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если РезультатВыгрузки = Неопределено Тогда
			ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - не найдено задание подготавливающее выгрузку.'"));
		КонецЕсли;
	Иначе
		
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат Ложь;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ВызватьИсключение(ПодробноеПредставлениеОшибки(ОшибкаЗадания));
			Иначе
				ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - задание подготавливающее выгрузку завершилось с неизвестной ошибкой.'"));
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - задание подготавливающее выгрузку было отменено администратором.'"));
		КонецЕсли;
		
		РезультатВыгрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
		
	КонецЕсли;
	
	ТекстПредупрежденийВыгрузки = "";	
		
	Если ТипЗнч(РезультатВыгрузки) = Тип("Строка") Тогда
		ИмяФайлаВыгрузки = РезультатВыгрузки;
	Иначе
		ИмяФайлаВыгрузки = РезультатВыгрузки.ИмяФайла;
		Если ЗначениеЗаполнено(РезультатВыгрузки.Предупреждения) Тогда
			Разделитель = "
			|-----------------------------------------------
			|";
			
			ТекстПредупрежденийВыгрузки = СтрСоединить(РезультатВыгрузки.Предупреждения, Разделитель);
		КонецЕсли;
	КонецЕсли;
		
	ОбъектФС = Новый Файл(ИмяФайлаВыгрузки);
	Если Не ОбъектФС.Существует() Или Не ОбъектФС.ЭтоФайл() Тогда
		ВызватьИсключение(НСтр("ru = 'При подготовке выгрузки произошла ошибка - не найден файл результата'"));
	КонецЕсли;
		
	РазмерФайлаВыгрузки = ОбъектФС.Размер();
	АдресДанныхВыгрузки = Неопределено;
	СвойстваФайла = ФайлыБТС.СвойстваНовогоВременногоФайла("zip");
	СвойстваФайла.Имя = ОбъектФС.Имя;
	СвойстваВременногоФайла = СвойстваФайла;
		
	ИдентификаторЗадания = Неопределено;
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьЗаданиеПодготовки(Знач ИдентификаторЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Или Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена выполнения задания подготовки выгрузки области данных'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьОшибку(Знач ПодробноеПредставление)
	
	ШаблонЗаписиЖР = НСтр("ru = 'При выгрузке данных произошла ошибка:
                           |
                           |-----------------------------------------
                           |%1
                           |-----------------------------------------'");
	ТекстЗаписиЖР = СтрШаблон(ШаблонЗаписиЖР, ПодробноеПредставление);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстЗаписиЖР);
		
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаПереходов

&НаКлиенте
Процедура ПереходДалее(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаПриветствие И ПроверитьЗаполнение() Тогда
		Если СпособПерехода = СпособФайл() Тогда
			УстановитьСтраницуВыгрузкиДанных(Элементы.Страницы.ТекущаяСтраница, Истина);
		ИначеЕсли ПроверитьВозможностьАвтоматическогоПереходаСРасширениями() Тогда
			УстановитьСтраницуВход(ТекущаяСтраница);
		КонецЕсли; 
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВход И ПроверитьЗаполнение() Тогда
		НачатьВходВСервис(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборВариантаРегистрации И ПроверитьЗаполнение() Тогда
		УстановитьСтраницуВводСведений(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводСведений И ПроверитьЗаполнение() Тогда
		НачатьРегистрациюВСервисе(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводКодаАктивации Тогда
		УстановитьСтраницуВход(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборСпособаПерехода И ПроверитьЗаполнение() Тогда
		Если ПользователиИБ.Количество() > 0 Тогда
			НачатьСопоставлениеПользователей(ТекущаяСтраница);
		ИначеЕсли СпособПерехода = СпособМиграция() Тогда
			ПерейтиВФормуМиграцииПриложения();
		Иначе			
			УстановитьСтраницуВыгрузкиДанных(ТекущаяСтраница, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСопоставлениеПользователей И ПроверитьЗаполнение() Тогда
		Если СпособПерехода = СпособМиграция() Тогда
			ПерейтиВФормуМиграцииПриложения();
		Иначе			
			УстановитьСтраницуВыгрузкиДанных(ТекущаяСтраница, Ложь);
		КонецЕсли;

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыгрузкаДанных Тогда
		НачатьВыгрузкуДанных();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
		ЗакрытьБезусловно = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНазад(ТекущаяСтраница)
	
	Элементы.Назад.Видимость = Истина;
	Если ТекущаяСтраница = Элементы.СтраницаВыборВариантаРегистрации Тогда
		УстановитьСтраницуВход(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводСведений Тогда
		Если ВариантРегистрации = ВариантЗапросНаРегистрацию()  Тогда
			УстановитьСтраницуВход(ТекущаяСтраница);
		Иначе
			УстановитьСтраницуВыборВариантаРегистрации(ТекущаяСтраница);
		КонецЕсли; 
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВход Тогда
		УстановитьСтраницуПриветствие(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОжидание Тогда
		Если СпособПерехода = СпособФайл() Тогда
			ТекущаяСтраница = Элементы.СтраницаПриветствие;
			УстановитьСтраницуВыгрузкиДанных(ТекущаяСтраница, Истина);
		ИначеЕсли Не ВыполняласьРегистрация Тогда
			УстановитьСтраницуВход(ТекущаяСтраница);
		Иначе
			УстановитьСтраницуВводСведений(ТекущаяСтраница);
		КонецЕсли;
		Элементы.СтраницыОжидания.ТекущаяСтраница = Элементы.СтраницаОписаниеОжидания;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборСпособаПерехода Тогда
		УстановитьСтраницуВход(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСопоставлениеПользователей Тогда
		УстановитьСтраницуСпособПерехода(ТекущаяСтраница);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыгрузкаДанных Тогда
		Если ВыполняетсяСохранениеФайла Тогда
			Если ИмяСтраницыПереходаКВыгрузке = Элементы.СтраницаПриветствие.Имя Тогда
				УстановитьСтраницуПриветствие(ТекущаяСтраница);
			Иначе
				УстановитьСтраницуСпособПерехода(ТекущаяСтраница);
			КонецЕсли;
		ИначеЕсли ПользователиИБ.Количество() > 0 Тогда
			УстановитьСтраницуСопоставлениеПользователей(ТекущаяСтраница);
		Иначе
			УстановитьСтраницуСпособПерехода(ТекущаяСтраница);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводКодаАктивации Тогда
		УстановитьСтраницуВход(ТекущаяСтраница);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКонтролыПоУмолчанию()
	
	Элементы.Далее.Заголовок = НСтр("ru = 'Далее'");
	Элементы.Далее.Видимость = Истина;
	Элементы.Далее.Доступность = Истина;
	
	Элементы.Назад.Заголовок = НСтр("ru = '< Назад'");
	Элементы.Назад.Видимость = Истина;
	Элементы.Назад.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПриветствие(ТекущаяСтраница)
	
	Заголовок = ЗаголовокПриветствия;
	УстановитьКонтролыПоУмолчанию();
	
	Элементы.Назад.Видимость = Ложь;
	Если СпособПерехода = СпособМиграция() Тогда
		СпособПерехода = ?(ЗначениеЗаполнено(АдресСервиса), СпособВыгрузка(), СпособФайл());
		ПриИзмененииСпособаПерехода();
	КонецЕсли; 
	
	ТекущаяСтраница = Элементы.СтраницаПриветствие;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуВход(ТекущаяСтраница)
	
	Заголовок = ЗаголовокВход();
	УстановитьКонтролыПоУмолчанию();
	Элементы.Далее.Заголовок = НСтр("ru = 'Войти'");
	
	ТекущаяСтраница = Элементы.СтраницаВход;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуВыборВариантаРегистрации(ТекущаяСтраница)
	
	Если КоличествоОбслуживающихОрганизаций = 0 Тогда
		Заголовок = НСтр("ru = 'Шаг регистрации 1 из 2: Выбор варианта'");
		Элементы.ВыбратьОрганизациюЗаголовок.Видимость = Ложь;
		Элементы.ЗаголовокВвестиКодАктивации.Видимость = Ложь;
		Элементы.ПодобратьООАвтоматически.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ПодобратьООАвтоматически.СписокВыбора[0].Представление = НСтр("ru = 'Начать новую регистрацию'"); 
	Иначе
		Заголовок = НСтр("ru = 'Шаг регистрации 1 из 2: Выбор организации'");
		Элементы.ВыбратьОрганизациюЗаголовок.Видимость = Истина;
		Элементы.ЗаголовокВвестиКодАктивации.Видимость = Истина;
		Элементы.ПодобратьООАвтоматически.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ПодобратьООАвтоматически.СписокВыбора[0].Представление = 
			НСтр("ru = 'Подобрать обслуживающую организацию автоматически'"); 
	КонецЕсли;
	КодАктивации = Неопределено;
	УстановитьКонтролыПоУмолчанию();
	Элементы.ГруппаВыбратьОО.Видимость = Не (КоличествоОбслуживающихОрганизаций = 0);
	ТекущаяСтраница = Элементы.СтраницаВыборВариантаРегистрации;

КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьСтраницуВводСведений(ТекущаяСтраница)
	
	Если ВариантРегистрации = ВариантЗапросНаРегистрацию() Тогда
		Заголовок = НСтр("ru = 'Шаг регистрации 1 из 2: Ввод сведений'") 
	Иначе
		Заголовок = НСтр("ru = 'Шаг регистрации 2 из 2: Ввод сведений'");
	КонецЕсли;
	
	УстановитьКонтролыПоУмолчанию();
	Элементы.Далее.Заголовок = НСтр("ru = 'Зарегистрироваться'");
	
	Если ВариантРегистрации = ВариантЗапросНаРегистрацию() Тогда
		Элементы.ИнформацияВариантаРегистрации.ТекущаяСтраница = Элементы.СтраницаИнформацияПоОрганизации;
		Элементы.ДанныеВыбраннойОрганизации.Заголовок = СтрокаКонтактовСлужбыПоддержки();
	ИначеЕсли ВариантРегистрации = ВариантВводКодаАктивации() Тогда
		Элементы.ИнформацияВариантаРегистрации.ТекущаяСтраница = Элементы.СтраницаКодАктивации;
		ПроверитьКодАктивации();
	Иначе
		Элементы.ИнформацияВариантаРегистрации.ТекущаяСтраница = Элементы.СтраницаИнформацияПоОрганизации;
		Если ВариантРегистрации = ВариантВыборОО() Тогда
			ЗаголовокДанныхВыбора = СтрокаКонтактовОбслуживающейОрганизации();
		ИначеЕсли ВариантРегистрации = ВариантЗапросНаРегистрацию() Тогда
			ЗаголовокДанныхВыбора = СтрокаКонтактовСлужбыПоддержки();
		Иначе
			ЗаголовокДанныхВыбора = ?(КоличествоОбслуживающихОрганизаций = 0, 
				СтрокаКонтактовСлужбыПоддержки(), СтрокаАвтоподбораОрганизации());
		КонецЕсли; 
		Элементы.ДанныеВыбраннойОрганизации.Заголовок = ЗаголовокДанныхВыбора;
	КонецЕсли;
	
	Элементы.КодАктивации.Видимость = (ВариантРегистрации = ВариантВводКодаАктивации());
	Элементы.РегистрацияПочта.ТолькоПросмотр = (ВариантРегистрации = ВариантВводКодаАктивации());
	ТекущаяСтраница = Элементы.СтраницаВводСведений;
	
	Если ВариантРегистрации = ВариантВводКодаАктивации() Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.КодАктивации;
	КонецЕсли; 
	
	ПоказатьПризнакЗаполнения(РегистрацияИмя, Элементы.ПроверкаИмени.Имя);
	ПроверитьАдресПочты();
	ПоказатьПризнакЗаполнения(РегистрацияТелефон, Элементы.ПроверкаТелефона.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуВводКодаАктивации(ТекущаяСтраница)
	
	Заголовок = НСтр("ru = 'Шаг регистрации 2 из 2: Ввод кода активации'");
	УстановитьКонтролыПоУмолчанию();

	ТекущаяСтраница = Элементы.СтраницаВводКодаАктивации;
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьСтраницуОжидание(ТекущаяСтраница, ПараметрыОжидания)
	
	Заголовок = ПараметрыОжидания.ЗаголовокСтраницы;
	Если ВыполняетсяСохранениеФайла Тогда
		Элементы.СтраницаОжиданиеЗаголовокОписания.Видимость = Ложь;
	Иначе
		Элементы.СтраницаОжиданиеЗаголовокОписания.Видимость = ПараметрыОжидания.ОтображатьЗаголовокОписания;
	КонецЕсли;
	
	Элементы.СтраницаОжиданияОписание.Заголовок = ПараметрыОжидания.ОписаниеОжидания;
	Элементы.СостояниеТекст.Заголовок = Символы.ПС + ПараметрыОжидания.ОписаниеСостояния;
	
	УстановитьКонтролыПоУмолчанию();
	Элементы.Далее.Видимость = Ложь;
	Элементы.Назад.Доступность = Ложь;
	
	ПоказатьСостояниеОжидание("СостояниеКартинка");
	
	ТекущаяСтраница = Элементы.СтраницаОжидание;
	СчетчикОжидания = 0;
	ДопустимоеОжидание = ПараметрыОжидания.ДопустимоеОжидание;
	ПроверитьРезультатЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуСпособПерехода(ТекущаяСтраница)
	
	Если РазделениеВключено Тогда
		ШаблонЗаголовка = НСтр("ru = 'Шаг 2 из %1: Выбор способа переноса'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Шаг 2 из %1: Выбор способа перехода'");
	КонецЕсли;
	
	Заголовок = СтрШаблон(ШаблонЗаголовка, ?(ПользователиИБ.Количество() = 0, 3, 4));
	УстановитьКонтролыПоУмолчанию();
	Если МиграцияДоступна Или ВыгрузкаДоступна Тогда
		Элементы.Далее.Доступность = Истина;
		СпособПерехода = СпособВыгрузка();
	Иначе 
		Элементы.Далее.Доступность = Ложь;
		СпособПерехода = -1;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницаВыборСпособаПерехода;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуСопоставлениеПользователей(ТекущаяСтраница)
	
	Заголовок = ЗаголовокСопоставлениеПользователей();
	ТекущаяСтраница = Элементы.СтраницаСопоставлениеПользователей;
	УстановитьКонтролыПоУмолчанию();
	Элементы.Далее.Заголовок = НСтр("ru = 'Продолжить'");
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьСтраницуВыгрузкиДанных(ТекущаяСтраница, ЭтоСохранениеФайла)
	
	ВыполняетсяСохранениеФайла = ЭтоСохранениеФайла;
	ИмяСтраницыПереходаКВыгрузке = ТекущаяСтраница.Имя;
	
	Заголовок = ЗаголовокВыгрузкаДанных();
	Элементы.ГруппаНаименованиеПриложения.Видимость = Не ВыполняетсяСохранениеФайла;
	
	ТекущаяСтраница = Элементы.СтраницаВыгрузкаДанных;
	УстановитьКонтролыПоУмолчанию();
	Элементы.Далее.Заголовок = ?(ВыполняетсяСохранениеФайла, НСтр("ru = 'Продолжить'"), НСтр("ru = 'Выгрузить данные'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуЗавершение(ТекущаяСтраница)
	
	Заголовок = НСтр("ru = 'Выгрузка завершена'");
	ТекущаяСтраница = Элементы.СтраницаЗавершение;
	УстановитьКонтролыПоУмолчанию();
	
	Элементы.Далее.Заголовок = НСтр("ru = 'Завершить'");
    Элементы.Назад.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВФормуМиграцииПриложения()
	
	Если ЭтоВнешняяОбработка И ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.0.3.0", ВерсияБТС) > 0 Тогда
		ИмяФормыМиграции = "Обработка.МиграцияПриложения.Форма.ПереходВСервис";
		ФормаМиграции = ПолучитьФорму(ИмяФормыМиграции); // ФормаКлиентскогоПриложения
	Иначе
		ФормаМиграции = ПолучитьФорму("Обработка.МастерПереходаВОблако.Форма.МиграцияПриложения");
		ФормаМиграции.ВерсияПрограммногоИнтерфейса = ВерсияПрограммногоИнтерфейса;
	КонецЕсли;
	
	ЧастиАдреса = СтрРазделить(НРег(СокрЛП(АдресСервиса)), "/", Ложь);
	Протокол = ЧастиАдреса[0];
	Если СтрЗаканчиваетсяНа(Протокол, ":") Тогда
		ЧастиАдреса.Удалить(0);
	КонецЕсли;
	ИмяСервера = ЧастиАдреса[0];
	
	ФормаМиграции.АдресСервиса = "https://" + ИмяСервера;
	ФормаМиграции.Логин = Логин;
	ФормаМиграции.Пароль = Пароль;
	ФормаМиграции.КодАбонента = КодАбонента;
	ФормаМиграции.АдресПрограммногоИнтерфейса = АдресПрограммногоИнтерфейса;
	ФормаМиграции.АдресРегистрации = АдресРегистрации;
	ФормаМиграции.АдресВосстановления = АдресВосстановления;
	ФормаМиграции.РегистрацияРазрешена = ДоступенЗапросНаРегистрацию;
	ФормаМиграции.СостояниеРегистрацииВСервисе = "Зарегистрирован";
	ФормаМиграции.Элементы.Назад.Видимость = Ложь;
	
	РольВладелец = "Владелец";
	РольПользователь = "Пользователь";
	ПраваПользователейМиграции = ФормаМиграции.ПраваПользователей; // ТаблицаЗначений
	
	Если ПраваПользователей.Количество() > 0 Тогда
		Для Каждого Строка Из ПраваПользователей Цикл
			Если ЗначениеЗаполнено(Строка.Логин) Тогда
				НоваяСтрока = ПраваПользователейМиграции.Добавить();
				НоваяСтрока.Логин = Строка.Логин;
				НоваяСтрока.Наименование = Строка.ПолноеИмя;
				НоваяСтрока.Пользователь = Строка.Пользователь;
				НоваяСтрока.Право = ПредставлениеПраваПользователя(Строка.Право);
				НоваяСтрока.ЭлектроннаяПочта = Строка.ЭлектроннаяПочта;
				НоваяСтрока.Роль = ?(Строка.ЭтоВладелецАбонента, РольВладелец, РольПользователь);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НоваяСтрока = ПраваПользователейМиграции.Добавить();
		НоваяСтрока.Логин = Логин;
		НоваяСтрока.Наименование = АбонентНаименование;
		НоваяСтрока.Право = ПредставлениеПраваПользователя(ПравоЗапускИАдминистрирование());
		НоваяСтрока.Роль = РольВладелец; 
	КонецЕсли;
		
	ЗакрытьБезусловно = Истина;
	Закрыть();
	ФормаМиграции.Открыть();
	ФормаМиграции.Элементы.Страницы.ТекущаяСтраница = ФормаМиграции.Элементы.СтраницаСозданиеПриложение;

КонецПроцедуры

&НаКлиенте
Функция ЗаголовокВход()
	
	Возврат СтрШаблон(НСтр("ru = 'Шаг 1 из %1: Вход в облачный сервис'"), ?(ПользователиИБ.Количество() = 0, 3, 4));

КонецФункции

&НаКлиенте
Функция ЗаголовокСопоставлениеПользователей()
	
	Возврат СтрШаблон(НСтр("ru = 'Шаг 3 из %1: Сопоставление пользователей'"), ?(ПользователиИБ.Количество() = 0, 3, 4));

КонецФункции

&НаКлиенте
Функция ЗаголовокВыгрузкаДанных()
	
	Возврат ?(ВыполняетсяСохранениеФайла, 
		НСтр("ru = 'Выгрузка данных'"), 
		СтрШаблон(НСтр("ru = 'Шаг %1 из %1: Выгрузка данных'"), ?(ПользователиИБ.Количество() = 0, 3, 4)));

КонецФункции

#КонецОбласти 

#Область ЗаполнениеНастроекОблачногоСервиса

&НаКлиенте
Процедура ПроверитьАдресСервиса()
	
	Если ЗначениеЗаполнено(АдресСервиса) Тогда
		Элементы.Далее.Доступность = Ложь;
		ПоказатьСостояниеОжидание(Элементы.ПроверкаАдресаСервиса.Имя);
		ПараметрыЗапроса = ШаблонПараметровЗапросов();
		ПараметрыЗапроса.Вставить("Имя", ИмяКонфигурации);
		ПараметрыЗапроса.Вставить("Версия", ВерсияКонфигурации);
		НачатьЗапросПоНастройкам(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
		ПроверитьРезультатЗапроса();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьЗапросПоНастройкам(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания)
	
	ОбработчикРезультата = "Подключаемый_ЗаполнитьНастройки";
	ИмяМететода = "ПолучитьИнформациюОВозможностяхПерехода";
	ПараметрыЗапроса.Вставить("МетодИнформация", "info");
	ПараметрыЗапроса.Вставить("МетодВариантыЗагрузки", 
		СтрШаблон("import-options?name=%1&version=%2", ПараметрыЗапроса.Имя, ПараметрыЗапроса.Версия));
    НачатьВыполнениеФоновогоЗаданияНаСервере(ИмяМететода, ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	// Параметры запуска ОтладкаПереходаВОблако/...
	
	Отладка_УвеличиласьВерсияОбработки = (ПараметрЗапуска = "ОтладкаПереходаВОблако/УвеличиласьВерсияОбработки");
	Отладка_КонфигурацияНеПоддерживается = (ПараметрЗапуска = "ОтладкаПереходаВОблако/КонфигурацияНеПоддерживается");
	Отладка_ОтсутствуютОбслуживающиеОрганизации = (ПараметрЗапуска = "ОтладкаПереходаВОблако/ОтсутствуютОбслуживающиеОрганизации");
	Отладка_МиграцияНеДоступна = (ПараметрЗапуска = "ОтладкаПереходаВОблако/МиграцияНеДоступна");
	Отладка_МиграцияДоступна = (ПараметрЗапуска = "ОтладкаПереходаВОблако/МиграцияДоступна");
	Отладка_ВыгрузкаНеДоступна = (ПараметрЗапуска = "ОтладкаПереходаВОблако/ВыгрузкаНеДоступна");
	Отладка_ПриглашениеДляРегистрацииНеДоступно = (ПараметрЗапуска = "ОтладкаПереходаВОблако/ПриглашениеДляРегистрацииНеДоступно");
	
	ИмяЭлементаСостояния = Элементы.ПроверкаАдресаСервиса.Имя;
	Если Результат.Информация.КодСостояния <> 200 Тогда
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
		
		Если РазделениеВключено Тогда
			ШаблонСообщения = НСтр("ru = 'Облачный сервис не найден или не поддерживает интерактивный перенос в сервис.'");			
		Иначе
			ШаблонСообщения = НСтр("ru = 'Облачный сервис не найден или не поддерживает интерактивный переход в сервис.'");			
		КонецЕсли; 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ШаблонСообщения, ,
			Элементы.АдресСервиса.Имя, Элементы.АдресСервиса.Имя);
		Возврат;
	КонецЕсли;
	
	Данные = Результат.Информация.Данные;
	
	Если Не Данные.Enabled Тогда
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
		
		Если РазделениеВключено Тогда
			ШаблонСообщения =  НСтр("ru = 'Облачный сервис не поддерживает интерактивный перенос в сервис.'");
		Иначе
			ШаблонСообщения =  НСтр("ru = 'Облачный сервис не поддерживает интерактивный переход в сервис.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ШаблонСообщения, ,
			Элементы.АдресСервиса.Имя, Элементы.АдресСервиса.Имя);
		Возврат;
	КонецЕсли; 
	
	АдресРегистрации = Данные.url_register;
	АдресВосстановления = Данные.url_recover;
	АдресПрограммногоИнтерфейса = Данные.url_api;
	Данные.Свойство("api_version", ВерсияПрограммногоИнтерфейса);
	
	ВосстановлениеРегистрация = Новый Массив;
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Забыли логин или пароль?'")));
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(" "));
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Восстановить'"),,,, Данные.url_recover));
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + Символы.ПС));
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Не зарегистрированы в облаке?'")));
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(" "));
	ВосстановлениеРегистрация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Зарегистрироваться'"),,,,  СсылкаРегистрация()));
	Элементы.ВосстановлениеРегистрация.Заголовок = Новый ФорматированнаяСтрока(ВосстановлениеРегистрация);
	
	Данные.Свойство("register_available", ДоступенЗапросНаРегистрацию);
	Если Не Отладка_ПриглашениеДляРегистрацииНеДоступно Тогда
		Данные.Свойство("invitation_available", ДоступноПриглашениеДляРегистрации);
	КонецЕсли; 
	Данные.Свойство("support_companies_available", ИспользоватьОбслуживающиеОрганизации);
	Данные.Свойство("url_adm", АдресЛичногоКабинета);
	Данные.Свойство("url_epf", АдресОбработкиНаСервере);
	
	Если Не РазделениеВключено И Результат.ВерсияОбработкиНаСервере > ВерсияОбработки Или Отладка_УвеличиласьВерсияОбработки Тогда
		Элементы.ГруппаПредупреждениеОбОбновлении.Видимость = Истина;
	Иначе
		Элементы.ГруппаПредупреждениеОбОбновлении.Видимость = Ложь;
	КонецЕсли; 
	
	Если ИспользоватьОбслуживающиеОрганизации И Не Отладка_ОтсутствуютОбслуживающиеОрганизации Тогда
		Данные.Свойство("support_companies_count", КоличествоОбслуживающихОрганизаций);
	КонецЕсли; 
	
	ПолеКонтактыПровайдера = "provider_contacts";
	Если Данные.Свойство(ПолеКонтактыПровайдера) Тогда
		КонтактыПровайдера = Данные[ПолеКонтактыПровайдера];
		ПровайдерГород = КонтактыПровайдера.city;
		ПровайдерСайт = КонтактыПровайдера.site;
		ПровайдерТелефон = КонтактыПровайдера.phone;
		ПровайдерПочта = КонтактыПровайдера.email;
	КонецЕсли; 
	
	Если Данные.applications.Найти(ИмяКонфигурации) = Неопределено Или Отладка_КонфигурацияНеПоддерживается Тогда
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Облачный сервис не поддерживает конфигурацию ''%1'''"), СинонимКонфигурации),, 
			Элементы.АдресСервиса.Имя, Элементы.АдресСервиса.Имя);
		Элементы.Далее.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.Далее.Доступность = Истина;
	КонецЕсли;
	
	Ошибка = Ложь;
	СообщениеОбОшибке = "";
	Данные = Результат.ВариантыЗагрузки.Данные;
	Если Результат.ВариантыЗагрузки.Ошибка Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = Результат.ВариантыЗагрузки.СообщениеОбОшибке;
	ИначеЕсли Данные.error Тогда 
		Ошибка = Истина;
		СообщениеОбОшибке = Данные.description;
	КонецЕсли;
	
	Если Ошибка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, Элементы.АдресСервиса.Имя);
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
	Иначе
		Если Отладка_МиграцияДоступна Тогда
			МиграцияДоступна = Истина;
		ИначеЕсли Отладка_МиграцияНеДоступна Тогда
			МиграцияДоступна = Ложь;
		Иначе
			МиграцияДоступна = Данные.migration;
		КонецЕсли; 
		Если Не Отладка_ВыгрузкаНеДоступна Тогда
			ВыгрузкаДоступна = Данные.upload;
		КонецЕсли;
		МинимальнаяВерсияДляВыгрузки = Данные.upload_min_version;
		Для Каждого ПоддерживаемаяВерсия Из Данные.migration_versions Цикл
			Если ПоддерживаемыеВерсииДляМиграции.НайтиПоЗначению(ПоддерживаемаяВерсия) = Неопределено Тогда
				ПоддерживаемыеВерсииДляМиграции.Добавить(ПоддерживаемаяВерсия);
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьПоСостояниюОбновления();
		ПоказатьСостояниеГотово(ИмяЭлементаСостояния);
		Элементы.Далее.Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбработкуССервера(АдресНаСервере, АдресОбработки)
	
	ЧастиАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресНаСервере);
	Соединение = Новый HTTPСоединение(ЧастиАдреса.Хост, 443,,,, 60,
		Новый ЗащищенноеСоединениеOpenSSL(,Новый СертификатыУдостоверяющихЦентровОС));
	Запрос = Новый HTTPЗапрос(ЧастиАдреса.ПутьНаСервере);
	Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	ДанныеОбработки = Ответ.ПолучитьТелоКакДвоичныеДанные();
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбработки, АдресОбработки);
	
КонецФункции

#КонецОбласти

#Область ПроверкаАдресаЭлектроннойПочты

&НаКлиенте
Процедура ПроверитьАдресПочты()
	
	Если ЗначениеЗаполнено(РегистрацияПочта) И ВариантРегистрации <> ВариантВводКодаАктивации() Тогда
		ПоказатьСостояниеОжидание(Элементы.ПроверкаПочты.Имя);
		ПараметрыЗапроса = ШаблонПараметровЗапросов();
		ПараметрыЗапроса.Вставить("Почта", РегистрацияПочта);
		НачатьПроверкуПочты(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
		ПроверитьРезультатЗапроса();
	Иначе
		ПоказатьСостояниеПусто("ПроверкаПочты");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьПроверкуПочты(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания)
	
	ОбработчикРезультата = "Подключаемый_ПоказатьРезультатПроверкиАдресаЭлектроннойПочты"; 
	ПараметрыЗапроса.Вставить("Метод", СтрШаблон("email-available?email=%1", 
		КодироватьСтроку(ПараметрыЗапроса.Почта, СпособКодированияСтроки.КодировкаURL)));
	
	НачатьВыполнениеФоновогоЗаданияНаСервере("ПолучитьДанные", ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьРезультатПроверкиАдресаЭлектроннойПочты(Результат, ДополнительныеПараметры) Экспорт
	
	Ошибка = Ложь;
	СообщениеОбОшибке = "";
	ИмяЭлементаСостояния = Элементы.ПроверкаПочты.Имя;
	Данные = Результат.Данные;
	Если Результат.Ошибка Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = Результат.СообщениеОбОшибке;
	ИначеЕсли Данные.error Тогда 
		Ошибка = Истина;
		СообщениеОбОшибке = Данные.description;
	КонецЕсли;
	
	Если Ошибка Тогда
		Если ВариантРегистрации <> ВариантЗапросНаРегистрацию() И  Результат.КодСостояния = 409 Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + СтрШаблон(
				НСтр("ru = 'Регистрировались ранее? Вернитесь на шаг назад и выберите вариант ''%1''.'"),
				Элементы.ВвестиКодАктивации.СписокВыбора[0].Представление);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке, , Элементы.РегистрацияПочта.Имя);
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
	Иначе	
		ПоказатьСостояниеГотово(ИмяЭлементаСостояния);
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти 

#Область ЗаполнениеДанныхАктивации

&НаКлиенте
Процедура ПроверитьКодАктивации()
	
	ИмяЭлементаСостояния = Элементы.ПроверкаКодаАктивации.Имя;
	Если ЗначениеЗаполнено(КодАктивации) Тогда
		ПоказатьСостояниеОжидание(ИмяЭлементаСостояния);
		ПараметрыЗапроса = ШаблонПараметровЗапросов();
		ПараметрыЗапроса.Вставить("КодАктивации", КодАктивации);
		НачатьЗапросПоКодуАктивации(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
		ПроверитьРезультатЗапроса();
	Иначе
		ПоказатьСостояниеПусто(ИмяЭлементаСостояния);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьЗапросПоКодуАктивации(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания)
	
	ОбработчикРезультата = "Подключаемый_ЗаполнитьДанныеПоКодуАктивации";
	ПараметрыЗапроса.Вставить("Метод", СтрШаблон("reg-info?code=%1", 
		КодироватьСтроку(ПараметрыЗапроса.КодАктивации, СпособКодированияСтроки.КодировкаURL)));
    НачатьВыполнениеФоновогоЗаданияНаСервере("ПолучитьДанные", ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДанныеПоКодуАктивации(Результат, ДополнительныеПараметры) Экспорт
	
	Данные = Результат.Данные;
	ИмяЭлементаСостояния = Элементы.ПроверкаКодаАктивации.Имя;
	
	Если Результат.Ошибка Тогда
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.СообщениеОбОшибке,, 
			Элементы.КодАктивации.Имя);
	 
	ИначеЕсли Данные.Error Тогда
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Данные.description,, 
			Элементы.КодАктивации.Имя);
	Иначе
		ПоказатьСостояниеГотово(ИмяЭлементаСостояния);
		Информация = Данные.info;
		
		Если Данные.type = ТипРегистрацииПриглашение() Тогда
			ИнформацияОО = Данные.supportCompany;
			ООКод = ИнформацияОО.id;
			ООГород = ИнформацияОО.city;
			ООНаименование = ИнформацияОО.name;
			ООСайт = ИнформацияОО.site;
			ООТелефон = ИнформацияОО.phone;
			ООПочта = ИнформацияОО.email;
		Иначе
			ВариантРегистрации = ВариантЗапросНаРегистрацию();
			УстановитьСтраницуВводКодаАктивации(Элементы.Страницы.ТекущаяСтраница);
			НачатьАктивациюКодаРегистрации();
		КонецЕсли;
		
		РегистрацияИмя = Информация.name;
		РегистрацияПочта = Информация.email;
		РегистрацияТелефон = Информация.phone;
		
		ПоказатьПризнакЗаполнения(РегистрацияИмя, Элементы.ПроверкаИмени.Имя);
		ПоказатьСостояниеГотово(Элементы.ПроверкаПочты.Имя);
		ПоказатьПризнакЗаполнения(РегистрацияТелефон, Элементы.ПроверкаТелефона.Имя);
		
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти 

#Область РегистрацияВСервисе

&НаКлиенте
Процедура НачатьРегистрациюВСервисе(ТекущаяСтраница)
	
	ПараметрыЗапроса = ШаблонПараметровЗапросов();
	ПараметрыЗапроса.Вставить("Имя", РегистрацияИмя);
	ПараметрыЗапроса.Вставить("Почта", РегистрацияПочта);
	ПараметрыЗапроса.Вставить("Телефон", РегистрацияТелефон);
	ПараметрыЗапроса.Вставить("Пароль", РегистрацияПароль);
	ПараметрыЗапроса.Вставить("КодАктивации", КодАктивации);
	ПараметрыЗапроса.Вставить("ООКод", ООКод);
	ПараметрыЗапроса.Вставить("ВариантРегистрации", ВариантРегистрации);
	Если ДоступноПриглашениеДляРегистрации Тогда
		ТипРегистрации = ТипРегистрацииПриглашение();
	ИначеЕсли ЗначениеЗаполнено(КодАктивации) Тогда
		ТипРегистрации = ТипРегистрацииЗапрос();
	Иначе
		ТипРегистрации = ТипРегистрацииРучная();
	КонецЕсли; 
	
	ПараметрыЗапроса.Вставить("ТипРегистрации", ТипРегистрации);

	НачатьЗапросРегистрации(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
	Если ВариантРегистрации = ВариантВыборОО() Или ВариантРегистрации = ВариантВводКодаАктивации() Тогда
		ОписаниеОжидания = СтрокаКонтактовОбслуживающейОрганизации();
	ИначеЕсли ВариантРегистрации = ВариантЗапросНаРегистрацию() Тогда
		ОписаниеОжидания = СтрокаКонтактовСлужбыПоддержки();
	Иначе
		ОписаниеОжидания = ?(КоличествоОбслуживающихОрганизаций = 0, 
			СтрокаКонтактовСлужбыПоддержки(), СтрокаАвтоподбораОрганизации());
	КонецЕсли;
	
	ПараметрыОжидания = ШаблонПараметровОжидания();
	ПараметрыОжидания.ЗаголовокСтраницы = НСтр("ru = 'Регистрация в облачном сервисе'");
	ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Выполняется регистрация...'");
	ПараметрыОжидания.ОписаниеОжидания = ОписаниеОжидания;
	ПараметрыОжидания.ОтображатьЗаголовокОписания = Истина;
	ПараметрыОжидания.ДопустимоеОжидание = 5;
	УстановитьСтраницуОжидание(ТекущаяСтраница, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьЗапросРегистрации(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания)
	
	Данные = Новый Структура;
	Данные.Вставить("type", ПараметрыЗапроса.ТипРегистрации);
	Данные.Вставить("login", ПараметрыЗапроса.Почта);
	Данные.Вставить("name", ПараметрыЗапроса.Имя);
	Данные.Вставить("password", ПараметрыЗапроса.Пароль);
	Данные.Вставить("email",ПараметрыЗапроса.Почта);
	Данные.Вставить("phone", ПараметрыЗапроса.Телефон);
	Если ПараметрыЗапроса.ВариантРегистрации = ВариантВводКодаАктивации() Тогда
		Данные.Вставить("code", ПараметрыЗапроса.КодАктивации);
	КонецЕсли; 
	Если ПараметрыЗапроса.ВариантРегистрации = ВариантВыборОО() Тогда
		Данные.Вставить("supportCompanyId", ПараметрыЗапроса.ООКод);
	КонецЕсли;
	
	ОбработчикРезультата = "Подключаемый_ЗаполнитьФормуПослеРегистрации"; 
	ПараметрыЗапроса.Вставить("Данные", Данные);
	ПараметрыЗапроса.Вставить("Метод", "register");
	НачатьВыполнениеФоновогоЗаданияНаСервере("ОтправитьДанные", ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьФормуПослеРегистрации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Ошибка Тогда
		ПоказатьОшибкуНаСтраницеОжидания(Результат.СообщениеОбОшибке);
		Возврат;
	КонецЕсли; 
	
	Данные = Результат.Данные;
	Если Данные.error Тогда
		ПоказатьОшибкуНаСтраницеОжидания(Данные.description);
	Иначе
		ПоказатьСостояниеОжидание("СостояниеКартинка");
		Логин = РегистрацияПочта;
		Пароль = РегистрацияПароль;
		Если ВариантРегистрации = ВариантЗапросНаРегистрацию() Тогда
			УстановитьСтраницуВводКодаАктивации(Элементы.Страницы.ТекущаяСтраница);
		Иначе
			НачатьВходВСервис(Элементы.Страницы.ТекущаяСтраница);
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВводПароля()
	
	Если ЗначениеЗаполнено(РегистрацияПароль) И ЗначениеЗаполнено(РегистрацияПодтверждениеПароля)
		И РегистрацияПароль = РегистрацияПодтверждениеПароля Тогда
		ПоказатьСостояниеГотово(Элементы.ПроверкаПароля.Имя);
	Иначе
		ПоказатьСостояниеПусто(Элементы.ПроверкаПароля.Имя)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АктивацияКодаРегистрации

&НаКлиенте
Процедура НачатьАктивациюКодаРегистрации()
	
	Если ЗначениеЗаполнено(КодАктивации) Тогда
		ПоказатьСостояниеОжидание(Элементы.ПроверкаКодАктивации.Имя);
		ПараметрыЗапроса = ШаблонПараметровЗапросов();
		ПараметрыЗапроса.Вставить("КодАктивации", КодАктивации);
		НачатьЗапросАктивации(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
		ПроверитьРезультатЗапроса();
	Иначе
		ПоказатьСостояниеПусто(Элементы.ПроверкаКодАктивации.Имя);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьЗапросАктивации(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания) 
	
	Данные = Новый Структура;
	Данные.Вставить("code", ПараметрыЗапроса.КодАктивации);
	
	ОбработчикРезультата = "Подключаемый_ЗаполнитьФормуПослеАктивации"; 
	ПараметрыЗапроса.Вставить("Метод", "activation");
	ПараметрыЗапроса.Вставить("Данные", Данные);
	НачатьВыполнениеФоновогоЗаданияНаСервере("ОтправитьДанные", ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьФормуПослеАктивации (Результат, ДополнительныеПараметры) Экспорт

	Ошибка = Ложь;
	СообщениеОбОшибке = "";
	ИмяЭлементаСостояния = Элементы.ПроверкаКодАктивации.Имя;
	Данные = Результат.Данные;
	Если Результат.Ошибка Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = Результат.СообщениеОбОшибке;
	ИначеЕсли Данные.error Тогда 
		Ошибка = Истина;
		СообщениеОбОшибке = Данные.description;
	КонецЕсли;
	
	Если Ошибка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, Элементы.КодАктивацииЗапросНаРегистрацию.Имя);
		ПоказатьСостояниеОшибка(ИмяЭлементаСостояния);
	Иначе
		ПолеЛогин = "login";
		Если Результат.Свойство(ПолеЛогин) Тогда
			Логин = Результат[ПолеЛогин];
		Иначе
			Логин = РегистрацияПочта;
		КонецЕсли; 
		Пароль = РегистрацияПароль;
		ПоказатьСостояниеГотово(Элементы.ПроверкаКодАктивации.Имя);
		Если ЗначениеЗаполнено(Пароль) Тогда
			НачатьВходВСервис(Элементы.Страницы.ТекущаяСтраница);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти

#Область ВходВСервис

&НаКлиенте
Процедура НачатьВходВСервис(ТекущаяСтраница)
	
	ПараметрыЗапроса = ШаблонПараметровЗапросов();
	ПараметрыЗапроса.Вставить("Логин", Логин);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	ПараметрыЗапроса.Вставить("Метод", "usr/account/list");
	ПараметрыЗапроса.Вставить("ОбработчикРезультата", "Подключаемый_ЗаполнитьФормуПослеВхода");
	
	НачатьВыполнениеМетодаИнтерфейса(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
	
	ПараметрыОжидания = ШаблонПараметровОжидания();
	ПараметрыОжидания.ЗаголовокСтраницы = ЗаголовокВход();
	ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Выполняется вход...'");
	ПараметрыОжидания.ДопустимоеОжидание = 5;
	УстановитьСтраницуОжидание(ТекущаяСтраница, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьФормуПослеВхода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Ошибка Тогда
		ПоказатьОшибкуНаСтраницеОжидания(Результат.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	УстановитьКонтролыПоУмолчанию();
	
	СписокВыбора = Элементы.АбонентКод.СписокВыбора;
	Данные = Результат.Данные;
	СписокВыбора.Очистить();
	Для Каждого Элемент Из Данные.account Цикл
		Если Элемент.role = РольВладелец() Тогда
			Если Не ЗначениеЗаполнено(КодАбонента) Тогда
				КодАбонента = Элемент.id;
				АбонентНаименование = Элемент.name;
			КонецЕсли;
			СписокВыбора.Добавить(Элемент.id, Элемент.name);
		КонецЕсли; 
	КонецЦикла;
	
	УстановитьСтраницуСпособПерехода(Элементы.Страницы.ТекущаяСтраница); 
	
КонецПроцедуры
 
#КонецОбласти

#Область СопоставлениеПользователей

&НаКлиенте
Процедура НачатьСопоставлениеПользователей(ТекущаяСтраница)
	
	ПараметрыЗапроса = ШаблонПараметровЗапросов();
	ПараметрыЗапроса.Вставить("Логин", Логин);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	ПараметрыЗапроса.Вставить("КодАбонента", КодАбонента);
	ПараметрыЗапроса.Вставить("Метод", "usr/account/users/list");
	ПараметрыЗапроса.Вставить("ОбработчикРезультата", "Подключаемый_ЗаполнитьСписокПользователей");
	
	Данные = Новый Структура;
	Данные.Вставить("id", КодАбонента);
	
	ПараметрыЗапроса.Вставить("Данные", Данные);
	
	НачатьВыполнениеМетодаИнтерфейса(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
	
	ПараметрыОжидания = ШаблонПараметровОжидания();
	ПараметрыОжидания.ЗаголовокСтраницы = ЗаголовокСопоставлениеПользователей();
	ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Чтение списка пользователей...'");
	ПараметрыОжидания.ДопустимоеОжидание = 5;

	УстановитьСтраницуОжидание(ТекущаяСтраница, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСписокПользователей(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибки(Результат) Тогда
		Возврат;
	КонецЕсли; 
	Данные = Результат.Данные;
	УстановитьКонтролыПоУмолчанию();
	
	ПраваПользователей.Очистить();
	Для Каждого Элемент Из Данные.user Цикл
		НоваяСтрока = ПраваПользователей.Добавить();
		НоваяСтрока.ПолноеИмя = Элемент.name;
		НоваяСтрока.Логин = Элемент.login;
		НоваяСтрока.ЭтоВладелецАбонента = (Элемент.role = РольВладелец());
	КонецЦикла;
	ПраваПользователей.Сортировать("ПолноеИмя");
	
	СопоставитьПользователей();
	ОбновитьСтатусСопоставленияПользователей();
	УстановитьСтраницуСопоставлениеПользователей(Элементы.Страницы.ТекущаяСтраница); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователяСервиса()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Логин", Логин);
	ПараметрыФормы.Вставить("Пароль", Пароль);
	ПараметрыФормы.Вставить("КодАбонента", КодАбонента);
	ПараметрыФормы.Вставить("АдресПрограммногоИнтерфейса", АдресПрограммногоИнтерфейса);
	ПараметрыФормы.Вставить("ВерсияПрограммногоИнтерфейса", ВерсияПрограммногоИнтерфейса);
	
	ТекущиеДанные = Элементы.ПраваПользователей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.ПолноеИмя) Тогда
		ПараметрыФормы.Вставить("ПолноеИмя", ТекущиеДанные.ПолноеИмяПользователяИБ);
		ПараметрыФормы.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
		ПараметрыФормы.Вставить("Почта", ТекущиеДанные.ЭлектроннаяПочта);
	Иначе
		ПараметрыФормы.Вставить("ПолноеИмя", "");
		ПараметрыФормы.Вставить("Идентификатор", Неопределено);
		ПараметрыФормы.Вставить("Почта", "");
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("СоздатьПользователяСервисаЗавершение", ЭтотОбъект);
	
	Если ЭтоВнешняяОбработка Тогда
		ИмяФормыВыбора = "ВнешняяОбработка.МастерПереходаВОблако.Форма.ДобавлениеПользователя";
	Иначе
		ИмяФормыВыбора = "Обработка.МастерПереходаВОблако.Форма.ДобавлениеПользователя";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователяСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НоваяСтрока = ПраваПользователей.Добавить();
		НоваяСтрока.ПолноеИмя = Результат.ПолноеИмя;
		НоваяСтрока.Логин = Результат.Логин;
		НоваяСтрока.ЭтоВладелецАбонента = (Результат.Роль = РольВладелец());
		Если ЗначениеЗаполнено(Результат.Идентификатор) Тогда
			Поиск = ПользователиИБ.НайтиСтроки(Новый Структура("Идентификатор", Результат.Идентификатор));
			Если Поиск.Количество() > 0 Тогда
				Поиск[0].ЛогинПользователяСервиса = Результат.Логин;
				НоваяСтрока.Идентификатор = Поиск[0].Идентификатор;
				НоваяСтрока.ПолноеИмяПользователяИБ = Поиск[0].ПолноеИмя;
				НоваяСтрока.Право = ?(Результат.Роль = РольВладелец(), ПравоЗапускИАдминистрирование(), ПравоЗапуск());
				ДополнитьСписокНеСопоставленнымиПользователями();
				ОбновитьСтатусСопоставленияПользователей();
			КонецЕсли; 
		КонецЕсли; 
		Элементы.ПраваПользователей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейИБ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяСервиса КАК ИдентификаторПользователяСервиса,
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
		|	Пользователи.Наименование КАК Наименование,
		|	Пользователи.Ссылка КАК Пользователь,
		|	МАКСИМУМ(ПользователиКонтактнаяИнформация.Представление) КАК ЭлектроннаяПочта
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО Пользователи.Ссылка = ПользователиКонтактнаяИнформация.Ссылка
		|		И (ПользователиКонтактнаяИнформация.Вид = &ВидАдресЭлектроннойПочты)
		|ГДЕ
		|	НЕ Пользователи.Служебный
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.ИдентификаторПользователяСервиса,
		|	Пользователи.ИдентификаторПользователяИБ,
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("ВидАдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КешПользователей = Новый Соответствие;
	
	ПользователиИБ.Очистить();
	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		ПользовательИзКеша = КешПользователей[Выборка.ИдентификаторПользователяИБ];
		
		Если ПользовательИзКеша = Ложь Тогда
			ПользовательИБ = Неопределено;
		ИначеЕсли ПользовательИзКеша = Неопределено Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ = Неопределено Тогда
				КешПользователей[Выборка.ИдентификаторПользователяИБ] = Ложь;
			Иначе
				КешПользователей[Выборка.ИдентификаторПользователяИБ] = ПользовательИБ;
			КонецЕсли;
		Иначе
			ПользовательИБ = ПользовательИзКеша;
		КонецЕсли;
		
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ПользователиИБ.Добавить();
		НоваяСтрока.Пользователь = Выборка.Пользователь;
		НоваяСтрока.Идентификатор = Выборка.Пользователь.УникальныйИдентификатор();
		НоваяСтрока.ЭлектроннаяПочта = Выборка.ЭлектроннаяПочта;
		НоваяСтрока.Логин = ПользовательИБ.Имя;
		НоваяСтрока.ПолноеИмя = ПользовательИБ.ПолноеИмя;
	КонецЦикла;
	ПользователиИБ.Сортировать("ПолноеИмя");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяИБ(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ДанныеИБ = ВыбранныйЭлемент.Значение; // ДанныеФормыЭлементКоллекции 
		Для Каждого СтрокаТаблицы Из ПраваПользователей Цикл
			Если СтрокаТаблицы.Идентификатор = ДанныеИБ.Идентификатор И ЗначениеЗаполнено(СтрокаТаблицы.Логин) Тогда
				СтрокаТаблицы.Идентификатор = Неопределено;
				СтрокаТаблицы.Пользователь = Неопределено;
				СтрокаТаблицы.ПолноеИмяПользователяИБ = Неопределено;
				СтрокаТаблицы.Право = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные = Элементы.ПраваПользователей.ТекущиеДанные;
		ТекущиеДанные.Идентификатор = ДанныеИБ.Идентификатор;
		ТекущиеДанные.Пользователь = ДанныеИБ.Пользователь;
		ТекущиеДанные.ПолноеИмяПользователяИБ = 
			?(ЗначениеЗаполнено(ДанныеИБ.ПолноеИмя), ДанныеИБ.ПолноеИмя, ДанныеИБ.Логин);
		ДанныеИБ.ЛогинПользователяСервиса = ТекущиеДанные.Логин;
		Для Каждого ДанныеИБ Из ПользователиИБ Цикл
			Если ДанныеИБ.ЛогинПользователяСервиса = ТекущиеДанные.Логин 
				И ТекущиеДанные.Идентификатор <> ДанныеИБ.Идентификатор Тогда
				ДанныеИБ.ЛогинПользователяСервиса = "";
			КонецЕсли; 
		КонецЦикла; 
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Право) Тогда
			ТекущиеДанные.Право = ?(ТекущиеДанные.ЭтоВладелецАбонента, ПравоЗапускИАдминистрирование(), ПравоЗапуск());
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнитьСписокНеСопоставленнымиПользователями();
	ОбновитьСтатусСопоставленияПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПользователей()
	
	Для Каждого Элемент Из ПользователиИБ Цикл
		Элемент.ЛогинПользователяСервиса = Неопределено;	
	КонецЦикла; 
	
	ПоискИБ = ПользователиИБ.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторТекущегоПользователя));
	ПоискСервис = ПраваПользователей.НайтиСтроки(Новый Структура("Логин", Логин));
	
	Если ПоискИБ.Количество() > 0 И ПоискСервис.Количество() > 0 Тогда
		ПоискСервис[0].Идентификатор = ПоискИБ[0].Идентификатор;
		ПоискСервис[0].Право = ?(ПоискСервис[0].ЭтоВладелецАбонента, ПравоЗапускИАдминистрирование(), ПравоЗапуск());
		ПоискСервис[0].ПолноеИмяПользователяИБ = ПоискИБ[0].ПолноеИмя;
		ПоискИБ[0].ЛогинПользователяСервиса = ПоискСервис[0].Логин;
	КонецЕсли; 
	
	Для Каждого Строка Из ПраваПользователей Цикл
		Если ЗначениеЗаполнено(Строка.Идентификатор) Тогда
			Продолжить;
		КонецЕсли; 
		Поиск = ПользователиИБ.НайтиСтроки(Новый Структура("Логин", Строка.Логин));
		Если Поиск.Количество() > 0 И Не ЗначениеЗаполнено(Поиск[0].ЛогинПользователяСервиса) Тогда
			Строка.Идентификатор = Поиск[0].Идентификатор;
			Строка.Право = ?(Строка.ЭтоВладелецАбонента, ПравоЗапускИАдминистрирование(), ПравоЗапуск());
			Строка.ПолноеИмяПользователяИБ = Поиск[0].ПолноеИмя;
			Поиск[0].ЛогинПользователяСервиса = Строка.Логин;
		КонецЕсли;
		Поиск = ПользователиИБ.НайтиСтроки(Новый Структура("ПолноеИмя", Строка.ПолноеИмя));
		Если Поиск.Количество() > 0 И Не ЗначениеЗаполнено(Поиск[0].ЛогинПользователяСервиса) Тогда
			Строка.Идентификатор = Поиск[0].Идентификатор;
			Строка.Право = ?(Строка.ЭтоВладелецАбонента, ПравоЗапускИАдминистрирование(), ПравоЗапуск());
			Строка.ПолноеИмяПользователяИБ = Поиск[0].ПолноеИмя;
			Поиск[0].ЛогинПользователяСервиса = Строка.Логин;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьСписокНеСопоставленнымиПользователями();
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСписокНеСопоставленнымиПользователями()
	
	Поиск = ПраваПользователей.НайтиСтроки(Новый Структура("ПолноеИмя", ""));
	Для Каждого Строка Из Поиск Цикл
		ПраваПользователей.Удалить(Строка);
	КонецЦикла; 
	Для Каждого Строка Из ПользователиИБ Цикл
		Если Не ЗначениеЗаполнено(Строка.ЛогинПользователяСервиса) Тогда
			НоваяСтрока = ПраваПользователей.Добавить();
			НоваяСтрока.Идентификатор = Строка.Идентификатор;
			НоваяСтрока.Пользователь = Строка.Пользователь;
			НоваяСтрока.ПолноеИмяПользователяИБ = Строка.ПолноеИмя;
			НоваяСтрока.ЭлектроннаяПочта = Строка.ЭлектроннаяПочта;
			НоваяСтрока.Гиперссылка = НСтр("ru = 'Добавить'");
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСопоставленияПользователей()
	
	Сопоставлено = 0;
	Для Каждого Элемент Из ПользователиИБ Цикл
		Если ЗначениеЗаполнено(Элемент.ЛогинПользователяСервиса) Тогда
			Сопоставлено = Сопоставлено + 1;
		КонецЕсли; 	
	КонецЦикла; 
	
	Элементы.СтатусСопоставления.Заголовок = СтрШаблон(
		НСтр("ru = 'Сопоставлено пользователей: %1 из %2'"), Сопоставлено, ПользователиИБ.Количество()); 
	
КонецПроцедуры

#КонецОбласти 

#Область ПередачаДанныхВСеврис

&НаКлиенте 
Процедура НачатьПередачуДанных(ТекущаяСтраница)
	
	Если РежимВыгрузкиДляТехническойПоддержки Тогда
		ИмяФайлаНаКлиенте = "data_dump_technical_support.zip";
	Иначе
		ИмяФайлаНаКлиенте = "data_dump.zip";
	КонецЕсли;
	
	ПараметрыЗапроса = ШаблонПараметровЗапросов();
	ПараметрыЗапроса.Вставить("Логин", Логин);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	ПараметрыЗапроса.Вставить("Метод", "srv/files/new_multipart");
	ПараметрыЗапроса.Вставить("ОбработчикРезультата", "Подключаемый_ПослеПолученияАдресаЗагрузкиФайла");
	
	Данные = Новый Структура;
	Данные.Вставить("name", ИмяФайлаНаКлиенте);
	Данные.Вставить("size", РазмерФайлаВыгрузки);
	Данные.Вставить("type", "new_data_dump");
	Данные.Вставить("owner", КодАбонента);
	
	ПараметрыЗапроса.Вставить("Данные", Данные);
	
	НачатьВыполнениеМетодаИнтерфейса(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
	
	ПараметрыОжидания = ШаблонПараметровОжидания();
	ПараметрыОжидания.ЗаголовокСтраницы = ЗаголовокВыгрузкаДанных();
	ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Открытие сеанса загрузки...'");
	ПараметрыОжидания.ДопустимоеОжидание = 5;
	УстановитьСтраницуОжидание(ТекущаяСтраница, ПараметрыОжидания);

КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПослеПолученияАдресаЗагрузкиФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибки(Результат) Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = Результат.Данные;
	
	УстановитьКонтролыПоУмолчанию();
	
	ПараметрыПередачи = ФайлыБТСКлиент.ПараметрыПолученияФайла();
	СвойстваФайла = СвойстваВременногоФайла; // см. ФайлыБТС.СвойстваНовогоВременногоФайла
	Если ЭтоАдресВременногоХранилища(АдресДанныхВыгрузки) Тогда
		ПараметрыПередачи.ИмяФайлаИлиАдрес = АдресДанныхВыгрузки;
	Иначе
		ПараметрыПередачи.ИмяФайлаИлиАдрес = СвойстваФайла.Имя;
		ПараметрыПередачи.ПутьФайлаWindows = СвойстваФайла.ПутьWindows;
		ПараметрыПередачи.ПутьФайлаLinux = СвойстваФайла.ПутьLinux;
	КонецЕсли;
	ПараметрыЗапроса = ШаблонПараметровЗапросов();
	ПараметрыЗапроса.Вставить("ПараметрыПередачи", ПараметрыПередачи);
	
	ИдентификаторФайла = Данные.file_id;
	
	ПараметрыЗапроса.Вставить("Адрес", Данные.url);
	Если Данные.type = "s3" Тогда
		ПараметрыЗапроса.Вставить("Заголовки", Данные.headers);
		ТребуетсяЗавершениеПередачиФайла = Истина;
	Иначе
		ПараметрыЗапроса.Вставить("Заголовки", Новый Массив);
		ТребуетсяЗавершениеПередачиФайла = Ложь;
	КонецЕсли; 

	НачатьПередачуФайла(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
	
	ПараметрыОжидания = ШаблонПараметровОжидания();
	ПараметрыОжидания.ЗаголовокСтраницы = ЗаголовокВыгрузкаДанных();
	ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Передача данных в сервис...'");
	ПараметрыОжидания.ДопустимоеОжидание = 5;
	УстановитьСтраницуОжидание(Элементы.Страницы.ТекущаяСтраница, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачатьПередачуФайла(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания)
	
	ОбработчикРезультата = "Подключаемый_ПослеПередачиФайла";
	НачатьВыполнениеФоновогоЗаданияНаСервере("ПередатьФайл", ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПередачиФайла(Результат, ДополнительныеПараметры) Экспорт

	Если Результат.Ошибка Тогда
		ПоказатьОшибкуНаСтраницеОжидания(Результат.СообщениеОбОшибке);
		ЧастиЗаголовка = Новый Массив;
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Не удалось передать данные по причине:'"));
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(Элементы.СостояниеТекст.Заголовок);
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Повторить попытку'"),,,, СсылкаПовторитьПопыткуПередачиДанных())); 
		Элементы.СостояниеТекст.Заголовок = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
		Возврат;
	КонецЕсли;
	
	Части = Новый Массив;
	Для Каждого ЗаголовокРезультата Из Результат.Заголовки Цикл
		Если Лев(ЗаголовокРезультата, 4) = "ETag" Тогда
			Части.Добавить(Сред(ЗаголовокРезультата, 7, СтрДлина(ЗаголовокРезультата) - 7));
		КонецЕсли; 	
	КонецЦикла; 
	
	Если ТребуетсяЗавершениеПередачиФайла Тогда
		ПараметрыЗапроса = ШаблонПараметровЗапросов();
		ПараметрыЗапроса.Вставить("Логин", Логин);
		ПараметрыЗапроса.Вставить("Пароль", Пароль);
		ПараметрыЗапроса.Вставить("Метод", "srv/files/complete_multipart");
		ПараметрыЗапроса.Вставить("ОбработчикРезультата", "Подключаемый_ПослеЗакрытияПередачи");
		
		Данные = Новый Структура;
		Данные.Вставить("file_id", ИдентификаторФайла);
		Данные.Вставить("parts", Части);
		ПараметрыЗапроса.Вставить("Данные", Данные);
		
		НачатьВыполнениеМетодаИнтерфейса(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
		ПараметрыОжидания = ШаблонПараметровОжидания();
		ПараметрыОжидания.ЗаголовокСтраницы = ЗаголовокВыгрузкаДанных();
		ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Передача данных в сервис...'");
		ПараметрыОжидания.ДопустимоеОжидание = 5;
		УстановитьСтраницуОжидание(Элементы.Страницы.ТекущаяСтраница, ПараметрыОжидания);
		
	Иначе
		СоздатьПриложениеИзФайла();	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗакрытияПередачи(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибки(Результат) Тогда
		Возврат;
	КонецЕсли; 
	
	СоздатьПриложениеИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриложениеИзФайла()
	
	УстановитьКонтролыПоУмолчанию();
	
	ПараметрыЗапроса = ШаблонПараметровЗапросов();
	ПараметрыЗапроса.Вставить("Логин", Логин);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	ПараметрыЗапроса.Вставить("КодАбонента", КодАбонента);
	ПараметрыЗапроса.Вставить("Метод", "usr/tenant/create_from_data_dump");
	ПараметрыЗапроса.Вставить("ОбработчикРезультата", "Подключаемый_ПослеСозданияПриложения");
	ПараметрыЗапроса.Вставить("Таймаут", 60);

	Данные = Новый Структура;
	Данные.Вставить("file_id", ИдентификаторФайла);
	Данные.Вставить("name", НаименованиеПриложения);
	Данные.Вставить("timezone ", ЧасовойПояс);
	
	ПользователиПриложения = Новый Массив;
	Для Каждого Строка Из ПраваПользователей Цикл
		Если ЗначениеЗаполнено(Строка.Право) Тогда
			ПользовательПриложения = Новый Структура;
			ПользовательПриложения.Вставить("login", Строка.Логин);
			ПользовательПриложения.Вставить("role", Строка.Право);
			ПользовательПриложения.Вставить("user_id", Строка(Строка.Идентификатор));
			ПользователиПриложения.Добавить(ПользовательПриложения);
		КонецЕсли; 
	КонецЦикла; 
	Данные.Вставить("users", ПользователиПриложения); 
	ПараметрыЗапроса.Вставить("Данные", Данные);
	
	НачатьВыполнениеМетодаИнтерфейса(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания);
	
	ПараметрыОжидания = ШаблонПараметровОжидания();
	ПараметрыОжидания.ЗаголовокСтраницы = ЗаголовокВыгрузкаДанных();
	ПараметрыОжидания.ОписаниеСостояния = НСтр("ru = 'Создание приложения...'");
	ПараметрыОжидания.ДопустимоеОжидание = 5;
	
	УстановитьСтраницуОжидание(Элементы.страницы.ТекущаяСтраница, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеСозданияПриложения(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибки(Результат) Тогда
		ЧастиЗаголовка = Новый Массив;
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Не удалось создать приложение по причине:'"));
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(Элементы.СостояниеТекст.Заголовок);
		ЧастиЗаголовка.Добавить(Символы.ПС);
		ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Повторить попытку'"),,,, СсылкаПовторитьПопыткуСозданияПриложения())); 
		Элементы.СостояниеТекст.Заголовок = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
		Возврат;
	КонецЕсли; 
	
	УстановитьСтраницуЗавершение(Элементы.Страницы.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура НачатьВыполнениеФоновогоЗаданияНаСервере(ИмяМетода, ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания)
	
	ПараметрыВыполненияОбработки = Новый Структура;
	Если ИмяМетода = "ПолучитьИнформациюОВозможностяхПерехода" Тогда
		ПараметрыВыполненияОбработки.Вставить("Адрес", ПараметрыЗапроса.АдресСервиса);
		ПараметрыВыполненияОбработки.Вставить("МетодИнформация", ПараметрыЗапроса.МетодИнформация);
		ПараметрыВыполненияОбработки.Вставить("МетодВариантыЗагрузки", ПараметрыЗапроса.МетодВариантыЗагрузки);
	ИначеЕсли ИмяМетода = "ПолучитьДанные" Тогда
		ПараметрыВыполненияОбработки.Вставить("Адрес", ПараметрыЗапроса.АдресСервиса);
		ПараметрыВыполненияОбработки.Вставить("Метод", ПараметрыЗапроса.Метод);
	ИначеЕсли ИмяМетода = "ОтправитьДанные" Тогда
		ПараметрыВыполненияОбработки.Вставить("Адрес", ПараметрыЗапроса.АдресСервиса);
		ПараметрыВыполненияОбработки.Вставить("Метод", ПараметрыЗапроса.Метод);
		ПараметрыВыполненияОбработки.Вставить("Данные", ПараметрыЗапроса.Данные);
	ИначеЕсли ИмяМетода = "ВыполнитьМетодВнешнегоИнтерфейса" Тогда
		ПараметрыВыполненияОбработки.Вставить("АдресПрограммногоИнтерфейса", ПараметрыЗапроса.АдресПрограммногоИнтерфейса);
		ПараметрыВыполненияОбработки.Вставить("ВерсияПрограммногоИнтерфейса", ПараметрыЗапроса.ВерсияПрограммногоИнтерфейса);
		ПараметрыВыполненияОбработки.Вставить("Авторизация", ПараметрыЗапроса.Авторизация);
		ПараметрыВыполненияОбработки.Вставить("Метод", ПараметрыЗапроса.Метод);
		ПараметрыВыполненияОбработки.Вставить("Данные", ПараметрыЗапроса.Данные);
	ИначеЕсли ИмяМетода = "ПередатьФайл" Тогда
		ПараметрыВыполненияОбработки.Вставить("Адрес", ПараметрыЗапроса.Адрес);
		ПараметрыВыполненияОбработки.Вставить("Заголовки", ПараметрыЗапроса.Заголовки);
		ПараметрыВыполненияОбработки.Вставить("ПараметрыПередачи", ПараметрыЗапроса.ПараметрыПередачи);
	КонецЕсли; 
	
	ЭтоВнешняяОбработка = ПараметрыЗапроса.ЭтоВнешняяОбработка;
	ИмяОбработки = ?(ЭтоВнешняяОбработка, ПараметрыЗапроса.ХранениеФайлаОбработки, "МастерПереходаВОблако");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки",		ИмяОбработки);
	ПараметрыЗадания.Вставить("ИмяМетода",			ИмяМетода);
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыВыполненияОбработки);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыЗапроса.Ключ);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон("МастерПереходаВОблако.%1", ИмяМетода);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0.4;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ПараметрыЗапроса.Ключ); 
	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	Результат = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	АдресХранилища = Результат.АдресРезультата;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатЗапроса()
    
	Оповещение = Новый ОписаниеОповещения(ОбработчикРезультата, ЭтотОбъект);
    Результат = ПроверитьРезультатЗапросаНаСервере(ИдентификаторЗадания, АдресХранилища);
	Если Результат = Неопределено Тогда
		СчетчикОжидания = СчетчикОжидания + 1;
		Если ДопустимоеОжидание > 0 И СчетчикОжидания > ДопустимоеОжидание Тогда
			Элементы.СостояниеТекст.Заголовок = ТекстДолгийЗапрос();
		КонецЕсли; 
        ПодключитьОбработчикОжидания("ПроверитьРезультатЗапроса", 1, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРезультатЗапросаНаСервере(ИдентификаторЗадания, АдресХранилища)
	
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если ФЗ <> Неопределено И ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
        Возврат Неопределено;
        
    ИначеЕсли ФЗ <> Неопределено И ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
        Возврат ПолучитьИзВременногоХранилища(АдресХранилища);
    ИначеЕсли ФЗ <> Неопределено И ФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
        ТекстОшибки = ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
        Сообщения = ФЗ.ПолучитьСообщенияПользователю();
        Для Каждого Сообщение Из Сообщения Цикл
            ТекстОшибки = Сообщение.Текст + Символы.ПС + ТекстОшибки;	
        КонецЦикла;  
        ВызватьИсключение ТекстОшибки;    
    Иначе
        Возврат Неопределено;
    КонецЕсли; 
	 
КонецФункции

&НаКлиенте
Функция ЕстьОшибки(Результат)
	
	Если Результат.Ошибка Тогда
		ПоказатьОшибкуНаСтраницеОжидания(Результат.СообщениеОбОшибке);
		Возврат Истина
	КонецЕсли;
	Данные = Результат.Данные;
	Если Данные.general.error Тогда
		ПоказатьОшибкуНаСтраницеОжидания(Данные.general.message);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
 
&НаСервереБезКонтекста
Процедура НачатьВыполнениеМетодаИнтерфейса(ПараметрыЗапроса, ОбработчикРезультата, АдресХранилища, ИдентификаторЗадания)
	
	ОбработчикРезультата = ПараметрыЗапроса.ОбработчикРезультата;
	Если ПараметрыЗапроса.Свойство("КодАбонента") Тогда
		Авторизация = ПараметрыАвторизации(
			ПараметрыЗапроса.Логин, ПараметрыЗапроса.Пароль, ПараметрыЗапроса.КодАбонента);
	Иначе
		Авторизация = ПараметрыАвторизации(ПараметрыЗапроса.Логин, ПараметрыЗапроса.Пароль);
	КонецЕсли; 
	ПараметрыЗапроса.Вставить("Авторизация", Авторизация);
	
	Если Не ПараметрыЗапроса.Свойство("Данные") Тогда
		ПараметрыЗапроса.Вставить("Данные", Неопределено);
	КонецЕсли; 
	
	НачатьВыполнениеФоновогоЗаданияНаСервере("ВыполнитьМетодВнешнегоИнтерфейса", 
		ПараметрыЗапроса, АдресХранилища, ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыАвторизации(Логин, Пароль, КодАбонента = Неопределено)
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Логин", Логин);
	ПараметрыАвторизации.Вставить("Пароль", Пароль);
	Если Не КодАбонента = Неопределено Тогда
		ПараметрыАвторизации.Вставить("КодАбонента", КодАбонента);
	КонецЕсли; 
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

&НаКлиенте
Процедура ВыборОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ООКод = Результат.Код;
		ООГород = Результат.Город;
		ООНаименование = Результат.Наименование;
		ООСайт = Результат.Сайт;
		ООТелефон = Результат.Телефон;
		ООПочта = Результат.Почта;
		
		Элементы.ОбслуживающаяОрганизация.СписокВыбора.Очистить();
		Элементы.ОбслуживающаяОрганизация.СписокВыбора.Добавить(ООКод, ООНаименование);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаПерехода()
	
	Если СпособПерехода = СпособВыгрузка() Тогда
		Элементы.ГруппаВыгрузкаДанных.ЦветФона = ЦветВыбран();
		Элементы.ГруппаМиграция.ЦветФона = ?(МиграцияДоступна, ЦветНеВыбран(), ЦветНеДоступен());
	Иначе
		Элементы.ГруппаМиграция.ЦветФона = ЦветВыбран();
		Элементы.ГруппаВыгрузкаДанных.ЦветФона = ЦветНеВыбран();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуНаСтраницеОжидания(СообщениеОбОшибке)
	
	ПоказатьСостояниеОшибка("СостояниеКартинка");
	Элементы.СостояниеТекст.Заголовок = Новый ФорматированнаяСтрока(СообщениеОбОшибке);
	Элементы.Далее.Доступность = Ложь;
	Элементы.Назад.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеПусто(ИмяЭлемента)
	
	Элементы[ИмяЭлемента].Картинка = Новый Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеОжидание(ИмяЭлемента)
	
	Элементы[ИмяЭлемента].Картинка = Элементы.КартинкаОжидание.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеОшибка(ИмяЭлемента)
	
	Элементы[ИмяЭлемента].Картинка = Элементы.КартинкаОшибка.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСостояниеГотово(ИмяЭлемента)
	
	Элементы[ИмяЭлемента].Картинка = Элементы.КартинкаГотово.Картинка;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаКонтактовОбслуживающейОрганизации()
	
	СайтСсылка = ?(СтрНайти(ООСайт, "http") = 0, "http://" + ООСайт, ООСайт);
	
	ШрифтЗаголовка = Новый Шрифт(,, Истина);
	ШрифтТекста = Новый Шрифт(,,,,,,90);
	
	Контакты = Новый Массив;
	Контакты.Добавить(Новый ФорматированнаяСтрока(ООНаименование, ШрифтЗаголовка));
	Контакты.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	Если ЗначениеЗаполнено(ООГород) Тогда
		Контакты.Добавить(Новый ФорматированнаяСтрока(ООГород, ШрифтТекста));
		Контакты.Добавить(Новый ФорматированнаяСтрока("   ", ШрифтТекста));
	КонецЕсли;
	Если ЗначениеЗаполнено(ООТелефон) Тогда
		ДобавитьКонтактТелефон(Контакты, ООТелефон, ШрифтТекста);
	КонецЕсли; 
	Контакты.Добавить(Новый ФорматированнаяСтрока(Символы.ПС, ШрифтТекста));
	Если ЗначениеЗаполнено(ООПочта) Тогда
		ДобавитьКонтактПочта(Контакты, ООПочта, ШрифтТекста);
	КонецЕсли;
	Если ЗначениеЗаполнено(ООСайт) Тогда
		Контакты.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Сайт:'") , ШрифтТекста));
		Контакты.Добавить(Новый ФорматированнаяСтрока(" ", ШрифтТекста));
		КОнтакты.Добавить(Новый ФорматированнаяСтрока(ООСайт, ШрифтТекста,,, СайтСсылка));
	КонецЕсли; 
	
	Возврат Новый ФорматированнаяСтрока(Контакты);
	
КонецФункции 

&НаКлиенте
Функция СтрокаАвтоподбораОрганизации()
	
	ШрифтЗаголовка = Новый Шрифт(,, Истина);
	ШрифтТекста = Новый Шрифт(,,,,,,90);
	
	СоставЗаголовка = Новый Массив;
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Обслуживающая организация не выбрана.'"), ШрифтЗаголовка));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Мы сами назначим обслуживающую организацию, которая будет помогать Вам при работе в сервисе.'")));
	Если ЗначениеЗаполнено(ПровайдерТелефон) Или ЗначениеЗаполнено(ПровайдерПочта) Тогда
		СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
		СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Служба поддержки:'")));
		СоставЗаголовка.Добавить(" ");
	КонецЕсли; 	
	Если ЗначениеЗаполнено(ПровайдерТелефон) Тогда
		ДобавитьКонтактТелефон(СоставЗаголовка, ПровайдерТелефон, ШрифтТекста);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ПровайдерПочта) Тогда
		ДобавитьКонтактПочта(СоставЗаголовка, ПровайдерПочта, ШрифтТекста);
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СоставЗаголовка);

КонецФункции

&НаКлиенте
Функция СтрокаКонтактовСлужбыПоддержки()
	
	ШрифтЗаголовка = Новый Шрифт(,, Истина);
	ШрифтТекста = Новый Шрифт(,,,,,,90);
	СоставЗаголовка = Новый Массив;
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Служба поддержки'"), ШрифтЗаголовка));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	Если ЗначениеЗаполнено(ПровайдерТелефон) Тогда
		ДобавитьКонтактТелефон(СоставЗаголовка, ПровайдерТелефон, ШрифтТекста);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ПровайдерПочта) Тогда
		ДобавитьКонтактПочта(СоставЗаголовка, ПровайдерПочта, ШрифтТекста);
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СоставЗаголовка);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКонтактТелефон(СоставЗаголовка, КонтактТелефон, Знач ШрифтТекста)
	
	ТелефонСсылка = "tel: " + ТолькоЦифры(КонтактТелефон);
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'тел.:'") , ШрифтТекста));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(" ", ШрифтТекста));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(КонтактТелефон + " ", ШрифтТекста,,, ТелефонСсылка));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока("   ", ШрифтТекста));

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактПочта(СоставЗаголовка, КонтактПочта, Знач ШрифтТекста)
	
	ПочтаСсылка = "mailto: " + КонтактПочта;
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'e-mail:'") , ШрифтТекста));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(" ", ШрифтТекста));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока(КонтактПочта, ШрифтТекста,,, ПочтаСсылка));
	СоставЗаголовка.Добавить(Новый ФорматированнаяСтрока("   ", ШрифтТекста));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифры(Строка)

	ОбработаннаяСтрока = "";

	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если Символ >= "0" И Символ <= "9" Тогда
			ОбработаннаяСтрока = ОбработаннаяСтрока + Символ;
		КонецЕсли;
	КонецЦикла;

	Возврат ОбработаннаяСтрока;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаРегистрация()
	
	Возврат "Регистрация";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаПовторитьПопыткуСозданияПриложения()
	
	Возврат "ПовторитьПопыткуСозданияПриложения";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаПовторитьПопыткуПередачиДанных()
	
	Возврат "ПовторитьПопыткуПередачиДанных";
	
КонецФункции
 
&НаКлиенте
Процедура ПриИзмененииВариантаРегистрации()
	
	Если ВариантРегистрации <> ВариантВыборОО() Тогда
		ООКод = 0;
		ООНаименование = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ШаблонПараметровОжидания()
	
	ПараметрыОжидания = Новый Структура;
	ПараметрыОжидания.Вставить("ЗаголовокСтраницы", );
	ПараметрыОжидания.Вставить("ОписаниеОжидания", "");
	ПараметрыОжидания.Вставить("ОписаниеСостояния", "");
	ПараметрыОжидания.Вставить("ОтображатьЗаголовокОписания", Ложь);
	ПараметрыОжидания.Вставить("ДопустимоеОжидание", 0);
	
	Возврат ПараметрыОжидания;

КонецФункции

&НаКлиенте
Функция ШаблонПараметровЗапросов()
	
	Шаблон = Новый Структура;
	Шаблон.Вставить("Ключ", УникальныйИдентификатор);
	Шаблон.Вставить("АдресСервиса", АдресСервиса);
	Шаблон.Вставить("АдресПрограммногоИнтерфейса", АдресПрограммногоИнтерфейса);
	Шаблон.Вставить("ВерсияПрограммногоИнтерфейса", ВерсияПрограммногоИнтерфейса);
	Шаблон.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
	Шаблон.Вставить("ХранениеФайлаОбработки", ХранениеФайлаОбработки);
	
	Возврат Шаблон;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонОписанияОшибкиВыгрузкиДанных()
	
	Возврат НСтр("ru = 'При выгрузке данных произошла ошибка: %1.
				|
				|Расширенная информация для службы поддержки записана в журнал регистрации. 
				|Если причина ошибки неизвестна, рекомендуется обратиться в службу технической поддержки, 
				|предоставив для расследования информационную базу и выгрузку журнала регистрации.'");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПризнакЗаполнения(Значение, ИмяЭлементаПризнака)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьСостояниеГотово(ИмяЭлементаПризнака);
	Иначе
		ПоказатьСостояниеПусто(ИмяЭлементаПризнака);
	КонецЕсли; 
	
КонецПроцедуры

&Наклиенте
Функция ТекстДолгийЗапрос()
	
	Возврат НСтр("ru = 'Запрос выполняется дольше обычного...'") ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПраваПользователя(Право)
	
	Если Право = ПравоЗапуск() Тогда
		Возврат НСтр("ru = 'Запуск'");
	ИначеЕсли Право = ПравоЗапускИАдминистрирование() Тогда
		Возврат НСтр("ru = 'Запуск и администрирование'");
	КонецЕсли;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоСостояниюОбновления()
	
	Элементы.ГруппаПараметрыТребуетсяОбновление.Видимость = Не МиграцияДоступна;
	Элементы.ГруппаВыгрузкаТребуетсяОбновление.Видимость = Не МиграцияДоступна;
	Элементы.ГруппаМиграцияТребуетсяОбновление.Видимость = Не МиграцияДоступна;
	Элементы.ПримечаниеОтступ.Видимость = МиграцияДоступна;
	Элементы.ГруппаМиграцияШапка.Доступность = МиграцияДоступна;
	Элементы.ГруппаМиграция.ЦветФона = ?(МиграцияДоступна, ЦветНеВыбран(), ЦветНеДоступен());
	Элементы.ПримечаниеТребуетсяОбновление.РасширеннаяПодсказка.Заголовок = СтрШаблон(
		НСтр("ru = 'Поддерживаемые версии: %1'"), 
		СтрСоединить(ПоддерживаемыеВерсииДляМиграции.ВыгрузитьЗначения(), "; ")); 
		
	Элементы.ГруппаВыгрузкаДанныхШапка.Доступность = ВыгрузкаДоступна;
	Если Не ВыгрузкаДоступна Тогда
		Элементы.ПолучитьФайлВыгрузки.РасширеннаяПодсказка.Заголовок = СтрШаблон(
			НСтр("ru = 'Минимальная поддерживаемая версия: %1'"), МинимальнаяВерсияДляВыгрузки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОповещение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РольВладелец()
	
	Возврат "owner";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПравоЗапуск()
	
	Возврат "user";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПравоЗапускИАдминистрирование()
	
	Возврат "administrator";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантВыборОО()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантАвтоматическоеНазначениеОО()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантВводКодаАктивации()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособВыгрузка()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособМиграция()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособФайл()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантЗапросНаРегистрацию()
	
	Возврат 3;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРегистрацииЗапрос()
	
	Возврат "Approval"; // Не локализуется.
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРегистрацииПриглашение()
	
	Возврат "Invitation"; // Не локализуется.
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРегистрацииРучная()
	
	Возврат "Registration"; // Не локализуется.
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветВыбран()
	
	Возврат Новый Цвет(255, 255, 217);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветНеВыбран()
	
	Возврат Новый Цвет(255, 255, 254);
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ЦветНеДоступен()
	
	Возврат Новый Цвет(250, 250, 250);
	
КонецФункции

#КонецОбласти
