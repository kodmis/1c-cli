#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает версию.
// 
// Возвращаемое значение:
//  Число
Функция Версия() Экспорт
	
	Возврат 1.2; 
	
КонецФункции
 
// Возвращает HTTPСоединение
// 
// Параметры: 
//  Адрес - Строка
//  Логин - Строка
//  Пароль - Строка
//  Таймаут - Число
// 
// Возвращаемое значение: 
//  HTTPСоединение
Функция Соединение(Адрес, Логин = Неопределено, Пароль = Неопределено, Таймаут = 30) Экспорт

	ЧастиАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Соединение = Новый HTTPСоединение(ЧастиАдреса.Хост, 443, Логин, Пароль,, Таймаут,
		Новый ЗащищенноеСоединениеOpenSSL(,Новый СертификатыУдостоверяющихЦентровОС));
	
	Возврат Соединение;
	
КонецФункции

// Получить данные
// 
// Параметры:
//  Параметры - Структура:
// * Адрес - Строка
// * Метод - Строка
//  АдресРезультата - Строка - адрес помещения результата
// 
// Возвращаемое значение: см. РезультатЗапроса
Функция ПолучитьДанные(Параметры, АдресРезультата) Экспорт
	
	Адрес = Параметры.Адрес;
	Метод = Параметры.Метод;
	
	Соединение = Соединение(Адрес);
	Запрос = Новый HTTPЗапрос(СтрШаблон("/info/hs/migration/%1", Метод));
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		Результат = РезультатЗапроса(Ответ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат = ОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьДанные(Параметры, АдресРезультата) Экспорт
	
	Адрес = Параметры.Адрес;
	Метод = Параметры.Метод;
	Данные = Параметры.Данные;
	
	Соединение = Соединение(Адрес);
	Запрос = Новый HTTPЗапрос(СтрШаблон("/info/hs/migration/%1", Метод));
	Запрос.УстановитьТелоИзСтроки(РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Данные));
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	    ПоместитьВоВременноеХранилище(РезультатЗапроса(Ответ), АдресРезультата);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПоместитьВоВременноеХранилище(ОшибкаВыполненияЗапроса(ИнформацияОбОшибке), АдресРезультата);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьМетодВнешнегоИнтерфейса(Параметры, АдресРезультата) Экспорт
	
	АдресПрограммногоИнтерфейса = Параметры.АдресПрограммногоИнтерфейса;
	Метод = Параметры.Метод;
	СоставМетода = СтрРазделить(Метод,"/");
	ТипЗапроса = СоставМетода[0];
	СоставМетода.Удалить(0);
	Метод = СтрСоединить(СоставМетода, "/");
	
	ВерсияПрограммногоИнтерфейса = 0;
	Параметры.Свойство("ВерсияПрограммногоИнтерфейса", ВерсияПрограммногоИнтерфейса);
	МетодВАдресеПоддерживается = (ВерсияПрограммногоИнтерфейса <> Неопределено И ВерсияПрограммногоИнтерфейса >=19);
	
	Авторизация = Параметры.Авторизация;
	Данные = Параметры.Данные;
	Если Параметры.Свойство("Таймаут") Тогда
		Таймаут = Параметры.Таймаут;
	Иначе
		Таймаут = 30;
	КонецЕсли; 
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПрограммногоИнтерфейса);
	Соединение = Соединение(СтруктураURL.Хост, Авторизация.Логин, Авторизация.Пароль, Таймаут);
	
	АдресРесурса = СтрШаблон("%1/execute", СтруктураURL.ПутьНаСервере);
	Если МетодВАдресеПоддерживается Тогда
		АдресРесурса = АдресРесурса + "/" + ТипЗапроса + "/" + Метод;
	КонецЕсли;
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Если Данные <> Неопределено Тогда
		ДанныеЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(Данные);
	Иначе
		ДанныеЗапроса = Новый Структура;
	КонецЕсли; 
	
	Если Не МетодВАдресеПоддерживается Тогда
		РазделОсновное = Новый Структура;
		РазделОсновное.Вставить("type", ТипЗапроса);
		РазделОсновное.Вставить("method", Метод);
		Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
			ДанныеЗапроса.Вставить("general", РазделОсновное);
		КонецЕсли;
	КонецЕсли;
	
	Если Авторизация.Свойство("КодАбонента") Тогда
		РазделАвторизация = Новый Структура;
		РазделАвторизация.Вставить("account", Авторизация.КодАбонента);
		Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
			ДанныеЗапроса.Вставить("auth", РазделАвторизация);
		КонецЕсли;
	КонецЕсли; 
	
	Запрос.УстановитьТелоИзСтроки(РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(ДанныеЗапроса));
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		ПоместитьВоВременноеХранилище(РезультатЗапроса(Ответ), АдресРезультата);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПоместитьВоВременноеХранилище(ОшибкаВыполненияЗапроса(ИнформацияОбОшибке), АдресРезультата);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередатьФайл(Параметры, АдресРезультата) Экспорт
	
	Адрес = Параметры.Адрес;
	Заголовки = Параметры.Заголовки;
	ПараметрыПередачи = Параметры.ПараметрыПередачи;
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Соединение = Соединение(СтруктураURL.Хост);
	Запрос = Новый HTTPЗапрос(СтруктураURL.ПутьНаСервере);
	Разделитель = ПолучитьРазделительПутиСервера();
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		ПутьФайла = ПараметрыПередачи.ПутьФайлаWindows;
	Иначе
		ПутьФайла = ПараметрыПередачи.ПутьФайлаLinux;
	КонецЕсли; 
	Запрос.УстановитьИмяФайлаТела(ПутьФайла + Разделитель + ПараметрыПередачи.ИмяФайлаИлиАдрес);
	
	Для Каждого Заголовок Из Заголовки Цикл
		КлючЗначение = СтрРазделить(Заголовок, ":");
		Запрос.Заголовки.Вставить(КлючЗначение[0], КлючЗначение[1]);	
	КонецЦикла; 
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("PUT", Запрос);
	    ПоместитьВоВременноеХранилище(РезультатЗапроса(Ответ, Истина), АдресРезультата);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПоместитьВоВременноеХранилище(ОшибкаВыполненияЗапроса(ИнформацияОбОшибке), АдресРезультата);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает параметры авторизации.
// 
// Параметры: 
//  Логин - Строка
//  Пароль - Строка
//  КодАбонента - Число
// 
// Возвращаемое значение: 
//  Структура - Параметры авторизации:
// * Логин - Строка
// * Пароль - Строка
// * КодАбонента - Число - если значение передано в параметрах
Функция ПараметрыАвторизации(Логин, Пароль, КодАбонента = Неопределено) Экспорт
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Логин", Логин);
	ПараметрыАвторизации.Вставить("Пароль", Пароль);
	Если Не КодАбонента = Неопределено Тогда
		ПараметрыАвторизации.Вставить("КодАбонента", КодАбонента);
	КонецЕсли; 
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

Процедура ПолучитьИнформациюОВозможностяхПерехода(Параметры, АдресРезультата) Экспорт
	                           
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Адрес", Параметры.Адрес);
	ПараметрыЗапроса.Вставить("Метод", Параметры.МетодИнформация);
	
	Результат = Новый Структура;
	Результат.Вставить("Информация", ПолучитьДанные(ПараметрыЗапроса, АдресРезультата));
	ПолеАдресОбработки = "url_epf";
	Данные = Результат.Информация.Данные;
	Если ЗначениеЗаполнено(Данные) И Данные.Свойство(ПолеАдресОбработки) И ЗначениеЗаполнено(Данные[ПолеАдресОбработки]) Тогда
		АдресОбработки = Данные[ПолеАдресОбработки];
		ЧастиАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресОбработки);
		Соединение = Соединение(АдресОбработки);
		Запрос = Новый HTTPЗапрос(ЧастиАдреса.ПутьНаСервере);
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		ДанныеОбработки = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		ДанныеОбработки.Записать(ВременныйФайл);
		Попытка
			ОбработкаОбъект = ВнешниеОбработки.Создать(
				ВременныйФайл, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
			ВерсияОбработкиНаСервере = ОбработкаОбъект.Версия();
			ОбработкаОбъект = Неопределено;
			Попытка
				УдалитьФайлы(ВременныйФайл);
			Исключение
			КонецПопытки;
		Исключение
			ВерсияОбработкиНаСервере = 0;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход в облако'"), 
				УровеньЖурналаРегистрации.Предупреждение, , , 
				СтрШаблон(НСтр("ru = 'Не удалось прочитать данные мастера перехода по адресу: %1'"), АдресОбработки));
		КонецПопытки;
	Иначе
		ВерсияОбработкиНаСервере = 0;
	КонецЕсли; 
	
	ПараметрыЗапроса.Вставить("Метод", Параметры.МетодВариантыЗагрузки);
	Результат.Вставить("ВариантыЗагрузки", ПолучитьДанные(ПараметрыЗапроса, АдресРезультата));
	Результат.Вставить("ВерсияОбработкиНаСервере", ВерсияОбработкиНаСервере);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры
 
#КонецОбласти 
 
#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Ответ - HTTPОтвет
//  ВключатьЗаголовки - Булево
// 
// Возвращаемое значение:
//  Структура:
//   * Заголовки - Массив из Строка
//   * Данные - Произвольный
//   * СообщениеОбОшибке - Строка
//   * Ошибка - Булево
//   * ТелоОтвета - Строка
//   * КодСостояния - Число
Функция РезультатЗапроса(Ответ, ВключатьЗаголовки = Ложь)
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Результат = ШаблонРезультата();
	
	Если ВключатьЗаголовки Тогда
		Заголовки = Новый Массив;
		Для Каждого Заголовок Из Ответ.Заголовки Цикл
			Заголовки.Добавить(СтрШаблон("%1:%2", Заголовок.Ключ, Заголовок.Значение));
		КонецЦикла; 	
		Результат.Вставить("Заголовки", Заголовки);
	КонецЕсли; 
	
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.ТелоОтвета = СтрокаОтвета;
	Результат.Ошибка = (Ответ.КодСостояния > 204);
	
	Если Ответ.КодСостояния = 401 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. Неправильно задан логин или пароль.'"); 
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. У пользователя нет доступа к программному интерфейсу.'");
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не найдено. Адрес сервиса указан не верно или сервис не найден.'");
	ИначеЕсли Ответ.КодСостояния >= 500 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Внутренняя ошибка. Подробности в журнале регистрации.'");
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход в облако'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрокаОтвета);
		Если Не ПустаяСтрока(СтрокаОтвета) Тогда
			Попытка
				Результат.Данные = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаОтвета);	
				Если Результат.Данные.Свойство("message") Тогда
					Результат.СообщениеОбОшибке = Результат.Данные.message;
				ИначеЕсли Результат.Данные.Свойство("description") Тогда
					Результат.СообщениеОбОшибке = Результат.Данные.description;
				КонецЕсли; 
			Исключение
				// Если не удалось получить данные, не стараемся их возвращать.
			КонецПопытки;
		КонецЕсли; 
			
		Возврат Результат;
	ИначеЕсли Не ПустаяСтрока(СтрокаОтвета) Тогда
		Результат.Данные = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаОтвета);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкаВыполненияЗапроса(ИнформацияОбОшибке)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Переход в облако'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	Результат = ШаблонРезультата();
	Результат.Ошибка = Истина;
	Результат.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонРезультата()
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("ТелоОтвета", "");
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Данные", Неопределено);
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти 

#КонецЕсли