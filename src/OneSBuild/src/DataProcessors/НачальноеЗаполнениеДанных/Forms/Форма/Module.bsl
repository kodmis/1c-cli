///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораОбъектовМетаданных();
	
	ОбщиеЯзыковыеПараметры = ЗаполнитьОбщиеЯзыковыеПараметры();
	
	БезУдаленных = Истина;
	ИмяКлючевогоРеквизита = "ИмяПредопределенныхДанных";
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимФормы = "СтраницаТаблица";
	СменитьСтраницуРаздела();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектМетаданныхАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолучитьЗначениеАвтоПодбора(Текст, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолучитьЗначениеАвтоПодбора(Текст, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхПриИзменении(Элемент)
	
	Реквизиты.ПолучитьЭлементы().Очистить();
	ОчиститьДинамическиСозданныеЭлементыФормы();
	Код1С.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданныхПриИзмененииНаСервере();
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	Область = ТабличныйДокумент.Область(1,1,1,1);
	Элементы.ТабличныйДокумент.УстановитьВыделенныеОбласти(Область);
	ТабличныйДокумент.ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	ТекущиеИмяПредопределенныхДанных = "";
	ИмяОбластиШапки = "";
	
	ПроверитьОтображениеТабличныхЧастей();
	ВывестиТабличныеЧастиТекущегоЭлемента();
	СменитьСтраницуРаздела();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ОткрытьФорму(Объект.ОбъектМетаданных + ".ФормаСписка", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимФормыПриИзменении(Элемент)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.ГруппаРазделы.ТекущаяСтраница;
	Если ТекущаяСтраница.Имя = РежимФормы Тогда
		Возврат;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКод Тогда
		
		ПреобразоватьВТаблицуНаСервере();
		
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		Область = ТабличныйДокумент.Область(1,1,1,1);
		Элементы.ТабличныйДокумент.УстановитьВыделенныеОбласти(Область);
		ТабличныйДокумент.ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		
		ТекущиеИмяПредопределенныхДанных = "";
		ИмяОбластиШапки = "";
		
		ПроверитьОтображениеТабличныхЧастей();
		ВывестиТабличныеЧастиТекущегоЭлемента();
		
		РежимФормы ="СтраницаТаблица";
	Иначе
		ПреобразоватьВКодНаСервере();
		ТекущиеИмяПредопределенныхДанных = "";
		ИмяОбластиШапки = "";
	КонецЕсли;
	
	СменитьСтраницуРаздела();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыУстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличныйДокумент

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличногоДокумента = СтрЗаменить(Элемент.Имя, "БезТЧ", "");
	
	СтруктураАктивнойОбласти = Новый Структура;
	ИсходнаяОбласть = Элемент.ТекущаяОбласть;
	ВерхОбласти  = ?(ИсходнаяОбласть.Верх  = 0, 1, ИсходнаяОбласть.Верх);
	НизОбласти   = ?(ИсходнаяОбласть.Низ   = 0, ЭтотОбъект[ИмяТабличногоДокумента].ВысотаТаблицы, ИсходнаяОбласть.Низ);
	ЛевоОбласти  = ?(ИсходнаяОбласть.Лево  = 0, 1, ИсходнаяОбласть.Лево);
	ПравоОбласти = ?(ИсходнаяОбласть.Право = 0, ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы, ИсходнаяОбласть.Право);
	
	Для НомерСтроки = ВерхОбласти По НизОбласти Цикл
		Для НомерКолонки = ЛевоОбласти По ПравоОбласти Цикл
			КоординатыОбласти = Новый Структура;
			КоординатыОбласти.Вставить("Верх", НомерСтроки);
			КоординатыОбласти.Вставить("Лево", НомерКолонки);
			ИмяОбласти = ИмяОбласти(КоординатыОбласти);
			Ячейка = ЭтотОбъект[ИмяТабличногоДокумента].Область(ИмяОбласти);
			СтруктураЯчейки = Новый Структура("Имя, СодержитЗначение, Значение, Текст, ТипЗначения");
			ЗаполнитьЗначенияСвойств(СтруктураЯчейки, Ячейка);
			СтруктураАктивнойОбласти.Вставить(ИмяОбласти, СтруктураЯчейки);
		КонецЦикла;
	КонецЦикла;
	
	КоординатыОбласти = Новый Структура;
	КоординатыОбласти.Вставить("Верх", ВерхОбласти);
	КоординатыОбласти.Вставить("Лево", 0);
	Если ИмяТабличногоДокумента = "ТабличныйДокумент" И ОтображатьТабличныеЧасти И СтрНайти(ИмяОбластиШапки, ИмяОбласти(КоординатыОбласти) + "C") = 0 Тогда
		КоординатыОбласти.Вставить("Верх",  ВерхОбласти);
		КоординатыОбласти.Вставить("Лево",  ЛевоОбласти);
		КоординатыОбласти.Вставить("Низ",   НизОбласти);
		КоординатыОбласти.Вставить("Право", ПравоОбласти);
		ИмяОбластиШапки = ИмяОбласти(КоординатыОбласти);
		ПодключитьОбработчикОжидания("ВывестиТабличныеЧастиТекущегоЭлемента", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументНачалоВводаЗначения(Элемент, Область, СтандартнаяОбработка)
	
	ИмяТабличногоДокумента = СтрЗаменить(Элемент.Имя, "БезТЧ", "");
	ИмяТабличнойЧасти = СтрЗаменить(ИмяТабличногоДокумента, "ТабличныйДокумент", "");
	
	ОбластьЗаголовкаКолонки = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, Область.Лево, 1, Область.Лево);
	
	Если Область.СодержитЗначение Тогда
		Возврат;
	ИначеЕсли Область.Верх = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ОбластьЗаголовкаКолонки.Имя;
	КоординатыОбласти = Новый Структура;
	КоординатыОбласти.Вставить("Верх", 1);
	КоординатыОбласти.Вставить("Лево", Область.Лево);
	Если ИмяРеквизита = ИмяОбласти(КоординатыОбласти) Тогда
		ИмяРеквизита = ОбластьЗаголовкаКолонки.Текст;
	КонецЕсли;
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, " ", "");
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолнаяСтруктураОбъекта;
	Если ИмяТабличногоДокумента <> "ТабличныйДокумент" Тогда
		Если Не ПолнаяСтруктураОбъекта.Свойство(ИмяТабличнойЧасти, СтруктураРеквизитов) Тогда
			Возврат;
		КонецЕсли;
		СтруктураРеквизитов = СтруктураРеквизитов.Реквизиты;
	КонецЕсли;
	
	ЗначениеРеквизитаСтруктуры = Неопределено;
	Если СтруктураРеквизитов.Свойство(ИмяРеквизита, ЗначениеРеквизитаСтруктуры) Тогда
		
		ТипРеквизитаСтруктуры = ЗначениеРеквизитаСтруктуры.ТипЗначения;
		
		Если СодержитТолькоПростыеТипы(ТипРеквизитаСтруктуры) Тогда
			
			// Нетипизированная область простого типа
			Область.СодержитЗначение = Истина;
			Область.ТипЗначения = ТипРеквизитаСтруктуры;
			
			Если ЭтоБулево(ТипРеквизитаСтруктуры) Тогда
				// Для ситуаций, когда оставляется "нет" в несинхронизированной области -> Событие "при изменении" не отрабатывает,
				// таблица данных не синхронизируется.
				ТабличныйДокументСинхронизацияИзмененийГраниц(ИмяТабличнойЧасти, Область.Верх - 2);
				ТабличныйДокументСинхронизацияИзмененийДанных(Ложь, ИмяРеквизита, ИмяТабличнойЧасти, Область.Верх - 2);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Работа с нетипизированными областями для реквизитов ссылочного типа
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = ПараметрыТабличногоДокумента(Область, ИмяТабличногоДокумента, ТипРеквизитаСтруктуры, ИмяРеквизита);
	
	Если ЭтоОписаниеТипов(ТипРеквизитаСтруктуры) Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершениеВыбораРеквизитаОписаниеТипов", ЭтотОбъект, ДополнительныеПараметры);
		ОписаниеТипов = ТабличныеДанныеПрочитать(ТекущиеИмяПредопределенныхДанных, ИмяРеквизита, ИмяТабличнойЧасти, ДополнительныеПараметры.НомерСтроки);
		ПараметрыОткрытия = Новый Структура("ОписаниеТипов, ОбъектМетаданных", ОписаниеТипов, Объект.ОбъектМетаданных);
		
		ОткрытьФорму("ВнешняяОбработка.НачальноеЗаполнениеДанных.Форма.ФормаРедактированияОписанияТипов", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		МетаданныеРеквизитаПолноеИмя = ПолноеИмяМетаданныхТипа(ТипРеквизитаСтруктуры);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершениеВыбораРеквизитаСсылочногоТипа", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОткрытия = Новый Структура("РежимВыбора, ВыборГруппИЭлементов, ТипРеквизитаСтруктуры", Истина, ИспользованиеГруппИЭлементов.ГруппыИЭлементы, ТипРеквизитаСтруктуры);
		
		ОткрытьФорму(МетаданныеРеквизитаПолноеИмя + ".ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры


// Параметры:
//  Область - ОбластьЯчеекТабличногоДокумента
//  ИмяТабличногоДокумента - Строка
//  ТипРеквизитаСтруктуры - ОписаниеТипов
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяТабличногоДокумента - Строка
//   * ИмяРеквизита - Строка
//   * Область - ОбластьЯчеекТабличногоДокумента
//   * ТипЗначения - ОписаниеТипов
//   * НомерСтроки - Число
//
&НаКлиенте
Функция ПараметрыТабличногоДокумента(Область, Знач ИмяТабличногоДокумента, Знач ТипРеквизитаСтруктуры, Знач ИмяРеквизита)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличногоДокумента", ИмяТабличногоДокумента);
	ДополнительныеПараметры.Вставить("Область",                Область);
	ДополнительныеПараметры.Вставить("НомерСтроки",            Область.Верх - 2);
	ДополнительныеПараметры.Вставить("ИмяРеквизита",           ИмяРеквизита);
	ДополнительныеПараметры.Вставить("ТипЗначения",            ТипРеквизитаСтруктуры);
	Возврат ДополнительныеПараметры;
	
КонецФункции


&НаКлиенте
Процедура Подключаемый_ТабличныйДокументПриИзменении(Элемент)
	
	// проверить модифицированность
	Если Не ТабличныйДокументПриИзмененииМодифицирован(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличногоДокумента = СтрЗаменить(Элемент.Имя, "БезТЧ", "");
	ИмяТабличнойЧасти = СтрЗаменить(ИмяТабличногоДокумента, "ТабличныйДокумент", "");
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	
	ЭтоИзменениеСтрок   = ТекущаяОбласть.Лево + ТекущаяОбласть.Право = 0;
	ЭтоИзменениеКолонок = ТекущаяОбласть.Верх + ТекущаяОбласть.Низ = 0;
	ЭтоИзменениеЯчейки  = Не ЭтоИзменениеСтрок И Не ЭтоИзменениеКолонок И ТекущаяОбласть.Верх = ТекущаяОбласть.Низ И ТекущаяОбласть.Лево = ТекущаяОбласть.Право;
	ЭтоИзменениеЗаголовка = ЭтоИзменениеЯчейки И ТекущаяОбласть.Верх = 1;
	
	Если ЭтоИзменениеЯчейки И ИмяТабличногоДокумента <> "ТабличныйДокумент"  И ТекущиеИмяПредопределенныхДанных = "" Тогда
		ТекущаяОбласть.СодержитЗначение = Ложь;
		ТекущаяОбласть.Текст = ?(ЭтоИзменениеЗаголовка, ТекущаяОбласть.Имя, "");
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОбласть.Верх <= 1 Тогда
		// Изменение в строке Шапка или ЭтоИзменениеКолонок
		// проверим очищена DEL
		ОбластьЛево = ?(ТекущаяОбласть.Лево = 0, 1, ТекущаяОбласть.Лево);
		ОбластьПраво = ?(ТекущаяОбласть.Право = 0, ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы, ТекущаяОбласть.Право);
		Для НомерКолонки = ОбластьЛево По ОбластьПраво Цикл
			ОбластьЗаголовка = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, НомерКолонки);
			Если ОбластьЗаголовка.Текст = "" Тогда
				ОбластьЗаголовка.Имя = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ИмяРеквизита = "";
	ИмяРеквизитаТЧ = "";
	Если ЭтоИзменениеЯчейки Или ЭтоИзменениеЗаголовка Тогда
		
		ОбластьЗаголовка = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, ТекущаяОбласть.Лево);
		ИмяРеквизита = ОбластьЗаголовка.Имя;
		
		КоординатыОбласти = Новый Структура;
		КоординатыОбласти.Вставить("Верх", 1);
		КоординатыОбласти.Вставить("Лево", ОбластьЗаголовка.Лево);
		Если ИмяРеквизита = ИмяОбласти(КоординатыОбласти) Тогда
			ИмяРеквизита = ОбластьЗаголовка.Текст;
		КонецЕсли;
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, " ", "");
		
		Если ПустаяСтрока(ИмяРеквизита) И Не ЭтоИзменениеКолонок Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяТабличногоДокумента = "ТабличныйДокумент" Тогда
			ИсточникРеквизитов = ПолнаяСтруктураОбъекта;
		Иначе
			ИмяРеквизитаТЧ = СтрЗаменить(ИмяТабличногоДокумента, "ТабличныйДокумент", "");
			ИсточникРеквизитов = ПолнаяСтруктураОбъекта[ИмяРеквизитаТЧ].Реквизиты;
		КонецЕсли;
		
		ЗначениеРеквизитаСтруктуры = Неопределено;
		ИсточникРеквизитов.Свойство(ИмяРеквизита, ЗначениеРеквизитаСтруктуры);
		
	КонецЕсли;
	
	Если ЭтоИзменениеКолонок Тогда
		
		Если ИмяТабличногоДокумента = "ТабличныйДокумент" Тогда
			ТекущиеИмяПредопределенныхДанныхКолонка = КолонкаТабличногоДокументаПоИмени("ТабличныйДокумент", ИмяКлючевогоРеквизита);
			Если ТекущиеИмяПредопределенныхДанныхКолонка = 0 Тогда
				// удалили колонку "ИмяПредопределенныхДанных", возвращаем
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Нельзя удалять обязательный реквизит с именем ключевого реквизита ""%1"".'"), ИмяКлючевогоРеквизита));
				ЗаполнитьТабличныеДокументы();
				ТекущиеИмяПредопределенныхДанныхКолонка = КолонкаТабличногоДокументаПоИмени("ТабличныйДокумент", ИмяКлючевогоРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыСинхронизироватьСТаблицей(ИмяТабличногоДокумента);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоИзменениеЗаголовка Тогда
		
		Если ТекущаяОбласть.Текст = "" Тогда
			ТекущаяОбласть.Текст = ИмяРеквизита;
		КонецЕсли;
		
		ТекстОшибки = "";
		Если ЗначениеРеквизитаСтруктуры = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У объекта метаданных нет реквизита ""%1"" %2'"), ИмяРеквизита,
				?(ПустаяСтрока(ИмяРеквизитаТЧ), "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='табличной части ""%1""'"), ИмяРеквизитаТЧ)));
		ИначеЕсли ЗначениеРеквизитаСтруктуры.Исключаемый Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Реквизит ""%1"" %2 исключаемого типа %3'"), ИмяРеквизита,
				?(ПустаяСтрока(ИмяРеквизитаТЧ), "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='табличной части ""%1""'"), ИмяРеквизитаТЧ)), ЗначениеРеквизитаСтруктуры.ТипЗначения);
		ИначеЕсли ЕстьДублиКолонок(ЭтотОбъект[ИмяТабличногоДокумента], ИмяРеквизита, ТекущаяОбласть.Лево) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Реквизит ""%1"" %2 уже есть в таблице.'"), ИмяРеквизита,
				?(ПустаяСтрока(ИмяРеквизитаТЧ), "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='табличной части ""%1""'"), ИмяРеквизитаТЧ)));
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			КоординатыОбласти = Новый Структура;
			КоординатыОбласти.Вставить("Верх", 1);
			КоординатыОбласти.Вставить("Лево", ТекущаяОбласть.Лево);
			ТекущаяОбласть.Имя = ИмяОбласти(КоординатыОбласти);
			ТекущаяОбласть.СодержитЗначение = Ложь;
			ТекущаяОбласть.Текст = "";
			
			ПоказатьОповещениеПользователя(ТекстОшибки);
		Иначе
			РеквизитыСинхронизироватьСТаблицей(ИмяТабличногоДокумента);
			ЗаполнитьТабличныеДокументы();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоИзменениеСтрок Тогда
		
		Если ИмяТабличногоДокумента = "ТабличныйДокумент" Тогда
			ТаблицаИсточник = ТаблицаДанных;
		Иначе
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура(ИмяКлючевогоРеквизита, ТекущиеИмяПредопределенныхДанных));
			Если НайденныеСтроки.Количество() = 0 Тогда
				// сбой алгоритма
				Возврат;
			КонецЕсли;
			ТаблицаИсточник = НайденныеСтроки[0][ИмяТабличнойЧасти];
		КонецЕсли;
		
		Если ЭтотОбъект[ИмяТабличногоДокумента].ВысотаТаблицы-1 < ТаблицаИсточник.Количество() Тогда
			
			// удалены строки
			Индекс = ТекущаяОбласть.Низ -2;
			Пока Индекс >= ТекущаяОбласть.Верх -2 Цикл
				ТаблицаИсточник.Удалить(ТаблицаИсточник[Индекс]);
				Индекс = Индекс - 1;
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ВывестиТабличныеЧастиТекущегоЭлемента", 0.1, Истина);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокументПриИзмененииОбласти(ИмяТабличногоДокумента, ТекущаяОбласть)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизиты

&НаКлиенте
Процедура РеквизитыПриИзменении(Элемент)
	
	Если РежимФормы = "СтраницаКод" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка Тогда
		// раздвинуть табличную часть и вывести колонку
		ЗаполнитьТабличныеДокументы();
	ИначеЕсли ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		Элементы["Страница" + ТекущиеДанные.Имя].Видимость = Ложь;
	Иначе
		ИмяТабличногоДокумента = "ТабличныйДокумент" + ТекущиеДанные.ИмяТабличнойЧасти;
		
		МассивКолонокНаУдаление = Новый Массив;
		
		Если ТекущиеДанные.Локализуемый Тогда
			Для Каждого ЯзыкЛокализации Из Объект.Языки Цикл
				Если ЯзыкЛокализации.ОсновнойЯзык Тогда
					Продолжить;
				КонецЕсли;
				НомерКолонки = КолонкаТабличногоДокументаПоИмени(ИмяТабличногоДокумента, ТекущиеДанные.Имя + "_" + ЯзыкЛокализации.КодЯзыка);
				МассивКолонокНаУдаление.Добавить(НомерКолонки);
			КонецЦикла;
		КонецЕсли;
		
		НомерКолонки = КолонкаТабличногоДокументаПоИмени(ИмяТабличногоДокумента, ТекущиеДанные.Имя);
		МассивКолонокНаУдаление.Добавить(НомерКолонки);
		
		Если МассивКолонокНаУдаление.Количество() > 0 Тогда
			ТабличныйДокументУдалитьКолонки(ИмяТабличногоДокумента, МассивКолонокНаУдаление);
		КонецЕсли;
		
		Если ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы = 0 Тогда
			Элементы["Страница" + ТекущиеДанные.ИмяТабличнойЧасти].Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьОтображениеТабличныхЧастей();
	СменитьСтраницуРаздела();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
	
	Для каждого Реквизит Из РеквизитыШапки Цикл
		
		Если Реквизит.Исключаемый Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит.Пометка = Истина;
		
		Если Реквизит.ЭтоТабличнаяЧасть Тогда
			
			РеквизитыТЧ = Реквизит.ПолучитьЭлементы();
			
			Для каждого РеквизитТЧ Из РеквизитыТЧ Цикл
				Если РеквизитТЧ.Исключаемый Тогда
					Продолжить;
				КонецЕсли;
				РеквизитТЧ.Пометка = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьТабличныеДокументы();
	ПроверитьОтображениеТабличныхЧастей();
	СменитьСтраницуРаздела();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
	
	Для Каждого Реквизит Из РеквизитыШапки Цикл
		
		Если Реквизит.Исключаемый Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Имя = ИмяКлючевогоРеквизита Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит.Пометка = Ложь;
		
		Если НЕ Реквизит.ЭтоТабличнаяЧасть Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыТЧ = Реквизит.ПолучитьЭлементы();
		Для каждого РеквизитТЧ Из РеквизитыТЧ Цикл
			РеквизитТЧ.Пометка = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьТабличныеДокументы();
	ПроверитьОтображениеТабличныхЧастей();
	СменитьСтраницуРаздела();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ВариантыВводаПоСтрокеДляТипа(ТипРеквизита);
	
	ВводПоСтроке = Новый Структура;
	
	ЗначениеРеквизитаПоУмолчанию = ТипРеквизита.ПривестиЗначение();
	МетаданныеРеквизита = ЗначениеРеквизитаПоУмолчанию.Метаданные(); // ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент 
	
	Если ОбщегоНазначения.ЭтоПеречисление(МетаданныеРеквизита) Тогда
		Возврат ВводПоСтроке;
	КонецЕсли;
	
	Для каждого РеквизитВводаПоСтроке Из МетаданныеРеквизита.ВводПоСтроке Цикл
		ТипРеквизитаПоиска = "Строка";
		СтандартныеРеквизиты = МетаданныеРеквизита.СтандартныеРеквизиты;
		Если РеквизитВводаПоСтроке.Имя = "Код" И СтандартныеРеквизиты.Код.Тип.СодержитТип(Тип("Число")) Тогда
			ТипРеквизитаПоиска = "Число";
		КонецЕсли; 
		ВводПоСтроке.Вставить(РеквизитВводаПоСтроке.Имя, ТипРеквизитаПоиска);
	КонецЦикла;
	
	Возврат ВводПоСтроке;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеИмяМетаданныхТипа(ТипРеквизита)
	
	ЗначениеРеквизитаПоУмолчанию = ТипРеквизита.ПривестиЗначение();

	МетаданныеРеквизита = ЗначениеРеквизитаПоУмолчанию.Метаданные();
	
	Возврат МетаданныеРеквизита.ПолноеИмя();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Объект, ИмяСвойства)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, ИмяСвойства);
	
КонецФункции

&НаСервереБезКонтекста
Функция СодержитТолькоПростыеТипы(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	Простой = Истина;
	Для каждого Тип Из ТипРеквизита.Типы() Цикл
		Простой = Простой И (ОписаниеТиповСтрока.СодержитТип(Тип)
								Или ОписаниеТиповБулево.СодержитТип(Тип)
								Или ОписаниеТиповДата.СодержитТип(Тип)
								Или ОписаниеТиповЧисло.СодержитТип(Тип));
	КонецЦикла;
	
	Возврат Простой;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеРеквизитаПоУмолчанию = ТипРеквизита.ПривестиЗначение();
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(ЗначениеРеквизитаПоУмолчанию)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("ОписаниеТипов") Или ТипРеквизита = Новый ОписаниеТипов("ОписаниеТипов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоПеречисление(ЗначениеРеквизитаПоУмолчанию.Метаданные());
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылочныйТип(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("ОписаниеТипов") Или ТипРеквизита = Новый ОписаниеТипов("ОписаниеТипов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеРеквизитаПоУмолчанию = ТипРеквизита.ПривестиЗначение();
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(ЗначениеРеквизитаПоУмолчанию)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ЗначениеРеквизитаПоУмолчанию.Метаданные());
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОписаниеТипов(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипРеквизита = Тип("ОписаниеТипов") Или ТипРеквизита = Новый ОписаниеТипов("ОписаниеТипов");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоБулево(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Для каждого Тип Из ТипРеквизита.Типы() Цикл
		Если Не ОписаниеТиповБулево.СодержитТип(Тип) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЧисло(ТипРеквизита, Разрядность = 0)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	Для каждого Тип Из ТипРеквизита.Типы() Цикл
		Если Не ОписаниеТиповЧисло.СодержитТип(Тип) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Разрядность = ТипРеквизита.КвалификаторыЧисла.Разрядность;
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДата(ТипРеквизита, ЧастиДаты = Неопределено)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	Для каждого Тип Из ТипРеквизита.Типы() Цикл
		Если Не ОписаниеТиповДата.СодержитТип(Тип) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЧастиДаты = ТипРеквизита.КвалификаторыДаты.ЧастиДаты;
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеОписанияТипов(ОписаниеТипов)
	
	Если НЕ ЗначениеЗаполнено(ОписаниеТипов) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеОписаниеТипов = "";
	Разделитель = "";
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		ОбъектМетаданныхПоТипу = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданныхПоТипу = Неопределено Тогда
			ПредставлениеОписаниеТипов = ПредставлениеОписаниеТипов + Разделитель + Строка(Тип);
			Разделитель = "; ";
		Иначе
			ПредставлениеОписаниеТипов = ПредставлениеОписаниеТипов + Разделитель + ОбъектМетаданныхПоТипу.ПолноеИмя();
			Разделитель = "; ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредставлениеОписаниеТипов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипМожетСодержатьПредопределенныеЗначения(ТипРеквизита)
	
	ЗначениеРеквизитаПоУмолчанию = ТипРеквизита.ПривестиЗначение();
	МетаданныеРеквизита = ЗначениеРеквизитаПоУмолчанию.Метаданные();
	
	Возврат ОбщегоНазначения.ЭтоСправочник(МетаданныеРеквизита)
			ИЛИ ОбщегоНазначения.ЭтоПланСчетов(МетаданныеРеквизита)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеРеквизита)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеРеквизита);
			
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Доступность выбора реквизитов объекта метаданных
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("РеквизитыПометка");
	
	ГруппаОтбораДоступность = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДоступность.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораДоступность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ИмяКлючевогоРеквизита;
	
	ОтборЭлемента = ГруппаОтбораДоступность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.Исключаемый");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Доступность параметра "НСтр" только для сроковых реквизитов объекта метаданных, не локализованных
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("РеквизитыИспользоватьНСтр");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.Строковый");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиенте
Функция ИмяОбласти(КоординатыОбласти, ИмяТабличногоДокумента = "")
	Перем Верх, Лево, Низ, Право;
	
	Если Не КоординатыОбласти.Свойство("Верх", Верх)Тогда
		Верх = 0;
	КонецЕсли;
	
	Если Не КоординатыОбласти.Свойство("Лево", Лево) Тогда
		Лево = 0;
	КонецЕсли;
	
	Если Не КоординатыОбласти.Свойство("Низ", Низ) Тогда
		Низ = 0;
	КонецЕсли;
	
	Если Не КоординатыОбласти.Свойство("Право", Право) Тогда
		Право = 0;
	КонецЕсли;
	
	Если ИмяТабличногоДокумента = "" Тогда
		АдрВерх  = ?(Верх  = 0, "", "R" + Формат(Верх, "ЧГ="));
		АдрЛево  = ?(Лево  = 0, "", "C" + Формат(Лево, "ЧГ="));
		АдрНиз   = ?(Низ   = 0, "", "R" + Формат(Низ, "ЧГ="));
		АдрПраво = ?(Право = 0, "", "C" + Формат(Право, "ЧГ="));
	Иначе
		АдрВерх  = ?(Верх  = 0, "R1", "R" + Формат(Верх, "ЧГ="));
		АдрЛево  = ?(Лево  = 0, "C1", "C" + Формат(Лево, "ЧГ="));
		АдрНиз   = ?(Низ   = 0, "R" + ЭтотОбъект[ИмяТабличногоДокумента].ВысотаТаблицы, "R" + Формат(Низ, "ЧГ="));
		АдрПраво = ?(Право = 0, "C" + ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы, "C" + Формат(Право, "ЧГ="));
	КонецЕсли;
	
	Возврат АдрВерх + АдрЛево + АдрНиз + АдрПраво;
	
КонецФункции

&НаКлиенте
Процедура РеквизитыУстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)
	
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Если Элемент.Исключаемый Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Пометка = Пометка;
		РеквизитыУстановитьПометкуВСписке(Элемент, Пометка, Ложь);
	КонецЦикла;
	
	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	
	Если ПроверятьРодителя И Родитель <> Неопределено Тогда 
		РеквизитыПроверитьРодителя(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПроверитьРодителя(Родитель)
	
	ПометкаРодителя = Ложь;
	ЭлементыСтроки = Родитель.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Если Элемент.Пометка Тогда
			ПометкаРодителя = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Родитель.Пометка = ПометкаРодителя;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыСинхронизироватьСТаблицей(ИмяТабличногоДокумента = "ТабличныйДокумент", ДанныеИнициализации = Неопределено)
	
	ЭтоТабличнаяЧасть = Ложь;
	
	Если ДанныеИнициализации = Неопределено И ИмяТабличногоДокумента = "ТабличныйДокумент" Тогда
		ДанныеИнициализации = Реквизиты;
	ИначеЕсли ДанныеИнициализации = Неопределено Тогда
		РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
		Для Каждого Реквизит Из РеквизитыШапки Цикл
			Если Реквизит.ЭтоТабличнаяЧасть И Реквизит.Имя = СтрЗаменить(ИмяТабличногоДокумента, "ТабличныйДокумент", "") Тогда
				ДанныеИнициализации = Реквизит;
				ЭтоТабличнаяЧасть = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыПоТаблице = "";
	Для НомерКолонки = 1 По ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы Цикл
		ОбластьШапкиКолонки = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, НомерКолонки);
		ИмяРеквизита = ОбластьШапкиКолонки.Имя;
		КоординатыОбласти = Новый Структура;
		КоординатыОбласти.Вставить("Верх", 1);
		КоординатыОбласти.Вставить("Лево", НомерКолонки);
		Если ИмяРеквизита = ИмяОбласти(КоординатыОбласти) Тогда
			ИмяРеквизита = СокрЛП(ОбластьШапкиКолонки.Текст)
		КонецЕсли;
		РеквизитыПоТаблице = РеквизитыПоТаблице + ИмяРеквизита + ",";
	КонецЦикла;
	
	МассивКолонокНаУдаление = Новый Массив;
	
	РеквизитыПоТаблице = вРег(РеквизитыПоТаблице);
	РеквизитыИнициализации = ДанныеИнициализации.ПолучитьЭлементы();
	
	Для Каждого Реквизит Из РеквизитыИнициализации Цикл
		
		Если Не Реквизит.ЭтоТабличнаяЧасть Тогда
			
			Пометка = СтрНайти(РеквизитыПоТаблице, ВРег(Реквизит.Имя) + ",") > 0;
			Реквизит.Пометка = Пометка;
			
			Если Реквизит.Локализуемый Тогда
				
				МассивКолонокЛ = Новый Массив;
				Для каждого ЯзыкЛокализации Из Объект.Языки Цикл
					Если ЯзыкЛокализации.ОсновнойЯзык Тогда
						Продолжить;
					КонецЕсли;
					ИмяКолонкиЛ = Реквизит.Имя + "_" + ЯзыкЛокализации.КодЯзыка;
					Если СтрНайти(РеквизитыПоТаблице, ВРег(ИмяКолонкиЛ) + ",") > 0 Тогда
						МассивКолонокЛ.Добавить(ИмяКолонкиЛ);
					КонецЕсли;
				КонецЦикла;
				
				Если Пометка Тогда
					Если МассивКолонокЛ.Количество() = Объект.Языки.Количество() - 1 Тогда
						Продолжить;
					КонецЕсли;
					
					// Нет одной колонки Удаляем всю группу локализации
					Реквизит.Пометка = Ложь;
					НомерКолонки = КолонкаТабличногоДокументаПоИмени(ИмяТабличногоДокумента, Реквизит.Имя);
					МассивКолонокНаУдаление.Добавить(НомерКолонки);
					Для каждого ИмяКолонкиЛ Из МассивКолонокЛ Цикл
						НомерКолонки = КолонкаТабличногоДокументаПоИмени(ИмяТабличногоДокумента, ИмяКолонкиЛ);
						МассивКолонокНаУдаление.Добавить(НомерКолонки);
					КонецЦикла;
					
				Иначе
					Для каждого ИмяКолонкиЛ Из МассивКолонокЛ Цикл
						НомерКолонки = КолонкаТабличногоДокументаПоИмени(ИмяТабличногоДокумента, ИмяКолонкиЛ);
						МассивКолонокНаУдаление.Добавить(НомерКолонки);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОтображатьТабличныеЧасти Тогда
			ПолеФормы = Элементы.Найти("ТабличныйДокумент" + Реквизит.Имя);
			Если ПолеФормы <> Неопределено Тогда
				РеквизитыСинхронизироватьСТаблицей("ТабличныйДокумент" + Реквизит.Имя, Реквизит);
				РеквизитыПроверитьРодителя(Реквизит);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивКолонокНаУдаление.Количество() > 0 Тогда
		ТабличныйДокументУдалитьКолонки(ИмяТабличногоДокумента, МассивКолонокНаУдаление);
	КонецЕсли;
	
	Если ЭтоТабличнаяЧасть Тогда
		
		РеквизитыПроверитьРодителя(ДанныеИнициализации);
		
		Если Не ДанныеИнициализации.Пометка Тогда
			ИмяПервойТЧ = ПроверитьОтображениеТабличныхЧастей();
			
			Если ОтображатьТабличныеЧасти Тогда
				Если ИмяПервойТЧ <> "" Тогда
					ТекущийЭлемент = Элементы["ТабличныйДокумент" + ИмяПервойТЧ];
					Элементы["ТабличныйДокумент"+ИмяПервойТЧ].ТекущаяОбласть = ЭтотОбъект["ТабличныйДокумент"+ИмяПервойТЧ].Область(1, 1);
				КонецЕсли;
				Элементы["Страница" + СтрЗаменить(ИмяТабличногоДокумента, "ТабличныйДокумент", "")].Видимость = Ложь;
				
				ТекущийЭлемент = Элементы.ТабличныйДокумент;
				ТабличныйДокумент.ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			КонецЕсли;
			
		КонецЕсли;
		
		СменитьСтраницуРаздела();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяПредопределенныхДанныхПоСтроке(НомерСтроки);
	
	Если НомерСтроки < 2 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТекущиеИмяПредопределенныхДанныхКолонка <> 0 Тогда
		мОбласть = ТабличныйДокумент.Область(1, ТекущиеИмяПредопределенныхДанныхКолонка);
		КоординатыОбласти = Новый Структура;
		КоординатыОбласти.Вставить("Верх", 1);
		КоординатыОбласти.Вставить("Лево", ТекущиеИмяПредопределенныхДанныхКолонка);
		Если Не (мОбласть.Имя = ИмяКлючевогоРеквизита 
				Или (мОбласть.Имя = ИмяОбласти(КоординатыОбласти) И мОбласть.Текст = ИмяКлючевогоРеквизита)) Тогда
			ТекущиеИмяПредопределенныхДанныхКолонка = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеИмяПредопределенныхДанныхКолонка = 0 Тогда
		ТекущиеИмяПредопределенныхДанныхКолонка = КолонкаТабличногоДокументаПоИмени("ТабличныйДокумент", ИмяКлючевогоРеквизита);
	КонецЕсли;
	
	Если ТекущиеИмяПредопределенныхДанныхКолонка = 0 Тогда
		Возврат "";
	Иначе
		ИмяПредопределенныхДанныхОбласть = ТабличныйДокумент.Область(НомерСтроки, ТекущиеИмяПредопределенныхДанныхКолонка);
		Если ИмяПредопределенныхДанныхОбласть.СодержитЗначение Тогда
			Возврат ИмяПредопределенныхДанныхОбласть.Значение;
		Иначе
			Возврат СокрЛП(ИмяПредопределенныхДанныхОбласть.Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция КолонкаТабличногоДокументаПоИмени(ИмяТабличногоДокумента, ИмяКолонки = "")
	
	Если ПустаяСтрока(ИмяКолонки) Тогда
		ИмяКолонки = ИмяКлючевогоРеквизита;
	КонецЕсли;
	
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		мОбласть = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, НомерКолонки);
		
		КоординатыОбласти = Новый Структура;
		КоординатыОбласти.Вставить("Верх", 1);
		КоординатыОбласти.Вставить("Лево", ТекущиеИмяПредопределенныхДанныхКолонка);
		Если мОбласть.Имя = ИмяКолонки Тогда
			Возврат НомерКолонки;
		ИначеЕсли мОбласть.Имя = ИмяОбласти(КоординатыОбласти) И мОбласть.Текст = ИмяКолонки Тогда
			Возврат НомерКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьЗначениеАвтоПодбора(СтрокаПоиска, ДанныеВыбора)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		ДанныеВыбора = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого Строка Из Элементы.ОбъектМетаданных.СписокВыбора Цикл
		
		Если СтрНайти(НРег(Строка.Значение), НРег(СтрокаПоиска)) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПредставления = Строка.Значение;
		ФорматированнаяСтрока = ВыделитьФрагментВСтроке(СтрокаПредставления, СтрокаПоиска);
		ДанныеВыбора.Добавить(Строка.Значение, Новый ФорматированнаяСтрока(ФорматированнаяСтрока));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделитьФрагментВСтроке(Знач Строка, Знач фрагмент)
	
	МассивСтрок = Новый Массив;
	ЖирныйШрифт = Новый Шрифт(,,ИСТИНА);
	
	Позиция = 1;
	ДлинаФрагмента = СтрДлина(фрагмент);
	
	СтрокаПодстрок = СтрЗаменить(ВРег(Строка),ВРег(фрагмент), Символы.ПС);
	Для Индекс = 1 По СтрЧислоСтрок(СтрокаПодстрок) Цикл
		
		Подстрока = СтрПолучитьСтроку(СтрокаПодстрок, Индекс);
		ДлинаСтроки = СтрДлина(Подстрока);
		МассивСтрок.Добавить(Сред(Строка,Позиция, ДлинаСтроки));
		Позиция = Позиция + ДлинаСтроки;
		
		ФорматированныйФрагмент = Новый ФорматированнаяСтрока(Сред(Строка,Позиция, ДлинаФрагмента), ЖирныйШрифт, WebЦвета.Зеленый);
		МассивСтрок.Добавить(ФорматированныйФрагмент);
		Позиция = Позиция + ДлинаФрагмента;
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Процедура СменитьСтраницуРаздела()
	
	Элементы.ГруппаРазделы.ТекущаяСтраница = Элементы[РежимФормы + ?(РежимФормы = "СтраницаТаблица" И ОтображатьТабличныеЧасти, "СТЧ", "")];
	
КонецПроцедуры

// Параметры:
//   Результат - Произвольный
//   ДополнительныеПараметры - см. ПараметрыТабличногоДокумента
// 
&НаКлиенте
Процедура ТабличныйДокументВыборЗавершениеВыбораРеквизитаСсылочногоТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Синхронизация ТаблицыДанных
	ИмяТабличнойЧасти = СтрЗаменить(ДополнительныеПараметры.ИмяТабличногоДокумента, "ТабличныйДокумент", "");
	ТекущиеИмяПредопределенныхДанныхКолонка = КолонкаТабличногоДокументаПоИмени("ТабличныйДокумент", ИмяКлючевогоРеквизита);
	ТабличныйДокументСинхронизацияИзмененийГраниц(ИмяТабличнойЧасти, ДополнительныеПараметры.Область.Верх-2);
	ТабличныйДокументСинхронизацияИзмененийДанных(Результат, ДополнительныеПараметры.ИмяРеквизита, ИмяТабличнойЧасти, ДополнительныеПараметры.НомерСтроки);
	
	Если ЭтоПеречисление(ДополнительныеПараметры.ТипЗначения) Тогда
		ДополнительныеПараметры.Область.Текст = Строка(Результат);
	ИначеЕсли ТипМожетСодержатьПредопределенныеЗначения(ДополнительныеПараметры.ТипЗначения) И ЗначениеРеквизитаОбъекта(Результат, "Предопределенный") Тогда
		ДополнительныеПараметры.Область.Текст = ЗначениеРеквизитаОбъекта(Результат, ИмяКлючевогоРеквизита);
	Иначе
		ДополнительныеПараметры.Область.Текст = Строка(Результат);
	КонецЕсли;
		
	ТабличныеПредставленияПриИзмененииГраниц(ДополнительныеПараметры.ИмяТабличногоДокумента, ДополнительныеПараметры.Область);
	
КонецПроцедуры

// Параметры:
//   Результат - Произвольный
//   ДополнительныеПараметры - см. ПараметрыТабличногоДокумента
// 
&НаКлиенте
Процедура ТабличныйДокументВыборЗавершениеВыбораРеквизитаОписаниеТипов(Результат, ДополнительныеПараметры) Экспорт
	
	// Синхронизация ТаблицыДанных
	ИмяТабличнойЧасти = СтрЗаменить(ДополнительныеПараметры.ИмяТабличногоДокумента, "ТабличныйДокумент", "");
	ТабличныйДокументСинхронизацияИзмененийГраниц(ИмяТабличнойЧасти, ДополнительныеПараметры.Область.Верх-2);
	ТабличныйДокументСинхронизацияИзмененийДанных(Результат, ДополнительныеПараметры.ИмяРеквизита, ИмяТабличнойЧасти, ДополнительныеПараметры.НомерСтроки);
	
	ДополнительныеПараметры.Область.Текст = ПолучитьПредставлениеОписанияТипов(Результат);
	
	ТабличныеПредставленияПриИзмененииГраниц(ДополнительныеПараметры.ИмяТабличногоДокумента, ДополнительныеПараметры.Область);
	
КонецПроцедуры

&НаКлиенте
Функция ТабличныйДокументПриИзмененииМодифицирован(Элемент)
	Перем СтруктураЯчейки;
	
	Если СтруктураАктивнойОбласти = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяТабличногоДокумента = СтрЗаменить(Элемент.Имя, "БезТЧ", "");
	
	Модифицирован = Ложь;
	ИсходнаяОбласть = Элемент.ТекущаяОбласть;
	ВерхОбласти  = ?(ИсходнаяОбласть.Верх  = 0, 1, ИсходнаяОбласть.Верх);
	НизОбласти   = ?(ИсходнаяОбласть.Низ   = 0, ЭтотОбъект[ИмяТабличногоДокумента].ВысотаТаблицы, ИсходнаяОбласть.Низ);
	ЛевоОбласти  = ?(ИсходнаяОбласть.Лево  = 0, 1, ИсходнаяОбласть.Лево);
	ПравоОбласти = ?(ИсходнаяОбласть.Право = 0, ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы, ИсходнаяОбласть.Право);
	
	Для НомерСтроки = ВерхОбласти По НизОбласти Цикл
		
		Для НомерКолонки = ЛевоОбласти По ПравоОбласти Цикл
			КоординатыОбласти = Новый Структура;
			КоординатыОбласти.Вставить("Верх", НомерСтроки);
			КоординатыОбласти.Вставить("Лево", НомерКолонки);
			ИмяОбласти = ИмяОбласти(КоординатыОбласти);
			Если СтруктураАктивнойОбласти.Свойство(ИмяОбласти, СтруктураЯчейки) Тогда
				Ячейка = ЭтотОбъект[ИмяТабличногоДокумента].Область(ИмяОбласти);
				Модифицирован = Модифицирован Или Ячейка.Имя <> СтруктураЯчейки.Имя;
				Модифицирован = Модифицирован Или Ячейка.СодержитЗначение <> СтруктураЯчейки.СодержитЗначение;
				Если Ячейка.СодержитЗначение Тогда
					Модифицирован = Модифицирован Или Ячейка.Значение <> СтруктураЯчейки.Значение;
					Модифицирован = Модифицирован Или Ячейка.ТипЗначения <> СтруктураЯчейки.ТипЗначения;
				КонецЕсли;
				Модифицирован = Модифицирован Или Ячейка.Текст <> СтруктураЯчейки.Текст;
				Если Модифицирован Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииОбласти(ИмяТабличногоДокумента, ОбластьЯчеек)
	
	ИмяТабличнойЧасти = СтрЗаменить(ИмяТабличногоДокумента, "ТабличныйДокумент", "");
	
	ОбластьИзмененияВерх  = ?(ОбластьЯчеек.Верх = 0, 1, ОбластьЯчеек.Верх);
	ОбластьИзмененияНиз   = ?(ОбластьЯчеек.Низ = 0, ЭтотОбъект[ИмяТабличногоДокумента].ВысотаТаблицы, ОбластьЯчеек.Низ);
	ОбластьИзмененияЛево  = ?(ОбластьЯчеек.Лево = 0, 1, ОбластьЯчеек.Лево);
	ОбластьИзмененияПраво = ?(ОбластьЯчеек.Право = 0, ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы, ОбластьЯчеек.Право);
	
	ИменаРеквизитовПоКолонкам = Новый Структура;
	Для НомерКолонки = ОбластьИзмененияЛево По ОбластьИзмененияПраво Цикл
		ОбластьЗаголовкаКолонки = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, НомерКолонки, 1, НомерКолонки);
			
		ИмяРеквизита = ОбластьЗаголовкаКолонки.Имя;
		КоординатыОбласти = Новый Структура;
		КоординатыОбласти.Вставить("Верх", 1);
		КоординатыОбласти.Вставить("Лево", НомерКолонки);
		Если ИмяРеквизита = ИмяОбласти(КоординатыОбласти) Тогда
			ИмяРеквизита = ОбластьЗаголовкаКолонки.Текст;
		КонецЕсли;
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, " ", "");
		
		ИменаРеквизитовПоКолонкам.Вставить("Колонка"+НомерКолонки, ИмяРеквизита);
		
	КонецЦикла;
	
	ТребуетсяТипизация = Ложь;
	ТаблицаДанныхОбласти.Очистить();
	Для НомерКолонки = ОбластьИзмененияЛево По ОбластьИзмененияПраво Цикл
		
		ИмяРеквизита = ИменаРеквизитовПоКолонкам["Колонка" + НомерКолонки];
		
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитСтруктуры = Неопределено;
		ОсновноеИмяРеквизитаЛ = "";
		Локализуемый = Лев(Прав(ИмяРеквизита, 3),1) = "_" И Объект.Языки.НайтиСтроки(Новый Структура("КодЯзыка", Прав(ИмяРеквизита, 2))).Количество() > 0;
		Если Локализуемый Тогда
			ОсновноеИмяРеквизитаЛ = Лев(ИмяРеквизита, СтрДлина(ИмяРеквизита) - 3);
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "" Тогда
			Если Не Локализуемый И Не ПолнаяСтруктураОбъекта.Свойство(ИмяРеквизита, РеквизитСтруктуры) Тогда
				Продолжить;
			ИначеЕсли Локализуемый И Не ПолнаяСтруктураОбъекта.Свойство(ОсновноеИмяРеквизитаЛ, РеквизитСтруктуры) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ПолнаяСтруктураОбъекта.Свойство(ИмяТабличнойЧасти, РеквизитСтруктуры) Тогда
			РеквизитСтруктурыТЧ = Неопределено;
			Если Не Локализуемый И Не РеквизитСтруктуры.Реквизиты.Свойство(ИмяРеквизита, РеквизитСтруктурыТЧ) Тогда
				Продолжить;
			ИначеЕсли Локализуемый И Не РеквизитСтруктуры.Реквизиты.Свойство(ОсновноеИмяРеквизитаЛ, РеквизитСтруктурыТЧ) Тогда
				Продолжить;
			КонецЕсли;
			РеквизитСтруктуры = РеквизитСтруктурыТЧ;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = ОбластьИзмененияВерх По ОбластьИзмененияНиз Цикл
			
			КоординатыОбласти = Новый Структура;
			КоординатыОбласти.Вставить("Верх", НомерСтроки);
			КоординатыОбласти.Вставить("Лево", НомерКолонки);
			ИмяОбластиЯчейки = ИмяОбласти(КоординатыОбласти);
			ОбластьЯчейки = ЭтотОбъект[ИмяТабличногоДокумента].Область(ИмяОбластиЯчейки);
			Если ОбластьЯчейки.СодержитЗначение И ОбластьЯчейки.ТипЗначения = РеквизитСтруктуры.ТипЗначения Тогда
				// это простой тип
				НоваяСтрока = ТаблицаДанныхОбласти.Добавить();
				НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
				НоваяСтрока.НомерСтроки = ОбластьЯчейки.Верх - 2;
				НоваяСтрока.ТипОбласти = ОбластьЯчейки.ТипЗначения;
				НоваяСтрока.Результат = ОбластьЯчейки.Значение;
				НоваяСтрока.Типизировать = Ложь;
				НоваяСтрока.ИмяОбластиЯчейки = ИмяОбластиЯчейки;
			Иначе // конкретизация типа результата результата
				НоваяСтрока = ТаблицаДанныхОбласти.Добавить();
				НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
				НоваяСтрока.НомерСтроки = ОбластьЯчейки.Верх - 2;
				НоваяСтрока.ТипОбласти = РеквизитСтруктуры.ТипЗначения;
				НоваяСтрока.Результат = Неопределено;
				НоваяСтрока.Текст = ОбластьЯчейки.Текст;
				НоваяСтрока.Типизировать = Истина;
				НоваяСтрока.ИмяОбластиЯчейки = ИмяОбластиЯчейки;
				ТребуетсяТипизация = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТребуетсяТипизация Тогда
		ТабличныйДокументПриИзмененииТипизацияЗначений(ИмяТабличнойЧасти);
	КонецЕсли;
	ТекущиеИмяПредопределенныхДанныхКолонка = КолонкаТабличногоДокументаПоИмени("ТабличныйДокумент", ИмяКлючевогоРеквизита);
	
	ТабличныйДокументСинхронизацияИзмененийГраниц(ИмяТабличнойЧасти, ОбластьИзмененияНиз - 2);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхОбласти Цикл
		
		Если СтрокаТаблицы.Типизировать И СтрокаТаблицы.ПростойТип Тогда
			ОбластьЯчейки = ЭтотОбъект[ИмяТабличногоДокумента].Область(СтрокаТаблицы.ИмяОбластиЯчейки);
			ОбластьЯчейки.СодержитЗначение = Истина;
			ОбластьЯчейки.ТипЗначения = СтрокаТаблицы.ТипОбласти;
			ОбластьЯчейки.Значение = СтрокаТаблицы.Результат;
		КонецЕсли;
		
		ТабличныйДокументСинхронизацияИзмененийДанных(СтрокаТаблицы.Результат, СтрокаТаблицы.ИмяРеквизита, ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки);
		
	КонецЦикла;
	
	ТабличныеПредставленияПриИзмененииГраниц(ИмяТабличногоДокумента, ОбластьЯчеек);
	ТаблицаДанныхОбласти.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеПредставленияПриИзмененииГраниц(ИмяТабличногоДокумента, ТекущаяОбласть)
	
	НомерСтроки = ТекущаяОбласть.Низ;
	ШиринаТаблицы = ЭтотОбъект[ИмяТабличногоДокумента].ШиринаТаблицы;
	
	ОбластьЗаголовкаКолонки = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, 1, 1, );
	ИндексСтрокиНачала = 0;
	Для Индекс = 2 По НомерСтроки Цикл
		ОбластьЛево = ЭтотОбъект[ИмяТабличногоДокумента].Область(Индекс, 1, Индекс, 1);
		ОбластьПраво = ЭтотОбъект[ИмяТабличногоДокумента].Область(Индекс, ШиринаТаблицы, Индекс, ШиринаТаблицы);
		Если ОбластьЛево.ГраницаСправа = ОбластьЗаголовкаКолонки.ГраницаСправа И ОбластьПраво.ГраницаСправа = ОбластьЗаголовкаКолонки.ГраницаСправа Тогда
			Продолжить;
		КонецЕсли;
		ИндексСтрокиНачала = Индекс;
		Прервать;
	КонецЦикла;
	
	Если ИндексСтрокиНачала = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличногоДокумента = "ТабличныйДокумент" Тогда
		// запуск перезаполнение ТЧ
		ИмяОбластиШапки = "";
	КонецЕсли;
	
	СвойстваОбласти = Новый Структура("ЦветФона, ГраницаСверху, ГраницаСлева, ГраницаСнизу, ГраницаСправа");
	Для ИндексКолонки = 1 По ШиринаТаблицы Цикл
		ОбластьЗаголовкаКолонки = ЭтотОбъект[ИмяТабличногоДокумента].Область(1, ИндексКолонки, 1, ИндексКолонки);
		ЗаполнитьЗначенияСвойств(СвойстваОбласти, ОбластьЗаголовкаКолонки);
		Для ИндексСтроки = ИндексСтрокиНачала По НомерСтроки Цикл
			Область = ЭтотОбъект[ИмяТабличногоДокумента].Область(ИндексСтроки, ИндексКолонки, ИндексСтроки, ИндексКолонки);
			ЗаполнитьЗначенияСвойств(Область, СвойстваОбласти);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТабличныеЧастиТекущегоЭлемента()
	
	Если НЕ ОтображатьТабличныеЧасти Тогда
		Возврат;
	КонецЕсли;
	
	мСтрокаШапки = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	ИмяПредопределенныхДанных = ИмяПредопределенныхДанныхПоСтроке(мСтрокаШапки);
	Если ТекущиеИмяПредопределенныхДанных <> ИмяПредопределенныхДанных Тогда
		ТекущиеИмяПредопределенныхДанных = ИмяПредопределенныхДанных;
		ВывестиТабличныеЧастиТекущегоЭлементаНаСервере(мСтрокаШапки, ТекущиеИмяПредопределенныхДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьДублиКолонок(Источник, ИмяКолонки, ПроверяемаяКолонкаНомер = 0)
	
	КоличествоКолонок = 0;
	Для НомерКолонки = 1 По Источник.ШиринаТаблицы Цикл
		Если НомерКолонки = ПроверяемаяКолонкаНомер Тогда
			Продолжить;
		КонецЕсли;
		ОбластьЗаголовка = Источник.Область(1, НомерКолонки);
		ИмяРеквизита = ОбластьЗаголовка.Имя;
		КоординатыОбласти = Новый Структура;
		КоординатыОбласти.Вставить("Верх", 1);
		КоординатыОбласти.Вставить("Лево", НомерКолонки);
		Если ИмяРеквизита = ИмяОбласти(КоординатыОбласти) Тогда
			ИмяРеквизита = ОбластьЗаголовка.Текст;
		КонецЕсли;
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, " ", "");
		
		Если ИмяРеквизита = ИмяКолонки Тогда
			КоличествоКолонок = КоличествоКолонок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоКолонок > ?(ПроверяемаяКолонкаНомер = 0, 1, 0);

КонецФункции
 
&НаКлиенте
Процедура ТабличныйДокументСинхронизацияИзмененийГраниц(ИмяТабличнойЧасти, НомерСтроки)
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		НовоеПредставление = "";
		Пока ТаблицаДанных.Количество() < НомерСтроки+1 Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			НовоеПредставление = ПолучитьНовоеИмяПредопределенныхДанныхПоУмолчанию();
			НоваяСтрока.ИмяПредопределенныхДанных = НовоеПредставление;
			ОбластьКлюч = ТабличныйДокумент.Область(ТаблицаДанных.Количество()+1, ТекущиеИмяПредопределенныхДанныхКолонка);
			Если ОбластьКлюч.Текст = "" Или (ОбластьКлюч.СодержитЗначение И ОбластьКлюч.Значение = "")Тогда
				ОбластьКлюч.СодержитЗначение = Истина;
				ОбластьКлюч.ТипЗначения = Новый ОписаниеТипов("Строка");
				ОбластьКлюч.Значение = НовоеПредставление;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура(ИмяКлючевогоРеквизита, ТекущиеИмяПредопределенныхДанных));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДанных = НайденныеСтроки[0];
		ТаблицаДанныхТЧ = СтрокаДанных[ИмяТабличнойЧасти];
		Пока ТаблицаДанныхТЧ.Количество() < НомерСтроки+1 Цикл
			НоваяСтрока = ТаблицаДанныхТЧ.Добавить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументСинхронизацияИзмененийДанных(Результат, ИмяРеквизита, ИмяТабличнойЧасти, НомерСтроки)
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		Если ИмяРеквизита = ИмяКлючевогоРеквизита Тогда
			ЗаполнитьГУИДом = Ложь;
			Если СтрНайти(ИменаПредопределенныхЗначений, Результат + ",") = 0 Тогда
				// не существует предопределенного
				Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Результат) Тогда
					ЗаполнитьГУИДом = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗаполнитьГУИДом Тогда
				// проверим дублирование
				ИндексСтроки = 0;
				Для каждого СтрокаДанных Из ТаблицаДанных Цикл
					Если СтрокаДанных.ИмяПредопределенныхДанных = Результат И ИндексСтроки <> НомерСтроки Тогда
						ЗаполнитьГУИДом = Истина;
						Прервать;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗаполнитьГУИДом Тогда
				Результат =ПолучитьНовоеИмяПредопределенныхДанныхПоУмолчанию();
				Область = ТабличныйДокумент.Область(НомерСтроки+2, ТекущиеИмяПредопределенныхДанныхКолонка);
				Область.СодержитЗначение = Истина;
				Область.ТипЗначения = Новый ОписаниеТипов("Строка");
				Область.Значение = Результат;
			КонецЕсли;
		КонецЕсли;
		СтрокаДанных = ТаблицаДанных[НомерСтроки];
		
	Иначе
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура(ИмяКлючевогоРеквизита, ТекущиеИмяПредопределенныхДанных));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДанных = НайденныеСтроки[0];
		ТаблицаДанныхТЧ = СтрокаДанных[ИмяТабличнойЧасти];
		СтрокаДанных = ТаблицаДанныхТЧ[НомерСтроки];
	КонецЕсли;
	
	СтрокаДанных[ИмяРеквизита] = Результат;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовоеИмяПредопределенныхДанныхПоУмолчанию()
	
	Возврат Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ТабличныйДокументУдалитьКолонки(ИмяТабличногоДокумента, МассивКолонок)
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Число"));
	Для Каждого НомерКолонки Из МассивКолонок Цикл
		НоваяСтрока = ТаблицаКолонок.Добавить();
		НоваяСтрока.НомерКолонки = НомерКолонки;
	КонецЦикла;
	ТаблицаКолонок.Сортировать("НомерКолонки Убыв");
	
	Для каждого СтрокаКолонки Из ТаблицаКолонок Цикл
		Если СтрокаКолонки.НомерКолонки > 0 Тогда
			Область = ЭтотОбъект[ИмяТабличногоДокумента].Область("C" + Формат(СтрокаКолонки.НомерКолонки, "ЧГ="));
			ЭтотОбъект[ИмяТабличногоДокумента].УдалитьОбласть(Область,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТабличныйДокументПриИзмененииТипизацияЗначений(ИмяТабличнойЧасти)
	// Отрабатывает при копировании нетипизированной области
	// вычисление значения реквизита ссылочного типа из текста ячейки и типа колонки
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ТипРеквизитаСтруктуры = ОписаниеТиповСтрока;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхОбласти Цикл
		
		Если Не СтрокаТаблицы.Типизировать Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
		ТекстОбласти = СокрЛП(СтрокаТаблицы.Текст);
		
		РеквизитСтруктуры = Неопределено;
		Если ПустаяСтрока(ИмяТабличнойЧасти) И ИмяРеквизита = ИмяКлючевогоРеквизита Тогда
			Если СтрНайти(ИменаПредопределенныхЗначений, ТекстОбласти + ",") = 0 Тогда
				Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ТекстОбласти) Тогда
					ТекстОбласти = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПустаяСтрока(ИмяТабличнойЧасти) И ПолнаяСтруктураОбъекта.Свойство(ИмяРеквизита, РеквизитСтруктуры) Тогда
			ТипРеквизитаСтруктуры = РеквизитСтруктуры.ТипЗначения;
		ИначеЕсли Не ПустаяСтрока(ИмяТабличнойЧасти) И ПолнаяСтруктураОбъекта.Свойство(ИмяТабличнойЧасти, РеквизитСтруктуры) Тогда
			
			РеквизитСтруктурыТЧ = Неопределено;
			Если РеквизитСтруктуры.Реквизиты.Свойство(ИмяРеквизита, РеквизитСтруктурыТЧ) Тогда
				ТипРеквизитаСтруктуры = РеквизитСтруктурыТЧ.ТипЗначения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СодержитТолькоПростыеТипы(ТипРеквизитаСтруктуры) Тогда
			СтрокаТаблицы.ПростойТип = Истина;
			
			Для каждого Тип Из ТипРеквизитаСтруктуры.Типы() Цикл
				Если ОписаниеТиповБулево.СодержитТип(Тип) Тогда
					ЗначениеРеквизита = ВРег(ТекстОбласти);
					СтрокаТаблицы.ТипОбласти = ТипРеквизитаСтруктуры;
					СтрокаТаблицы.Результат = ЗначениеРеквизита = "ДА" Или ЗначениеРеквизита = "ИСТИНА";
					
				ИначеЕсли ОписаниеТиповЧисло.СодержитТип(Тип) Тогда
					Если ПустаяСтрока(ТекстОбласти) Тогда
						СтрокаТаблицы.ТипОбласти = ТипРеквизитаСтруктуры;
						СтрокаТаблицы.Результат = 0;
					Иначе
						ЗначениеРеквизита = СтрЗаменить(ТекстОбласти, " ", "");
						ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.НПП, "");
						ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "");
						ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, ", ", ".");
						КоличествоТочек = СтрДлина(ЗначениеРеквизита) - СтрДлина(СтрЗаменить(ЗначениеРеквизита, ".", ""));
						Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(ЗначениеРеквизита, ".", "")) И КоличествоТочек <= 1 Тогда
							СтрокаТаблицы.ТипОбласти = ТипРеквизитаСтруктуры;
							СтрокаТаблицы.Результат = Число(ЗначениеРеквизита);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ОписаниеТиповДата.СодержитТип(Тип) Тогда
					Если ПустаяСтрока(ТекстОбласти) Тогда
						СтрокаТаблицы.ТипОбласти = ТипРеквизитаСтруктуры;
						СтрокаТаблицы.Результат = Дата(1,1,1);
					Иначе
						ТекстОбласти = СтрЗаменить(ЗначениеРеквизита, " ", ", ");
						ЗначениеРеквизита = СтрЗаменить(ВРег(ЗначениеРеквизита), "Т", ", ");
						ЗначениеРеквизита = СтрЗаменить(ВРег(ЗначениеРеквизита), ".", ", ");
						ЗначениеРеквизита = СтрЗаменить(ВРег(ЗначениеРеквизита), ":", ", ");
						
						Массив = СтрРазделить(ЗначениеРеквизита, ", ");
						
						Если Массив.Количество() >= 3 Тогда
							
							Если СтрДлина(Массив[0]) > 2 Тогда
								ЗначениеРеквизита = Массив[0] + Массив[1] + Массив[2];
							Иначе
								ЗначениеРеквизита = Массив[2] + Массив[1] + Массив[0];
							КонецЕсли;
							
							Для Индекс = 3 По Массив.Количество() - 1 Цикл
								ЗначениеРеквизита = ЗначениеРеквизита + Массив[Индекс];
							КонецЦикла;
							
							СтрокаТаблицы.ТипОбласти = ТипРеквизитаСтруктуры;
							СтрокаТаблицы.Результат = Дата(ЗначениеРеквизита);
							
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ОписаниеТиповСтрока.СодержитТип(Тип) Тогда
					СтрокаТаблицы.ТипОбласти = ТипРеквизитаСтруктуры;
					СтрокаТаблицы.Результат = ТекстОбласти;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЭтоОписаниеТипов (ТипРеквизитаСтруктуры) Тогда
			// остается ТипОбласти = Неопределено; Область не типизируем
			Если ПустаяСтрока(ТекстОбласти) Тогда
				СтрокаТаблицы.Результат = "";
			КонецЕсли;
			
			МассивТипов = Новый Массив;
			МассивСтрок = СтрРазделить(ТекстОбласти, ";", Ложь);
			Для каждого ТипСтрокой Из МассивСтрок Цикл
				ТипСтрокой = СокрЛП(ТипСтрокой);
				МетаданныеПоТипу = Метаданные.НайтиПоПолномуИмени(ТипСтрокой);
				Если МетаданныеПоТипу = Неопределено Тогда
					Если СтрНайти(ТипСтрокой, ".") = 0 Тогда
						МассивТипов.Добавить(Тип(ТипСтрокой));
					КонецЕсли;
				Иначе
					МассивТипов.Добавить(Тип(СтрЗаменить(ТипСтрокой, ".", "Ссылка.")));
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТаблицы.Результат = Новый ОписаниеТипов(МассивТипов);
			
		ИначеЕсли ЭтоПеречисление(ТипРеквизитаСтруктуры) Тогда
			// остается ТипОбласти = Неопределено; Область не типизируем
			ЗначениеРеквизитаПоУмолчанию = ТипРеквизитаСтруктуры.ПривестиЗначение();
			Если ПустаяСтрока(ТекстОбласти) Тогда
				СтрокаТаблицы.Результат = ЗначениеРеквизитаПоУмолчанию;
			КонецЕсли;
			
			МетаданныеРеквизита = ЗначениеРеквизитаПоУмолчанию.Метаданные();
			Для ИндексПеречисления = 0 По Перечисления[МетаданныеРеквизита.Имя].Количество()-1 Цикл
				ПеречислениеПоИндексу = МетаданныеРеквизита.ЗначенияПеречисления[ИндексПеречисления];
				Если ПеречислениеПоИндексу.Имя = ТекстОбласти Или ПеречислениеПоИндексу.Синоним = ТекстОбласти Тогда
					СтрокаТаблицы.Результат = ПредопределенноеЗначение("Перечисление." + МетаданныеРеквизита.Имя + "." + ПеречислениеПоИндексу.Имя);
					Прервать;
				Иначе
					СтрокаТаблицы.Результат = ЗначениеРеквизитаПоУмолчанию;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЭтоСсылочныйТип(ТипРеквизитаСтруктуры) Тогда
			// остается ТипОбласти = Неопределено; Область не типизируем
			ЗначениеРеквизитаПоУмолчанию = ТипРеквизитаСтруктуры.ПривестиЗначение();
			СтрокаТаблицы.Результат = ЗначениеРеквизитаПоУмолчанию;
			Если ПустаяСтрока(ТекстОбласти) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОтбора = "";
			ОбъектМетаданных = ЗначениеРеквизитаПоУмолчанию.Метаданные(); // ОбъектМетаданныхСправочник, ОбъектМетаданныхДокумент 
			Для каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
				Если СтрНайти("Код,Наименование", СтандартныйРеквизит.Имя) > 0 Тогда
					ТекстОтбора = ТекстОтбора + " ИЛИ " + "ТаблицаИсточник." + СтандартныйРеквизит.Имя + " = &ТекстОбласти";
					ТекстОтбора = ТекстОтбора + " ИЛИ " + "ТаблицаИсточник." + СтандартныйРеквизит.Имя + " = &ТекстОбластиБезПробелов";
				КонецЕсли;
			КонецЦикла;
			
			ТекстЗапроса =   
				"ВЫБРАТЬ
				|	ТаблицаИсточник.Ссылка КАК Ссылка
				|ИЗ
				|	&ТаблицаИсточник КАК ТаблицаИсточник
				|ГДЕ
				|	ЛОЖЬ";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточник", ЗначениеРеквизитаПоУмолчанию.Метаданные().ПолноеИмя());
			Запрос = Новый Запрос(ТекстЗапроса + ТекстОтбора);
			Запрос.УстановитьПараметр("ТекстОбласти", ТекстОбласти);
			Запрос.УстановитьПараметр("ТекстОбластиБезПробелов", СтрЗаменить(ТекстОбласти, " ", ""));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				СтрокаТаблицы.Результат = Выборка.Ссылка;
			ИначеЕсли ТипМожетСодержатьПредопределенныеЗначения(ТипРеквизитаСтруктуры) Тогда
				
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ТаблицаИсточник.Ссылка КАК Ссылка,
				|	ТаблицаИсточник.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
				|ИЗ
				|	&ТаблицаИсточник КАК ТаблицаИсточник
				|ГДЕ
				|	ТаблицаИсточник.Предопределенный
				|	И ТаблицаИсточник.ИмяПредопределенныхДанных В (&ТекстОбласти, &ТекстОбластиБезПробелов)";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточник.ИмяПредопределенныхДанных", "ТаблицаИсточник." + ИмяКлючевогоРеквизита );
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточник", ЗначениеРеквизитаПоУмолчанию.Метаданные().ПолноеИмя());
				Запрос = Новый Запрос(ТекстЗапроса);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					СтрокаТаблицы.Результат = Выборка.Ссылка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТабличныеДанныеПрочитать(ИмяПредопределенныхДанных, ИмяРеквизита, ИмяТабличнойЧасти, НомерСтроки)
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		Если ТаблицаДанных.Количество()-1 < НомерСтроки Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаДанных = ТаблицаДанных[НомерСтроки];
	Иначе
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура(ИмяКлючевогоРеквизита, ИмяПредопределенныхДанных));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаДанных = НайденныеСтроки[0];
		ТаблицаДанныхТЧ = СтрокаДанных[ИмяТабличнойЧасти];
		Если ТаблицаДанныхТЧ.Количество()-1 < НомерСтроки Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаДанных = ТаблицаДанныхТЧ[НомерСтроки];
		
	КонецЕсли;
	
	Возврат СтрокаДанных[ИмяРеквизита];
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОбъектовМетаданных()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Справочники");
	МассивТипов.Добавить("ПланыВидовХарактеристик");
	МассивТипов.Добавить("ПланыСчетов");
	МассивТипов.Добавить("ПланыВидовРасчета");
	
	Для каждого ТипМетаданных Из МассивТипов Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[ТипМетаданных] Цикл
			
			РасширениеКонфигурации = ОбъектМетаданных.РасширениеКонфигурации();
			Если РасширениеКонфигурации <> Неопределено
				И Не РасширениеКонфигурации.ИспользуетсяВРаспределеннойИнформационнойБазе Тогда
				Продолжить;
			КонецЕсли;
			
			Элементы.ОбъектМетаданных.СписокВыбора.Добавить(ОбъектМетаданных.ПолноеИмя());
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектМетаданныхПриИзмененииНаСервере()
	
	ЗаполнитьПолнуюСтруктуруОбъекта();
	
	ЗаполнитьДеревоРеквизитов();
	
	ЗаполнитьТаблицуДанных();
	
	ЗаполнитьТабличныеДокументы();
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектМетаданных);
	МассивПредопределенныхИмен     = МетаданныеОбъекта.ПолучитьИменаПредопределенных();
	ИменаПредопределенныхЗначений = СтрСоединить(МассивПредопределенныхИмен, ",") + ",";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРеквизитов()
	
	РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
	РеквизитыШапки.Очистить();
	
	КартинкаГеографическаяСхема = БиблиотекаКартинок.ГеографическаяСхема;
	КартинкаРеквизит = БиблиотекаКартинок.Реквизит;
	КартинкаСправочник = БиблиотекаКартинок.Справочник;
	
	Для каждого Реквизит Из ПолнаяСтруктураОбъекта Цикл
		
		НоваяСтрока = РеквизитыШапки.Добавить();
		НоваяСтрока.Исключаемый       = Реквизит.Значение.Исключаемый;
		НоваяСтрока.Пометка           = Не НоваяСтрока.Исключаемый;
		НоваяСтрока.Имя               = Реквизит.Ключ;
		НоваяСтрока.Локализуемый      = Реквизит.Значение.Локализуемый;
		НоваяСтрока.ТипЗначения       = Реквизит.Значение.ТипЗначения;
		НоваяСтрока.Строковый         = Реквизит.Значение.Строковый;
		НоваяСтрока.ИспользоватьНСтр  = Реквизит.Значение.Строковый;
		НоваяСтрока.ИмяТабличнойЧасти = "";
		НоваяСтрока.Картинка          = ?(НоваяСтрока.Локализуемый, КартинкаГеографическаяСхема, КартинкаРеквизит);
		
		Если НЕ ЗначениеЗаполнено(Реквизит.Значение.Реквизиты) Тогда
			НоваяСтрока.ЭтоТабличнаяЧасть = Ложь;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.ЭтоТабличнаяЧасть = Истина;
		РеквизитыТЧ = НоваяСтрока.ПолучитьЭлементы();
		ЕстьНеИсключаемыеРеквизиты = Ложь;
		
		Для каждого РеквизитТЧ Из Реквизит.Значение.Реквизиты Цикл
			
			НоваяСтрокаТЧ = РеквизитыТЧ.Добавить();
			НоваяСтрокаТЧ.Исключаемый       = РеквизитТЧ.Значение.Исключаемый;
			НоваяСтрокаТЧ.Пометка           = Не НоваяСтрокаТЧ.Исключаемый;
			НоваяСтрокаТЧ.Имя               = РеквизитТЧ.Ключ;
			НоваяСтрокаТЧ.Локализуемый      = РеквизитТЧ.Значение.Локализуемый;
			НоваяСтрокаТЧ.ТипЗначения       = РеквизитТЧ.Значение.ТипЗначения;
			НоваяСтрокаТЧ.Строковый         = РеквизитТЧ.Значение.Строковый;
			НоваяСтрокаТЧ.ИспользоватьНСтр  = РеквизитТЧ.Значение.Строковый;
			НоваяСтрокаТЧ.Картинка          = ?(НоваяСтрокаТЧ.Локализуемый, КартинкаГеографическаяСхема, КартинкаРеквизит);
			НоваяСтрокаТЧ.ЭтоТабличнаяЧасть = Ложь;
			НоваяСтрокаТЧ.ИмяТабличнойЧасти = НоваяСтрока.Имя;
			
			ЕстьНеИсключаемыеРеквизиты = ЕстьНеИсключаемыеРеквизиты Или НоваяСтрокаТЧ.Пометка;
		КонецЦикла;
		
		НоваяСтрока.Исключаемый = Не ЕстьНеИсключаемыеРеквизиты;
		НоваяСтрока.Пометка     = Не НоваяСтрока.Исключаемый;
		НоваяСтрока.Картинка    = КартинкаСправочник;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняется структура параметров основного языка и редактируется таблица языков - остаются только доступные /
// выбранные языки локализации
//	Параметры
//		КодыЯзыков 
//			- массив выбранных языков после подбора реквизитов;
//			- Неопределено при заполнении таблицы из кода
//	Возвращается  структура параметров
//		ОсновнойЯзык - Код основного языка
//		ДополнительныйЯзык1 - Код дополнительного языка1
//		ДополнительныйЯзык2 - Код дополнительного языка2
//		ОсновнойЯзыкПредставление - Представление по шаблону [ (ИмяЯзыка)] для формирования представления колонок
//
&НаСервере
Функция ЗаполнитьОбщиеЯзыковыеПараметры()
	
	Если Метаданные.Константы.Найти("ОсновнойЯзык") = Неопределено Тогда
		ОсновнойЯзык = ОбщегоНазначения.КодОсновногоЯзыка();
		ДополнительныйЯзык1 = ОсновнойЯзык;
		ДополнительныйЯзык2 = ОсновнойЯзык;
	Иначе
		ОсновнойЯзык = Константы.ОсновнойЯзык.Получить();
		ДополнительныйЯзык1 = Константы.ДополнительныйЯзык1.Получить();
		ДополнительныйЯзык2 = Константы.ДополнительныйЯзык2.Получить();
	КонецЕсли;
	
	ОбщиеЯзыковыеПараметры = Новый Структура;
	
	Объект.Языки.Очистить();
	
	Для Каждого Язык Из Метаданные.Языки Цикл
		
		СтрокаЯзык = Объект.Языки.Добавить();
		СтрокаЯзык.Имя = Язык.Имя;
		СтрокаЯзык.КодЯзыка = Язык.КодЯзыка;
		СтрокаЯзык.Представление = " (" + ?(ПустаяСтрока(Язык.Синоним), СтрокаЯзык.Имя, Язык.Синоним) + ")";
		
		Если ОсновнойЯзык = СтрокаЯзык.КодЯзыка Тогда
			ОбщиеЯзыковыеПараметры.Вставить("ОсновнойЯзык", СтрокаЯзык.КодЯзыка);
			ОбщиеЯзыковыеПараметры.Вставить("ОсновнойЯзыкПредставление", СтрокаЯзык.Представление);
			СтрокаЯзык.ОсновнойЯзык = ИСТИНА;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщиеЯзыковыеПараметры.Вставить("ДополнительныйЯзык1", ДополнительныйЯзык1);
	ОбщиеЯзыковыеПараметры.Вставить("ДополнительныйЯзык2", ДополнительныйЯзык2);
	
	Возврат ОбщиеЯзыковыеПараметры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДанных(ПоКоду = Ложь)
	
	ЗаполнитьКолонкиТаблицыДанных();
	
	Если ПоКоду Тогда
		ЗаполнитьТаблицуДанныхПоКоду();
	Иначе
		ЗаполнитьТаблицуДанныхПоЗапросу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДанныхПоКоду()
	Перем ИмяПредопределенныхДанных;
	
	РезультатЗаполнения = ПолучитьРезультатЗаполненияПоКоду();
	
	Для каждого ЭлементДанных Из РезультатЗаполнения.Данные Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
		
		Для каждого Реквизит Из РеквизитыШапки Цикл
			
			Если Реквизит.Исключаемый Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.ЭтоТабличнаяЧасть Тогда
				НоваяСтрока[Реквизит.Имя].Загрузить(ЭлементДанных[Реквизит.Имя].Выгрузить());
			Иначе
				ЗначениеРеквизита = ЭлементДанных[Реквизит.Имя];
				
				Если Реквизит.Имя = ИмяКлючевогоРеквизита Тогда
					Если РезультатЗаполнения.СтруктураИмен.Свойство("Номер" + ТаблицаДанных.Количество(), ИмяПредопределенныхДанных) Тогда
						Если ИмяПредопределенныхДанных = "" Тогда
							ЗначениеРеквизита = Строка(Новый УникальныйИдентификатор);
						Иначе
							ЗначениеРеквизита = ИмяПредопределенныхДанных;
						КонецЕсли;
					Иначе
						ЗначениеРеквизита = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока[Реквизит.Имя] = ЗначениеРеквизита;
				
				Если Реквизит.Локализуемый И ЭлементДанных.ДополнительныеСвойства.Свойство("ЛокализуемыеРеквизиты") Тогда
					Для Каждого ЯзыкЛокализации Из Объект.Языки Цикл
						РеквизитЛИмя1 = ИмяЛокализуемогоРеквизита(Реквизит.Имя, ЯзыкЛокализации.КодЯзыка);
						РеквизитЛИмя2 = Реквизит.Имя + "_" + ЯзыкЛокализации.КодЯзыка;
						Если НЕ ПустаяСтрока(РеквизитЛИмя1) Тогда
							НоваяСтрока[РеквизитЛИмя2] = ЭлементДанных[РеквизитЛИмя1];
						ИначеЕсли ЭлементДанных.ДополнительныеСвойства.ЛокализуемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
							НоваяСтрока[РеквизитЛИмя2] = ЭлементДанных.ДополнительныеСвойства.ЛокализуемыеРеквизиты[Реквизит.Имя][РеквизитЛИмя2];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДанныхПоЗапросу()
	
	ТекстЗапроса = ПолучитьТекстЗапросаВыборкиДанных();
	Запрос = Новый Запрос(ТекстЗапроса);
	ТаблицаИсточник = Запрос.Выполнить().Выгрузить();
	
	Если БезУдаленных И ТаблицаИсточник.Колонки.Найти(ИмяКлючевогоРеквизита) <> Неопределено Тогда
		
		УдаляемыеСтроки = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
			
			Если Не СтрокаТаблицы.Предопределенный Тогда
				Если СтрНайти(СтрокаТаблицы.Ссылка.Метаданные().ВводПоСтроке, "Наименование") > 0
					И Лев(ВРег(СтрокаТаблицы.Наименование),7) = "УДАЛИТЬ" Тогда
					УдаляемыеСтроки.Добавить(СтрокаТаблицы);
				КонецЕсли;
				Если ИмяКлючевогоРеквизита = "ИмяПредопределенныхДанных"  Тогда
					СтрокаТаблицы.ИмяПредопределенныхДанных = СтрокаТаблицы.Ссылка.УникальныйИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(ВРег(СтрокаТаблицы.ИмяПредопределенныхДанных),7) = "УДАЛИТЬ" Тогда
				УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
			ТаблицаИсточник.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаДанных.Загрузить(ТаблицаИсточник);
	
	РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
	Для каждого Реквизит Из РеквизитыШапки Цикл
		
		Если Реквизит.Исключаемый Тогда
			Продолжить;
		КонецЕсли;

		Если Не Реквизит.ЭтоТабличнаяЧасть Тогда
			Продолжить;
		КонецЕсли;
		
		Для Индекс = 0 По ТаблицаИсточник.Количество() - 1 Цикл
			ТаблицаДанных[Индекс][Реквизит.Имя].Загрузить(ТаблицаИсточник[Индекс][Реквизит.Имя]);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныеДокументы(ИзКода = Ложь)
	
	ЗаполнитьДинамическиеЭлементыФормы();
	СтруктураТабличныхДокументов = ИнициализироватьТабличныеДокументы();
	
	ЗаполнитьТабличныйДокумент(СтруктураТабличныхДокументов, ТаблицаДанных);
	
	Для Каждого Строка Из СтруктураТабличныхДокументов Цикл
		
		ИмяТабличнойЧасти = ?(Строка.Ключ = "Шапка", "", Строка.Ключ);
		
		ЭтотОбъект["ТабличныйДокумент" + ИмяТабличнойЧасти].Вывести(Строка.Значение);
		Элементы["ТабличныйДокумент" + ИмяТабличнойЧасти].ОтображатьСетку = Истина;
		Элементы["ТабличныйДокумент" + ИмяТабличнойЧасти].ОтображатьЗаголовки = Истина;
		Элементы["ТабличныйДокумент" + ИмяТабличнойЧасти].Редактирование = Истина;
		
		ЭтотОбъект["ТабличныйДокумент" + ИмяТабличнойЧасти].ФиксацияСверху = 1;
	КонецЦикла;
	ТабличныйДокумент.ФиксацияСлева = 1;
	
	Элементы.ТабличныйДокументБезТЧ.ОтображатьСетку = Истина;
	Элементы.ТабличныйДокументБезТЧ.ОтображатьЗаголовки = Истина;
	Элементы.ТабличныйДокументБезТЧ.Редактирование = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаВыборкиДанных()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыМД.*
		|ИЗ
		|	&ИмяТаблицы КАК ОбъектыМД
		|ГДЕ
		|	ИСТИНА";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", Объект.ОбъектМетаданных);
	Если ЕстьГруппы Тогда
		ТекстЗапроса = ТекстЗапроса + " И Не ОбъектыМД.ЭтоГруппа";
	КонецЕсли;
	
	Если БезУдаленных Тогда
		ТекстЗапроса = ТекстЗапроса + " И Не ОбъектыМД.ПометкаУдаления";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ИнициализироватьТабличныеДокументы(ДанныеИнициализации = Неопределено)
	
	ШрифтЗаголовка = Новый Шрифт(,, Истина);
	
	ТабличныйДокументПриемник = Новый ТабличныйДокумент;
	ТабличныеДокументы = Новый Структура;
	ТабличныеДокументы.Вставить("Шапка", ТабличныйДокументПриемник);
	
	Если ДанныеИнициализации = Неопределено Тогда
		ДанныеИнициализации = Реквизиты;
	КонецЕсли;
	
	РеквизитыИнициализации = ДанныеИнициализации.ПолучитьЭлементы();
	
	//Шапка
	НомКолонки = 0;
	
	Для каждого Реквизит Из РеквизитыИнициализации Цикл
		
		Если НЕ Реквизит.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ЭтоТабличнаяЧасть Тогда
			ТабличныйДокументТЧ = ИнициализироватьТабличныеДокументы(Реквизит);
			ТабличныеДокументы.Вставить(Реквизит.Имя, ТабличныйДокументТЧ.Шапка);
			Продолжить;
		КонецЕсли;
		
		Локализуемый = Реквизит.Локализуемый;
			
		НомКолонки = НомКолонки + 1;
		Область = ТабличныйДокументПриемник.Область(1, НомКолонки);
		Область.СодержитЗначение = Ложь;
		Если Локализуемый Тогда
			Область.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
			Область.Текст = Реквизит.Имя + ОбщиеЯзыковыеПараметры.ОсновнойЯзыкПредставление;
		ИначеЕсли Реквизит.Имя = ИмяКлючевогоРеквизита Тогда
			Область.Текст = ИмяКлючевогоРеквизита;;
		Иначе
			Область.Текст = Реквизит.Имя;
		КонецЕсли;
		Область.Имя = Реквизит.Имя;
		
		ТипЗначения = Реквизит.ТипЗначения;
		Разрядность = 0;
		Если ЭтоБулево(ТипЗначения) Тогда
			ШиринаКолонки = 7;
		ИначеЕсли ЭтоЧисло(ТипЗначения, Разрядность) Тогда
			ШиринаКолонки = Разрядность+2;
		ИначеЕсли ЭтоДата(ТипЗначения, Разрядность) Тогда
			Если Разрядность = ЧастиДаты.ДатаВремя Тогда
				ШиринаКолонки = 19;
			Иначе
				ШиринаКолонки = 10;
			КонецЕсли;
		ИначеЕсли Реквизит.Имя = ИмяКлючевогоРеквизита Тогда
			ШиринаКолонки = 27;
		Иначе
			ШиринаКолонки = СтрДлина(Область.Текст) + 2;
		КонецЕсли;
		Область.ШиринаКолонки = ШиринаКолонки;
		
		Если Локализуемый Тогда
			
			Для каждого ЯзыкЛокализации Из Объект.Языки Цикл
				
				Если ЯзыкЛокализации.ОсновнойЯзык Тогда
					Продолжить;
				КонецЕсли;
				
				НомКолонки = НомКолонки + 1;
				Область = ТабличныйДокументПриемник.Область(1, НомКолонки);
				Область.СодержитЗначение = Ложь;
				Область.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
				Область.Текст = Реквизит.Имя + ЯзыкЛокализации.Представление;
				Область.Имя = Реквизит.Имя + "_" + ЯзыкЛокализации.КодЯзыка;
				Область.ШиринаКолонки = СтрДлина(Область.Текст) + 2;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабличныйДокументПриемник.ВысотаТаблицы > 0 И  ТабличныйДокументПриемник.ШиринаТаблицы > 0 Тогда
		Область = ТабличныйДокументПриемник.Область("R1");
		Область.Шрифт = ШрифтЗаголовка;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	КонецЕсли;
	
	Возврат ТабличныеДокументы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличныйДокумент(ТабличныеДокументы, ИсточникДанных, ДанныеИнициализации = Неопределено, ИмяТабличнойЧасти = "", ИмяПредопределенныхДанных = "")
	
	Если ДанныеИнициализации = Неопределено Тогда
		ДанныеИнициализации = Реквизиты;
	КонецЕсли;
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		ТабличныйДокументПриемник = ТабличныеДокументы.Шапка;
	Иначе
		ТабличныйДокументПриемник = ТабличныеДокументы[ИмяТабличнойЧасти];
	КонецЕсли;
	НомерСтроки = ТабличныйДокументПриемник.ВысотаТаблицы;
	
	Для Каждого СтрокаДанных Из ИсточникДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		
		РеквизитыИнициализации = ДанныеИнициализации.ПолучитьЭлементы();
		
		Для Каждого Реквизит Из РеквизитыИнициализации Цикл
			
			Если НЕ Реквизит.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.ЭтоТабличнаяЧасть Тогда
				Продолжить;
			КонецЕсли;
			
			Локализуемый = Реквизит.Локализуемый;
			
			НомерКолонки = НомерКолонки + 1;
			Область = ТабличныйДокументПриемник.Область(НомерСтроки, НомерКолонки);
			
			Если Локализуемый Тогда
				Область.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
			КонецЕсли;
			
			ТипЗначения = Реквизит.ТипЗначения;
			
			Если СодержитТолькоПростыеТипы(ТипЗначения) Тогда
				Область.СодержитЗначение = Истина;
				Область.ТипЗначения = ТипЗначения;
				Область.Значение = ?(Реквизит.Имя = ИмяКлючевогоРеквизита И Не ПустаяСтрока(ИмяТабличнойЧасти), ИмяПредопределенныхДанных, СтрокаДанных[Реквизит.Имя]);
			ИначеЕсли ЭтоПеречисление(ТипЗначения) Тогда
				Область.Текст = Строка(СтрокаДанных[Реквизит.Имя]);
			ИначеЕсли ЭтоСсылочныйТип(ТипЗначения) И ЗначениеЗаполнено(СтрокаДанных[Реквизит.Имя]) Тогда
				Область.СодержитЗначение = Ложь;
				
				Если ТипМожетСодержатьПредопределенныеЗначения(ТипЗначения) И СтрокаДанных[Реквизит.Имя].Предопределенный Тогда
					Область.Текст = СтрокаДанных[Реквизит.Имя].ИмяПредопределенныхДанных;
				Иначе
					Область.Текст = Строка(СтрокаДанных[Реквизит.Имя]);
				КонецЕсли;
			ИначеЕсли ЭтоОписаниеТипов(ТипЗначения) Тогда
				Область.СодержитЗначение = Ложь;
				Область.Текст = ПолучитьПредставлениеОписанияТипов(СтрокаДанных[Реквизит.Имя]);
			КонецЕсли;
			
			Область.Защита = Реквизит.Имя = ИмяКлючевогоРеквизита;
			
			Если Локализуемый Тогда
				
				Для каждого ЯзыкЛокализации Из Объект.Языки Цикл
					
					Если ЯзыкЛокализации.ОсновнойЯзык Тогда
						Продолжить;
					КонецЕсли;
					
					НомерКолонки = НомерКолонки + 1;
					Область = ТабличныйДокументПриемник.Область(НомерСтроки, НомерКолонки);
					Область.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
					
					ИмяЛокализуемогоРеквизита = Реквизит.Имя + "_" + ЯзыкЛокализации.КодЯзыка;
					
					Область.СодержитЗначение = Истина;
					Область.ТипЗначения = Новый ОписаниеТипов("Строка");
					Область.Значение = СтрокаДанных[ИмяЛокализуемогоРеквизита];
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ТабличныйДокументПриемник.ВысотаТаблицы > 0 И ТабличныйДокументПриемник.ШиринаТаблицы > 0 Тогда
		Область = ТабличныйДокументПриемник.Область(1, 1, ТабличныйДокументПриемник.ВысотаТаблицы, ТабличныйДокументПриемник.ШиринаТаблицы);
		Область.ГраницаСверху = СплошнаяЛиния;
		Область.ГраницаСнизу = СплошнаяЛиния;
		Область.ГраницаСлева = СплошнаяЛиния;
		Область.ГраницаСправа = СплошнаяЛиния;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТабличныеЧастиТекущегоЭлементаНаСервере(СтрокаШапки, ТекущиеИмяПредопределенныхДанных)
	
	Если СтрокаШапки > 1 И СтрокаШапки <= ТаблицаДанных.Количество()+1 Тогда
		ИсточникДанных = ТаблицаДанных[СтрокаШапки - 2];
	Иначе
		ИсточникДанных = Неопределено;
	КонецЕсли;
	
	РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
	
	Для каждого Реквизит Из РеквизитыШапки Цикл
		
		Если НЕ Реквизит.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Реквизит.ЭтоТабличнаяЧасть Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокументТЧ = ИнициализироватьТабличныеДокументы(Реквизит);
		СтруктураТабличныхДокументов.Вставить(Реквизит.Имя, ТабличныйДокументТЧ.Шапка);
		Если ИсточникДанных <> Неопределено Тогда
			ЗаполнитьТабличныйДокумент(СтруктураТабличныхДокументов, ИсточникДанных[Реквизит.Имя], Реквизит, Реквизит.Имя, ТекущиеИмяПредопределенныхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтруктураТабличныхДокументов Цикл
		
		Если Строка.Ключ = "Шапка" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТабличнойЧасти = Строка.Ключ;
		
		Если Элементы.Найти("ТабличныйДокумент" + ИмяТабличнойЧасти) <> Неопределено Тогда
			ЭтотОбъект["ТабличныйДокумент" + ИмяТабличнойЧасти].Очистить();
			ЭтотОбъект["ТабличныйДокумент" + ИмяТабличнойЧасти].Вывести(Строка.Значение);
			Элементы["ТабличныйДокумент" + ИмяТабличнойЧасти].ОтображатьСетку = Истина;
			Элементы["ТабличныйДокумент" + ИмяТабличнойЧасти].ОтображатьЗаголовки = Истина;
			Элементы["ТабличныйДокумент" + ИмяТабличнойЧасти].Редактирование = Истина;
			ЭтотОбъект["ТабличныйДокумент" + ИмяТабличнойЧасти].ФиксацияСверху = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСлева = 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДинамическиеЭлементыФормы()
	
	ОчиститьДинамическиСозданныеЭлементыФормы();
	
	Для Каждого Реквизит Из ПолнаяСтруктураОбъекта Цикл
		
		Если Реквизит.Значение.Исключаемый Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизит.Значение.Реквизиты) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТабличнойЧасти = Реквизит.Ключ;
		
		ДобавляемыеРеквизиты = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы("ТабличныйДокумент" + ИмяТабличнойЧасти, Новый ОписаниеТипов("ТабличныйДокумент"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Страница = Элементы.Добавить("Страница" + ИмяТабличнойЧасти, Тип("ГруппаФормы"), Элементы.ГруппаТабличныеЧасти);
		Страница.Заголовок = ИмяТабличнойЧасти;
		Элемент = Элементы.Добавить("ТабличныйДокумент" + ИмяТабличнойЧасти, Тип("ПолеФормы"), Страница);
		Элемент.ПутьКДанным = "ТабличныйДокумент" + ИмяТабличнойЧасти;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ТабличныйДокументПриИзменении");
		Элемент.УстановитьДействие("Выбор", "Подключаемый_ТабличныйДокументНачалоВводаЗначения");
		Элемент.УстановитьДействие("ПриАктивизации", "Подключаемый_ТабличныйДокументПриАктивизацииОбласти");
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиТаблицыДанных()
	
	ОписаниеТиповТаблица = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТиповСтрока  = Новый ОписаниеТипов("Строка");
	
	ТаблицаДанных.Очистить();
	ОчиститьКолонкиТаблицыДанных();
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ПолнаяСтруктураОбъекта Цикл
		
		Если Реквизит.Значение.Исключаемый Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизит.Значение.Реквизиты) Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Реквизит.Ключ, ОписаниеТиповТаблица, "ТаблицаДанных", Реквизит.Ключ));
		Иначе
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Реквизит.Ключ, Реквизит.Значение.ТипЗначения, "ТаблицаДанных", Реквизит.Ключ));
			
			Если Реквизит.Значение.Локализуемый Тогда
				Для каждого ЯзыкЛокализации Из Объект.Языки Цикл
					ИмяЛРеквизита = Реквизит.Ключ + "_" + ЯзыкЛокализации.КодЯзыка;
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяЛРеквизита, ОписаниеТиповСтрока, "ТаблицаДанных", ИмяЛРеквизита));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ПолнаяСтруктураОбъекта Цикл
		
		Если Реквизит.Значение.Исключаемый Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Реквизит.Значение.Реквизиты) Тогда
			Продолжить;
		КонецЕсли;
		
		Путь = "ТаблицаДанных." + Реквизит.Ключ;
		Для Каждого РеквизитТЧ Из Реквизит.Значение.Реквизиты Цикл
			
			Если РеквизитТЧ.Значение.Исключаемый Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(РеквизитТЧ.Ключ, РеквизитТЧ.Значение.ТипЗначения, Путь, РеквизитТЧ.Ключ));
			
			Если РеквизитТЧ.Значение.Локализуемый Тогда
				Для каждого ЯзыкЛокализации Из Объект.Языки Цикл
					ИмяЛРеквизита = РеквизитТЧ.Ключ + "_" + ЯзыкЛокализации.КодЯзыка;
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяЛРеквизита, ОписаниеТиповСтрока, "ТаблицаДанных", ИмяЛРеквизита));
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКолонкиТаблицыДанных()
	
	УдаляемыеРеквизиты = Новый Массив;
	
	МассивТекущихКолонокРезультирующейТаблицы = ПолучитьРеквизиты("ТаблицаДанных");
	Для каждого ЭлементМассива Из МассивТекущихКолонокРезультирующейТаблицы Цикл
		УдаляемыеРеквизиты.Добавить(ЭлементМассива.Путь + "." + ЭлементМассива.Имя);
	КонецЦикла;

	Для каждого ЭлементМассива Из УдаляемыеРеквизиты Цикл
		НайденныйЭлементФормы = Элементы.Найти(ЭлементМассива);
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДинамическиСозданныеЭлементыФормы()
	
	УдаляемыеСтраницы = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	
	Для каждого Страница Из Элементы.ГруппаТабличныеЧасти.ПодчиненныеЭлементы Цикл
		Для каждого ЭлементСтраницы Из Страница.ПодчиненныеЭлементы Цикл
			ПутьКДанным = ЭлементСтраницы.ПутьКДанным;
			Если ПутьКДанным <> "" Тогда
				УдаляемыеРеквизиты.Добавить(ПутьКДанным);
			КонецЕсли;
		КонецЦикла; 
		УдаляемыеСтраницы.Добавить(Страница);
	КонецЦикла;
	
	Для каждого Страница Из УдаляемыеСтраницы Цикл
		Элементы.Удалить(Страница);
	КонецЦикла;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	ТабличныйДокумент.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолнуюСтруктуруОбъекта()
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектМетаданных);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПолнаяСтруктураОбъекта = ОбработкаОбъект.ПолучитьРеквизитыМетаданныхОбъекта(МетаданныеОбъекта, ИмяКлючевогоРеквизита, , ЕстьГруппы);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьОтображениеТабличныхЧастей()
	
	ОтображатьТабличныеЧасти = Ложь;
	
	РеквизитыШапки = Реквизиты.ПолучитьЭлементы();
	Для Каждого Реквизит Из РеквизитыШапки Цикл
		Если Реквизит.ЭтоТабличнаяЧасть И Реквизит.Пометка Тогда
			ОтображатьТабличныеЧасти = Истина;
			Возврат Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ПреобразоватьВКодНаСервере()
	
	Код1С.Очистить();
	
	Если ТабличныйДокумент.ВысотаТаблицы < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Код1С.ДобавитьСтроку("Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт");
	Код1С.ДобавитьСтроку("");
	
	ПреобразоватьТабличныеДанныеВКод(ТаблицаДанных);
	
	Код1С.ДобавитьСтроку("КонецПроцедуры");
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьТабличныеДанныеВКод(ИсточникДанных, ДанныеИнициализации = Неопределено, ИмяТабличнойЧасти = "")
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИнициализации = Неопределено Тогда
		ДанныеИнициализации = Реквизиты;
	КонецЕсли;
	
	МенеджерыСсылок = Новый Структура;
	МенеджерыСсылок.Вставить("Справочник", "Справочники.");
	МенеджерыСсылок.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик.");
	МенеджерыСсылок.Вставить("ПланСчетов", "ПланыСчетов.");
	МенеджерыСсылок.Вставить("ПланВидовРасчета", "ПланыВидовРасчета.");
	МенеджерыСсылок.Вставить("ПланОбмена", "ПланыОбмена.");
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		Элемент = "Элемент";
		ТекстДобавитьЭлемент = Символы.Таб + "Элемент = Элементы.Добавить();";
	Иначе
		Элемент = "ЭлементТЧ";
		ТекстДобавитьЭлемент = Символы.Таб + "ЭлементТЧ = Элемент." + ИмяТабличнойЧасти + "." + "Добавить();";
		
		ИнициализацияТЧ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Элемент.%1 = ТабличныеЧасти.%1.Скопировать();", ИмяТабличнойЧасти);
		Код1С.ДобавитьСтроку(Символы.ПС + Символы.Таб + ИнициализацияТЧ);
	КонецЕсли;
	
	УникальныеИменаСтрок = Новый Соответствие;
	РеквизитСтруктуры    = Неопределено;
	ВыводитьИменПредопределенныхДанных = ПолнаяСтруктураОбъекта.Свойство(ИмяКлючевогоРеквизита, РеквизитСтруктуры);
	
	РеквизитыИнициализации = ДанныеИнициализации.ПолучитьЭлементы();
	
	
	Для каждого СтрокаДанных Из ИсточникДанных Цикл
		
		ЕстьКлючеваяКолонка = СтрокаДанных.Свойство(ИмяКлючевогоРеквизита);
		
		Если ЕстьКлючеваяКолонка И ПустаяСтрока(ИмяТабличнойЧасти) И ВыводитьИменПредопределенныхДанных Тогда
			ИмяПредопределенныхДанных = СтрокаДанных[ИмяКлючевогоРеквизита];
			Если ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
				ИмяПредопределенныхДанных = СтрокаДанных.ИмяПредопределенныхДанных;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
				Продолжить;
			ИначеЕсли УникальныеИменаСтрок.Получить(ИмяПредопределенныхДанных) = Истина Тогда
				// строка с таким ИменемПредопределенныхДанных уже была
				Продолжить;
			Иначе
				УникальныеИменаСтрок.Вставить(ИмяПредопределенныхДанных, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Код1С.ДобавитьСтроку(ТекстДобавитьЭлемент);
		
		Для каждого Реквизит Из РеквизитыИнициализации Цикл
			
			Если НЕ Реквизит.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = Реквизит.Имя;
			ЗначениеРеквизита = СтрокаДанных[ИмяРеквизита];
			
			Если Реквизит.ЭтоТабличнаяЧасть Тогда
				ПреобразоватьТабличныеДанныеВКод(ЗначениеРеквизита, Реквизит, ИмяРеквизита);
				Продолжить;
			КонецЕсли;
			
			ТипРеквизитаСтруктуры = Реквизит.ТипЗначения;
			Локализуемый          = Реквизит.Локализуемый;
			ИспользоватьНСтр      = Реквизит.ИспользоватьНСтр;
			ТипРеквизита          = ТипЗнч(ЗначениеРеквизита);
			
			ЭтоПростойТип = СодержитТолькоПростыеТипы(ТипРеквизитаСтруктуры);
			
			Если ЗначениеРеквизита = Неопределено ИЛИ ТипРеквизита = Неопределено Тогда
				Продолжить;
				
			ИначеЕсли ЭтоОписаниеТипов(ТипРеквизита) Тогда
				
				Код1С.ДобавитьСтроку(Символы.Таб + "МассивТипов = Новый Массив;");
				
				Для каждого Тип Из ЗначениеРеквизита.Типы() Цикл
					ОбъектМетаданныхПоТипу = Метаданные.НайтиПоТипу(Тип);
					Если ОбъектМетаданныхПоТипу <> Неопределено Тогда
						ТекстТипа = """" + СтрЗаменить(ОбъектМетаданныхПоТипу.ПолноеИмя(), ".", "Ссылка.") + """";
					КонецЕсли;
					Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("МассивТипов.Добавить(Тип(%1));", ТекстТипа));
				КонецЦикла;
				
				Код1С.ДобавитьСтроку(Символы.Таб + "ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);");
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = ОписаниеТипа;", Элемент, ИмяРеквизита));
				
			ИначеЕсли ЭтоПростойТип И ОписаниеТиповСтрока.СодержитТип(ТипРеквизита)
						И Не Локализуемый Тогда
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИмяРеквизита <> ИмяКлючевогоРеквизита Тогда
					ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита, Истина);
					Если ИспользоватьНСтр Тогда
						ЗначениеРеквизитаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("НСтр(""%1 = '%2'"", ОбщегоНазначения.КодОсновногоЯзыка())", "ru", ЗначениеРеквизитаСтрока);
					Иначе
						ЗначениеРеквизитаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("""%1""", ЗначениеРеквизитаСтрока);
					КонецЕсли;
				ИначеЕсли СтрНайти(ИменаПредопределенныхЗначений, ЗначениеРеквизита + ",") > 0 Тогда
					ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита, Ложь, Истина);
				Иначе // Уникальный идентификатор
					Продолжить;
				КонецЕсли;
				
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, ЗначениеРеквизитаСтрока));
				
			ИначеЕсли ЭтоПростойТип И ОписаниеТиповСтрока.СодержитТип(ТипРеквизита) Тогда
				
				ТекстНСтр = "";
				Разделитель = "";
				ПереносСтроки = Символы.ПС + Символы.Таб + Символы.Таб;
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита, Истина);
					ТекстНСтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПереносСтроки + "|%1 = '%2'", ОбщиеЯзыковыеПараметры.ОсновнойЯзык, ЗначениеРеквизитаСтрока);
					Разделитель = ";";
				КонецЕсли;
				
				Для каждого ЯзыкЛокализации Из Объект.Языки Цикл
					
					Если ЯзыкЛокализации.ОсновнойЯзык Тогда
						Продолжить;
					КонецЕсли;
					
					ЗначениеРеквизитаЛ = СтрокаДанных[ИмяРеквизита + "_" + ЯзыкЛокализации.КодЯзыка];
					ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизитаЛ, Истина);
					
					Если ЗначениеЗаполнено(ЗначениеРеквизитаЛ) Тогда
						ТекстНСтр = ТекстНСтр + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1" + ПереносСтроки + "|%2 = '%3'", Разделитель, ЯзыкЛокализации.КодЯзыка, ЗначениеРеквизитаСтрока);
						Разделитель = ";";
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекстНСтр) Тогда
					ТекстНСтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("""%1""", ТекстНСтр);
				Иначе
					ТекстНСтр = """""";
				КонецЕсли;
				
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, ""%1"", %2, КодыЯзыков); // @ НСтр", ИмяРеквизита, ТекстНСтр));
				
			ИначеЕсли ЭтоПростойТип И ОписаниеТиповБулево.СодержитТип(ТипРеквизита) Тогда
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, ?(ЗначениеРеквизита, "Истина", "Ложь")));
			ИначеЕсли ЭтоПростойТип И ОписаниеТиповДата.СодержитТип(ТипРеквизита) И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, "Дата(""" + Формат(ЗначениеРеквизита, "ДФ=yyyyMMddЧЧммсс") + """)"));
			ИначеЕсли ЭтоПростойТип И ОписаниеТиповЧисло.СодержитТип(ТипРеквизита) Тогда
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, Формат(ЗначениеРеквизита, "ЧРД=.; ЧН=0; ЧГ=")));
			ИначеЕсли ЭтоПростойТип И БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипРеквизита) Тогда
				ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита, Ложь);
				Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3; // Представление ссылки ТочкаМаршрутаБизнесПроцесса", Элемент, ИмяРеквизита, ЗначениеРеквизитаСтрока));
			Иначе//Если ЭтоСсылочныйРеквизит Тогда
				
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				МетаданныеРеквизита = ЗначениеРеквизита.Метаданные();
				
				Если Метаданные.НайтиПоПолномуИмени("ПланОбмена." + МетаданныеРеквизита.Имя) <> Неопределено Тогда
					ВариантыВводаПоСтроке = ВариантыВводаПоСтрокеДляТипа(ТипРеквизитаСтруктуры);
					ТипКода = "";
					Если ВариантыВводаПоСтроке.Свойство("Код", ТипКода) Тогда
						ТекстПоиска = "НайтиПоКоду(" + ?(ТипКода = "Строка", ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита.Код, Ложь, Истина), ЗначениеРеквизита.Код) + ")";
					ИначеЕсли ВариантыВводаПоСтроке.Свойство("Наименование", ТипКода) Тогда
						ТекстПоиска = "НайтиПоНаименованию(" +  ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита.Наименование, Ложь, Истина) + ")";
					Иначе
						Продолжить;
					КонецЕсли;
					Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = ПланыОбмена[""%3""].%4;", Элемент, ИмяРеквизита, МетаданныеРеквизита.Имя, ТекстПоиска));
					
				ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеРеквизита) И НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда
					ИндексПеречисления = Перечисления[МетаданныеРеквизита.Имя].Индекс(ЗначениеРеквизита);
					ОписаниеЗначенияПеречисления = МетаданныеРеквизита.ЗначенияПеречисления[ИндексПеречисления]; // ОбъектМетаданныхЗначениеПеречисления
					ИмяПеречисления = ОписаниеЗначенияПеречисления.Имя; 
					ЗначениеРеквизитаСтрока = "Перечисления." + МетаданныеРеквизита.Имя + "." + ИмяПеречисления;
					Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, ЗначениеРеквизитаСтрока));
				ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеРеквизита) И ПустаяСтрока(ЗначениеРеквизита) Тогда
					Продолжить;
					
				ИначеЕсли Метаданные.НайтиПоПолномуИмени("Справочник." + МетаданныеРеквизита.Имя) <> Неопределено
					Или Метаданные.НайтиПоПолномуИмени("ПланВидовХарактеристик." + МетаданныеРеквизита.Имя) <> Неопределено
					Или Метаданные.НайтиПоПолномуИмени("ПланСчетов." + МетаданныеРеквизита.Имя) <> Неопределено
					Или Метаданные.НайтиПоПолномуИмени("ПланВидовРасчета." + МетаданныеРеквизита.Имя) <> Неопределено Тогда
					
					МетаданныеРеквизитаПолноеИмя = МетаданныеРеквизита.ПолноеИмя();
					ВариантыВводаПоСтроке = ВариантыВводаПоСтрокеДляТипа(ТипРеквизитаСтруктуры);
					                                                        
					ТипКода = "";
					
					Предопределенный = Ложь;
					Если СтрСравнить(ИмяКлючевогоРеквизита, "ИмяПредопределенныхДанных") = 0 И ЗначениеРеквизита.Предопределенный Тогда
						Предопределенный = Истина;
					ИначеЕсли ЕстьКлючеваяКолонка И ЗначениеЗаполнено(СтрокаДанных[ИмяКлючевогоРеквизита]) Тогда
						Предопределенный = Истина;
					КонецЕсли;
					
					Если Предопределенный Тогда
						МенеджерОбъекта = "";
						Ключ = СтрЗаменить(МетаданныеРеквизитаПолноеИмя, "." + МетаданныеРеквизита.Имя, "");
						Если МенеджерыСсылок.Свойство(Ключ, МенеджерОбъекта) Тогда
							ЗначениеРеквизитаСтрока = стрЗаменить(МетаданныеРеквизитаПолноеИмя, Ключ + ".", МенеджерОбъекта) + "." + ЗначениеРеквизита.ИмяПредопределенныхДанных;
							Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, ЗначениеРеквизитаСтрока));
						КонецЕсли;
							
					ИначеЕсли ВариантыВводаПоСтроке.Свойство("Код", ТипКода) Тогда
						МенеджерОбъекта = "";
						Если МенеджерыСсылок.Свойство(СтрЗаменить(МетаданныеРеквизитаПолноеИмя, "." + МетаданныеРеквизита.Имя, ""), МенеджерОбъекта) Тогда
							ЗначениеКода = ?(ТипКода = "Строка", ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита.Код, Ложь, Истина), Формат(ЗначениеРеквизита.Код, "ЧДЦ=0; ЧГ="));
							Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("НайденнаяСсылка = %1.НайтиПоКоду(%2);", (МенеджерОбъекта + МетаданныеРеквизита.Имя), ЗначениеКода));
							Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, "НайденнаяСсылка"));
						КонецЕсли;
						
					ИначеЕсли ВариантыВводаПоСтроке.Свойство("Наименование") Тогда
						МенеджерОбъекта = "";
						Если МенеджерыСсылок.Свойство(СтрЗаменить(МетаданныеРеквизитаПолноеИмя, "." + МетаданныеРеквизита.Имя, ""), МенеджерОбъекта) Тогда
							ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита.Наименование, Ложь, Истина);
							Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("НайденнаяСсылка = %1.НайтиПоНаименованию(%2);", (МенеджерОбъекта + МетаданныеРеквизита.Имя), ЗначениеРеквизитаСтрока));
							Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3;", Элемент, ИмяРеквизита, "НайденнаяСсылка"));
						КонецЕсли;
							
					Иначе// поиск по реквизиту
						ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита, Ложь);
						Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3; // Представление %4", Элемент, ИмяРеквизита, ЗначениеРеквизитаСтрока, МетаданныеРеквизитаПолноеИмя));
						
					КонецЕсли;
					
				Иначе
					ЗначениеРеквизитаСтрока = ЗначениеСтроковогоРеквизитаДляКода(ЗначениеРеквизита, Ложь);
					Код1С.ДобавитьСтроку(Символы.Таб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2 = %3; // Представление ссылки", Элемент, ИмяРеквизита, ЗначениеРеквизитаСтрока));
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			Код1С.ДобавитьСтроку("");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСтроковогоРеквизитаДляКода(ИсходнаяСтрока, ФорматСЛокализацией = Истина, ОднойСтрокой = Ложь)
	
	Если Не ОднойСтрокой Тогда
		СтрокаДляКода = "";
		Разделитель = "";
		Для Индекс = 1 По СтрЧислоСтрок(ИсходнаяСтрока) Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(ИсходнаяСтрока, Индекс);
			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"""", """""");
			
			Если СтрДлина(ТекущаяСтрока) > 120 Тогда
				МассивПодстрок = СтрРазделить(ТекущаяСтрока, " ", Истина);
				
				РазделительЛонг = "";
				ТекущаяСтрока = "";
				ТекущаяСтрокаЧасть = "";
				Для Индекс1 = 0 По МассивПодстрок.Количество()-1 Цикл
					ТекущаяСтрокаЧасть = ТекущаяСтрокаЧасть + " " + МассивПодстрок[Индекс1];
					Если СтрДлина(ТекущаяСтрокаЧасть) > 120 И (МассивПодстрок.Количество() -1 - Индекс1) > 1 Тогда
						// осталось более одного слова, переносим
						ТекущаяСтрока = ТекущаяСтрока + РазделительЛонг + ТекущаяСтрокаЧасть;
						ТекущаяСтрокаЧасть = "";
						РазделительЛонг = """" + Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + "+ """;
					КонецЕсли;
				КонецЦикла;
				
				ТекущаяСтрока = ТекущаяСтрока + РазделительЛонг + ТекущаяСтрокаЧасть;
			КонецЕсли;
			
			СтрокаДляКода = СтрокаДляКода + Разделитель + ТекущаяСтрока;
			Разделитель = Символы.ПС + Символы.Таб + Символы.Таб + "|";
		КонецЦикла
	Иначе
		СтрокаДляКода = ИсходнаяСтрока;
		СтрокаДляКода = СтрЗаменить(СтрокаДляКода,"""", """""");
		СтрокаДляКода = СтрЗаменить(СтрокаДляКода, Символы.ПС, """" + Символы.ПС + """");
	КонецЕсли;
	
	Если ФорматСЛокализацией Тогда
		Возврат СтрокаДляКода;
	Иначе
		Возврат """" + СтрокаДляКода + """";
	КонецЕсли;

КонецФункции
 
&НаСервере
Процедура ПреобразоватьВТаблицуНаСервере()
	
	ЗаполнитьТаблицуДанных(Истина);
	
	ЗаполнитьТабличныеДокументы(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатЗаполненияПоКоду()
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("МассивОбъектов", Новый Массив);
	ПараметрыВыполнения.Вставить("СтруктураИмен", Новый Структура);
	ПараметрыВыполнения.Вставить("КодыЯзыков",    Объект.Языки.Выгрузить(, "КодЯзыка").ВыгрузитьКолонку("КодЯзыка"));
	
	ОбщиеЯзыковыеПараметры = ЗаполнитьОбщиеЯзыковыеПараметры();
	
	Если СтрНачинаетсяС(Объект.ОбъектМетаданных, "Справочник") Тогда
		МенеджерДляПодстановки = СтрЗаменить(Объект.ОбъектМетаданных, "Справочник", "Справочники")+ ".СоздатьЭлемент()";
	ИначеЕсли СтрНачинаетсяС(Объект.ОбъектМетаданных, "ПланВидовХарактеристик") Тогда
		МенеджерДляПодстановки = СтрЗаменить(Объект.ОбъектМетаданных, "ПланВидовХарактеристик", "ПланыВидовХарактеристик")+ ".СоздатьЭлемент()";
	ИначеЕсли СтрНачинаетсяС(Объект.ОбъектМетаданных, "ПланСчетов") Тогда
		МенеджерДляПодстановки = СтрЗаменить(Объект.ОбъектМетаданных, "ПланСчетов", "ПланыСчетов") + ".СоздатьСчет()";
	ИначеЕсли СтрНачинаетсяС(Объект.ОбъектМетаданных, "ПланВидовРасчета") Тогда
		МенеджерДляПодстановки = СтрЗаменить(Объект.ОбъектМетаданных, "ПланВидовРасчета", "ПланыВидовРасчета") + ".СоздатьВидРасчета()";
	КонецЕсли;
	
	ТекстКода1С = Код1С.ПолучитьТекст();
	ТекстКода1С = СтрЗаменить(ТекстКода1С, "Процедура", "//Процедура");
	ТекстКода1С = СтрЗаменить(ТекстКода1С, "КонецПроцедуры", "//КонецПроцедуры");
	ТекстКода1с = СтрЗаменить(ТекстКода1с, "Элементы.Добавить();", МенеджерДляПодстановки + "; Параметры.МассивОбъектов.Добавить(Элемент);");
	ТекстЗамещения = "Параметры.СтруктураИмен.Вставить(""Номер"" + Параметры.МассивОбъектов.Количество(), """"); Параметры.СтруктураИмен[""Номер"" + Параметры.МассивОбъектов.Количество()] = ";
	ТекстКода1с = СтрЗаменить(ТекстКода1с, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Элемент.%1 = ", ИмяКлючевогоРеквизита) , ТекстЗамещения);
	ТекстКода1С = СтрЗаменить(ТекстКода1С, "МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит", "Подключаемый_ЗаполнитьМультиязычныйРеквизит");
	ТекстКода1С = СтрЗаменить(ТекстКода1С, "КонецПроцедуры", "//КонецПроцедуры");
	ТекстКода1С = СтрЗаменить(ТекстКода1С, "КодыЯзыков", "Параметры.КодыЯзыков");
	
	Для Каждого Реквизит Из ПолнаяСтруктураОбъекта Цикл
		Если Реквизит.Значение.ТипЗначения = Неопределено Тогда
			ИнициализацияТЧ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Элемент.%1 = ТабличныеЧасти.%1.Скопировать();", Реквизит.Ключ);
			ТекстКода1С = СтрЗаменить(ТекстКода1С, ИнициализацияТЧ, "//" + ИнициализацияТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ВыполнитьВБезопасномРежиме(ТекстКода1с, ПараметрыВыполнения);
	Исключение
		ОписаниеОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = НСтр("ru='При выполнении кода 1с произошла ошибка:'") + Символы.ПС + ОписаниеОшибки;
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
	КонецПопытки;
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("Данные",        ПараметрыВыполнения.МассивОбъектов);
	РезультатЗаполнения.Вставить("СтруктураИмен", ПараметрыВыполнения.СтруктураИмен);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаСервере
Процедура ВыполнитьВБезопасномРежиме(Знач Алгоритм, Знач Параметры = Неопределено)
	
	УстановитьБезопасныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Выполнить Алгоритм;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗаполнитьМультиязычныйРеквизит(Элемент, ИмяРеквизита, ЛокализуемаяСтрока, КодыЯзыков)
	
	СтруктураЛокализуемыхРеквизитов = Новый Структура;
	ЛокализуемыеРеквизиты = Неопределено;
	Если НЕ Элемент.ДополнительныеСвойства.Свойство("ЛокализуемыеРеквизиты", ЛокализуемыеРеквизиты) Тогда
		ЛокализуемыеРеквизиты = Новый Структура;
		Элемент.ДополнительныеСвойства.Вставить("ЛокализуемыеРеквизиты", ЛокализуемыеРеквизиты);
	КонецЕсли;
	ЛокализуемыеРеквизиты.Вставить(ИмяРеквизита, СтруктураЛокализуемыхРеквизитов);
	
	Для Каждого КодЯзыка Из КодыЯзыков Цикл
		
		ИмяЛокализуемогоРеквизита = ИмяЛокализуемогоРеквизита(ИмяРеквизита, КодЯзыка);
		ЛокализуемаяСтрокаЯзыка   = НСтр(ЛокализуемаяСтрока, КодЯзыка);
		Если НЕ ПустаяСтрока(ИмяЛокализуемогоРеквизита) Тогда
			Элемент[ИмяЛокализуемогоРеквизита] = ЛокализуемаяСтрокаЯзыка;
		Иначе
			ИмяЛокализуемогоРеквизита = ИмяРеквизита + "_" + КодЯзыка;
			СтруктураЛокализуемыхРеквизитов.Вставить(ИмяЛокализуемогоРеквизита, ЛокализуемаяСтрокаЯзыка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИмяЛокализуемогоРеквизита(ИмяРеквизита, КодЯзыка)
	
	ИмяЛокализуемогоРеквизита = ИмяРеквизита;
	Если КодЯзыка = ОбщиеЯзыковыеПараметры.ОсновнойЯзык Тогда
		Возврат ИмяЛокализуемогоРеквизита;
	ИначеЕсли КодЯзыка = ОбщиеЯзыковыеПараметры.ДополнительныйЯзык1 Тогда
		Возврат ИмяЛокализуемогоРеквизита + "Язык1";
	ИначеЕсли КодЯзыка = ОбщиеЯзыковыеПараметры.ДополнительныйЯзык2 Тогда
		Возврат ИмяЛокализуемогоРеквизита + "Язык2";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти