///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОповещениеОбАвторизацииВСервисеОбновлений Экспорт;

&НаКлиенте
Перем ПараметрыАдминистрирования;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сценарий = Параметры.Сценарий;
	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	
	Элементы.ПанельПредупреждений.Видимость = Ложь;
	
	// После установки исправлений рекомендуется перезапустить программу.
	ПерезапуститьПрограмму = Истина;
	
	// Скрытие неактивных страниц помощника.
	// Используется для исключения эффекта "мерцания" при управлении
	// отображением элементов.
	СтраницаПустая = Элементы.СтраницаПустая;
	Для Каждого ТекСтраница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		Если ТекСтраница <> СтраницаПустая Тогда
			ТекСтраница.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПодчиненныйУзелРИБ
		И Не ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		И Не ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		
		// В подчиненном узле РИБ обновление программы выполняется через
		// механизмы распределенной информационной базы.
		СообщениеЖурнала = НСтр("ru = 'Обновление программы невозможно. В подчиненном узле информационной базы обновление получается из главного узла.'");
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьВнутреннююОшибку(
			НСтр("ru = '<b>Обновление программы невозможно</b><br />В подчиненном узле информационной базы обновление получается из главного узла.'"),
			,
			СообщениеЖурнала);
		Элементы.КнопкаДалее.Видимость  = Ложь;
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Возврат;
		
	ИначеЕсли ОбщегоНазначения.ЭтоВебКлиент()
		И Не ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		
		СообщениеЖурнала = НСтр("ru = 'Обновление программы невозможно. Обновление программы недоступно при работе в режиме веб-клиента.'");
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьВнутреннююОшибку(
			НСтр("ru = '<b>Обновление программы невозможно</b><br />
				|Обновление программы недоступно при работе в режиме веб-клиента.<br />
				|Откройте программу в тонком или толстом клиенте и повторите попытку.'"),
			,
			СообщениеЖурнала);
		Элементы.КнопкаДалее.Видимость  = Ложь;
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Возврат;
		
	ИначеЕсли ОбщегоНазначения.КлиентПодключенЧерезВебСервер()
		И Не ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		
		СообщениеЖурнала = НСтр("ru = 'Обновление программы невозможно. Обновление программы недоступно при работе в режиме подключения к веб серверу.'");
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьВнутреннююОшибку(
			НСтр("ru = '<b>Обновление программы невозможно</b><br />
				|Обновление программы недоступно при работе в режиме подключения к веб серверу.<br />
				|Откройте программу в тонком или толстом клиенте и повторите попытку.'"),
			,
			СообщениеЖурнала);
		Элементы.КнопкаДалее.Видимость  = Ложь;
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Возврат;
		
	КонецЕсли;
	
	// Проверка возможности использования механизма.
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		И Не ПолучениеОбновленийПрограммы.СлужебнаяДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		ТекстИсключения =
			НСтр("ru = 'Переход на новую версию платформы 1С:Предприятие недоступен в текущем режиме работы.'");
		ВызватьИсключение ТекстИсключения;
	ИначеЕсли (ЭтоСценарийРабочегоОбновления(ЭтотОбъект)
		Или ЭтоСценарийПереходаНаДругуюПрограммуИлиРедакцию(ЭтотОбъект))
		И Не ПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы() Тогда
		ТекстИсключения =
			НСтр("ru = 'Получение обновлений программы недоступно в текущем режиме работы.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЭтоАдминистраторСистемы = ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы();
	ЭтоФайловаяИБ           = ПолучениеОбновленийПрограммы.ЭтоФайловаяИБ();
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		
		Если Не ЭтоАдминистраторСистемы Тогда
			// Переход на новую версию платформы выполняется только администратором системы.
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для перехода на новую версию платформы.'");
		КонецЕсли;
		
		ЭтотОбъект.АвтоЗаголовок = Ложь;
		ЭтотОбъект.Заголовок     = НСтр("ru = 'Переход на новую версию платформы 1С:Предприятие'");
		
	ИначеЕсли ЭтоСценарийПереходаНаДругуюПрограммуИлиРедакцию(ЭтотОбъект) Тогда
		
		Если Не ПустаяСтрока(Параметры.ЗаголовокОкна) Тогда
			ЭтотОбъект.АвтоЗаголовок = Ложь;
			ЭтотОбъект.Заголовок     = Параметры.ЗаголовокОкна;
		КонецЕсли;
		ЗаголовокДоступноОбновление = Параметры.ЗаголовокДоступноОбновление;
		ЗаголовокНетОбновления      = Параметры.ЗаголовокНетОбновления;
		
		ИмяНовойПрограммы  = Параметры.ИмяНовойПрограммы;
		НомерНовойРедакции = Параметры.НомерНовойРедакции;
		
	ИначеЕсли ПустаяСтрока(Сценарий) Тогда
		
		// По умолчанию работает сценарий рабочего обновления.
		Сценарий = "РабочееОбновление";
		
	ИначеЕсли Не ЭтоСценарийРабочегоОбновления(ЭтотОбъект) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный сценарий работы помощника обновления программы (""%1"").'"),
			Сценарий);
		
	КонецЕсли;
	
	ПараметрыПолученияОбновлений = Неопределено;
	
	Если ЭтоФайловаяИБ Тогда
		Если ПолучениеОбновленийПрограммы.ЭтоБазоваяВерсияКонфигурации() Тогда
			Элементы.ГруппаКаталогСохраненияКомпонентаПлатформы.Видимость = Ложь;
		Иначе
			ПараметрыПолученияОбновлений = ПолучениеОбновленийПрограммы.СлужебнаяПараметрыПолученияОбновлений();
			Элементы.ГруппаКаталогСохраненияКомпонентаПлатформы.Видимость =
				ПараметрыПолученияОбновлений.ВыбиратьКаталогСохраненияДистрибутиваПлатформы;
		КонецЕсли;
		Элементы.ГруппаКаталогСохраненияПлатформы.Видимость =
			Элементы.ГруппаКаталогСохраненияКомпонентаПлатформы.Видимость;
	КонецЕсли;
	
	Элементы.ДекорацияНаписатьВТехПоддержку.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
				НСтр("ru = '<body>При возникновении проблем напишите в <a href=""mailto:webits-info@1c.ru"">техподдержку</a>.</body>'"),
			ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП));
	
	Если Не ЭтоСценарийПереходаНаДругуюПрограммуИлиРедакцию(ЭтотОбъект) Тогда
		СоздатьРезервнуюКопию = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ");
		Элементы.СоздатьРезервнуюКопию.Видимость            = СоздатьРезервнуюКопию;
		Элементы.СоздатьРезервнуюКопиюУстановлено.Видимость = СоздатьРезервнуюКопию;
	КонецЕсли;
	
	Если ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		// Отображается перед началом работы системы, поэтому необходимо
		// зачитать настройки соединения с серверами.
		НастройкиСоединенияССерверами =
			ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
		РаботаВПрограммеЗапрещена = Параметры.РаботаВПрограммеЗапрещена;
		Элементы.ТекстСообщения.Заголовок = Параметры.ТекстСообщения;
		ОтобразитьНерекомендуемаяВерсияПлатформы();
	КонецЕсли;
	
	Если Параметры.ПоказатьСохраненнуюИнформациюОбОбновлении Тогда
		
		ИнформацияОбОбновлении = ПолучениеОбновленийПрограммы.ИнформацияОДоступномОбновленииВНастройках();
		ЗаполнитьИнформациюОбОбновлении(ИнформацияОбОбновлении);
		
		Если ИнформацияОДоступномОбновлении <> Неопределено Тогда
			ОтобразитьИнформациюОДоступномОбновлении(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСценарийРабочегоОбновления(ЭтотОбъект)
		Или ЭтоСценарийПереходаНаДругуюПрограммуИлиРедакцию(ЭтотОбъект) Тогда
		
		Если Не ПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы(Истина) Тогда
			
			Элементы.ГруппаУстановитьОбновлениеИзФайла.Видимость = Ложь;
			
		Иначе
			
			Если ПараметрыПолученияОбновлений = Неопределено Тогда
				ПараметрыПолученияОбновлений = ПолучениеОбновленийПрограммы.СлужебнаяПараметрыПолученияОбновлений();
			КонецЕсли;
			
			Если Не ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации
				И Не ПараметрыПолученияОбновлений.ПолучатьИсправления Тогда
				
				Элементы.ГруппаУстановитьОбновлениеИзФайла.Видимость = Ложь;
				
			Иначе
				
				Элементы.ГруппаУстановитьОбновлениеИзФайла.Видимость = Истина;
				Если ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации
					И ПараметрыПолученияОбновлений.ПолучатьИсправления Тогда
					Элементы.ДекорацияУстановитьОбновлениеИзФайла.Заголовок =
						НСтр("ru = 'Установить обновление конфигурации или исправления (патчи) из файла'");
					Элементы.ДекорацияУстановитьОбновлениеИзФайлаПодсказка.Подсказка =
						НСтр("ru = 'Если у вас уже есть файл обновления конфигурации или файлы исправлений (патчи), перейдите'")
							+ " "
							+ НСтр("ru = 'по ссылке для установки обновления конфигурации из файла'");
				ИначеЕсли ПараметрыПолученияОбновлений.ПолучатьОбновленияКонфигурации
					И Не ПараметрыПолученияОбновлений.ПолучатьИсправления Тогда
					Элементы.ДекорацияУстановитьОбновлениеИзФайла.Заголовок =
						НСтр("ru = 'Установить обновление конфигурации из файла'");
					Элементы.ДекорацияУстановитьОбновлениеИзФайлаПодсказка.Подсказка =
						НСтр("ru = 'Если у вас уже есть файл обновления конфигурации, перейдите'")
							+ " "
							+ НСтр("ru = 'по ссылке для установки обновления конфигурации из файла'");
				Иначе
					Элементы.ДекорацияУстановитьОбновлениеИзФайла.Заголовок =
						НСтр("ru = 'Установить исправления (патчи) из файла'");
					Элементы.ДекорацияУстановитьОбновлениеИзФайлаПодсказка.Подсказка =
						НСтр("ru = 'Если у вас уже есть файлы исправлений (патчи), перейдите'")
							+ " "
							+ НСтр("ru = 'по ссылке для установки обновления конфигурации из файла'");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Интеграция с подсистемой Центр мониторгинга.
		НастроитьОтображениеИнтеграцииСЦентромМониторинга();
		
	КонецЕсли;
	
	ДоступнаОтправкаСообщенийТехПоддержке = ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки");
	Элементы.ДекорацияНаписатьВТехПоддержку.Видимость = ДоступнаОтправкаСообщенийТехПоддержке;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСообщениеСервиса Тогда
		// При создании на сервере было отображено сообщение об ошибке.
		Возврат;
	КонецЕсли;
	
	Если ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнформацияОДоступномОбновлении = Неопределено Тогда
		ПолучитьИОтобразитьИнформациюОДоступномОбновлении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.АктивныеПользователи.Форма.АктивныеПользователи") Тогда
		
		ОтобразитьПолучениеОбновленийЗавершено();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолучениеОбновленийПрограммы_ПроверкаОткрытияФормы"
		И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Параметр.Форма = ЭтотОбъект;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПолучениеИУстановка
		И Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаУстановкаТихий Тогда
		Отказ = Истина;
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Не завершена установка платформы 1С:Предприятие.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Если ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
			Отказ               = Истина;
			ТекстПредупреждения = НСтр("ru = 'Получение и установка обновлений не завершены.'");
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ВыборРежимаОбновленияФайловыйРежим
			Или Элементы.Страницы.ТекущаяСтраница = Элементы.ВыборРежимаОбновленияСерверныйРежим Тогда
			Отказ               = Истина;
			ТекстПредупреждения = НСтр("ru = 'Не установлено обновление программы.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		// При завершении работы исключается вызов сервера.
		
		Если ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
			ОтменитьВыполнениеЗадания(ИДФоновогоЗадания);
			ОтключитьОбработчикОжидания("ОтобразитьСостояниеЗадания");
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ИтерацияПолученияФайловОбновления");
		ОтключитьОбработчикОжидания("ЗагрузитьОбновлениеКонфигурации");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьЕстьОшибкиУчетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		МодульКонтрольВеденияУчетаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КонтрольВеденияУчетаКлиент");
		МодульКонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемам("СистемныеПроверки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузитьДистрибутивКомпонентаПлатформыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	URLСтраницыПлатформы = ИнформацияОДоступномОбновлении.Платформа.URLСтраницыПлатформы;
	Если ПустаяСтрока(URLСтраницыПлатформы) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Адрес страницы новой версии платформы не определен.'"));
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдминистраторСистемы И СтрНайти(URLСтраницыПлатформы, "needAccessToken") = 0 Тогда
		URLСтраницыПлатформы = URLСтраницыПлатформы
			+ ?(СтрНайти(URLСтраницыПлатформы, "?") > 0, "&", "?")
			+ "needAccessToken=true";
	КонецЕсли;
	
	ОткрытьВебСтраницу(URLСтраницыПлатформы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонфигурациюПриИзменении(Элемент)
	
	КонтекстОбновления       = Неопределено;
	ОписаниеФайловОбновлений = Неопределено;
	ПриИзмененииФлагаКомпонентаКонфигурацияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсправленияПриИзменении(Элемент)
	
	КонтекстОбновления       = Неопределено;
	ОписаниеФайловОбновлений = Неопределено;
	ПриИзмененииИсправленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПлатформуПриИзменении(Элемент)
	
	КонтекстОбновления       = Неопределено;
	ОписаниеФайловОбновлений = Неопределено;
	ПриИзмененииФлагаПлатформыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	ИзмененЛогинПароль = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ИзмененЛогинПароль = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранятьДистрибутивыКомпонентаПлатформыВКаталог1ПриИзменении(Элемент)
	
	Элементы.КаталогСохраненияДистрибутиваПлатформы.Доступность = СохранятьДистрибутивыПлатформыВКаталог;
	Если СохранятьДистрибутивыПлатформыВКаталог Тогда
		КаталогСохраненияПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	Иначе
		КаталогСохраненияПлатформы = КаталогДистрибутиваПлатформыПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КаталогДистрибутиваПлатформыПоУмолчанию()
	
	Возврат ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы()
		+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(), "setup_64\", "setup\");
	
КонецФункции

&НаКлиенте
Процедура СохранятьДистрибутивыКомпонентаПлатформыВКаталогПриИзменении(Элемент)
	
	Элементы.КаталогСохраненияДистрибутиваКомпонентаПлатформы.Доступность = СохранятьДистрибутивыПлатформыВКаталог;
	Если СохранятьДистрибутивыПлатформыВКаталог Тогда
		КаталогСохраненияПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	Иначе
		КаталогСохраненияПлатформы = КаталогДистрибутиваПлатформыПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если Не ВебКлиент Тогда
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = НСтр("ru = 'Каталог хранения дистрибутивов платформы 1С:Предприятие'");
	ДиалогВыбора.Каталог = Элемент.ТекстРедактирования;
	Если НЕ ДиалогВыбора.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогСохраненияПлатформы = ДиалогВыбора.Каталог;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗарегистрироватьсяНаПортале1СИТСНажатие(Элемент)
	
	ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
			"/registration",
			НастройкиСоединения()),
		НСтр("ru = 'Регистрация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОсобенностиПереходаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСообщениеОбОшибкеПолученияОбновленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРекомендацииПриОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаписатьВТехПоддержкуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьЖурналРегистрацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСообщениеСервисаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияУстановкаЗавершенаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнструкцияУстановкаЗавершенаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРезервнуюКопиюУстановленоПриИзменении(Элемент)
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнструкцияУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаСоздатьРК;
	Иначе
		Элементы.СтраницыИнструкцияУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаНеСоздаватьРК;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРезервнуюКопиюПриИзменении(Элемент)
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнструкцияУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноСоздатьРК;
	Иначе
		Элементы.СтраницыИнструкцияУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноНеСоздаватьРК;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРезервнаяКопияФайлНажатие(Элемент)
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурацииКлиент.ПоказатьРезервноеКопирование(
		Новый Структура("СоздаватьРезервнуюКопию, ИмяКаталогаРезервнойКопииИБ, ВосстанавливатьИнформационнуюБазу",
			СоздаватьРезервнуюКопию,
			ИмяКаталогаРезервнойКопииИБ,
			ВосстанавливатьИнформационнуюБазу),
		Новый ОписаниеОповещения("ПриИзмененииПараметровРезервногоКопирования", ЭтотОбъект));
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОбновленияФайлПриИзменении(Элемент)
	
	ОтобразитьПолучениеОбновленийЗавершено();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОбновленияСерверПриИзменении(Элемент)
	
	ОтобразитьПолучениеОбновленийЗавершено();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтложенныеОбработчикиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновлениеИнформационнойБазыКлиент.ПоказатьОтложенныеОбработчики();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьОтчетНаПочтуПриИзменении(Элемент)
	
	ОтобразитьПолучениеОбновленийЗавершено();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействийНажатие(Элемент)
	
	ПоказатьАктивныхПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий2Нажатие(Элемент)
	
	ПоказатьАктивныхПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий4Нажатие(Элемент)
	
	ПоказатьАктивныхПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПатчиИсправляемыеОшибкиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресОписаниеИсправлений", АдресИсправления);
	ПараметрыФормы.Вставить("ДляНовойВерсии", ОбновитьКонфигурацию);
	ПараметрыФормы.Вставить("ВыбранныеИсправления",
		?(ОбновитьКонфигурацию, ВыбранныеИсправленияНоваяВерсия, ВыбранныеИсправленияТекущаяВерсия));
	ПараметрыФормы.Вставить("ТолькоПросмотр", Элементы.УстановитьИсправления.ТолькоПросмотр);
	
	ОткрытьФорму("Обработка.ОбновлениеПрограммы.Форма.ВыборИсправлений",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПриВыбореИсправлений", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАктивныеПользователиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьАктивныхПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьОбновлениеИзФайлаНажатие(Элемент)
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	// Вызов программного интерфейса для установки обновления конфигурации из файла.
	Закрыть();
	ОбновлениеКонфигурацииКлиент.ПоказатьПоискИУстановкуОбновлений();
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьИУстанавливатьИсправленияАвтоматическиПриИзменении(Элемент)
	
	Если ЗагружатьИУстанавливатьИсправленияАвтоматически
		И Не ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		ЗагружатьИУстанавливатьИсправленияАвтоматически = Ложь;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ПриОтветеНаВопросИсправленияПодключитьИнтернетПоддержкуПриВключенииУстановкиИсправлений",
				ЭтотОбъект),
			НСтр("ru = 'Для автоматического получения и установки исправлений (патчей)
				|необходимо подключить Интернет-поддержку пользователей.'"),
			Кнопки);
		
	Иначе
		
		ПолучениеОбновленийПрограммыВызовСервера.ВключитьОтключитьАвтоматическуюУстановкуИсправлений(
			ЗагружатьИУстанавливатьИсправленияАвтоматически);
		Элементы.ДекорацияЗагрузкаИсправленийРасписание.Доступность =
			ЗагружатьИУстанавливатьИсправленияАвтоматически;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаИсправленийРасписаниеНажатие(Элемент)
	
	// АПК:574-выкл код не используется в мобильном клиенте
	Расписание = ПолучениеОбновленийПрограммыВызовСервера.РасписаниеЗаданияУстановкиИсправлений();
	ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииРасписанияУстановкиИсправлений",
		ЭтотОбъект);
	ДиалогРасписание.Показать(ОписаниеОповещения);
	// АПК:574-вкл
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЕстьНеПримененныеИсправленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗавершитьРаботуСистемы(Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если (ТекСтраница = Элементы.СтраницаДоступнаяВерсияПлатформы
		Или ТекСтраница = Элементы.СтраницаПлатформаУжеУстановлена)
		И ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		ОтобразитьНерекомендуемаяВерсияПлатформы();
	Иначе
		// Информация об обновлении уже получена.
		ОтобразитьИнформациюОДоступномОбновлении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ВыполнитьОбработкуКомандыДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаботуНаТекущейВерсии(Команда)
	
	ПолучениеОбновленийПрограммыВызовСервера.СохранитьНастройкиОповещенияОНерекомендуемойВерсииПлатформы();
	Закрыть("Продолжить");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

// Используется для исключения одновременной видимости
// нескольких страниц.
&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСтраницу(Страницы, Страница)
	
	Если Не Страница.Видимость Тогда
		Страница.Видимость = Истина;
	КонецЕсли;
	
	Страницы.ТекущаяСтраница = Страница;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Ссылка)
	
	Если Ссылка = "open:RCInstruction" Тогда
		
		ОткрытьВнутреннийФайлИнструкции(
			"СозданиеРезервнойКопииИнформационнойБазы_ru",
			НСтр("ru = 'Создание резервной копии.htm'"));
		
	ИначеЕсли Ссылка = "open:V8Update" Тогда
		
		ОткрытьВебСтраницу(
			ИнформацияОДоступномОбновлении.Платформа.URLОсобенностиПерехода,
			НСтр("ru = 'Особенности перехода на новую версию платформы 1С:Предприятие'"));
		
	ИначеЕсли Ссылка = "open:DistribFolder" Тогда
		
		ФайловаяСистемаКлиент.ОткрытьПроводник(КонтекстОбновления.КаталогДистрибутиваПлатформы);
		
	ИначеЕсли Ссылка = "open:ActiveUsers" Тогда
		
		ИмяОткрываемойФормы = "Обработка.АктивныеПользователи.Форма.АктивныеПользователи";
		ОткрытьФорму(ИмяОткрываемойФормы, Новый Структура("ОшибкаУстановкиМонопольногоРежима", Истина));
		
	ИначеЕсли Ссылка = "open:ProxySettings" Тогда
		
		ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера",
			Новый Структура("НастройкаПроксиНаКлиенте", Истина),
			ЭтотОбъект);
		
	ИначеЕсли НРег(Лев(Ссылка, 22)) = "mailto:webits-info@1c." Тогда
		
		ОтправитьСообщениеВТехПоддержку("webIts");
		
	ИначеЕсли НРег(Лев(Ссылка, 7)) = "mailto:" Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Ссылка);
		
	ИначеЕсли Ссылка = "open:log" Тогда
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
		
	ИначеЕсли Ссылка = "open:debuglog" Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(КонтекстОбновления.ПутьФайлаПротокола);
	ИначеЕсли Ссылка = "action:retruupdateplatfom" Тогда
		РежимУстановкиПлатформы = 1;
		ВыполнитьОбработкуКомандыДалее();
	ИначеЕсли НРег(Лев(Ссылка, 7)) = "http://"
		ИЛИ НРег(Лев(Ссылка, 8)) = "https://" Тогда
		
		ОткрытьВебСтраницу(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВебСтраницу(АдресСтраницы, ЗаголовокОкна = "")
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаголовокОкна"              , ЗаголовокОкна);
	ПараметрыОткрытия.Вставить("Логин"                      , Логин);
	ПараметрыОткрытия.Вставить("Пароль"                     , Пароль);
	ПараметрыОткрытия.Вставить("ЭтоПолноправныйПользователь", ЭтоАдминистраторСистемы);
	ПараметрыОткрытия.Вставить("НастройкиСоединения"        , НастройкиСоединенияССерверами);
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
		АдресСтраницы,
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВТехПоддержку(АдресПолучателя)
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		Тема = НСтр("ru = 'Интернет-поддержка. Переход на новую версию Платформы 1С:Предприятие'");
	Иначе
		Тема = НСтр("ru = 'Интернет-поддержка. Обновление программы'");
	КонецЕсли;
	Вложения = Неопределено;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеКПорталу Тогда
		
		Если Элементы.ПанельОшибкаПодключения.Видимость Тогда
			ОписаниеПричины = ИнтернетПоддержкаПользователейКлиент.ТекстФорматированногоЗаголовка(
				Элементы.ДекорацияСообщениеОбОшибкеПолученияОбновления.Заголовок);
		Иначе
			ОписаниеПричины = "";
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Не удалось подключиться к Порталу 1С:ИТС.'")
			+ ?(ПустаяСтрока(ОписаниеПричины),
				"",
				Символы.ПС + Символы.ПС + НСтр("ru = 'Описание:'") + Символы.ПС + ОписаниеПричины);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНеУдалосьПодключитьсяКСервису Тогда
		
		Сообщение = НСтр("ru = 'Ошибка при подключении сервиса автоматического обновления программы.'")
			+ ?(ПустаяСтрока(ПодробноеОписаниеОшибки),
				"",
				Символы.ПС + Символы.ПС + НСтр("ru = 'Описание:'") + Символы.ПС + ПодробноеОписаниеОшибки);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСообщениеСервиса Тогда
		
		Если ПустаяСтрока(ПодробноеОписаниеОшибки) Тогда
			Сообщение = НСтр("ru = 'Сообщение при подключении сервиса автоматического обновления программы:'")
				+ Символы.ПС
				+ ИнтернетПоддержкаПользователейКлиент.ТекстФорматированногоЗаголовка(
					Элементы.ДекорацияСообщениеСервиса.Заголовок);
		Иначе
			
			Если КонтекстОбновления <> Неопределено
				И КонтекстОбновления.Свойство("ПутьФайлаПротокола")
				И Не ПустаяСтрока(КонтекстОбновления.ПутьФайлаПротокола) Тогда
				
				Вложения = Новый Массив;
				Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(КонтекстОбновления.ПутьФайлаПротокола) Тогда
					Вложения.Добавить(
						Новый Структура("Представление, ИмяФайла",
							НСтр("ru = 'Протокол установки платформы 1С_Предприятие.txt'"),
							КонтекстОбновления.ПутьФайлаПротокола));
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
				Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
				
				Сообщение = НСтр("ru = 'Ошибка при получении и установке платформы 1С:Предприятие:'")
					+ Символы.ПС
					+ ПодробноеОписаниеОшибки;
				
			Иначе
				
				Сообщение = НСтр("ru = 'Не удалось обновить программу.'")
					+ Символы.ПС
					+ НСтр("ru = 'Причина:'")
					+ Символы.ПС
					+ ПодробноеОписаниеОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Получатель", "webIts");
	ДанныеСообщения.Вставить("Тема",       Тема);
	ДанныеСообщения.Вставить("Сообщение",  Сообщение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданиеРезервнойКопииИБ()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ") Тогда
		МодульРезервноеКопированиеИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РезервноеКопированиеИБКлиент");
		ПараметрыФормы = Новый Структура("КаталогПрограммы", КаталогУстановкиПлатформы);
		МодульРезервноеКопированиеИБКлиент.ОткрытьФормуРезервногоКопирования(ПараметрыФормы);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не встроена подсистема ""Резервное копирование ИБ"".'");
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнутреннийФайлИнструкции(ИмяМакета, ИмяФайла)
	
	#Если Не ВебКлиент Тогда
	ПутьФайлаИнструкции = ПодготовитьФайлМакетаИнструкции(ИмяМакета, ИмяФайла);
	
	// Открытие инструкции в Интернет-обозревателе по умолчанию.
	Попытка
		ФайловаяСистемаКлиент.ОткрытьФайл(ПутьФайлаИнструкции);
	Исключение
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при открытии внутреннего файла инструкции (%1).
					|%2'"),
				ИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибка при открытии файла.'"));
		Возврат;
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьФайлМакетаИнструкции(Знач ИмяМакета, Знач ИмяФайла)
	
	Если Не ПолучениеОбновленийПрограммы.СлужебнаяДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		ВызватьИсключение НСтр("ru = 'Использование обновления платформы 1С:Предприятие недоступно в текущем режиме работы.'");
	КонецЕсли;
	
	// Файл записывается в контексте сервера на компьютере пользователя,
	// т.к. механизм используется только в файловом режиме работы.
	
	КаталогДляРаботыСОбновлениями =
		ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	
	Если НЕ ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(КаталогДляРаботыСОбновлениями) Тогда
		Попытка
			СоздатьКаталог(КаталогДляРаботыСОбновлениями);
		Исключение
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при создании каталога для работы с обновлениями платформы 1С:Предприятие (%1).
						|%2'"),
					КаталогДляРаботыСОбновлениями,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ВызватьИсключение НСтр("ru = 'Ошибка при создании временного каталога.'");
		КонецПопытки;
	КонецЕсли;
	
	ПутьФайлаИнструкции = КаталогДляРаботыСОбновлениями + ИмяФайла;
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ПутьФайлаИнструкции);
		ЗаписьТекста.Записать(Обработки.ОбновлениеПрограммы.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
		ЗаписьТекста.Закрыть();
	Исключение
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи данных макета инструкции в файл на диске (%1).
					|%2'"),
				ИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВызватьИсключение НСтр("ru = 'Ошибка при создании временного файла.'");
	КонецПопытки;
	
	Возврат ПутьФайлаИнструкции;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибкаСоединения(КодОшибки)
	
	Возврат (КодОшибки = "ConnectError" ИЛИ КодОшибки = "ServerError" ИЛИ КодОшибки = "ClientError");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(Форма)
	
	Возврат (Форма.Сценарий = "ПереходНаНовуюВерсиюПлатформы");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(Форма)
	
	Возврат (Форма.Сценарий = "СообщениеОНерекомендуемойВерсииПлатформы");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСценарийПереходаНаДругуюПрограммуИлиРедакцию(Форма)
	
	Возврат (Форма.Сценарий = "ПереходНаДругуюПрограммуИлиРедакцию");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСценарийРабочегоОбновления(Форма)
	
	Возврат (Форма.Сценарий = "РабочееОбновление");
	
КонецФункции

&НаКлиенте
Функция НастройкиСоединения()
	
	Если НастройкиСоединенияССерверами = Неопределено Тогда
		Возврат ИнтернетПоддержкаПользователейКлиент.НастройкиСоединенияССерверами();
	Иначе
		Возврат НастройкиСоединенияССерверами;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучениеОбновленияЗавершено(ФормаПомощника)
	
	Возврат (ФормаПомощника.КонтекстОбновления <> Неопределено
		И ФормаПомощника.КонтекстОбновления.Свойство("Завершено")
		И ФормаПомощника.КонтекстОбновления.Завершено);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОбновлениеКонфигурации()
	
	ПомещаемыеФайлыИсправлений = Новый Массив;
	Если УстановитьИсправления Тогда
		Для Каждого ТекИсправление Из КонтекстОбновления.Исправления Цикл
			Если Не ТекИсправление.Свойство("АдресФайла") Тогда
				ПомещаемыеФайлыИсправлений.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИсправление.ИмяПолученногоФайла));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПомещаемыеФайлыИсправлений.Количество() = 0 Тогда
		НачатьУстановкуОбновления();
	Иначе
		Состояние(, , НСтр("ru = 'Пожалуйста, подождите...'"));
		
		ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ПараметрыЗагрузки.Интерактивно = Ложь;
		ПараметрыЗагрузки.ИдентификаторФормы = Новый УникальныйИдентификатор;
		
		ФайловаяСистемаКлиент.ЗагрузитьФайлы(
			Новый ОписаниеОповещения("НачатьУстановкуОбновления", ЭтотОбъект),
			ПараметрыЗагрузки,
			ПомещаемыеФайлыИсправлений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуОбновления(ПомещенныеФайлыИсправлений = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Состояние();
	Если ПомещенныеФайлыИсправлений <> Неопределено Тогда
		Для Каждого ТекФайлИсправления Из ПомещенныеФайлыИсправлений Цикл
			Для Каждого ТекИсправление Из КонтекстОбновления.Исправления Цикл
				Если ТекИсправление.ИмяПолученногоФайла = ТекФайлИсправления.ПолноеИмя Тогда
					ТекИсправление.Вставить("АдресФайла", ТекФайлИсправления.Хранение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыУстановки = ПараметрыУстановкиОбновленияКонфигурации();
	
	СтрОписаниеФайловОбновлений = "";
	Для Каждого ТекФайл Из ПараметрыУстановки.ФайлыОбновления Цикл
		СтрОписаниеФайловОбновлений = СтрОписаниеФайловОбновлений + Символы.ПС
			+ "  " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Имя файла: %1, Выполнить обработчики обновления: %2;'"),
				ТекФайл.ПолноеИмяФайлаОбновления,
				ТекФайл.ВыполнитьОбработчикиОбновления);
	КонецЦикла;
	
	ИменаФайловИсправлений = Новый Массив;
	Для Каждого ТекИсправление Из КонтекстОбновления.Исправления Цикл
		ИменаФайловИсправлений.Добавить(ТекИсправление.ИмяПолученногоФайла);
	КонецЦикла;
	
	СообщениеЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Вызов интерфейса установки обновления (СтандартныеПодсистемы.ОбновлениеКонфигурации).
			|Файлы обновления конфигурации: %1;
			|Файлы исправлений (патчей): %2;
			|Удалить исправления (патчи): %3;
			|Платформа 1С:Предприятие: %4'"),
			СтрОписаниеФайловОбновлений,
			СтрСоединить(ИменаФайловИсправлений, ","),
			СтрСоединить(ПараметрыУстановки.Исправления.Удалить),
			?(ПараметрыУстановки.Свойство("КаталогПлатформы"), ПараметрыУстановки.КаталогПлатформы, ""));
	ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурналаРегистрации);
	
	// Интеграция с подсистемой Центр мониторинга.
	Если ПередачаСведенийВЦентрМониторинга
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		ВключитьИспользованиеЦентраМониторинга();
	КонецЕсли;
	
	// Вызов программного интерфейса для установки обновления конфигурации.
	ОбновлениеКонфигурацииКлиент.УстановитьОбновление(
		ЭтотОбъект,
		ПараметрыУстановки,
		ПараметрыАдминистрирования);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыУстановкиОбновленияКонфигурации()
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОбновления"                  , РежимОбновления);
	Результат.Вставить("ЗавершениеРаботыСистемы"          , Ложь);
	Результат.Вставить("ДатаВремяОбновления"              , ДатаВремяОбновления);
	Результат.Вставить("ВыслатьОтчетНаПочту"              , ВыслатьОтчетНаПочту);
	Результат.Вставить("АдресЭлектроннойПочты"            , АдресЭлектроннойПочты);
	Результат.Вставить("КодЗадачиПланировщика"            , КодЗадачиПланировщика);
	Результат.Вставить("ИмяФайлаОбновления"               , "");
	Результат.Вставить("СоздаватьРезервнуюКопию"          , СоздаватьРезервнуюКопию);
	Результат.Вставить("ИмяКаталогаРезервнойКопииИБ"      , ИмяКаталогаРезервнойКопииИБ);
	Результат.Вставить("ВосстанавливатьИнформационнуюБазу", ВосстанавливатьИнформационнуюБазу);
	
	Если ОбновитьПлатформу Тогда
		Результат.Вставить("КаталогПлатформы",
			ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
				ИнформацияОДоступномОбновлении.Платформа.Версия));
	КонецЕсли;
	
	ФайлыОбновления = Новый Массив;
	Для Каждого ТекФайл Из КонтекстОбновления.ОбновленияКонфигурации Цикл
		ФайлыОбновления.Добавить(
			Новый Структура("ПолноеИмяФайлаОбновления, ВыполнитьОбработчикиОбновления",
				ТекФайл.ПолноеИмяCFUФайлаВКаталогеДистрибутивов,
				ТекФайл.ПрименитьОбработчикиОбновления));
	КонецЦикла;
	Результат.Вставить("ФайлыОбновления", ФайлыОбновления);
	
	ИсправленияУстановить = Новый Массив;
	Для Каждого ТекИсправление Из КонтекстОбновления.Исправления Цикл
		ИсправленияУстановить.Добавить(ТекИсправление.АдресФайла);
	КонецЦикла;
	
	Результат.Вставить("Исправления",
		Новый Структура("Установить, Удалить",
			ИсправленияУстановить,
			КонтекстОбновления.ОтозванныеИсправления));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьАктивныхПользователей()
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОповещатьОЗакрытии", Истина);
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(ПараметрыФормы, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с подсистемой "Центр мониторинга".

&НаСервере
Процедура НастроитьОтображениеИнтеграцииСЦентромМониторинга()
	
	Если ДоступнаИнтеграцияСЦентромМониторинга() Тогда
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
		Если МодульЦентрМониторинга.ЦентрМониторингаВключен() Тогда
			Элементы.ГруппаЦентрМониторингаСерверныйРежим.Видимость = Ложь;
			Элементы.ГруппаЦентрМониторингаФайловыйРежим.Видимость  = Ложь;
		Иначе
			ПередачаСведенийВЦентрМониторинга = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЦентрМониторингаСерверныйРежим.Видимость = Ложь;
		Элементы.ГруппаЦентрМониторингаФайловыйРежим.Видимость  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьИспользованиеЦентраМониторинга()
	
	Если ДоступнаИнтеграцияСЦентромМониторинга() Тогда
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
		МодульЦентрМониторинга.ВключитьПодсистему();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаИнтеграцияСЦентромМониторинга()
	
	// Временное решение до перехода на новую версию БСП. Программный интерфейс
	// подсистемы Центр мониторинга есть не во всех сборках БСП, т.к. был добавлен
	// в рамках исправления ошибки.
	РезультатСравнения = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
		"3.1.2.277",
		СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	
	Возврат (РезультатСравнения <= 0
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга"));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Шаг информации о доступном обновлении.

&НаКлиенте
Процедура ВыполнитьОбработкуКомандыДалее()
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекСтраница = Элементы.СтраницаНетНовойВерсииПлатформы Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если ТекСтраница = Элементы.СтраницаПлатформаУжеУстановлена
		Или ТекСтраница = Элементы.СтраницаУстановкаПлатформыЗавершена Тогда
		
		Если СоздатьРезервнуюКопию Тогда
			Если ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
				// Если отображается в качестве нерекомендуемой версии платформы,
				// тогда нельзя выполнять закрытие, т.к. будет завершена работа системы.
				ОткрытьСозданиеРезервнойКопииИБ();
			Иначе
				Закрыть();
				ОткрытьСозданиеРезервнойКопииИБ();
			КонецЕсли;
		Иначе
			Закрыть();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекСтраница = Элементы.СтраницаНерекомендуемаяВерсияПлатформы Тогда
		
		ПолучитьИОтобразитьИнформациюОДоступномОбновлении();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаДоступнаяВерсияПлатформы Тогда
		
		Если Не ЭтоФайловаяИБ Тогда
			// В Клиент-серверном варианте пользователю отображается только
			// ссылка для перехода на страницу загрузки дистрибутива
			// и кнопка "Далее" имеет заголовок "Готово".
			Закрыть();
			Возврат;
		КонецЕсли;
		
		// Обработчик для файлового режима работы.
		Если Элементы.ГруппаКаталогСохраненияПлатформы.Видимость
			И СохранятьДистрибутивыПлатформыВКаталог Тогда
			Если ПустаяСтрока(КаталогСохраненияПлатформы) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не выбран каталог хранения дистрибутивов платформы.'"),
					,
					"КаталогСохраненияДистрибутиваПлатформы");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НачатьПолучениеОбновлений();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаИнформацияОДоступномОбновленииКомпонентов Тогда
		
		// Обновление компонентов.
		Если Не ОбновитьКонфигурацию
			И Не УстановитьИсправления
			И Не ЭтоФайловаяИБ И ОбновитьПлатформу Тогда
			// Если кнопка "Далее" доступна и не обновляется конфигурация,
			// тогда выбрана только платформа и кнопка имеет заголовок "Готово".
			Закрыть();
			Возврат;
		КонецЕсли;
		
		// Обработчик для файлового режима работы.
		Если ОбновитьПлатформу
			И Элементы.ГруппаКаталогСохраненияКомпонентаПлатформы.Видимость
			И СохранятьДистрибутивыПлатформыВКаталог Тогда
			Если ПустаяСтрока(КаталогСохраненияПлатформы) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не выбран каталог хранения дистрибутивов платформы.'"),
					,
					"КаталогСохраненияДистрибутиваКомпонентаПлатформы");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НачатьПолучениеОбновлений();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаПодключениеКПорталу Тогда
		
		ОчиститьСообщения();
		
		Результат = ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьДанныеАутентификации(
			Новый Структура("Логин, Пароль",
			Логин, Пароль));
	
		Если Результат.Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				Результат.СообщениеОбОшибке,
				,
				Результат.Поле);
		КонецЕсли;
		
		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;
		
		НачатьПолучениеОбновлений();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаНеУдалосьПодключитьсяКСервису
		Или ТекСтраница = Элементы.СтраницаСообщениеСервиса Тогда
		
		// Кнопка "Далее" имеет заголовок "Повторить" или
		// "Установить с ручными настройками" (при ошибке политик безопасности).
		Если Не ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
			
			// Повторить попытку получения информации об обновлении.
			ПолучитьИОтобразитьИнформациюОДоступномОбновлении();
			
		ИначеЕсли ОписаниеФайловОбновлений <> Неопределено
			И Не ПустаяСтрока(ОписаниеФайловОбновлений.ИмяОшибки)
			Или КонтекстОбновления <> Неопределено
			И Не ПустаяСтрока(КонтекстОбновления.ИмяОшибки) Тогда
			
			// 1) Повторить попытку получения информации о файлах обновлений
			// и начать получение файлов.
			// 2) Или Произошла ошибка получения файлов обновлений или ошибка установки платформы.
			// Повторить попытку получения файлов обновления или установки платформы.
			НачатьПолучениеОбновлений();
			
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаУстановленыИсправления Тогда
		
		Если ПерезапуститьПрограмму Тогда
			ЗавершитьРаботуСистемы(Истина, Истина);
		Иначе
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.ВыборРежимаОбновленияФайловыйРежим
		Или ТекСтраница = Элементы.ВыборРежимаОбновленияСерверныйРежим Тогда
		
		// Вызов программного интерфейса СтандартныеПодсистемы.ОбновлениеКонфигурации
		// для установки обновления.
		УстановитьОбновлениеКонфигурации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИОтобразитьИнформациюОДоступномОбновлении()
	
	Состояние(, , НСтр("ru = 'Получение информации о доступном обновлении'"));
	ПолучитьИОтобразитьИнформациюОДоступномОбновленииНаСервере();
	Состояние();
	
КонецПроцедуры

&НаСервере
Функция НовыйИнформацияОДоступномОбновлении(ПараметрыКлиента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкиСоединения", ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ДополнительныеПараметры.Вставить("ПараметрыКлиента"   , ПараметрыКлиента);
	Возврат ПолучениеОбновленийПрограммы.ИнформацияОДоступномОбновленииСлужебная(
		ИнтернетПоддержкаПользователей.ИмяПрограммы(),
		ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
		ИмяНовойПрограммы,
		НомерНовойРедакции,
		Сценарий,
		ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Процедура ПолучитьИОтобразитьИнформациюОДоступномОбновленииНаСервере()
	
	ИнформацияОбОбновлении = НовыйИнформацияОДоступномОбновлении(ИнтернетПоддержкаПользователей.ПараметрыКлиента());
	ЗаполнитьИнформациюОбОбновлении(ИнформацияОбОбновлении);
	ОтобразитьИнформациюОДоступномОбновлении(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбОбновлении(ИнформацияОбОбновлении)
	
	Исправления = ИнформацияОбОбновлении.Исправления;
	Если Исправления = Неопределено Тогда
		АдресИсправления = "";
	ИначеЕсли ПустаяСтрока(АдресИсправления) Тогда
		АдресИсправления = ПоместитьВоВременноеХранилище(Исправления, ЭтотОбъект.УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(Исправления, АдресИсправления);
	КонецЕсли;
	
	ИнформацияОбОбновлении.Удалить("Исправления");
	ИнформацияОДоступномОбновлении = ИнформацияОбОбновлении;
	
	ВыбранныеИсправленияТекущаяВерсия.Очистить();
	ВыбранныеИсправленияНоваяВерсия.Очистить();
	Если Исправления <> Неопределено Тогда
		Для Каждого СтрИсправление Из Исправления Цикл
			Если СтрИсправление.ДляНовойВерсии Тогда
				ВыбранныеИсправленияНоваяВерсия.Добавить(СтрИсправление.Идентификатор);
			КонецЕсли;
			Если СтрИсправление.ДляТекущейВерсии Тогда
				ВыбранныеИсправленияТекущаяВерсия.Добавить(СтрИсправление.Идентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИнформацияОбОбновлении.Вставить("КоличествоИсправленийТекущаяВерсия", ВыбранныеИсправленияТекущаяВерсия.Количество());
	ИнформацияОбОбновлении.Вставить("КоличествоИсправленийНоваяВерсия"  , ВыбранныеИсправленияНоваяВерсия.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОДоступномОбновлении(ЗаполнитьНачальныеНастройки = Ложь)
	
	Если Не ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
		Если ЭтоОшибкаСоединения(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
			ОтобразитьОшибкуПодключения(
				ИнформацияОДоступномОбновлении.Сообщение,
				ИнформацияОДоступномОбновлении.ИнформацияОбОшибке);
		Иначе
			ОтобразитьСообщениеСервиса(
				ИнформацияОДоступномОбновлении.Сообщение,
				НСтр("ru = 'Повторить попытку подключения >'"),
				ИнформацияОДоступномОбновлении.ИнформацияОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		ОтобразитьИнформациюОДоступномОбновленииПлатформы(ЗаполнитьНачальныеНастройки);
	Иначе
		
		ОтобразитьИнформациюОбОбновленииКомпонентов(ЗаполнитьНачальныеНастройки);
		
		// Если доступно обновление конфигурации, тогда
		// отобразить при необходимости предупреждения.
		ДоступноОбновлениеКонфигурации =
			ИнформацияОДоступномОбновлении.Конфигурация <> Неопределено
			И Не ПустаяСтрока(ИнформацияОДоступномОбновлении.Конфигурация.Версия)
			Или ИнформацияОДоступномОбновлении.КоличествоИсправленийНоваяВерсия
			Или ИнформацияОДоступномОбновлении.КоличествоИсправленийТекущаяВерсия;
		
		// Получение списка исправлений(патчей) для отображения
		// предупреждения на форме.
		УстановитьПривилегированныйРежим(Истина);
		УстановленныеИсправления   = ОбновлениеКонфигурации.УстановленныеИсправления();
		ЕстьНеПримененныеИсправления = Ложь;
		Если УстановленныеИсправления <> Неопределено Тогда
			Для Каждого ОписаниеИсправления Из УстановленныеИсправления Цикл
				Если Не ЗначениеЗаполнено(ОписаниеИсправления.Идентификатор) Тогда
					ЕстьНеПримененныеИсправления = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		Элементы.НадписьЕстьОшибкиУчета.Видимость = (ДоступноОбновлениеКонфигурации И ВидимостьПанелиОшибок());
		Элементы.НадписьЕстьРасширения.Видимость = (ДоступноОбновлениеКонфигурации
			И ОбновлениеКонфигурации.ПредупреждатьОНаличииРасширений());
		Элементы.НадписьЕстьНеПримененныеИсправления.Видимость = ЕстьНеПримененныеИсправления;
		Элементы.ПанельПредупреждений.Видимость = (Элементы.НадписьЕстьОшибкиУчета.Видимость
			Или Элементы.НадписьЕстьРасширения.Видимость
			Или Элементы.НадписьЕстьНеПримененныеИсправления.Видимость);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОДоступномОбновленииПлатформы(ЗаполнитьНачальныеНастройки = Ложь)
	
	ЕстьОбновление = Истина;
	ОбновлениеПлатформы = ИнформацияОДоступномОбновлении.Платформа;
	Если НЕ ЗначениеЗаполнено(ОбновлениеПлатформы.Версия) Тогда
		
		ЕстьОбновление = Ложь;
		ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаНетНовойВерсииПлатформы);
		Элементы.ДекорацияНетВерсии.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<body>Используемая сейчас версия: %1</body>'"),
					ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие()));
		
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
			ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие(),
			ОбновлениеПлатформы.Версия) >= 0 Тогда
		
		ЕстьОбновление = Ложь;
		ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаНетНовойВерсииПлатформы);
		Элементы.ДекорацияНетВерсии.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<body>Рекомендуемая версия платформы 1С:Предприятие: <b>%1</b>
					|<br />Используемая сейчас версия: %2</body>'"),
				ОбновлениеПлатформы.Версия,
				ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие()));
		
	КонецЕсли;
	
	Если Не ЕстьОбновление Тогда
		
		Элементы.КнопкаНазад.Доступность  = Ложь;
		Элементы.КнопкаДалее.Доступность  = Ложь;
		Элементы.КнопкаОтмена.Доступность = Истина;
		Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
		Элементы.КнопкаДалее.Заголовок    = НСтр("ru = 'Далее >'");
		Элементы.КнопкаОтмена.Заголовок   = НСтр("ru = 'Закрыть'");
		Возврат;
		
	Иначе
		
		Установлена = Ложь;
		Если ЭтоФайловаяИБ Тогда
			КаталогУстановкиПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
				ОбновлениеПлатформы.Версия);
			Установлена = (КаталогУстановкиПлатформы <> "");
		КонецЕсли;
		
		Если Установлена Тогда
			
			// Это файловая ИБ и платформа установлена.
			ОтобразитьСтраницуНоваяВерсияПлатформыУжеУстановленаНаКомпьютере();
			
		Иначе
			
			// Страница информации о доступном обновлении платформы.
			ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаДоступнаяВерсияПлатформы);
			Элементы.НадписьВерсия.Заголовок = НСтр("ru = 'Версия'")
				+ " " + ОбновлениеПлатформы.Версия;
			Элементы.НадписьОсобенностиПерехода.Видимость =
				(ОбновлениеПлатформы.Свойство("URLОсобенностиПерехода")
				И Не ПустаяСтрока(ОбновлениеПлатформы.URLОсобенностиПерехода));
			
			Элементы.ДекорацияСообщениеНоваяВерсияПлатформы.Заголовок = ЗаголовокСтраницыНоваяВерсияПлатформы();
			
			// Файловый и клиент-серверный режим.
			Если ЭтоФайловаяИБ Тогда
				
				Элементы.ГруппаРазмер.Видимость                           = Истина;
				Элементы.ДекорацияЗагрузитьДистрибутивПлатформы.Видимость = Ложь;
				Элементы.ГруппаПараметрыУстановкиПлатформы.Видимость      = Истина;
				Элементы.НадписьРазмерОбновления.Заголовок =
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(
						ОбновлениеПлатформы.РазмерОбновления);
				Элементы.КнопкаДалее.Доступность  = Истина;
				Элементы.КнопкаДалее.Заголовок    = НСтр("ru = 'Далее >'");
				
				// Сохранение дистрибутивов платформы.
				Если ЗаполнитьНачальныеНастройки Тогда
					НастройкиОбновления = ПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
					РежимУстановкиПлатформы = НастройкиОбновления.РежимУстановки;
					Если Элементы.ГруппаКаталогСохраненияПлатформы.Видимость Тогда
						Если НастройкиОбновления.КаталогДистрибутивовПлатформы = Неопределено Тогда
							КаталогСохраненияПлатформы = КаталогДистрибутиваПлатформыПоУмолчанию();
							СохранятьДистрибутивыПлатформыВКаталог = Ложь;
							Элементы.КаталогСохраненияДистрибутиваПлатформы.Доступность = Ложь;
						Иначе
							КаталогСохраненияПлатформы = НастройкиОбновления.КаталогДистрибутивовПлатформы;
							Если ПустаяСтрока(КаталогСохраненияПлатформы) Тогда
								КаталогСохраненияПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
							КонецЕсли;
							СохранятьДистрибутивыПлатформыВКаталог = Истина;
							Элементы.КаталогСохраненияДистрибутиваПлатформы.Доступность = Истина;
						КонецЕсли;
					Иначе
						КаталогСохраненияПлатформы = КаталогДистрибутиваПлатформыПоУмолчанию();
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				// Режим клиент-сервер.
				Элементы.ГруппаРазмер.Видимость                           = Ложь;
				Элементы.ДекорацияЗагрузитьДистрибутивПлатформы.Видимость = Истина;
				Элементы.ГруппаПараметрыУстановкиПлатформы.Видимость      = Ложь;
				Элементы.КнопкаДалее.Доступность  = Истина;
				Элементы.КнопкаДалее.Заголовок    = НСтр("ru = 'Готово'");
				
			КонецЕсли;
			
			Элементы.КнопкаНазад.Доступность  = ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект);
			Элементы.КнопкаОтмена.Доступность = Истина;
			Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
			Элементы.КнопкаОтмена.Заголовок   = НСтр("ru = 'Отмена'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтраницуНоваяВерсияПлатформыУжеУстановленаНаКомпьютере()
	
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаПлатформаУжеУстановлена);
	
	ОбновлениеПлатформы = ИнформацияОДоступномОбновлении.Платформа;
	Элементы.НадписьВерсияУстановлено.Заголовок =
		НСтр("ru = 'Версия'") + " " + ОбновлениеПлатформы.Версия;
	
	Если ИнформацияОДоступномОбновлении.Свойство("URLОсобенностиПерехода")
		И Не ПустаяСтрока(ОбновлениеПлатформы.URLОсобенностиПерехода) Тогда
		
		Элементы.НадписьУстановленоДополнительно.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<body>Версия платформы %1 уже установлена на компьютере.
					|<br />Перед началом работы на новой версии платформы рекомендуется ознакомиться
					|<br />с <a href=""open:V8Update"">особенностями перехода</a> на эту версию платформы.</body>'"),
				ОбновлениеПлатформы.Версия));
		
	Иначе
		
		Элементы.НадписьУстановленоДополнительно.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<body>Версия платформы %1 уже установлена на компьютере.</body>'"),
					ОбновлениеПлатформы.Версия));
		
	КонецЕсли;
	
	Если Элементы.ДекорацияСообщениеПлатформаУжеУстановлена.Видимость Тогда
		Элементы.ДекорацияСообщениеПлатформаУжеУстановлена.Заголовок = ЗаголовокСтраницыНоваяВерсияПлатформы();
	КонецЕсли;
	
	Если ПустаяСтрока(Элементы.ДекорацияСтрУстановленаСоздатьРК.Заголовок) Тогда
		Элементы.ДекорацияСтрУстановленаСоздатьРК.Заголовок =
			ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Элементы.ДекорацияСтрУстановленаНеСоздаватьРК.Заголовок) Тогда
		Элементы.ДекорацияСтрУстановленаНеСоздаватьРК.Заголовок =
			ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Ложь);
	КонецЕсли;
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнструкцияУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаСоздатьРК;
	Иначе
		Элементы.СтраницыИнструкцияУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаНеСоздаватьРК;
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = Не ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект);
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru = 'Готово'");
	Элементы.КнопкаОтмена.Заголовок   = НСтр("ru = 'Отмена'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОбОбновленииКомпонентов(ЗаполнитьНачальныеНастройки)
	
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаИнформацияОДоступномОбновленииКомпонентов);
	Если ЗаполнитьНачальныеНастройки Тогда
		ЗаполнитьНачальныеНастройкиИОтображениеУстановкиКомпонентов();
	КонецЕсли;
	
	ОтобразитьКомпонентКонфигурации();
	ОтобразитьИсправления();
	ОтобразитьКомпонентПлатформы();
	ОтобразитьКраткуюИнформациюОДоступномОбновлении();
	НастроитьКнопкиКоманднойПанелиДляКомпонентов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройкиИОтображениеУстановкиКомпонентов()
	
	ОбновлениеКомКонфигурации = ИнформацияОДоступномОбновлении.Конфигурация;
	ОбновлениеПлатформы = ИнформацияОДоступномОбновлении.Платформа;
	ОбновитьКонфигурацию = (ОбновлениеКомКонфигурации <> Неопределено
		И Не ПустаяСтрока(ОбновлениеКомКонфигурации.Версия));
	
	УстановитьИсправления = (
		ОбновитьКонфигурацию
		И ВыбранныеИсправленияНоваяВерсия.Количество() > 0
		Или Не ОбновитьКонфигурацию
		И ВыбранныеИсправленияТекущаяВерсия.Количество() > 0);
	
	Элементы.ГруппаАвтоматическаяУстановка.Видимость = ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы();
	Если Элементы.ГруппаАвтоматическаяУстановка.Видимость Тогда
		ЗагружатьИУстанавливатьИсправленияАвтоматически =
			Константы.ЗагружатьИУстанавливатьИсправленияАвтоматически.Получить();
		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(
			Метаданные.РегламентныеЗадания.ПолучениеИУстановкаИсправленийКонфигурации);
		Если Задание <> Неопределено Тогда
			Элементы.ДекорацияЗагрузкаИсправленийРасписание.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Задание.Расписание);
		КонецЕсли;
		Элементы.ДекорацияЗагрузкаИсправленийРасписание.Доступность =
			ЗагружатьИУстанавливатьИсправленияАвтоматически;
	КонецЕсли;
	
	ОбновитьПлатформу = Не ПустаяСтрока(ОбновлениеПлатформы.Версия)
		И (ОбновитьКонфигурацию
		И ОбновлениеПлатформы.ОбязательностьУстановки < 2
		Или Не ОбновитьКонфигурацию)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
			ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие(),
			ОбновлениеПлатформы.Версия) < 0;
	
	Если ЭтоФайловаяИБ
		И ЭтоАдминистраторСистемы
		И Элементы.ГруппаКаталогСохраненияКомпонентаПлатформы.Видимость Тогда
		НастройкиОбновления = ПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
		РежимУстановкиПлатформы = НастройкиОбновления.РежимУстановки;
		Если Элементы.ГруппаКаталогСохраненияКомпонентаПлатформы.Видимость Тогда
			Если НастройкиОбновления.КаталогДистрибутивовПлатформы = Неопределено Тогда
				КаталогСохраненияПлатформы = КаталогДистрибутиваПлатформыПоУмолчанию();
				СохранятьДистрибутивыПлатформыВКаталог = Ложь;
				Элементы.КаталогСохраненияДистрибутиваКомпонентаПлатформы.Доступность = Ложь;
			Иначе
				КаталогСохраненияПлатформы = НастройкиОбновления.КаталогДистрибутивовПлатформы;
				Если ПустаяСтрока(КаталогСохраненияПлатформы) Тогда
					КаталогСохраненияПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
				КонецЕсли;
				СохранятьДистрибутивыПлатформыВКаталог = Истина;
				Элементы.КаталогСохраненияДистрибутиваКомпонентаПлатформы.Доступность = Истина;
			КонецЕсли;
		Иначе
			КаталогСохраненияПлатформы = КаталогДистрибутиваПлатформыПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКраткуюИнформациюОДоступномОбновлении()
	
	ОбновлениеКомКонф = ИнформацияОДоступномОбновлении.Конфигурация;
	ОбновлениеКомПл   = ИнформацияОДоступномОбновлении.Платформа;
	
	ТекстСообщения = "<body>";
	
	Если (ОбновлениеКомКонф = Неопределено
		Или Не ОбновлениеКомКонф.ДоступноОбновление)
		И ИнформацияОДоступномОбновлении.КоличествоИсправленийТекущаяВерсия = 0
		И ИнформацияОДоступномОбновлении.КоличествоИсправленийНоваяВерсия = 0
		И Не ОбновлениеКомПл.ДоступноОбновление Тогда
		
		// Нет доступного обновления.
		Если ЭтоСценарийРабочегоОбновления(ЭтотОбъект) Или ПустаяСтрока(ЗаголовокНетОбновления) Тогда
			ТекстСообщения = ТекстСообщения
				+ НСтр("ru = 'Обновление не требуется. Установлена актуальная версия программы.'");
		Иначе
			ТекстСообщения = ТекстСообщения + ЗаголовокНетОбновления;
		КонецЕсли;
		
	Иначе
		
		ПрямоеОбновление = ЭтоСценарийРабочегоОбновления(ЭтотОбъект);
		Если ПрямоеОбновление Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Доступно обновление программы.'");
		Иначе
			ТекстСообщения = ТекстСообщения
				+ ?(ПустаяСтрока(ЗаголовокДоступноОбновление), "", ЗаголовокДоступноОбновление)
		КонецЕсли;
		
		// Размер обновления.
		РазмерОбновления = ?(ОбновитьКонфигурацию, ОбновлениеКомКонф.РазмерОбновления, 0)
			+ ?(УстановитьИсправления, РазмерВыбранныхИсправлений, 0)
			+ ?(ОбновитьПлатформу И ЭтоФайловаяИБ, ОбновлениеКомПл.РазмерОбновления, 0);
		Если РазмерОбновления <> 0 Тогда
			ТекстСообщения = ТекстСообщения + ?(ПрямоеОбновление, " ", "<br />")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Размер дистрибутива: <b>%1</b>'"),
					ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(РазмерОбновления));
		КонецЕсли;
		
		Если ОбновитьКонфигурацию Тогда
			Если ЭтоАдминистраторСистемы И Не ПустаяСтрока(ОбновлениеКомКонф.URLПорядокОбновления) Тогда
				ТекстСообщения = ТекстСообщения
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<br /><b>Внимание!</b> Для продолжения необходимо ознакомиться с информацией о <a href=""%1"">порядке обновления</a>.'"),
						ОбновлениеКомКонф.URLПорядокОбновления);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЭтоАдминистраторСистемы Тогда
			ТекстСообщения = ТекстСообщения
				+ НСтр("ru = '<br />Для обновления программы обратитесь к администратору.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + "</body>";
	Элементы.ДекорацияСообщениеДоступноОбновление.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиКоманднойПанелиДляКомпонентов()
	
	Элементы.КнопкаНазад.Доступность  = Ложь;
	Элементы.КнопкаОтмена.Видимость   = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	
	Если Не ИнформацияОДоступномОбновлении.ДоступноОбновление Или Не ЭтоАдминистраторСистемы Тогда
		
		Элементы.КнопкаДалее.Видимость   = Ложь;
		Элементы.КнопкаОтмена.Заголовок  = НСтр("ru = 'Закрыть'");
		
	ИначеЕсли Не ОбновитьКонфигурацию И Не УстановитьИсправления И Не ОбновитьПлатформу Тогда
		
		// Не выбрано обновление.
		Элементы.КнопкаДалее.Доступность = Ложь;
		Элементы.КнопкаДалее.Заголовок   = НСтр("ru = 'Далее >'");
		Элементы.КнопкаОтмена.Заголовок  = НСтр("ru = 'Отмена'");
		
	ИначеЕсли ЭтоФайловаяИБ Тогда
		
		// Выбрано обновление, в файловом варианте нет ограничений
		// на установку обновлений.
		Элементы.КнопкаДалее.Доступность = Истина;
		Элементы.КнопкаДалее.Заголовок   = НСтр("ru = 'Далее >'");
		Элементы.КнопкаОтмена.Заголовок  = НСтр("ru = 'Отмена'");
		
	ИначеЕсли ОбновитьКонфигурацию Или УстановитьИсправления Тогда
		
		Если ОбновитьПлатформу Тогда
			// Автоматическое обновление платформы недоступно в
			// клиент-серверном режиме.
			Элементы.КнопкаДалее.Доступность = Ложь;
			Элементы.КнопкаДалее.Заголовок   = НСтр("ru = 'Далее >'");
			Элементы.КнопкаОтмена.Заголовок  = НСтр("ru = 'Отмена'");
		Иначе
			Элементы.КнопкаДалее.Доступность = Истина;
			Элементы.КнопкаДалее.Заголовок   = НСтр("ru = 'Далее >'");
			Элементы.КнопкаОтмена.Заголовок  = НСтр("ru = 'Отмена'");
		КонецЕсли;
		
	Иначе
		
		// Обновить платформу в клиент-серверном режиме работы.
		Элементы.КнопкаДалее.Доступность = Истина;
		Элементы.КнопкаДалее.Заголовок   = НСтр("ru = 'Готово'");
		Элементы.КнопкаОтмена.Заголовок  = НСтр("ru = 'Отмена'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКомпонентКонфигурации()
	
	ОбновлениеКомКонфигурации = ИнформацияОДоступномОбновлении.Конфигурация;
	Если ОбновлениеКомКонфигурации = Неопределено Тогда
		
		Элементы.ГруппаОбновлениеКонфигурации.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаОбновлениеКонфигурации.Видимость = Истина;
		Если ПустаяСтрока(ОбновлениеКомКонфигурации.Версия) Тогда
			
			// Нет обновления.
			Элементы.ОбновитьКонфигурацию.ТолькоПросмотр = Истина;
			Элементы.ДекорацияЗаголовокОбновлениеКонфигурации.Заголовок = НСтр("ru = 'Обновление конфигурации'");
			Элементы.ДекорацияНомерВерсииКонфигурации.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body>Обновление не требуется. Текущая версия конфигурации: <b>%1</b><br />
							|%2</body>'"),
						ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
						ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
			
		Иначе
			
			Элементы.ОбновитьКонфигурацию.ТолькоПросмотр = (Не ЭтоАдминистраторСистемы
				Или ПолучениеОбновленияЗавершено(ЭтотОбъект))
				Или ЭтоСценарийПереходаНаДругуюПрограммуИлиРедакцию(ЭтотОбъект);
			Элементы.ДекорацияЗаголовокОбновлениеКонфигурации.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body>Обновление конфигурации, <b>%1</b></body>'"),
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(
							ОбновлениеКомКонфигурации.РазмерОбновления)));
			
			Если Не ПустаяСтрока(ОбновлениеКомКонфигурации.URLНовоеВВерсии) Тогда
				
				Элементы.ДекорацияНомерВерсииКонфигурации.Заголовок =
					ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '<body><b>Версия %1</b>   <a href=""%2"">Новое в версии</a><br />
								|Текущая версия конфигурации: %3<br />
								|%4</body>'"),
							ОбновлениеКомКонфигурации.Версия,
							ОбновлениеКомКонфигурации.URLНовоеВВерсии,
							ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
							ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
				
			Иначе
				
				Элементы.ДекорацияНомерВерсииКонфигурации.Заголовок =
					ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '<body><b>Версия %1</b><br />
								|Текущая версия конфигурации: %2<br />
								|%3</body>'"),
							ОбновлениеКомКонфигурации.Версия,
							ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
							ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИсправления()
	
	Исправления = Неопределено;
	КоличествоИсправленийДляВерсии = 0;
	Если ПустаяСтрока(АдресИсправления)Тогда
		Элементы.ГруппаИсправления.Видимость = Ложь;
		Возврат;
	Иначе
		Исправления = ПолучитьИзВременногоХранилища(АдресИсправления);
		КоличествоИсправленийДляВерсии = Исправления.НайтиСтроки(
			Новый Структура(?(ОбновитьКонфигурацию, "ДляНовойВерсии", "ДляТекущейВерсии"), Истина)).Количество();
	КонецЕсли;
	
	Элементы.ГруппаИсправления.Видимость = Истина;
	
	РазмерВыбранныхИсправлений = 0;
	Если КоличествоИсправленийДляВерсии > 0 Тогда
		
		Элементы.УстановитьИсправления.ТолькоПросмотр = Ложь;
		Если ОбновитьКонфигурацию Тогда
			Элементы.ДекорацияПатчиВерсияКонфигурации.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body><strong>Для новой версии конфигурации %1</strong></body>'"),
						ИнформацияОДоступномОбновлении.Конфигурация.Версия));
		Иначе
			Элементы.ДекорацияПатчиВерсияКонфигурации.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body><strong>Для текущей версии конфигурации %1</strong></body>'"),
						ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
						ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
		КонецЕсли;
		
		СписокВыбранныхИсправлений = ?(
			ОбновитьКонфигурацию,
			ВыбранныеИсправленияНоваяВерсия,
			ВыбранныеИсправленияТекущаяВерсия);
		Для Каждого ЭлементСписка Из СписокВыбранныхИсправлений Цикл
			СтрокаИсправление = Исправления.Найти(ЭлементСписка.Значение, "Идентификатор");
			РазмерВыбранныхИсправлений = РазмерВыбранныхИсправлений + ?(СтрокаИсправление.Отозвано, 0, СтрокаИсправление.Размер);
		КонецЦикла;
		
		Элементы.ДекорацияПатчиИсправляемыеОшибки.Видимость = Истина;
		Если СписокВыбранныхИсправлений.Количество() = 0 Тогда
			УстановитьИсправления = Ложь;
			Элементы.ДекорацияПатчиИсправляемыеОшибки.Заголовок = НСтр("ru = 'Исправляемые ошибки (не выбраны)'");
		Иначе
			УстановитьИсправления = (ОбновитьКонфигурацию ИЛИ УстановитьИсправления);
			Элементы.ДекорацияПатчиИсправляемыеОшибки.Заголовок =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исправляемые ошибки (%1 из %2)'"),
					СписокВыбранныхИсправлений.Количество(),
					КоличествоИсправленийДляВерсии);
		КонецЕсли;
		
		Если РазмерВыбранныхИсправлений = 0 Тогда
			Элементы.ДекорацияЗаголовокПатчи.Заголовок = НСтр("ru = 'Исправления (патчи)'");
		Иначе
			Элементы.ДекорацияЗаголовокПатчи.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body>Исправления (патчи), <strong>%1</strong></body>'"),
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(РазмерВыбранныхИсправлений)));
		КонецЕсли;
		
		Элементы.УстановитьИсправления.ТолькоПросмотр = (Не ЭтоАдминистраторСистемы
			Или ПолучениеОбновленияЗавершено(ЭтотОбъект));
		
	Иначе
		
		УстановитьИсправления = Ложь;
		Элементы.УстановитьИсправления.ТолькоПросмотр = Истина;
		Элементы.ДекорацияЗаголовокПатчи.Заголовок = НСтр("ru = 'Исправления (патчи)'");
		Элементы.ДекорацияПатчиВерсияКонфигурации.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<body>Исправление ошибок для версии <strong>%1</strong> не требуется.</body>'"),
					?(ОбновитьКонфигурацию,
					ИнформацияОДоступномОбновлении.Конфигурация.Версия,
					ИнтернетПоддержкаПользователей.ВерсияКонфигурации())));
		Элементы.ДекорацияПатчиИсправляемыеОшибки.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКомпонентПлатформы()
	
	ОбновлениеКомПл = ИнформацияОДоступномОбновлении.Платформа;
	
	Элементы.ДекорацияПояснениеПлатформаКлиентСервер.Видимость = Ложь;
	
	Если Не ОбновлениеКомПл.ДоступноОбновление Тогда
		
		// Нет обновления.
		Элементы.ОбновитьПлатформу.ТолькоПросмотр = Истина;
		Элементы.ДекорацияЗаголовокОбновлениеПлатформы.Заголовок =
			НСтр("ru = 'Обновление платформы 1С:Предприятие'");
		Элементы.ДекорацияНомерВерсииПлатформы.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<body>Обновление не требуется. Текущая версия платформы 1С:Предприятие: <b>%1</b></body>'"),
					ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие()));
		
		Элементы.ДекорацияПояснениеПлатформа.Видимость                      = Ложь;
		Элементы.ДекорацияЗагрузитьДистрибутивКомпонентаПлатформы.Видимость = Ложь;
		Элементы.ГруппаПараметрыУстановкиКомпонентаПлатформа.Видимость      = Ложь;
		
	Иначе
		
		Элементы.ОбновитьПлатформу.ТолькоПросмотр = (Не ЭтоАдминистраторСистемы
			Или ОбновитьКонфигурацию И ОбновлениеКомПл.ОбязательностьУстановки = 0
			Или ПолучениеОбновленияЗавершено(ЭтотОбъект));
		
		Если ОбновитьКонфигурацию И ОбновлениеКомПл.ОбязательностьУстановки = 0 Тогда
			ОбновитьПлатформу = Истина;
		КонецЕсли;
		
		Если ЭтоФайловаяИБ Тогда
			Элементы.ДекорацияЗаголовокОбновлениеПлатформы.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body>Обновление платформы 1С:Предприятие, <b>%1</b></body>'"),
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(
							ОбновлениеКомПл.РазмерОбновления)));
		Иначе
			Элементы.ДекорацияЗаголовокОбновлениеПлатформы.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
						НСтр("ru = '<body>Обновление платформы 1С:Предприятие</body>'"));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбновлениеКомПл.URLОсобенностиПерехода) Тогда
			
			Элементы.ДекорацияНомерВерсииПлатформы.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body><b>Версия %1</b>   <a href=""%2"">Особенности перехода на новую версию платформы</a><br />
							|Текущая версия платформы 1С:Предприятие: %3</body>'"),
						ОбновлениеКомПл.Версия,
						ОбновлениеКомПл.URLОсобенностиПерехода,
						ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие()));
			
		Иначе
			
			Элементы.ДекорацияНомерВерсииПлатформы.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<body><b>Версия %1</b><br />
							|Текущая версия платформы 1С:Предприятие: %2</body>'"),
						ОбновлениеКомПл.Версия,
						ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие()));
			
		КонецЕсли;
		
		Если ЭтоФайловаяИБ Тогда
			
			Элементы.ДекорацияЗагрузитьДистрибутивКомпонентаПлатформы.Видимость = Ложь;
			Если ОбновитьКонфигурацию Тогда
				
				Элементы.ДекорацияПояснениеПлатформа.Видимость = Истина;
				Если ОбновлениеКомПл.ОбязательностьУстановки = 0 Тогда
					Элементы.ДекорацияПояснениеПлатформа.Заголовок =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Обновление платформы является обязательным для работы с новой версией конфигурации %1.'"),
							ИнформацияОДоступномОбновлении.Конфигурация.Версия);
				ИначеЕсли ОбновлениеКомПл.ОбязательностьУстановки = 1 Тогда
					Элементы.ДекорацияПояснениеПлатформа.Заголовок =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Новая версия %1 платформы 1С:Предприятие рекомендуется для работы с новой версией конфигурации %2.'"),
							ОбновлениеКомПл.Версия,
							ИнформацияОДоступномОбновлении.Конфигурация.Версия);
				Иначе
					Элементы.ДекорацияПояснениеПлатформа.Заголовок =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Обновление платформы не является обязательным для работы с новой версией конфигурации %1.'"),
							ИнформацияОДоступномОбновлении.Конфигурация.Версия);
				КонецЕсли;
				
			ИначеЕсли ОбновлениеКомПл.ОбязательностьУстановки < 2 Тогда
				
				Элементы.ДекорацияПояснениеПлатформа.Видимость = Истина;
				Элементы.ДекорацияПояснениеПлатформа.Заголовок =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Рекомендуется установить новую версию платформы 1С:Предприятие.'"),
						ИнформацияОДоступномОбновлении.Конфигурация.Версия);
				
			Иначе
				
				Элементы.ДекорацияПояснениеПлатформа.Видимость = Ложь;
				
			КонецЕсли;
			
			Элементы.ГруппаПараметрыУстановкиКомпонентаПлатформа.Видимость = ЭтоАдминистраторСистемы;
			Элементы.ДекорацияПояснениеПлатформаКлиентСервер.Видимость     = Ложь;
			
		Иначе
			
			// Отображение для клиент-серверной информационной базы.
			Элементы.ДекорацияПояснениеПлатформа.Видимость = Истина;
			
			Если ОбновитьКонфигурацию Тогда
				
				Если ОбновлениеКомПл.ОбязательностьУстановки = 0 Тогда
					Элементы.ДекорацияПояснениеПлатформа.Заголовок =
						ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '<body>Для работы новой версии конфигурации требуется платформа 1С:Предприятие не ниже версии <b>%1</b>.</body>'"),
								ИнформацияОДоступномОбновлении.Конфигурация.МинимальнаяВерсияПлатформы));
				ИначеЕсли ОбновлениеКомПл.ОбязательностьУстановки = 1 Тогда
					Элементы.ДекорацияПояснениеПлатформа.Заголовок =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Новая версия %1 платформы 1С:Предприятие рекомендуется для работы с новой версией конфигурации %2.'"),
							ОбновлениеКомПл.Версия,
							ИнформацияОДоступномОбновлении.Конфигурация.Версия);
				Иначе
					Элементы.ДекорацияПояснениеПлатформа.Заголовок =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Обновление платформы не является обязательным для работы с новой версией конфигурации %1.'"),
							ИнформацияОДоступномОбновлении.Конфигурация.Версия);
				КонецЕсли;
				
			ИначеЕсли ОбновлениеКомПл.ОбязательностьУстановки < 2 Тогда
				
				Элементы.ДекорацияПояснениеПлатформа.Видимость = Истина;
				Элементы.ДекорацияПояснениеПлатформа.Заголовок =
					НСтр("ru = 'Рекомендуется установить новую версию платформы 1С:Предприятие.'");
				
			Иначе
				
				Элементы.ДекорацияПояснениеПлатформа.Видимость = Ложь;
				
			КонецЕсли;
			
			Элементы.ДекорацияЗагрузитьДистрибутивКомпонентаПлатформы.Видимость = ЭтоАдминистраторСистемы;
			Элементы.ДекорацияПояснениеПлатформаКлиентСервер.Видимость          = ЭтоАдминистраторСистемы;
			Элементы.ГруппаПараметрыУстановкиКомпонентаПлатформа.Видимость      = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаКомпонентаКонфигурацияНаСервере()
	
	ОтобразитьИсправления();
	ОтобразитьКомпонентПлатформы();
	ОтобразитьКраткуюИнформациюОДоступномОбновлении();
	НастроитьКнопкиКоманднойПанелиДляКомпонентов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсправленияНаСервере()
	
	ОтобразитьКраткуюИнформациюОДоступномОбновлении();
	НастроитьКнопкиКоманднойПанелиДляКомпонентов();
	
КонецПроцедуры

&НаСервере
Процедура ПриВыбореИсправленийНаСервере()
	
	Если Элементы.УстановитьИсправления.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьИсправления();
	ОтобразитьКраткуюИнформациюОДоступномОбновлении();
	НастроитьКнопкиКоманднойПанелиДляКомпонентов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаПлатформыНаСервере()
	
	ОтобразитьКраткуюИнформациюОДоступномОбновлении();
	НастроитьКнопкиКоманднойПанелиДляКомпонентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореИсправлений(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьКонфигурацию Тогда
		ВыбранныеИсправленияНоваяВерсия = Результат;
	Иначе
		ВыбранныеИсправленияТекущаяВерсия = Результат;
	КонецЕсли;
	
	ПриВыбореИсправленийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросИсправленияПодключитьИнтернетПоддержкуПриВключенииУстановкиИсправлений(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ПодключениеИнтернетПоддержкиЗавершениеАвтоматическаяУстановкаИсправлений", ЭтотОбъект),
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеИнтернетПоддержкиЗавершениеАвтоматическаяУстановкаИсправлений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗагружатьИУстанавливатьИсправленияАвтоматически = Истина;
		ПолучениеОбновленийПрограммыВызовСервера.ВключитьОтключитьАвтоматическуюУстановкуИсправлений(
			ЗагружатьИУстанавливатьИсправленияАвтоматически);
		Элементы.ДекорацияЗагрузкаИсправленийРасписание.Доступность =
			ЗагружатьИУстанавливатьИсправленияАвтоматически;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписанияУстановкиИсправлений(Расписание, Форма) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 3600 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал автоматической установки не может быть чаще, чем один раз в час.'"));
		Возврат;
	КонецЕсли;
	
	ПолучениеОбновленийПрограммыВызовСервера.УстановитьРасписаниеЗаданияУстановкиИсправлений(Расписание);
	
	Элементы.ДекорацияЗагрузкаИсправленийРасписание.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(Расписание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шаг получения и установки файлов обновлений.

&НаКлиенте
Процедура НачатьПолучениеОбновлений()
	
	ПлатформаУстановлена = Ложь;
	Если Не (ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект))
		И Не ОбновитьКонфигурацию
		И Не УстановитьИсправления Тогда
		// Обработка случая: устанавливается только платформа и платформа уже установлена.
		КаталогУстановкиПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
			ИнформацияОДоступномОбновлении.Платформа.Версия);
		ПлатформаУстановлена = (КаталогУстановкиПлатформы <> "");
	КонецЕсли;
	
	Если ПлатформаУстановлена Тогда
		ОтобразитьСтраницуНоваяВерсияПлатформыУжеУстановленаНаКомпьютере();
		
	ИначеЕсли ПолучениеОбновленияЗавершено(ЭтотОбъект) Тогда
		
		// Если по нажатию кнопки "Назад" был выполнен переход к шагу информации
		// о доступном обновлении, тогда возврат к шагу "Установка завершена".
		ОтобразитьПолучениеОбновленийЗавершено();
		Возврат;
		
	ИначеЕсли Не ИзмененЛогинПароль И Не ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		ОтобразитьПодключениеКПорталу();
		Возврат;
		
	ИначеЕсли ОписаниеФайловОбновлений <> Неопределено
		И ПустаяСтрока(ОписаниеФайловОбновлений.ИмяОшибки) Тогда
		
		// Описание загружаемых файлов уже успешно получено,
		// продолжить получение и установку обновлений.
		// Эта ветвь работает только при возникновении ошибки получения файлов
		// или если пользователь отменил установку платформы в интерактивном режиме.
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСообщениеСервиса
			И КонтекстОбновления <> Неопределено
			И КонтекстОбновления.Свойство("КодВозвратаПрограммыУстановки")
			И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаОграниченияСистемныхПолитик(
				КонтекстОбновления.КодВозвратаПрограммыУстановки)
			И РежимУстановкиПлатформы = 0 Тогда
			
			// Обход ошибки политик безопасности при установке с настройками по умолчанию (в "тихом" режиме).
			// Если возникла ошибка ограничения политик безопасности при установке в тихом режиме,
			// тогда выполнить установку в полном интерактивном режиме.
			РежимУстановкиПлатформы = 1;
			
		КонецЕсли;
		
		НачатьПолучениеИУстановкуОбновлений();
		
	Иначе
		
		// Если описание файлов обновлений еще не получено или
		// произошла ошибка при получении описания файлов, тогда
		// выполнить получение информации о файлах.
		
		// Получение информации о загружаемых файлах.
		Состояние(, , НСтр("ru = 'Подключение к сервису обновлений'"));
		
		Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
			Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
			
			ИнформацияОбновлениеКонфигурации = Неопределено;
			ИнформацияОбновлениеПлатформы    = ИнформацияОДоступномОбновлении.Платформа;
			
		Иначе
			
			ИнформацияОбновлениеКонфигурации = ?(
				ОбновитьКонфигурацию,
				ИнформацияОДоступномОбновлении.Конфигурация,
				Неопределено);
			
			ИнформацияОбновлениеПлатформы = ?(
				ОбновитьПлатформу,
				ИнформацияОДоступномОбновлении.Платформа,
				Неопределено);
			
		КонецЕсли;
		
		Если УстановитьИсправления Тогда
			ИдентификаторыПолучаемыхИсправлений =
				?(ОбновитьКонфигурацию, ВыбранныеИсправленияНоваяВерсия, ВыбранныеИсправленияТекущаяВерсия).ВыгрузитьЗначения();
			ПараметрыИсправлений = Новый Структура;
			ПараметрыИсправлений.Вставить("АдресИсправления", АдресИсправления);
			ПараметрыИсправлений.Вставить("ИдентификаторыПолучаемыхИсправлений", ИдентификаторыПолучаемыхИсправлений);
		Иначе
			ПараметрыИсправлений = Неопределено;
		КонецЕсли;
		
		ОписаниеФайловОбновлений = ОписаниеФайловОбновленийНаСервере(
			ИнформацияОбновлениеКонфигурации,
			ПараметрыИсправлений,
			ИнформацияОбновлениеПлатформы,
			Логин,
			Пароль,
			ИзмененЛогинПароль,
			ИнтернетПоддержкаПользователейКлиент.ПараметрыКлиента());
		Состояние();
		
		Если ПустаяСтрока(ОписаниеФайловОбновлений.ИмяОшибки) Тогда
			
			// Произошла успешная авторизация.
			ИзмененЛогинПароль = Ложь;
			Логин  = "";
			Пароль = "";
			
			// Начать процесс получения и установки обновлений.
			НачатьПолучениеИУстановкуОбновлений();
			
		Иначе
			
			// Обработка ошибки получения информации о доступных обновлениях.
			Если ЭтоОшибкаСоединения(ОписаниеФайловОбновлений.ИмяОшибки) Тогда
				
				ОтобразитьОшибкуПодключения(
					ОписаниеФайловОбновлений.Сообщение,
					ОписаниеФайловОбновлений.ИнформацияОбОшибке);
				
			ИначеЕсли ОписаниеФайловОбновлений.ИмяОшибки = "НеЗаполненыДанныеАутентификации" Тогда
				
				ОтобразитьПодключениеКПорталу();
				
			ИначеЕсли ОписаниеФайловОбновлений.ИмяОшибки = "LoginError" Тогда
				
				ОтобразитьПодключениеКПорталу(ОписаниеФайловОбновлений.Сообщение);
				
			Иначе
				
				ОтобразитьСообщениеСервиса(
					ОписаниеФайловОбновлений.Сообщение,
					НСтр("ru = 'Повторить попытку >'"),
					ОписаниеФайловОбновлений.ИнформацияОбОшибке);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеФайловОбновленийНаСервере(
	Знач ОбновлениеКомКонфигурации,
	Знач ПараметрыИсправления,
	Знач ОбновлениеПлатформы,
	Знач Логин,
	Знач Пароль,
	Знач СохранитьДанныеАутентификации,
	Знач ПараметрыКлиента)
	
	Если Не ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	Если ПараметрыИсправления = Неопределено Тогда
		ИдентификаторыПолучаемыхИсправлений = Неопределено;
		ИдентификаторыОтозванныхИсправлений = Неопределено;
	Иначе
		ИдентификаторыПолучаемыхИсправлений = ПараметрыИсправления.ИдентификаторыПолучаемыхИсправлений;
		ИдентификаторыОтозванныхИсправлений = Неопределено;
		Если Не ПустаяСтрока(ПараметрыИсправления.АдресИсправления) Тогда
			ИдентификаторыОтозванныхИсправлений = Новый Массив;
			ТаблицаИсправления = ПолучитьИзВременногоХранилища(ПараметрыИсправления.АдресИсправления);
			Строки = ТаблицаИсправления.НайтиСтроки(
				Новый Структура(?(ОбновлениеКомКонфигурации <> Неопределено, "ДляНовойВерсии", "ДляТекущейВерсии"), Истина));
			Для Каждого ТекущаяСтрока Из Строки Цикл
				Если ТекущаяСтрока.Отозвано Тогда
					ИдентификаторыОтозванныхИсправлений.Добавить(Строка(ТекущаяСтрока.Идентификатор));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СохранитьДанныеАутентификации Тогда
		
		Результат = ПолучениеОбновленийПрограммы.ОписаниеФайловОбновлений(
			ОбновлениеКомКонфигурации,
			ИдентификаторыПолучаемыхИсправлений,
			ОбновлениеПлатформы,
			Логин,
			Пароль,
			ПараметрыКлиента);
		
		Если ПустаяСтрока(Результат.ИмяОшибки) Тогда
			СохранитьДанныеАутентификации(Новый Структура("Логин, Пароль", Логин, Пароль));
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		СохраненныеДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если СохраненныеДанныеАутентификации = Неопределено Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяОшибки", "НеЗаполненыДанныеАутентификации");
			Возврат Результат;
		КонецЕсли;
		
		Результат = ПолучениеОбновленийПрограммы.ОписаниеФайловОбновлений(
			ОбновлениеКомКонфигурации,
			ИдентификаторыПолучаемыхИсправлений,
			ОбновлениеПлатформы,
			СохраненныеДанныеАутентификации.Логин,
			СохраненныеДанныеАутентификации.Пароль,
			ПараметрыКлиента);
		
	КонецЕсли;
	
	Результат.Вставить("ОтозванныеИсправления", ИдентификаторыОтозванныхИсправлений);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьДанныеАутентификации(Знач ДанныеАутентификации)
	
	// Проверка права записи данных.
	Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи данных аутентификации Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись данных.
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(ДанныеАутентификации);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеИУстановкуОбновлений()
	
	Если ЭтоФайловаяИБ Тогда
		
		// Старт фонового задания.
		НачатьПолучениеОбновленийВФоновомРежиме();
		Если КонтекстОбновления <> Неопределено Тогда
			
			// При возобновлении отобразить текущее состояние задания.
			ОтобразитьСостояниеКонтекстаОбновления();
			
			// Очистить результат получения и установки обновлений.
			// Будет вновь получен из фонового задания.
			КонтекстОбновления = Неопределено;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОтобразитьСостояниеЗадания", 1.0, Истина);
		
	Иначе
		
		// В клиент-серверном режиме выполняется только получение файлов
		// обновления конфигурации и исправлений (без платформы).
		// Получение файлов выполняется синхронно.
		Если КонтекстОбновления = Неопределено Тогда
			
			ПараметрыСозданияКонтекста = Новый Структура;
			ПараметрыСозданияКонтекста.Вставить("ОписаниеФайловОбновлений", ОписаниеФайловОбновлений);
			ПараметрыСозданияКонтекста.Вставить("КонтекстОбновления"      , КонтекстОбновления);
			ПараметрыСозданияКонтекста.Вставить("ОбновитьКонфигурацию"    , ОбновитьКонфигурацию);
			ПараметрыСозданияКонтекста.Вставить("УстановитьИсправления"   , УстановитьИсправления);
			ПараметрыСозданияКонтекста.Вставить("ОбновитьПлатформу"       , Ложь);
			КонтекстОбновления = ПолучениеОбновленийПрограммыКлиентСервер.НовыйКонтекстПолученияИУстановкиОбновлений(
				ПараметрыСозданияКонтекста);
			
		Иначе
			
			// Сброс состояния ошибки.
			КонтекстОбновления.Вставить("ИмяОшибки"         , "");
			КонтекстОбновления.Вставить("Сообщение"         , "");
			КонтекстОбновления.Вставить("ИнформацияОбОшибке", "");
			
		КонецЕсли;
		
		ИнициализироватьСтраницуПолучениеОбновления();
		ОтобразитьСостояниеКонтекстаОбновления();
		
		// Выполняется в обработчике ожидания с минимальным интервалом,
		// чтобы мог быть обновлен интерфейс помощника и отобразилась
		// страница шага получения обновления.
		ПодключитьОбработчикОжидания("ИтерацияПолученияФайловОбновления", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтерацияПолученияФайловОбновления()
	
	Если КонтекстОбновления.Свойство("ИндексТекущегоОбновления") Тогда
		ИндексТекущегоОбновления  = КонтекстОбновления.ИндексТекущегоОбновления;
	Иначе
		ИндексТекущегоОбновления  = 0;
	КонецЕсли;
	
	Если КонтекстОбновления.Свойство("ИндексТекущегоИсправления") Тогда
		ИндексТекущегоИсправления = КонтекстОбновления.ИндексТекущегоИсправления;
	Иначе
		ИндексТекущегоИсправления = 0;
	КонецЕсли;
	
	Если КонтекстОбновления.Свойство("ОбъемПолученныхФайлов") Тогда
		ОбъемПолученныхФайлов = КонтекстОбновления.ОбъемПолученныхФайлов;
	Иначе
		ОбъемПолученныхФайлов     = 0;
	КонецЕсли;
	
	Для Итератор = ИндексТекущегоОбновления По КонтекстОбновления.ОбновленияКонфигурации.ВГраница() Цикл
		
		ТекОбновление = КонтекстОбновления.ОбновленияКонфигурации[Итератор];
		
		ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение обновления конфигурации.
					|URL: %1;
					|Размер: %2;
					|Формат файла обновления: %3;
					|Контрольная сумма файла обновления: %4;
					|Каталог дистрибутива: %5;
					|Выполнить обработчики обновления: %6;
					|Имя файла обновления (cfu): %7.'"),
				ТекОбновление.URLФайлаОбновления,
				ТекОбновление.РазмерФайла,
				ТекОбновление.ФорматФайлаОбновления,
				ТекОбновление.КонтрольнаяСумма,
				ТекОбновление.КаталогДистрибутива,
				ТекОбновление.ПрименитьОбработчикиОбновления,
				ТекОбновление.ОтносительныйПутьCFUФайла));
		
		Если Не ПолучениеОбновленийПрограммыКлиентСервер.ОбновлениеКонфигурацииПолучено(ТекОбновление, КонтекстОбновления) Тогда
			
			КонтекстОбновления.ТекущееДействие =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Получение файла %1 из %2'"),
					Строка(Итератор + 1),
					КонтекстОбновления.КоличествоФайлов);
			КонтекстОбновления.Прогресс = 100 * (ОбъемПолученныхФайлов / КонтекстОбновления.ОбъемФайлов);
			ОтобразитьСостояниеКонтекстаОбновления();
			
			КонтекстОбновления.Вставить("ИндексТекущегоОбновления", Итератор);
			КонтекстОбновления.Вставить("ОбъемПолученныхФайлов"   , ОбъемПолученныхФайлов);
			
			ПодключитьОбработчикОжидания("ЗагрузитьОбновлениеКонфигурации", 0.1, Истина);
			Возврат;
			
		Иначе
			
			ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Обновление конфигурации уже было получено ранее.'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если не произошло возврата, все файлы обновления конфигурации уже загружены,
	// далее загружаются файлы исправлений.
	Для Итератор = ИндексТекущегоИсправления По КонтекстОбновления.Исправления.ВГраница() Цикл
		
		КонтекстОбновления.ТекущееДействие =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла %1 из %2'"),
				Строка(КонтекстОбновления.КоличествоОбновленийКонфигурации + Итератор + 1),
				КонтекстОбновления.КоличествоФайлов);
		КонтекстОбновления.Прогресс = 100 * (ОбъемПолученныхФайлов / КонтекстОбновления.ОбъемФайлов);
		ОтобразитьСостояниеКонтекстаОбновления();
		
		КонтекстОбновления.Вставить("ИндексТекущегоИсправления", Итератор);
		КонтекстОбновления.Вставить("ОбъемПолученныхФайлов"    , ОбъемПолученныхФайлов);
		
		ПодключитьОбработчикОжидания("ЗагрузитьИсправление", 0.1, Истина);
		Возврат;
		
	КонецЦикла;
	
	// Если не произошел переход на новую итерацию загрузки файлов,
	// тогда все файлы успешно получены.
	Если ОбновитьКонфигурацию Тогда
		
		ОтобразитьПолучениеОбновленийЗавершено(Истина);
		
	Иначе
		
		// Если устанавливаются только исправления,
		// тогда установить исправления.
		КонтекстОбновления.ТекущееДействие = НСтр("ru = 'Установка исправлений'");
		КонтекстОбновления.Прогресс = 100;
		ОтобразитьСостояниеКонтекстаОбновления();
		
		ПодключитьОбработчикОжидания("УстановитьУдалитьИсправления", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУдалитьИсправления()
	
	ИсправленияДляУстановки = Новый Массив;
	Для Каждого ТекИсправление Из КонтекстОбновления.Исправления Цикл
		ОписаниеИсправления = Новый Структура;
		ОписаниеИсправления.Вставить("Имя",           ТекИсправление.Имя);
		ОписаниеИсправления.Вставить("АдресФайла",    ТекИсправление.АдресФайла);
		ОписаниеИсправления.Вставить("Идентификатор", ТекИсправление.Идентификатор);
		ИсправленияДляУстановки.Добавить(ОписаниеИсправления);
	КонецЦикла;
	
	РезультатУстановки = УстановитьУдалитьИсправленияНаСервере(
		ИсправленияДляУстановки,
		КонтекстОбновления.ОтозванныеИсправления);
	
	Если Не РезультатУстановки.Ошибка Тогда
		ОтобразитьПолучениеОбновленийЗавершено(Истина);
	Иначе
		ЗаполнитьЗначенияСвойств(КонтекстОбновления, РезультатУстановки);
		КонтекстОбновления.ИмяОшибки = "ОшибкаУстановкиИсправлений";
		ОтобразитьВнутреннююОшибку(
			КонтекстОбновления.Сообщение,
			Неопределено,
			КонтекстОбновления.ИнформацияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьУдалитьИсправленияНаСервере(Знач ИсправленияДляУстановки, Знач ОтозванныеИсправления)
	
	Если Не ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для установки исправлений (патчей).'");
	КонецЕсли;
	
	Возврат ПолучениеОбновленийПрограммы.УстановкаИУдалениеИсправлений(
		ИсправленияДляУстановки,
		ОтозванныеИсправления);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьОбновлениеКонфигурации()
	
	Обновление = КонтекстОбновления.ОбновленияКонфигурации[КонтекстОбновления.ИндексТекущегоОбновления];
	ПолучениеОбновленийПрограммыКлиентСервер.СоздатьКаталогиДляПолученияОбновления(Обновление, КонтекстОбновления);
	Если Не ПустаяСтрока(КонтекстОбновления.ИмяОшибки) Тогда
		ОтобразитьВнутреннююОшибку(
			КонтекстОбновления.Сообщение,
			Неопределено,
			КонтекстОбновления.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файла обновления конфигурации %1 (выполняется на сервере информационной базы).'"),
			Обновление.ИмяПолученногоФайла));
	
	РезультатПолучения = ПолучитьФайлОбновленияНаСервере(Обновление.URLФайлаОбновления);
	
	Если ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(
			Новый ОписаниеПередаваемогоФайла(Обновление.ИмяПолученногоФайла, РезультатПолучения.АдресФайла));
		// Исправление отложено до новой редакции.
		//@skip-warning
		НачатьПолучениеФайлов(
			Новый ОписаниеОповещения("ПриПолученииФайлаОбновленияКонфигурации",
				ЭтотОбъект,
				РезультатПолучения),
			ПолучаемыеФайлы,
			,
			Ложь);
	Иначе
		ПриПолученииФайлаОбновленияКонфигурации(Неопределено, РезультатПолучения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИсправление()
	
	Исправление = КонтекстОбновления.Исправления[КонтекстОбновления.ИндексТекущегоИсправления];
	ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение файла исправления (патча).
				|URL: %1;
				|Идентификатор: %2;
				|Размер: %3;
				|Локальный файл: %4.'"),
			Исправление.URLФайла,
			Исправление.Идентификатор,
			Исправление.Размер,
			Исправление.ИмяПолученногоФайла));
	
	Если Исправление.Получено Тогда
		// Загрузить файл исправления во временное хранилище
		// для последующей установки.
		ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Исправление (патч) уже было получено ранее.'"));
		ОбработчикПриПомещении = Новый ОписаниеОповещения("ПриПомещенииФайлаИсправления", ЭтотОбъект, Исправление);
		// Исправление отложено до новой редакции.
		//@skip-warning
		НачатьПомещениеФайла(
			ОбработчикПриПомещении,
			,
			Исправление.ИмяПолученногоФайла,
			Ложь,
			?(ОбновитьКонфигурацию, Новый УникальныйИдентификатор, ЭтотОбъект.УникальныйИдентификатор));
		Возврат;
	КонецЕсли;
	
	// Если устанавливаются только исправления, тогда файл должен
	// остаться во временном хранилище формы, поэтому передается
	// идентификатор формы.
	// При обновлении конфигурации файл должен быть доступен во временном хранилище
	// и после закрытия формы, т.к. файлы будут переданы в программный
	// интерфейс установщика обновлений, поэтому используется Новый УникальныйИдентификатор.
	РезультатПолучения = ПолучитьФайлИсправленияНаСервере(
		Исправление.URLФайла,
		Исправление.Идентификатор,
		?(ОбновитьКонфигурацию,
			Новый УникальныйИдентификатор,
			ЭтотОбъект.УникальныйИдентификатор));
	
	Если ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(
			Новый ОписаниеПередаваемогоФайла(Исправление.ИмяПолученногоФайла, РезультатПолучения.АдресФайла));
		// Исправление отложено до новой редакции.
		//@skip-warning
		НачатьПолучениеФайлов(
			Новый ОписаниеОповещения("ПриПолученииФайлаИсправления",
				ЭтотОбъект,
				РезультатПолучения),
			ПолучаемыеФайлы,
			,
			Ложь);
		
	Иначе
		
		ПриПолученииФайлаИсправления(Неопределено, РезультатПолучения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПомещенииФайлаИсправления(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Исправление = КонтекстОбновления.Исправления[КонтекстОбновления.ИндексТекущегоИсправления];
	Исправление.Вставить("АдресФайла", Адрес);
	
	// Увеличить счетчик файлов.
	КонтекстОбновления.ИндексТекущегоИсправления = КонтекстОбновления.ИндексТекущегоИсправления + 1;
	КонтекстОбновления.ОбъемПолученныхФайлов     = КонтекстОбновления.ОбъемПолученныхФайлов + Исправление.Размер;
	
	// Перейти на следующую итерацию получения обновления.
	ПодключитьОбработчикОжидания("ИтерацияПолученияФайловОбновления", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииФайлаОбновленияКонфигурации(ПолученныеФайлы, РезультатПолучения) Экспорт
	
	Обновление = КонтекстОбновления.ОбновленияКонфигурации[КонтекстОбновления.ИндексТекущегоОбновления];
	Если ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Файл обновления успешно загружен.'"));
		
		ПолучениеОбновленийПрограммыКлиентСервер.ЗавершитьПолучениеОбновления(Обновление, КонтекстОбновления);
		Если Не ПустаяСтрока(КонтекстОбновления.ИмяОшибки) Тогда
			ОтобразитьВнутреннююОшибку(
				КонтекстОбновления.Сообщение,
				Неопределено,
				КонтекстОбновления.ИнформацияОбОшибке);
			Возврат;
		КонецЕсли;
		
		// Увеличить счетчик файлов.
		КонтекстОбновления.ИндексТекущегоОбновления = КонтекстОбновления.ИндексТекущегоОбновления + 1;
		КонтекстОбновления.ОбъемПолученныхФайлов    = КонтекстОбновления.ОбъемПолученныхФайлов + Обновление.РазмерФайла;
		
		// Перейти на следующую итерацию получения обновления.
		ПодключитьОбработчикОжидания("ИтерацияПолученияФайловОбновления", 0.1, Истина);
		Возврат;
		
	КонецЕсли;
	
	// При ошибке получения файла.
	Если РезультатПолучения.КодОшибки = "НеЗаполненыДанныеАутентификации" Тогда
		ОтобразитьПодключениеКПорталу();
		Возврат;
	КонецЕсли;
	
	// При ошибке получения файла.
	
	СообщениеЖурнала =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении файла дистрибутива конфигурации (%1). %2'"),
			Обновление.URLФайлаОбновления,
			РезультатПолучения.ИнформацияОбОшибке);
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
	
	КонтекстОбновления.ИмяОшибки = РезультатПолучения.КодОшибки;
	КонтекстОбновления.ИнформацияОбОшибке = СообщениеЖурнала;
	КонтекстОбновления.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при получении файла дистрибутива конфигурации. %1'"),
		РезультатПолучения.СообщениеОбОшибке);
	
	Если ЭтоОшибкаСоединения(КонтекстОбновления.ИмяОшибки) Тогда
		ОтобразитьОшибкуПодключения(
			КонтекстОбновления.Сообщение,
			СообщениеЖурнала);
	Иначе
		ОтобразитьВнутреннююОшибку(
			КонтекстОбновления.Сообщение,
			Неопределено,
			СообщениеЖурнала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииФайлаИсправления(ПолученныеФайлы, РезультатПолучения) Экспорт
	
	Исправление = КонтекстОбновления.Исправления[КонтекстОбновления.ИндексТекущегоИсправления];
	Если ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		ПолучениеОбновленийПрограммыКлиент.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Файл исправления (патча) успешно загружен.'"));
		
		Исправление.Вставить("АдресФайла", РезультатПолучения.АдресФайла);
		
		// Увеличить счетчик файлов.
		КонтекстОбновления.ИндексТекущегоИсправления = КонтекстОбновления.ИндексТекущегоИсправления + 1;
		КонтекстОбновления.ОбъемПолученныхФайлов     = КонтекстОбновления.ОбъемПолученныхФайлов + Исправление.Размер;
		
		// Перейти на следующую итерацию получения обновления.
		ПодключитьОбработчикОжидания("ИтерацияПолученияФайловОбновления", 0.1, Истина);
		Возврат;
		
	КонецЕсли;
	
	// При ошибке получения файла.
	Если РезультатПолучения.КодОшибки = "НеЗаполненыДанныеАутентификации" Тогда
		ОтобразитьПодключениеКПорталу();
		Возврат;
	КонецЕсли;
	
	// При ошибке получения файла.
	СообщениеЖурнала =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении файла исправления (патча) (%1). %2'"),
			Исправление.URLФайла,
			РезультатПолучения.ПодробноеОписаниеОшибки);
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
	
	КонтекстОбновления.ИмяОшибки = РезультатПолучения.КодОшибки;
	КонтекстОбновления.ИнформацияОбОшибке = СообщениеЖурнала;
	КонтекстОбновления.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при получении файла исправления (патча). %1'"),
		РезультатПолучения.КраткоеОписаниеОшибки);
	
	Если ЭтоОшибкаСоединения(КонтекстОбновления.ИмяОшибки) Тогда
		ОтобразитьОшибкуПодключения(
			КонтекстОбновления.Сообщение,
			СообщениеЖурнала);
	Иначе
		ОтобразитьВнутреннююОшибку(
			КонтекстОбновления.Сообщение,
			Неопределено,
			СообщениеЖурнала);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлОбновленияНаСервере(Знач URLФайла)
	
	ИнтернетПоддержкаПользователей.ПроверитьURL(URLФайла);
	
	Если Не ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации = Неопределено Тогда
		РезультатПолучения = Новый Структура;
		РезультатПолучения.Вставить("КодОшибки", "НеЗаполненыДанныеАутентификации");
		Возврат РезультатПолучения;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ФорматОтвета, Таймаут", 2, 43200);
	РезультатПолучения = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLФайла,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ДопПараметры);
	
	Если ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		АдресФайла = ПоместитьВоВременноеХранилище(РезультатПолучения.Содержимое);
		РезультатПолучения.Вставить("АдресФайла", АдресФайла);
		Если РезультатПолучения.Свойство("Содержимое") Тогда
			РезультатПолучения.Удалить("Содержимое");
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПолучения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлИсправленияНаСервере(Знач URLФайла, Знач ИдентификаторИсправления, Знач ИдентификаторФормы)
	
	ИнтернетПоддержкаПользователей.ПроверитьURL(URLФайла);
	
	Если Не ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации = Неопределено Тогда
		РезультатПолучения = Новый Структура;
		РезультатПолучения.Вставить("КодОшибки", "НеЗаполненыДанныеАутентификации");
		Возврат РезультатПолучения;
	КонецЕсли;
	
	РезультатПолучения = ПолучениеОбновленийПрограммы.ЗагрузитьФайлИсправления(
		URLФайла,
		ИдентификаторИсправления,
		ДанныеАутентификации);
	
	Если РезультатПолучения.Ошибка Тогда
		РезультатПолучения.Вставить("КодОшибки", "PatchFileDownloadError");
	Иначе
		РезультатПолучения.Вставить("КодОшибки", "");
		АдресФайла = ПоместитьВоВременноеХранилище(РезультатПолучения.Содержимое, ИдентификаторФормы);
		РезультатПолучения.Вставить("АдресФайла", АдресФайла);
		РезультатПолучения.Удалить("Содержимое");
	КонецЕсли;
	
	Возврат РезультатПолучения;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСтраницуПолучениеОбновления()
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		// Сценарий перехода на новую версию платформы.
		Элементы.ДекорацияПолучениеДистрибутива.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется получение файла дистрибутива платформы 1С:Предприятие (%1).'") + " "
					+ НСтр("ru = 'Получение файла может занять от нескольких минут до нескольких часов в зависимости от размера обновления,'") + " "
					+ НСтр("ru = 'скорости подключения к Интернету и производительности компьютера.'"),
				РазмерОбновленияСтр(ЭтотОбъект));
	Иначе
		// Другие сценарии.
		Элементы.ДекорацияПолучениеДистрибутива.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется получение файлов обновления (%1). Получение файлов может занять от нескольких минут до'")
					+ " " + НСтр("ru = 'нескольких часов в зависимости от размера обновления,'")
					+ " " + НСтр("ru = 'скорости подключения к Интернету и производительности компьютера.'"),
				РазмерОбновленияСтр(ЭтотОбъект));
	КонецЕсли;
	
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаПолучениеИУстановка);
	Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаПолучение;
	
	Элементы.КнопкаНазад.Доступность  = Ложь;
	Элементы.КнопкаДалее.Доступность  = Ложь;
	Элементы.КнопкаОтмена.Видимость   = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок  = НСтр("ru = 'Далее >'");
	Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеОбновленийВФоновомРежиме()
	
	// Эта ветвь сценария может отрабатывать только в файловом режиме работы.
	Если Не ЭтоФайловаяИБ Или Не ЭтоАдминистраторСистемы Тогда
		ВызватьИсключение НСтр("ru = 'Использование обновления платформы 1С:Предприятие недоступно в текущем режиме работы.'");
	КонецЕсли;
	
	// Сохранение настроек установки платформы.
	НастройкиОбновления = ПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
	НастройкиОбновления.РежимУстановки = РежимУстановкиПлатформы;
	Если Не СохранятьДистрибутивыПлатформыВКаталог Тогда
		НастройкиОбновления.КаталогДистрибутивовПлатформы = Неопределено;
	ИначеЕсли КаталогСохраненияПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы() Тогда
		НастройкиОбновления.КаталогДистрибутивовПлатформы = "";
	Иначе
		НастройкиОбновления.КаталогДистрибутивовПлатформы = КаталогСохраненияПлатформы;
	КонецЕсли;
	ПолучениеОбновленийПрограммы.ЗаписатьНастройкиАвтоматическогоОбновления(
		НастройкиОбновления);
	
	// Запуск фонового задания для получения и установки обновлений.
	ПараметрыПроцедуры = Новый Структура;
	Если Не СохранятьДистрибутивыПлатформыВКаталог Тогда
		ПараметрыПроцедуры.Вставить("КаталогХраненияДистрибутивовПлатформы", Неопределено);
	Иначе
		ПараметрыПроцедуры.Вставить("КаталогХраненияДистрибутивовПлатформы", КаталогСохраненияПлатформы);
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("РежимУстановкиПлатформы", РежимУстановкиПлатформы);
	
	ПараметрыПроцедуры.Вставить("ОписаниеФайловОбновлений", ОписаниеФайловОбновлений);
	ПараметрыПроцедуры.Вставить("КонтекстОбновления"      , КонтекстОбновления);
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект) Тогда
		ПараметрыПроцедуры.Вставить("ОбновитьКонфигурацию" , Ложь);
		ПараметрыПроцедуры.Вставить("УстановитьИсправления", Ложь);
		ПараметрыПроцедуры.Вставить("ОбновитьПлатформу"    , Истина);
	Иначе
		ПараметрыПроцедуры.Вставить("ОбновитьКонфигурацию" , ОбновитьКонфигурацию);
		ПараметрыПроцедуры.Вставить("УстановитьИсправления", УстановитьИсправления);
		ПараметрыПроцедуры.Вставить("ОбновитьПлатформу"    , ОбновитьПлатформу);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение   = 0;
	ПараметрыВыполнения.КлючФоновогоЗадания = "ПолучениеИУстановкаОбновленийПрограммы_"
		+ Строка(Новый УникальныйИдентификатор);
	
	Попытка
		
		РезультатНачалаЗадания = ДлительныеОперации.ВыполнитьВФоне(
			"ПолучениеОбновленийПрограммы.ЗагрузитьИУстановитьОбновленияВФоновомРежиме",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
		Если РезультатНачалаЗадания.Статус = "Отменено" Тогда
			ВызватьИсключение НСтр("ru = 'Задание отменено администратором.'");
		ИначеЕсли РезультатНачалаЗадания.Статус = "Ошибка" Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить фоновое задание. %1'"),
				РезультатНачалаЗадания.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		
	Исключение
		
		СообщениеЖурналаРегистрации =
			НСтр("ru = 'Ошибка запуска задания.'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурналаРегистрации);
		
		ОтобразитьВнутреннююОшибку(НСтр("ru = 'Ошибка начала задания.'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			Неопределено,
			СообщениеЖурналаРегистрации);
		Возврат;
		
	КонецПопытки;
	
	ИДФоновогоЗадания = РезультатНачалаЗадания.ИдентификаторЗадания;
	
	Если КонтекстОбновления = Неопределено Тогда
		Прогресс = 0;
		ТекущееДействие = НСтр("ru = 'Подготовка к получению обновления...'");
	КонецЕсли;
	
	// Отобразить страницу Получение и установка.
	ИнициализироватьСтраницуПолучениеОбновления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеКонтекстаОбновления()
	
	Если КонтекстОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстОбновления.Свойство("ТекущееДействие") Тогда
		ТекущееДействие = КонтекстОбновления.ТекущееДействие;
	КонецЕсли;
	
	Если КонтекстОбновления.Свойство("Прогресс") Тогда
		Прогресс = КонтекстОбновления.Прогресс;
	КонецЕсли;
	
	Если КонтекстОбновления.Свойство("ФайлыОбновленияПолучены") Тогда
		
		Если Не КонтекстОбновления.ФайлыОбновленияПолучены Тогда
			
			Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаПолучение;
			
		ИначеЕсли КонтекстОбновления.ОбновитьПлатформу Тогда
			// Если файлы обновления получены и необходимо установить платформу,
			// тогда отображается состояние установки платформы 1С:Предприятие.
			
			Если РежимУстановкиПлатформы = 0 Тогда
				Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаУстановкаТихий;
				Элементы.КнопкаОтмена.Доступность                   = Ложь;
			Иначе
				Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаУстановкаИнтерактивный;
				Элементы.КнопкаОтмена.Доступность                   = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеЗадания()
	
	Завершено = Ложь;
	ОписательСостояния = СостояниеЗадания(ИДФоновогоЗадания);
	Если ОписательСостояния <> Неопределено Тогда
		
		Если ОписательСостояния.Свойство("ДопПараметры")
			И ОписательСостояния.ДопПараметры <> Неопределено Тогда
			КонтекстОбновления = ОписательСостояния.ДопПараметры;
		КонецЕсли;
		
		// Ошибка, Установка, УстановкаОтменена, Завершено.
		Если ОписательСостояния.КодСостояния = "Ошибка" Тогда
			
			Завершено = Истина;
			СообщениеЖурналаРегистрации = Неопределено;
			КонтекстОбновления.Свойство(
				"ИнформацияОбОшибке",
				СообщениеЖурналаРегистрации);
			
			Если ЭтоОшибкаСоединения(КонтекстОбновления.ИмяОшибки) Тогда
				ОтобразитьОшибкуПодключения(
					КонтекстОбновления.Сообщение,
					СообщениеЖурналаРегистрации);
			ИначеЕсли КонтекстОбновления.ИмяОшибки = "НеЗаполненыДанныеАутентификации" Тогда
				ОтобразитьПодключениеКПорталу();
			Иначе
				Если РежимУстановкиПлатформы = 0
					И КонтекстОбновления.Свойство("КодВозвратаПрограммыУстановки")
					И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаОграниченияСистемныхПолитик(
						КонтекстОбновления.КодВозвратаПрограммыУстановки) Тогда
					ОтобразитьВнутреннююОшибку(
						КонтекстОбновления.Сообщение,
						НСтр("ru = 'Установить с ручными настройками >'"),
						СообщениеЖурналаРегистрации);
				Иначе
					ОтобразитьВнутреннююОшибку(
						КонтекстОбновления.Сообщение,
						Неопределено,
						СообщениеЖурналаРегистрации);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ОписательСостояния.КодСостояния = "УстановкаПлатформыОтменена" Тогда
			
			Завершено = Истина;
			ОтобразитьИнформациюОДоступномОбновлении();
			
		ИначеЕсли ОписательСостояния.КодСостояния = "Завершено" Тогда
			
			Завершено = Истина;
			ОтобразитьПолучениеОбновленийЗавершено(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Завершено Тогда
		ИДФоновогоЗадания = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Иначе
		ОтобразитьСостояниеКонтекстаОбновления();
		ПодключитьОбработчикОжидания("ОтобразитьСостояниеЗадания", 1.0, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеЗадания(Знач ИДЗадания)
	
	Результат = Новый Структура("КодСостояния, Сообщение", "", "");
	
	Попытка
		ДлительныеОперации.ЗаданиеВыполнено(ИДЗадания);
	Исключение
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке состояния задания. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Результат.КодСостояния = "Ошибка";
		ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке состояния задания. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат.Вставить(
			"ДопПараметры",
			Новый Структура("Сообщение, ИнформацияОбОшибке, ИмяОшибки",
				ТекстСообщенияПользователю,
				СообщениеЖурнала,
				"НеУдалосьПроверитьСостояниеЗадания"));
		
		Возврат Результат;
		
	КонецПопытки;
	
	ОписательСостояния = ДлительныеОперации.ПрочитатьПрогресс(ИДЗадания);
	Если ОписательСостояния <> Неопределено Тогда
		Результат.Сообщение = ОписательСостояния.Текст;
		Для каждого КлючЗначение Из ОписательСостояния.ДополнительныеПараметры Цикл
			Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИДЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИДЗадания);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазмерОбновленияСтр(ФормаПомощника)
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ФормаПомощника)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ФормаПомощника) Тогда
		
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(
			ФормаПомощника.ИнформацияОДоступномОбновлении.Платформа.РазмерОбновления);
		
	Иначе
		
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(
			?(ФормаПомощника.ОбновитьКонфигурацию,
				ФормаПомощника.ИнформацияОДоступномОбновлении.Конфигурация.РазмерОбновления,
				0)
			+ ?(ФормаПомощника.УстановитьИсправления,
				ФормаПомощника.РазмерВыбранныхИсправлений,
				0)
			+ ?(ФормаПомощника.ОбновитьПлатформу,
				ФормаПомощника.ИнформацияОДоступномОбновлении.Платформа.РазмерОбновления,
				0));
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Остальные шаги помощника.

&НаСервере
Процедура ОтобразитьВнутреннююОшибку(СообщениеОбОшибке, ЗаголовокКнопкиДалее = Неопределено, ПодробноеОписаниеВнутрОшибки = "")
	
	ОтобразитьСообщениеСервиса(СообщениеОбОшибке, ЗаголовокКнопкиДалее, ПодробноеОписаниеВнутрОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПодключениеКПорталу(Сообщение = "")
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПодключениеКПорталу Тогда
		ЗаполнитьДанныеДляПодключения();
	КонецЕсли;
	
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаПодключениеКПорталу);
	Если ПустаяСтрока(Сообщение) Тогда
		Элементы.ПанельОшибкаПодключения.Видимость = Ложь;
	Иначе
		Элементы.ПанельОшибкаПодключения.Видимость = Истина;
		Элементы.ДекорацияСообщениеОбОшибкеПолученияОбновления.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(Сообщение);
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = Истина;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru = 'Далее >'");
	Элементы.КнопкаОтмена.Видимость   = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляПодключения()
	
	Если Не ПолучениеОбновленийПрограммы.ЭтоАдминистраторСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		Логин  = "";
		Пароль = "";
	Иначе
		Логин  = ДанныеАутентификации.Логин;
		Пароль = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСообщениеСервиса(Сообщение, ЗаголовокКнопкиДалее, ПодробноеОписаниеВнутрОшибки = "")
	
	ПодробноеОписаниеОшибки = ПодробноеОписаниеВнутрОшибки;
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаСообщениеСервиса);
	
	Если ВРег(Лев(Сообщение, 6)) <> "<BODY>" Тогда
		// Отобразить ссылку для перехода в журнал регистрации.
		ПредставлениеHTML =
			ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
				"<body>" + СтрЗаменить(Сообщение, Символы.ПС, "<br />")
				+ "<br />"
				+ "<br />" + НСтр("ru = 'Технические подробности см. в <a href=""open:log"" >журнале регистрации</a>.'")
				+ ?(ДоступнаОтправкаСообщенийТехПоддержке,
					"<br /><br />" + НСтр("ru = 'При возникновении проблем напишите в <a href=""mailto:webits-info@1c.ru"">техподдержку</a>.'"),
					"")
				+ "</body>",
				ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП);
		Элементы.ДекорацияСообщениеСервиса.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(ПредставлениеHTML);
	Иначе
		Элементы.ДекорацияСообщениеСервиса.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(Сообщение);
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность =
		(ИнформацияОДоступномОбновлении <> Неопределено И ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки));
	Элементы.КнопкаОтмена.Видимость   = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
	
	Если ЗаголовокКнопкиДалее = Неопределено Тогда
		Элементы.КнопкаДалее.Доступность  = Ложь;
		Элементы.КнопкаДалее.Заголовок  = НСтр("ru = 'Далее >'");
	Иначе
		Элементы.КнопкаДалее.Доступность  = Истина;
		Элементы.КнопкаДалее.Заголовок  = ЗаголовокКнопкиДалее;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкуПодключения(Сообщение, ОписаниеОшибкиПодключения)
	
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаНеУдалосьПодключитьсяКСервису);
	
	ПодробноеОписаниеОшибки = ОписаниеОшибкиПодключения;
	Если ПустаяСтрока(Сообщение) Тогда
		Элементы.ДекорацияОшибкаПодключения.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияОшибкаПодключения.Видимость = Истина;
		Элементы.ДекорацияОшибкаПодключения.Заголовок = Сообщение;
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность =
		(ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки)
		Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект));
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru = 'Повторить попытку подключения >'");
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Видимость   = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПолучениеОбновленийЗавершено(Инициализировать = Ложь)
	
	Если Не ОбновитьКонфигурацию Тогда
		
		// Отобразить завершение установки исправлений и/или платформы.
		ОтобразитьПолучениеОбновленийЗавершеноНаСервере(Инициализировать);
		
	Иначе
		
		Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаПолучениеЗавершено;
		Прогресс        = 100;
		ТекущееДействие = "";
		
		Если ПараметрыАдминистрирования = Неопределено Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияПараметровАдминистрирования", ЭтотОбъект, Инициализировать);
			ЗаголовокФормы = НСтр("ru = 'Установка обновления'");
			Если ЭтоФайловаяИБ Тогда
				ПоясняющаяНадпись = НСтр("ru = 'Для установки обновления необходимо ввести
					|параметры администрирования информационной базы'");
				ЗапрашиватьПараметрыАдминистрированияКластера = Ложь;
			Иначе
				ПоясняющаяНадпись = НСтр("ru = 'Для установки обновления необходимо ввести параметры
					|администрирования кластера серверов и информационной базы'");
				ЗапрашиватьПараметрыАдминистрированияКластера = Истина;
			КонецЕсли;
			
			СоединенияИБКлиент.ПоказатьПараметрыАдминистрирования(
				ОписаниеОповещения,
				Истина,
				ЗапрашиватьПараметрыАдминистрированияКластера,
				ПараметрыАдминистрирования,
				ЗаголовокФормы,
				ПоясняющаяНадпись);
			
		Иначе
			
			ПослеПолученияПараметровАдминистрирования(ПараметрыАдминистрирования, Инициализировать);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПараметровАдминистрирования(Результат, Инициализировать) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыАдминистрирования = Результат;
		УстановитьПарольАдминистратора(ПараметрыАдминистрирования);
		ОтобразитьПолучениеОбновленийЗавершеноНаСервере(Инициализировать);
		
		Если Инициализировать
			И Элементы.Страницы.ТекущаяСтраница = Элементы.ВыборРежимаОбновленияФайловыйРежим Тогда
			Элементы.НадписьРезервнаяКопияФайл.Заголовок =
				ОбновлениеКонфигурацииКлиент.ЗаголовокСозданияРезервнойКопии(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Для установки обновления необходимо ввести параметры администрирования.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить обновление программы, т.к. не были введены
			|корректные параметры администрирования информационной базы.'");
		ПолучениеОбновленийПрограммыКлиент.ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
		
		ОтобразитьВнутреннююОшибку(
			НСтр("ru = 'Не удалось установить обновление программы, т.к. не были введены
				|корректные параметры администрирования информационной базы.</body>'"),
				,
				ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПолучениеОбновленийЗавершеноНаСервере(Знач Инициализировать)
	
	Если ЭтоСценарийПереходаНаНовуюВерсиюПлатформы(ЭтотОбъект)
			Или ЭтоСценарийСообщениеОНерекомендуемойВерсииПлатформы(ЭтотОбъект)
			Или (Не ОбновитьКонфигурацию И ОбновитьПлатформу) Тогда
		
		// Завершено обновление платформы, "Не ОбновитьКонфигурацию" означает,
		// что обновлена только платформа и исправления.
		
		ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаУстановкаПлатформыЗавершена);
		
		ШаблонЗаголовка = НСтр("ru = '<body>Установлена версия: <b>%1</b>
			|<br />Дистрибутив платформы скопирован в каталог <a href=""open:DistribFolder"">%2</a></body>'");
		
		УстановленнаяВерсияПлатформы = ИнформацияОДоступномОбновлении.Платформа.Версия;
		КаталогУстановкиПлатформы =
			ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(УстановленнаяВерсияПлатформы);
		
		Элементы.ДекорацияИнформацияУстановкаЗавершена.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонЗаголовка,
					УстановленнаяВерсияПлатформы,
					КонтекстОбновления.КаталогДистрибутиваПлатформы));
		
		Если ПустаяСтрока(Элементы.ДекорацияСтрЗавершеноСоздатьРК.Заголовок) Тогда
			Элементы.ДекорацияСтрЗавершеноСоздатьРК.Заголовок =
				ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Истина);
		КонецЕсли;
		
		Если ПустаяСтрока(Элементы.ДекорацияСтрЗавершеноНеСоздаватьРК.Заголовок) Тогда
			Элементы.ДекорацияСтрЗавершеноНеСоздаватьРК.Заголовок =
				ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Ложь);
		КонецЕсли;
		
		Если СоздатьРезервнуюКопию Тогда
			Элементы.СтраницыИнструкцияУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноСоздатьРК;
		Иначе
			Элементы.СтраницыИнструкцияУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноНеСоздаватьРК;
		КонецЕсли;
		
		Элементы.КнопкаНазад.Доступность  = Истина;
		Элементы.КнопкаДалее.Доступность  = Истина;
		Элементы.КнопкаОтмена.Видимость   = Истина;
		Элементы.КнопкаОтмена.Доступность = Истина;
		Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
		Элементы.КнопкаДалее.Заголовок  = НСтр("ru = 'Готово'");
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		
	ИначеЕсли Не ОбновитьКонфигурацию Тогда
		
		// Установлены только исправления.
		ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаУстановленыИсправления);
		
		// Соединения.ЗавершениеРаботыПользователей
		СоединенияИнфо = СоединенияИБ.ИнформацияОСоединениях(Ложь);
		// Конец Соединения.ЗавершениеРаботыПользователей
		
		Элементы.ДекорацияАктивныеПользователи.Видимость = СоединенияИнфо.НаличиеАктивныхСоединений;
		
		Элементы.КнопкаНазад.Доступность  = Истина;
		Элементы.КнопкаДалее.Доступность  = Истина;
		Элементы.КнопкаОтмена.Видимость   = Ложь;
		Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
		Элементы.КнопкаДалее.Заголовок  = НСтр("ru = 'Готово'");
		
	Иначе
		
		Элементы.КнопкаОтмена.Видимость = Истина;
		
		Если ЭтоФайловаяИБ Тогда
			
			ОтобразитьСтраницу(Элементы.Страницы, Элементы.ВыборРежимаОбновленияФайловыйРежим);
			
			Если Инициализировать Тогда
				
				Элементы.ПорядокОбновленияФайл.Видимость = Не ПустаяСтрока(
					ИнформацияОДоступномОбновлении.Конфигурация.URLПорядокОбновления);
				
				Если Элементы.ПорядокОбновленияФайл.Видимость Тогда
					Элементы.НадписьПорядокОбновленияФайл.Заголовок =
						ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '<body>Для продолжения необходимо ознакомиться с <a href=""%1"">порядком обновления</a>.</body>'"),
								ИнформацияОДоступномОбновлении.Конфигурация.URLПорядокОбновления));
				КонецЕсли;
				
				ЗаполнитьНастройкиУстановкиОбновленийФайловыйРежим();
				
			КонецЕсли;
			
			// Соединения.ЗавершениеРаботыПользователей
			СоединенияИнфо = СоединенияИБ.ИнформацияОСоединениях(Ложь);
			// Конец Соединения.ЗавершениеРаботыПользователей
			
			Элементы.ГруппаСоединений.Видимость = СоединенияИнфо.НаличиеАктивныхСоединений;
			
			Если СоединенияИнфо.НаличиеАктивныхСоединений Тогда
				ВсеСтраницы = Элементы.ПанельАктивныеПользователи.ПодчиненныеЭлементы;
				
				Если СоединенияИнфо.НаличиеCOMСоединений Тогда
					Элементы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.АктивныеСоединения;
				ИначеЕсли СоединенияИнфо.НаличиеСоединенияКонфигуратором Тогда
					Элементы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.СоединениеКонфигуратора;
				Иначе
					Элементы.ПанельАктивныеПользователи.ТекущаяСтраница = ВсеСтраницы.АктивныеПользователи;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.КнопкаНазад.Доступность = Истина;
			Элементы.КнопкаДалее.Доступность = (Не СоединенияИнфо.НаличиеАктивныхСоединений
				Или РежимОбновления = 1);
			Элементы.КнопкаОтмена.Доступность = Истина;
			Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
			Элементы.КнопкаДалее.Заголовок = ?(
				РежимОбновления = 0,
				НСтр("ru = 'Далее >'"),
				НСтр("ru = 'Готово'"));
			
			Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
			
		Иначе
			
			ОтобразитьСтраницу(Элементы.Страницы, Элементы.ВыборРежимаОбновленияСерверныйРежим);
			Если Инициализировать Тогда
				
				Элементы.ПорядокОбновленияСервер.Видимость = Не ПустаяСтрока(
					ИнформацияОДоступномОбновлении.Конфигурация.URLПорядокОбновления);
				
				Если Элементы.ПорядокОбновленияСервер.Видимость Тогда
					Элементы.НадписьПорядокОбновленияСервер.Заголовок =
						ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '<body>Для продолжения необходимо ознакомиться с <a href=""%1"">порядком обновления</a>.</body>'"),
								ИнформацияОДоступномОбновлении.Конфигурация.URLПорядокОбновления));
				КонецЕсли;
				
				ЗаполнитьНастройкиУстановкиОбновленийКлиентСерверныйРежим();
				
			КонецЕсли;
			
			Если КодЗадачиПланировщика = 0 И Не ДатаВремяОбновленияУстановлена Тогда
				ДатаВремяОбновления = ВернутьДату(
					ДобавитьДни(НачалоДня(ТекущаяДатаСеанса()), 1), ДатаВремяОбновления);
				ДатаВремяОбновленияУстановлена = Истина;
			КонецЕсли;
			
			ЕстьОтложенныеОбработчики = (ОбновлениеИнформационнойБазы.СтатусОтложенногоОбновления() = "СтатусНеВыполнено");
			Элементы.НадписьОтложенныеОбработчики.Видимость = ЕстьОтложенныеОбработчики;
			
			СтраницыПанелиИнформацииПерезагрузки1 = Элементы.СтраницыИнформацииПерезагрузки1.ПодчиненныеЭлементы;
			Элементы.СтраницыИнформацииПерезагрузки1.ТекущаяСтраница = ?(
				РежимОбновления = 0,
				СтраницыПанелиИнформацииПерезагрузки1.СтраницаПерезагрузкиСейчас1,
				СтраницыПанелиИнформацииПерезагрузки1.СтраницаЗапланированнойПерезагрузки);
			
			Если РежимОбновления <> 0 Тогда
				
				// Соединения.ЗавершениеРаботыПользователей
				СоединенияИнфо = СоединенияИБ.ИнформацияОСоединениях(Ложь);
				// Конец Соединения.ЗавершениеРаботыПользователей
				
				НаличиеСоединений = (СоединенияИнфо.НаличиеАктивныхСоединений И РежимОбновления = 0);
				Элементы.ГруппаСоединений1.Видимость = НаличиеСоединений;
				
				Если НаличиеСоединений Тогда
					ВсеСтраницы = Элементы.ПанельАктивныеПользователи1.ПодчиненныеЭлементы;
					Элементы.ПанельАктивныеПользователи1.ТекущаяСтраница = ? (СоединенияИнфо.НаличиеCOMСоединений, 
						ВсеСтраницы.АктивныеСоединения1, ВсеСтраницы.АктивныеПользователи1);
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.ПолеДатаВремяОбновления.Доступность = (РежимОбновления = 2);
			Элементы.АдресЭлектроннойПочты.Доступность   = ВыслатьОтчетНаПочту;
			
			Элементы.КнопкаНазад.Доступность  = Истина;
			Элементы.КнопкаДалее.Доступность  = Истина;
			Элементы.КнопкаОтмена.Доступность = Истина;
			Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
			Элементы.КнопкаДалее.Заголовок = ?(
				РежимОбновления = 0,
				НСтр("ru = 'Далее >'"),
				НСтр("ru = 'Готово'"));
			Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУстановкиОбновленийФайловыйРежим()
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	НастройкиОбновления = ОбновлениеКонфигурации.НастройкиОбновленияКонфигурации();
	РежимОбновления                   = НастройкиОбновления.РежимОбновления;
	СоздаватьРезервнуюКопию           = НастройкиОбновления.СоздаватьРезервнуюКопию;
	ИмяКаталогаРезервнойКопииИБ       = НастройкиОбновления.ИмяКаталогаРезервнойКопииИБ;
	ВосстанавливатьИнформационнуюБазу = НастройкиОбновления.ВосстанавливатьИнформационнуюБазу;
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУстановкиОбновленийКлиентСерверныйРежим()
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	НастройкиОбновления = ОбновлениеКонфигурации.НастройкиОбновленияКонфигурации();
	РежимОбновления       = НастройкиОбновления.РежимОбновления;
	ДатаВремяОбновления   = НастройкиОбновления.ДатаВремяОбновления;
	ВыслатьОтчетНаПочту   = НастройкиОбновления.ВыслатьОтчетНаПочту;
	АдресЭлектроннойПочты = НастройкиОбновления.АдресЭлектроннойПочты;
	КодЗадачиПланировщика = НастройкиОбновления.КодЗадачиПланировщика;
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьДату(Дата, Время)
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата), Час(Время), Минута(Время), Секунда(Время));
КонецФункции

// Добавляет заданное количество дней к дате.
//
// Параметры:
//  Дата		- Дата	- Исходная дата.
//  ЧислоДней	- Число	- Количество дней, добавляемых к исходной дате.
//
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьДни(Знач Дата, Знач ЧислоДней)
	
	Если ЧислоДней > 0 Тогда
		Разница = День(Дата) + ЧислоДней - День(КонецМесяца(Дата));
		Если Разница > 0 Тогда
			НоваяДата = ДобавитьМесяц(Дата, 1);	
			Возврат Дата(Год(НоваяДата), Месяц(НоваяДата), Разница, 
				Час(НоваяДата), Минута(НоваяДата), Секунда(НоваяДата));
		КонецЕсли;
	ИначеЕсли ЧислоДней < 0 Тогда
		Разница = День(Дата) + ЧислоДней - День(НачалоМесяца(Дата));
		Если Разница < 1 Тогда
			НоваяДата = ДобавитьМесяц(Дата, -1);	
			Возврат Дата(Год(НоваяДата), Месяц(НоваяДата), День(КонецМесяца(НоваяДата)) - Разница, 
				Час(НоваяДата), Минута(НоваяДата), Секунда(НоваяДата));
		КонецЕсли;
	КонецЕсли; 
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата) + ЧислоДней, Час(Дата), Минута(Дата), Секунда(Дата));
	
КонецФункции

&НаСервере
Процедура ОтобразитьНерекомендуемаяВерсияПлатформы()
	
	ОтобразитьСтраницу(Элементы.Страницы, Элементы.СтраницаНерекомендуемаяВерсияПлатформы);
	Если Не ПолучениеОбновленийПрограммы.СлужебнаяДоступноИспользованиеПолученияОбновленийПлатформы(Ложь) Тогда
		// Если обновление платформы недоступно,
		// отобразить только сообщение пользователю.
		Элементы.КнопкаНазад.Видимость          = Ложь;
		Элементы.КнопкаДалее.Видимость          = Ложь;
		Элементы.КнопкаОтмена.КнопкаПоУмолчанию = Истина;
		Элементы.Справка.Видимость              = Ложь;
	Иначе
		Элементы.КнопкаНазад.Доступность = Ложь;
		Элементы.КнопкаДалее.Заголовок   = НСтр("ru = 'Обновить платформу >'");
		Элементы.КнопкаДалее.Видимость   = Истина;
		Элементы.КнопкаДалее.Доступность = Истина;
	КонецЕсли;
	
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Не РаботаВПрограммеЗапрещена;
	Элементы.КнопкаОтмена.Заголовок   = НСтр("ru = 'Завершить работу'");
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокСтраницыНоваяВерсияПлатформы()
	
	Возврат ?(ИнформацияОДоступномОбновлении.Платформа.РекомендуетсяПереход,
		НСтр("ru = 'Рекомендуется перейти на новую версию платформы'"),
		НСтр("ru = 'Доступна новая версия платформы'"));
	
КонецФункции

&НаСервере
Функция ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(ПараметрСоздатьРезервнуюКопию)
	
	Строки = Новый Массив;
	
	ЭтоБазоваяВерсияКонфигурации = ПолучениеОбновленийПрограммы.ЭтоБазоваяВерсияКонфигурации();
	ВнедренаПодсистемаРезервногоКопирования =
		ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ");
	
	Если ВнедренаПодсистемаРезервногоКопирования
		И ПараметрСоздатьРезервнуюКопию Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
			Строки.Добавить(
				НСтр("ru = '<body>Будет автоматически завершена работа <a href=""open:ActiveUsers"">активных пользователей</a> программы, создана резервная копия'"));
		Иначе
			Строки.Добавить(
				НСтр("ru = '<body>Будет автоматически завершена работа активных пользователей программы, создана резервная копия'"));
		КонецЕсли;
		
		Если ЭтоБазоваяВерсияКонфигурации Тогда
			Строки.Добавить(НСтр("ru = 'информационной базы и запущен сеанс работы с программой на новой версии платформы.<body>'"));
		Иначе
			Строки.Добавить(НСтр("ru = 'информационной базы и запущен сеанс работы с программой на новой версии платформы.
				|<br />На компьютерах других пользователей программы необходимо обновить платформу 1С:Предприятие вручную.</body>'"));
		КонецЕсли;
		
	Иначе
		
		Строки.Добавить(НСтр("ru = '<body>Чтобы начать работать на новой версии платформы:'"));
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
			Строки.Добавить(НСтр("ru = '- завершите работу всех <a href=""open:ActiveUsers"">активных пользователей</a> программы;'"));
		Иначе
			Строки.Добавить(НСтр("ru = '- завершите работу всех активных пользователей программы;'"));
		КонецЕсли;
		
		Строки.Добавить(НСтр("ru = '- завершите текущий сеанс работы с программой;'"));
		
		Если Не ЭтоБазоваяВерсияКонфигурации Тогда
			Строки.Добавить(НСтр("ru = '- установите новую версию платформы на компьютеры других пользователей программы;'"));
		КонецЕсли;
		
		Строки.Добавить(НСтр("ru = '- откройте программу на новой версии платформы;'"));
		
		Если ВнедренаПодсистемаРезервногоКопирования Тогда
			Строки.Добавить(НСтр("ru = '<br />Перед началом работы на новой версии платформы рекомендуется создать резервную копию.</body>'"));
		Иначе
			Строки.Добавить(НСтр("ru = '<br />Перед началом работы на новой версии платформы рекомендуется <a href=""open:RCInstruction"">создать резервную копию</a>.</body>'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(СтрСоединить(Строки, Символы.ПС + "<br />"));
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПараметровРезервногоКопирования(ПараметрыРезервногоКопирования, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыРезервногоКопирования) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыРезервногоКопирования);
		ОтобразитьПолучениеОбновленийЗавершено();
		Элементы.НадписьРезервнаяКопияФайл.Заголовок =
			ОбновлениеКонфигурацииКлиент.ЗаголовокСозданияРезервнойКопии(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПарольАдминистратора(Знач ПараметрыАдминистрирования)
	
	АдминистраторИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы);
	
	Если Не АдминистраторИБ.АутентификацияСтандартная Тогда
		
		АдминистраторИБ.АутентификацияСтандартная = Истина;
		АдминистраторИБ.Пароль = ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы;
		АдминистраторИБ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьПанелиОшибок()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		МодульКонтрольВеденияУчета       = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		СводнаяИнформацияПоВидамПроверок = МодульКонтрольВеденияУчета.СводнаяИнформацияПоВидамПроверок("СистемныеПроверки");
		Возврат СводнаяИнформацияПоВидамПроверок.Количество > 0;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти