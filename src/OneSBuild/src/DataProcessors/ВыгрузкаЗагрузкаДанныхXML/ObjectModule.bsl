///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем МетаданныеОписание Экспорт;
Перем СсылочныеТипы Экспорт;
Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов;
Перем ОбработанныхКонстант Экспорт;
Перем ОбработанныхНаборовЗаписей Экспорт;
Перем мСоответствиеКолонокДвижений;

// Массив строк дерева метаданных, имеющих признак Выгружать.
Перем СоставПолнойВыгрузки Экспорт;
// Массив строк дерева метаданных, имеющих признак выгрузки по ссылке.
Перем СоставВспомогательнойВыгрузки;

// Массив регистров, использующих итоги.
Перем ИспользующиеИтоги;

Перем мТипРезультатЗапроса; 
Перем мТипДанныхУдаления;

Перем мВыгруженныеОбъекты;
Перем мКоличествоСохраненныхПоследнихВыгрузок;

Перем мНаличиеВыгрузкиПодчиненныхОбъектов;
Перем ТаблицаПредопределенных;
Перем СоответствиеЗаменыСсылок;
Перем Сериализатор;

Перем РазделителиКонфигурации; // Массив: содержащий разделители конфигурации.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Производит начальную инициализацию - заполнение дерева описания
// классов объектов метаданных, дерево метаданных, список ссылочных типов.
//
// Параметры:
//   ИсключитьМетаданные - Соответствие - в качестве ключа указывается объект метаданных, 
//                                        который не должен попасть в выгрузку.
//
//
Процедура Инициализация(ИсключитьМетаданные = Неопределено) Экспорт
	
	ВключитьВозможностьРедактированияИспользованияИтогов = Ложь;
	
	// Создаем объект, описывающий процессы построения дерева и выгрузку.
	ЗаполнитьОписаниеМетаданных();
	
	МетаданныеОписание = МетаданныеОписание.Строки[0];
	
	СсылочныеТипы = Новый Соответствие;
	СоответствиеОбъектовМетаданныхИСсылочныхТипов = Новый Соответствие;
	
	ДеревоМетаданных.Колонки.Очистить();
	// Создание необходимых колонок.
	ДеревоМетаданных.Колонки.Добавить("Выгружать", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ДеревоМетаданных.Колонки.Добавить("ВыгружатьПриНеобходимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("ЭлементОписания");
	ДеревоМетаданных.Колонки.Добавить("ОбъектМД");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмяМетаданных");
	ДеревоМетаданных.Колонки.Добавить("НастройкиПостроителя");
	ДеревоМетаданных.Колонки.Добавить("ИспользоватьОтбор");
	ДеревоМетаданных.Колонки.Добавить("ИндексКартинки");
	ДеревоМетаданных.Колонки.Добавить("Развернут");
	
	ИспользующиеИтоги = Новый Массив;
	Корень = ДеревоМетаданных.Строки.Добавить();
	ПостроениеПоддереваОбъекта(Метаданные, Корень, МетаданныеОписание);
	СверткаПоддереваОбъекта(Корень);
	
	ОбработатьСтрокиДерева(ДеревоМетаданных.Строки, ИсключитьМетаданные, 1);
	
	Для Каждого КлючИЗначение Из СсылочныеТипы Цикл
		СоответствиеОбъектовМетаданныхИСсылочныхТипов.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры	

// Создает файл выгрузки с данными в формате XML.
//
// Параметры:
//   ИмяФайла                           - Строка - имя файла выгрузки в формате XML.
//   ТолькоПроверкаНедопустимыхСимволов - Булево - если Истина, то выполняется только проверка на недопустимые символы в
//                                                 XML.
//
Процедура ВыполнитьВыгрузку(Знач ИмяФайла, ТолькоПроверкаНедопустимыхСимволов = Ложь) Экспорт
	
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	
	СоставВыгрузки();
	
	Если СоставПолнойВыгрузки.Количество() = 0
		И ДополнительныеОбъектыДляВыгрузки.Количество() = 0 Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не задан состав выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	Если ТолькоПроверкаНедопустимыхСимволов Тогда
		
		ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
		
		ВыгрузкаДанных(ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
		
	Иначе
		
		Если ИспользоватьФорматFastInfoSet Тогда
			
			ЗаписьXML = Новый ЗаписьFastInfoset;
			ЗаписьXML.ОткрытьФайл(ИмяФайла);
			
		Иначе
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
		
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
		
		Если ТолькоПроверкаНедопустимыхСимволов Тогда
			
			ШаблонНачалоПроверки = НСтр("ru = 'Начало проверки: %Дата%'");
			СообщениеНачалоПроверки = СтрЗаменить(ШаблонНачалоПроверки, "%Дата%", ТекущаяДатаСеанса());
			СообщитьПользователю(СообщениеНачалоПроверки);
			
		Иначе
			
			ШаблонНачалоВыгрузки = НСтр("ru = 'Начало выгрузки: %Дата%'");
			СообщениеНачалоВыгрузки = СтрЗаменить(ШаблонНачалоВыгрузки, "%Дата%", ТекущаяДатаСеанса());
			СообщитьПользователю(СообщениеНачалоВыгрузки);
			
		КонецЕсли;
		
		ИнициализироватьСериализаторXDTOСАннотациейТипов();
		
		ВыгрузкаДанных(ЗаписьXML);
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:Data
		ВыгрузитьТаблицуПредопределенных(ЗаписьXML);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:_1CV8DtUD
		
	КонецЕсли;
	
	Если ТолькоПроверкаНедопустимыхСимволов Тогда
		
		ШаблонПроверено = НСтр("ru = 'Проверено объектов: %Проверено%'");
		СообщениеПроверено = СтрЗаменить(ШаблонПроверено, "%Проверено%", ВсегоОбработанныхЗаписей());
		СообщитьПользователю(СообщениеПроверено);
		
		ШаблонОкончание = НСтр("ru = 'Окончание проверки: %Дата%'");
		СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата%", ТекущаяДатаСеанса());
		СообщитьПользователю(СообщениеОкончание);
		
	Иначе
		
		ШаблонВыгружено = НСтр("ru = 'Выгружено объектов: %Выгружено%'");
		СообщениеВыгружено = СтрЗаменить(ШаблонВыгружено, "%Выгружено%", ВсегоОбработанныхЗаписей());
		СообщитьПользователю(СообщениеВыгружено);
		
		ШаблонОкончание = НСтр("ru = 'Окончание выгрузки: %Дата%'");
		СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата%", ТекущаяДатаСеанса());
		СообщитьПользователю(СообщениеОкончание);
		
		СообщитьПользователю(НСтр("ru = 'Выгрузка данных успешно завершена'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает файл выгрузки в формате XML и осуществляет запись в ИБ сохраненных там объектов.
//
// Параметры:
//   ИмяФайла - Строка - имя файла выгрузки в формате XML.
//
Процедура ВыполнитьЗагрузку(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	
	ИмяВременногоФайла = "";
	Если Файл.Расширение = ".fi" Тогда
		
		ЧтениеXML = Новый ЧтениеFastInfoset;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		ЗаписьXML = Новый ЗаписьXML;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
			
		КонецЦикла;
		
		ЗаписьXML.Закрыть();
		
		ИмяФайла = ИмяВременногоФайла;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	// Проверка формата файла обмена.
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
			ЧтениеXML.Закрыть();
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
			ЧтениеXML.Закрыть();
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьТаблицуПредопределенных(ЧтениеXML);
	
	ИмяВременногоФайлаСЗамененнымиСсылками = ЗаменитьСсылкиНаПредопределенные(ИмяФайла);
	
	// С этого момента работа идет с временным файлом, см. ИмяВременногоФайлаСЗамененнымиСсылками.
	// Исходный временный файл, если он есть, больше не нужен, его можно удалить.
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаСЗамененнымиСсылками);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	// Чтение и запись в ИБ записанных в выгрузке объектов.
	Если Не ЧтениеXML.Прочитать() Тогда 
		
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	Загружено = 0;
	УбратьИспользованиеИтогов();
	
	ШаблонСообщения = НСтр("ru = 'Начало загрузки: %1'");
	ТекстСообщения  = ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекущаяДатаСеанса());
	
	СообщитьПользователю(ТекстСообщения);
	
	ИнициализироватьСериализаторXDTOСАннотациейТипов();
	
	ИспользуетсяУправлениеДоступом = Ложь;
	Если ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом       = ОбщийМодуль("УправлениеДоступом");
		ИспользуетсяУправлениеДоступом = Истина;
	КонецЕсли;
	
	Если ИспользуетсяУправлениеДоступом Тогда
		МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Истина, Ложь);
	КонецЕсли;
	
	Попытка
	
		ВыполнитьЗагрузкуДанныхXML(Загружено, ИмяВременногоФайлаСЗамененнымиСсылками, ЧтениеXML);
		Если ИспользуетсяУправлениеДоступом Тогда
			МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь, Ложь);
		КонецЕсли;
		
	Исключение
		
		Если ИспользуетсяУправлениеДоступом Тогда
			МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь, Ложь);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	ВосстановитьИспользованиеИтогов();
	
	// Проверка формата файла обмена.
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаСЗамененнымиСсылками);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "PredefinedData" Тогда
		
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаСЗамененнымиСсылками);
		Возврат;
		
	КонецЕсли;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаСЗамененнымиСсылками);
		Возврат;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайлаСЗамененнымиСсылками);
	
	ШаблонЗагружено    = НСтр("ru = 'Загружено объектов: %1'");
	СообщениеЗагружено = ПодставитьПараметрыВСтроку(ШаблонЗагружено, Загружено);
	
	ШаблонОкончание    = НСтр("ru = 'Окончание загрузки: %1'");
	СообщениеОкончание = ПодставитьПараметрыВСтроку(ШаблонОкончание, ТекущаяДатаСеанса());
	
	СообщитьПользователю(СообщениеЗагружено);
	СообщитьПользователю(СообщениеОкончание);
	СообщитьПользователю(НСтр("ru = 'Загрузка данных успешно завершена'"));
	
КонецПроцедуры

// Возвращает текущее значение версии обработки.
//
// Возвращаемое значение:
//  Строка - версия обработки.
//
Функция ВерсияОбъекта() Экспорт
	
	Возврат "2.1.8";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьЗагрузкуДанныхXML(Загружено, ИмяВременногоФайлаСЗамененнымиСсылками, ЧтениеXML)
	
	Перем ИмяСобытия, ТекстОшибки, ТекстСообщения;
	
	Пока Сериализатор.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		ЗаписанноеЗначение = Неопределено;
		ЗначениеПрочитано  = Истина;
		ОписаниеОшибки     = "";
		Попытка
			ЗаписанноеЗначение = Сериализатор.ПрочитатьXML(ЧтениеXML); // СправочникОбъект, ДокументОбъект, и т.п.
		Исключение
			ЗначениеПрочитано = Ложь;
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если Не ЗначениеПрочитано Тогда
			ВосстановитьИспользованиеИтогов();
			Попытка
				ЧтениеXML.Закрыть();
				УдалитьФайлы(ИмяВременногоФайлаСЗамененнымиСсылками);
			Исключение
				ИмяСобытия = НСтр("ru = 'Обмен данными'", КодОсновногоЯзыка());
				
				ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить данные. 
			|Возможно они были выгружены из другой версии конфигурации.'") +
			Символы.ПС + ОписаниеОшибки;
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если ПриЗагрузкеИспользоватьРежимОбменаДанными Тогда
			ЗаписанноеЗначение.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Если Метаданные.ПланыОбмена.Найти(ЗаписанноеЗначение.Метаданные().Имя) <> Неопределено Тогда
			Если ЗаписанноеЗначение.ЭтотУзел Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ЗаписанноеЗначение.Записать();
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если НЕ ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки Тогда
				
				ВосстановитьИспользованиеИтогов();
				ЧтениеXML.Закрыть();
				УдалитьФайлы(ИмяВременногоФайлаСЗамененнымиСсылками);
				ВызватьИсключение;
				
			Иначе
				
				Попытка
					ТекстСообщения = НСтр("ru = 'При загрузке объекта %1(%2) возникла ошибка:
					|%3'");
					ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения,
					ЗаписанноеЗначение, ТипЗнч(ЗаписанноеЗначение), ТекстОшибки);
				Исключение
					ТекстСообщения = НСтр("ru = 'При загрузке данных возникла ошибка:
					|%1'");
					ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
				КонецПопытки;
				
				СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			Загружено = Загружено - 1;
			
		КонецПопытки;	
		
		Загружено = Загружено + 1;
		
	КонецЦикла;

КонецПроцедуры

Функция СоздатьОбъектЗаписиXMLДляПроверки()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Рекурсивно обрабатывает дерево метаданных, образуя списки полной и вспомогательной выгрузки.
//
// Параметры:
//   ПересчитатьВыгружаемыеПоСсылке - Булево
//
Процедура СоставВыгрузки(ПересчитатьВыгружаемыеПоСсылке = Ложь) Экспорт
	
	СоставПолнойВыгрузки = Новый ТаблицаЗначений;
	СоставПолнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставПолнойВыгрузки.Колонки.Добавить("СтрокаДерева");	
	СоставПолнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	СоставВспомогательнойВыгрузки = Новый ТаблицаЗначений;
	СоставВспомогательнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставВспомогательнойВыгрузки.Колонки.Добавить("СтрокаДерева");	
	СоставВспомогательнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ);
	КонецЦикла;
	
	мНаличиеВыгрузкиПодчиненныхОбъектов = СоставВспомогательнойВыгрузки.Количество() > 0;
	
	Если ПересчитатьВыгружаемыеПоСсылке Тогда
		
		ПересчитатьВыгружаемыеПоСсылке(СоставПолнойВыгрузки);
		
	КонецЕсли;
	
	СоставВспомогательнойВыгрузки.Индексы.Добавить("ОбъектМД");
	СоставПолнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
КонецПроцедуры

// Рекурсивно обрабатывает дерево метаданных, подготовка для выгрузки.
//
Процедура ОбработатьСтрокиДерева(Строки, МетаданныеСписокИсключений, Знач ВыгружатьУзел)
	
	Если МетаданныеСписокИсключений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для каждого Строка Из Строки Цикл
		Если ВыгружатьУзел = 0 Тогда
			Строка.Выгружать = 0;
			Строка.ВыгружатьПриНеобходимости = 0;
			ОбработатьСтрокиДерева(Строка.Строки, МетаданныеСписокИсключений, 0);
		Иначе
			Выгружать = ?(МетаданныеСписокИсключений.Получить(Строка.Метаданные) = Неопределено, 1, 0);
			ОбработатьСтрокиДерева(Строка.Строки, МетаданныеСписокИсключений, Выгружать);
			Строка.Выгружать = Выгружать;
			Строка.ВыгружатьПриНеобходимости = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеМассиваСсылок(МассивСсылок, СтрокаИмяДляЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено)
	
	Если МассивСсылок.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаИмяДляЗапроса) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_.*
	|ИЗ
	|	&ИмяТаблицыМетаданных КАК _
	|ГДЕ
	|	_.Ссылка В (&МассивСсылок)";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", СтрокаИмяДляЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Истина, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Возвращаемое значение:
//   ТаблицаЗначений - коллекция выгруженных объектов:
//     * Ссылка - ЛюбаяСсылка - ссылка на выгруженный объект.
// 
Функция КоллекцияВыгруженныеОбъекты()
	Возврат мВыгруженныеОбъекты;
КонецФункции

// Возвращаемое значение:
//   Массив из см. ЗаписьРегистра.СтрокаДереваМетаданных - набор регистров, использующих итоги.
//
Функция КоллекцияРегистровСИтогами()
	Возврат ИспользующиеИтоги;
КонецФункции

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...).
//
// Параметры:
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//
Процедура ВыгрузкаДанных(ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено)
	
	мВыгруженныеОбъекты = Новый ТаблицаЗначений;
	мВыгруженныеОбъекты.Колонки.Добавить("Ссылка");
	мВыгруженныеОбъекты.Индексы.Добавить("Ссылка");
	
	ИнициализироватьТаблицуПредопределенных();
	
	Если ОбъектыВыгруженныеСОшибками = Неопределено Тогда
		ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
		
		СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
		
		Если СтрокаДереваМетаданных.ЭлементОписания.Менеджер = Неопределено Тогда
			ВызватьИсключение(НСтр("ru = 'Выгрузка данных. Внутренняя ошибка'"));
		КонецЕсли;
		
		Если Метаданные.Константы.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
			
			ЗаписьКонстанты(ЗаписьXML, СтрокаДереваМетаданных.ОбъектМД, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаДереваМетаданных.ОбъектМД)
			Или Метаданные.РегистрыНакопления.Содержит(СтрокаДереваМетаданных.ОбъектМД)
			Или Метаданные.РегистрыРасчета.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
			
			ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
			
			ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, Истина);
			
		ИначеЕсли ТипЗнч(СтрокаДереваМетаданных.ЭлементОписания.Менеджер) = Тип("Строка") Тогда
			// Специальный случай для перерасчетов.
			ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		ИначеЕсли Метаданные.Последовательности.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
			
			ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		Иначе
			
			ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеОбъектыДляВыгрузки.Сортировать("ИмяОбъектаДляЗапроса");
	ТекущийМассивСсылок = Новый Массив();
	ТекущееИмяЗапроса = "";
	
	Для Каждого СтрокаТаблицыВыгрузки Из ДополнительныеОбъектыДляВыгрузки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.Объект)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущееИмяЗапроса <> СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса Тогда
			
			ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
			
			ТекущийМассивСсылок = Новый массив();
			ТекущееИмяЗапроса = СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса;
			
		КонецЕсли;
		
		ТекущийМассивСсылок.Добавить(СтрокаТаблицыВыгрузки.Объект);
		
	КонецЦикла;
	
	ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
	
КонецПроцедуры

// Для внутреннего использования.
//
Функция ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, ИмяТипа)
	
	ИтоговоеОграничениеПоДате = "";
	ИмяТаблицы = "_";
	
	Если НЕ (ИмяТипа = "Документ" ИЛИ ИмяТипа = "РегистрСведений" ИЛИ ИмяТипа = "Регистр") Тогда
		Возврат ИтоговоеОграничениеПоДате;
	КонецЕсли;
		
	ИмяПоляОграничения = ИмяТаблицы + "." + ?(ИмяТипа = "Документ", "Дата", "Период");	
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		ИтоговоеОграничениеПоДате = "
		|	ГДЕ
		|		" + ИмяПоляОграничения + " >= &ДатаНачала";
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
			
			ИтоговоеОграничениеПоДате = "
			|	ГДЕ
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		Иначе
			
			ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
			|	И
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеОграничениеПоДате;
	
КонецФункции

// Для внутреннего использования.
//
Функция ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_.* // Автозамена
	|ИЗ
	|	&ИмяТаблицыМетаданных КАК _";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяМетаданных);
	
	Если НЕ ПустаяСтрока(СтрокаПолейДляВыборки) Тогда
		
		СтрокаПолейДляВыборки = ПодставитьПараметрыВСтроку("РАЗЛИЧНЫЕ %1", СтрокаПолейДляВыборки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_.* // Автозамена", СтрокаПолейДляВыборки);
		
	КонецЕсли;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// 0 - отбор за период
	// 1 - срез последних на дату окончания
	// 2 - срез первых на дату начала
	// 3 - срез последних на дату начала + отбор за период.
	
	Если ТипВыгрузкиПериодическихРегистров = 0 Тогда
		
		Если ЕстьДопОтборы
			И НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 1 Тогда
		
		ИмяТаблицыМетаданных = ПодставитьПараметрыВСтроку("%1.СрезПоследних(&ДатаОкончания)", ИмяМетаданных);
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяТаблицыМетаданных);
		
		Если НЕ ПустаяСтрока(СтрокаПолейДляВыборки) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_.* // Автозамена", СтрокаПолейДляВыборки);
			
		КонецЕсли;
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 2 Тогда
		
		ИмяТаблицыМетаданных = ПодставитьПараметрыВСтроку("%1.СрезПервых(&ДатаНачала)", ИмяМетаданных);
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяТаблицыМетаданных);
		
		Если НЕ ПустаяСтрока(СтрокаПолейДляВыборки) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_.* // Автозамена", СтрокаПолейДляВыборки);
			
		КонецЕсли;
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 3 Тогда
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	_.* // Автозамена
		|ИЗ &ИмяТаблицыМетаданныхСрезПоследних КАК _ 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	_.* // Автозамена
		|ИЗ &ИмяТаблицыМетаданных КАК _ ";
		
		ИмяТаблицыМетаданных = ПодставитьПараметрыВСтроку("%1.СрезПоследних(&ДатаНачала)", ИмяМетаданных);
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданныхСрезПоследних", ИмяТаблицыМетаданных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыМетаданных", ИмяМетаданных);
		
		Если НЕ ПустаяСтрока(СтрокаПолейДляВыборки) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_.* // Автозамена", СтрокаПолейДляВыборки);
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_.* // Автозамена
	|ИЗ
	|	&ИмяТаблицыМетаданных КАК _";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяМетаданных); 
	
	Если НЕ ПустаяСтрока(СтрокаПолейДляВыборки) Тогда
		
		СтрокаПолейДляВыборки = ПодставитьПараметрыВСтроку("РАЗЛИЧНЫЕ %1", СтрокаПолейДляВыборки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_.* // Автозамена", СтрокаПолейДляВыборки);
		
	КонецЕсли;
	
	// Возможно нужно ограничение по датам установить.
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	Если ЕстьОграничениеПоДатам Тогда
		
		Если ЕстьДопОтборы
			И НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Для внутреннего использования.
//
Функция ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ОбъектМетаданных  = СтрокаДереваМетаданных.Метаданные;
	ИмяМетаданных     = ОбъектМетаданных.ПолноеИмя();
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
		
	ИначеЕсли   Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_.* // Автозамена
	|ИЗ
	|	&ИмяТаблицыМетаданных КАК _";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяМетаданных);
	
	Если НЕ ПустаяСтрока(СтрокаПолейДляВыборки) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_.* // Автозамена", СтрокаПолейДляВыборки);
		
	КонецЕсли;
	
	// Возможно нужно ограничение по датам установить.
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	Если ЕстьОграничениеПоДатам Тогда
		
		Если ЕстьДопОтборы
			И НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = "";
		
		// Можно ли для данного объекта МД строить ограничения по датам.
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Документ");
			
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Для внутреннего использования.
//
Функция ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейДляВыборки = "")
	
	ЕстьДопОтборы = (СтрокаДереваМетаданных.НастройкиПостроителя <> Неопределено); 
	
	ИтоговыйТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
	
	ПостроительОтчета = Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст = ИтоговыйТекстЗапроса;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	ПостроительОтчета.Отбор.Сбросить();
	Если ЕстьДопОтборы Тогда
		
		ПостроительОтчета.УстановитьНастройки(СтрокаДереваМетаданных.НастройкиПостроителя);
		
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНачала", ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат ПостроительОтчета;
	
КонецФункции

Функция ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных)
	
	ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных);

	ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПостроительОтчета.Результат;
		
	Возврат РезультатЗапроса;
		
КонецФункции

Процедура ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов = Ложь)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных);
	
	ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Истина, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Процедура исполняет переданный запрос и записывает полученные через запрос объекты.
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - запрос для исполнения, результат содержит выборку объектов для записи.
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   ЗапросВерхнегоУровня - Булево - признак необходимости анимации процесса.
//
Процедура ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, ЗапросВерхнегоУровня,
	ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	// Универсальная процедура выгрузки ссылочных объектов процедура.
	ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, Истина, ЗапросВерхнегоУровня,
		ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

Процедура ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов)
	
	Если Не ТолькоПроверкаНедопустимыхСимволов Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсегоОбработаноОбъектов > 1000 Тогда
		
		ЗаписьXML.Закрыть();
		ЗаписьXML = Неопределено;
		
		ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаВыгружена(Ссылка)
	
	Возврат мВыгруженныеОбъекты.Найти(Ссылка, "Ссылка") <> Неопределено;
	
КонецФункции

Процедура ДобавитьСсылкуКВыгруженным(Ссылка)
	
	СтрокаДобавления = КоллекцияВыгруженныеОбъекты().Добавить();
	СтрокаДобавления.Ссылка = Ссылка;
	
КонецПроцедуры

// Процедура записывает содержащиеся в выборке результата запроса объекты и необходимые "по ссылке" объекты ИБ.
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса.
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   ЭтоЗапросПоОбъекту - Булево - если Истина, выборка должна содержать объекты, на которые может быть ссылка,
//             если Ложь, выгружать, как объект не нужно, только обработать возможные ссылки на др. объекты ИБ.
//
Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, ЭтоЗапросПоОбъекту,
	ЗапросВерхнегоУровня, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
	
	ВсегоОбработаноОбъектов = 0;
	
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			// Выгрузка ссылочных объектов.
			Ссылка = ВыборкаИзРезультатовЗапроса.Ссылка;
			Если СсылкаВыгружена(Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьСсылкуКВыгруженным(Ссылка);
			
			ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
			
		КонецЕсли;
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		
			// Перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить.
			Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
				
				ЗначениеКолонки = ВыборкаИзРезультатовЗапроса[КолонкаЗапроса.Имя];
				
				Если ТипЗнч(ЗначениеКолонки) = мТипРезультатЗапроса Тогда
					
					ОбработкаРезультатаЗапроса(ЗначениеКолонки, ЗаписьXML, Ложь, Ложь, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				Иначе
				
					ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			Объект = Ссылка.ПолучитьОбъект();
			
			Попытка
				
				ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
				
				Сериализатор.ЗаписатьXML(ЗаписьXML, Объект);
				
				МетаданныеОбъекта = Объект.Метаданные();
				
				Если ЭтоМетаданныеСПредопределеннымиЭлементами(МетаданныеОбъекта) И Объект.Предопределенный Тогда
					
					НоваяСтрока = КоллекцияПредопределенныеДанные().Добавить();
					НоваяСтрока.ИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();
					НоваяСтрока.Ссылка = XMLСтрока(Ссылка);
					НоваяСтрока.ИмяПредопределенныхДанных = Объект.ИмяПредопределенныхДанных;
					
				КонецЕсли;
				
				Если ВыгружатьСДокументомЕгоДвижения И Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
					
					// Выгрузка движений документа.
					Для Каждого Движение Из Объект.Движения Цикл
						
						Движение.Прочитать();
						
						Если мНаличиеВыгрузкиПодчиненныхОбъектов
							И Движение.Количество() > 0 Тогда
							
							ТипРегистра = Тип(Движение);
							
							МассивКолонок = мСоответствиеКолонокДвижений.Получить(ТипРегистра);
							
							Если МассивКолонок = Неопределено Тогда
								
								ТаблицаДвижений = Движение.Выгрузить();
								РегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение.Метаданные());
								МассивКолонок = КолонкиТаблицыДвижений(ТаблицаДвижений, РегистрБухгалтерии);
								мСоответствиеКолонокДвижений.Вставить(ТипРегистра, МассивКолонок);	
								
							КонецЕсли;
							
							ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
							
						КонецЕсли;
						
						Сериализатор.ЗаписатьXML(ЗаписьXML, Движение);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Исключение
				
				СтрокаОписанияОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				// Не смогли записать в XML.
				// Возможно, проблема с недопустимыми символами в XML.
				Если ТолькоПроверкаНедопустимыхСимволов Тогда
					
					Если ОбъектыВыгруженныеСОшибками.Получить(Ссылка) = Неопределено Тогда
						ОбъектыВыгруженныеСОшибками.Вставить(Ссылка, СтрокаОписанияОшибки);
					КонецЕсли;
					
				Иначе
					
					ИтоговаяСтрокаСообщения = НСтр("ru = 'При выгрузке объекта %1(%2) возникла ошибка:
						|%3'");
					ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения,
						Объект, ТипЗнч(Объект), СтрокаОписанияОшибки);
					
					СообщитьПользователю(ИтоговаяСтрокаСообщения);
					
					ВызватьИсключение ИтоговаяСтрокаСообщения;
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
		
	Для Каждого ЗаписьИзНабора Из Движение Цикл
								
		Для Каждого Колонка Из МассивКолонок Цикл
			
			Если СтрНайти(Колонка, "Субконто") <> 0 Тогда
		
				Если Колонка <> "СубконтоДт" И Колонка <> "СубконтоКт" Тогда
				    Колонка = "Субконто";
				КонецЕсли;
				
				Значение = ЗаписьИзНабора[Колонка];
				
				Если Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого КлючИЗначение Из Значение Цикл
					
					Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						ЗаписатьЗначениеПриНеобходимости(КлючИЗначение.Значение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);	
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
			
				СохраненноеЗначение = ЗаписьИзНабора[Колонка];
				ЗаписатьЗначениеПриНеобходимости(СохраненноеЗначение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкиТаблицыДвижений(ТаблицаДвижений, РегистрБухгалтерии = Ложь)
	
	МассивКолонок = Новый Массив();
	Для Каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
		
		Если КолонкаТаблицы.Имя = "МоментВремени"
			ИЛИ СтрНайти(КолонкаТаблицы.Имя, "ВидСубконто") = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоДт");
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоКт");	
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(КолонкаТаблицы.Имя, "Субконто") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("Субконто") = Неопределено Тогда
				МассивКолонок.Добавить("Субконто");	
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		МассивКолонок.Добавить(КолонкаТаблицы.Имя);
		
	КонецЦикла;
	
	Возврат МассивКолонок;
	
КонецФункции

// Процедура анализирует необходимость записи объекта "по ссылке" и осуществляет запись.
//
// Параметры:
//   АнализируемоеЗначение - ЛюбаяСсылка - анализируемое значение.
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//
Процедура ЗаписатьЗначениеПриНеобходимости(АнализируемоеЗначение, ЗаписьXML, 
	ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов )
	
	Если Не ЗначениеЗаполнено(АнализируемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМД = СсылочныеТипы.Получить(ТипЗнч(АнализируемоеЗначение)); // ОбъектМетаданных
	
	Если ОбъектМД = Неопределено Тогда
		Возврат; // это не ссылка
	КонецЕсли;
	
	Если СсылкаВыгружена(АнализируемоеЗначение) Тогда
		Возврат; // объект уже был выгружен
	КонецЕсли;
	
	// Проверка того, что данный тип входит в список выгружаемых дополнительно.
	СтрокаТаблицы = СоставПолнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = СоставВспомогательнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	&ИмяТаблицыМетаданных КАК ТаблицаОбъекта_
		|ГДЕ
		|	ТаблицаОбъекта_.Ссылка = &Ссылка";
		
		СтрокаЗамены = СтрокаТаблицы.СтрокаДерева.ЭлементОписания.ДляЗапроса + ОбъектМД.Имя;
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", СтрокаЗамены);
		
		ДопЗапрос = Новый Запрос(ТекстЗапроса);
		ДопЗапрос.УстановитьПараметр("Ссылка", АнализируемоеЗначение);
		РезультатЗапроса = ДопЗапрос.Выполнить();
		ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Ложь, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура записывает значение константы.
//
// Параметры:
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   МД_Константа - ОбъектМетаданныхКонстанта - описание метаданного - выгружаемой константы.
//
Процедура ЗаписьКонстанты(ЗаписьXML, МД_Константа, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	МенеджерЗначения = Константы[МД_Константа.Имя].СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	ЗаписатьЗначениеПриНеобходимости(МенеджерЗначения.Значение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	// собственно выгрузка
	
	ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
	Попытка
		
		ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
		
		Сериализатор.ЗаписатьXML(ЗаписьXML, МенеджерЗначения);
		
	Исключение
		
		СтрокаОписанияОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		// Не смогли записать в XML.
		// Возможно, проблема с недопустимыми символами в XML.
		Если ТолькоПроверкаНедопустимыхСимволов Тогда
			
			ОбъектыВыгруженныеСОшибками.Вставить(МенеджерЗначения, СтрокаОписанияОшибки);
			
		Иначе
			
			ИтоговаяСтрокаСообщения = НСтр("ru = 'При выгрузке константы %1 возникла ошибка:
			|%2'");
			ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения,
				МД_Константа.Имя, СтрокаОписанияОшибки);
			
			СообщитьПользователю(ИтоговаяСтрокаСообщения);
			
			ВызватьИсключение ИтоговаяСтрокаСообщения;
			
		КонецЕсли;
		
	КонецПопытки;	
	
	ОбработанныхКонстант = ОбработанныхКонстант + 1;
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...).
//
// Параметры:
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   СтрокаДереваМетаданных - СтрокаДереваЗначений - строка дерева метаданных, соответствующая регистру:
//     * ОбъектМД - ОбъектМетаданныхРегистрРасчета - метаданные регистра.
//     * Родитель - см. ЗаписьРегистра.СтрокаДереваМетаданных
//
Процедура ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии = Ложь)
	
	МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	
	ИмяТаблицыДляЗапроса = СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса;
		
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, ИмяТаблицыДляЗапроса,
		СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии);
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...).
//
// Параметры:
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   СтрокаДереваМетаданных - СтрокаДереваЗначений - строка дерева метаданных, соответствующая регистру:
//     * ОбъектМД - ОбъектМетаданныхРегистрРасчета - метаданные регистра.
//     * Родитель - см. ЗаписьПерерасчета.СтрокаДереваМетаданных
//
Процедура ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	СтрокаОбъекта = СтрокаДереваМетаданных.Родитель.Родитель; // см. ЗаписьПерерасчета.СтрокаДереваМетаданных
	
	ИмяРегистраРасчета = СтрокаОбъекта.ОбъектМД.Имя;
	МенеджерСтрокой = СтрЗаменить(СтрокаДереваМетаданных.ЭлементОписания.Менеджер, "%i", ИмяРегистраРасчета);
	МенеджерПерерасчета = ВычислитьВыражение(МенеджерСтрокой);
	МенеджерПерерасчета = МенеджерПерерасчета[СтрокаДереваМетаданных.ОбъектМД.Имя];
	СтрокаДляЗапроса = СтрЗаменить(СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса, "%i", ИмяРегистраРасчета);
	
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерПерерасчета, СтрокаДляЗапроса,
		СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Процедура записывает последовательности документов.
//
// Параметры:
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   СтрокаДереваМетаданных - СтрокаДереваЗначений - строка дерева метаданных, соответствующая регистру:
//     * ОбъектМД - ОбъектМетаданныхРегистрРасчета - метаданные регистра.
//     * Родитель - см. ЗаписьПоследовательности.СтрокаДереваМетаданных
//
Процедура ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса,
		СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Процедура записывает данные, доступ к которым осуществляется через набор записей.
//
// Параметры:
//   ЗаписьXML - ЗаписьXML - объект, через которых происходит запись объектов ИБ.
//   МенеджерНабораЗаписей - РегистрСведенийМенеджер
//                         - РегистрНакопленияМенеджер
//                         - РегистрРасчетаМенеджер
//                         - РегистрБухгалтерииМенеджер - менеджер регистра.
//   ДляЗапроса - Строка - префикс имени таблицы объекта.
//   СтрокаДереваМетаданных - СтрокаДереваЗначений - строка дерева метаданных, соответствующая регистру:
//     * ОбъектМД - ОбъектМетаданныхРегистрРасчета - метаданные регистра.
//     * Родитель - см. ЗаписьРегистра.СтрокаДереваМетаданных
//
Процедура ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, ДляЗапроса,
	СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии = Ложь)
	
	ИмяОбъекта = СтрокаДереваМетаданных.ОбъектМД.Имя;
	
	ЭтоРегистрРасчета = (ДляЗапроса = "РегистрРасчета.");
	// Получить состав колонок записи регистра и проверить наличие хотя бы одной записи.
	Если ДляЗапроса = "РегистрБухгалтерии." Тогда
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта + ".ДвиженияССубконто(, , , , 1)";
	Иначе
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта;	
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	&ИмяТаблицыМетаданных КАК ТаблицаОбъекта_";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяТаблицыДляЗапроса);
	
	СтрокаЗамены = "ТаблицаОбъекта_" + ИмяОбъекта;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОбъекта_", СтрокаЗамены);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапросаПоСоставу = Запрос.Выполнить();
	Если РезультатЗапросаПоСоставу.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = РезультатЗапросаПоСоставу.Выгрузить();
	МассивКолонок = КолонкиТаблицыДвижений(ТаблицаДвижений, РегистрБухгалтерии);
	
	// Выгрузка регистров осуществляется через его набор записей.
	НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
	
	Отбор = НаборЗаписей.Отбор;
	СтрокаПолейОтбора = "";
	Для Каждого ЭлементОтбора Из Отбор Цикл 
		Если Не ПустаяСтрока(СтрокаПолейОтбора) Тогда 
			СтрокаПолейОтбора = СтрокаПолейОтбора + ",";
		КонецЕсли;
		СтрокаПолейОтбора = СтрокаПолейОтбора + ЭлементОтбора.Имя;
	КонецЦикла;
	
	ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейОтбора); 
	ПостроительОтчета.Выполнить();
	РезультатЗапросаПоЗначениямОтбора = ПостроительОтчета.Результат;	
	ВыборкаИзРезультата = РезультатЗапросаПоЗначениямОтбора.Выбрать();
	
	КоличествоПолейОтбора = НаборЗаписей.Отбор.Количество();
	
	// Читаем наборы записей с различным составом отбора и записываем их.
	Пока ВыборкаИзРезультата.Следующий() Цикл
		
		// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение).
		Если КоличествоПолейОтбора <> 0 Тогда
			
			Для Каждого Колонка Из РезультатЗапросаПоЗначениямОтбора.Колонки Цикл 
				Если ЭтоРегистрРасчета
					И ВыборкаИзРезультата[Колонка.Имя] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
				Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
				Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		
			// Проверяем все записанные в наборе значения на необходимость записи "по ссылке".
			ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, НаборЗаписей, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		КонецЕсли;
		
		ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		Попытка
			
			ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
			
			Сериализатор.ЗаписатьXML(ЗаписьXML, НаборЗаписей);
			
		Исключение
			
			СтрокаОписанияОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			// Не смогли записать в XML.
			// Возможно, проблема с недопустимыми символами в XML.
			Если ТолькоПроверкаНедопустимыхСимволов Тогда
				
				НовыйНабор = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
				
				Для Каждого СтрокаОтбора Из НаборЗаписей.Отбор Цикл
					
					СтрокаОтбораФормы = НовыйНабор.Отбор.Найти(СтрокаОтбора.Имя);
					
					Если СтрокаОтбораФормы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
					СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
					СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
					
				КонецЦикла;
				
				ОбъектыВыгруженныеСОшибками.Вставить(НовыйНабор, СтрокаОписанияОшибки);
												
			Иначе
				
				ИтоговаяСтрокаСообщения = НСтр("ru = 'При выгрузке регистра %1%2 возникла ошибка:
					|%3'");
				ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения,
					ДляЗапроса, ИмяОбъекта, СтрокаОписанияОшибки);
				
				СообщитьПользователю(ИтоговаяСтрокаСообщения);
				
				ВызватьИсключение ИтоговаяСтрокаСообщения;
				
			КонецЕсли;
			
		КонецПопытки;
		
		ОбработанныхНаборовЗаписей = ОбработанныхНаборовЗаписей + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно обрабатывает строку дерева метаданных, образуя списки полной и вспомогательной выгрузки.
//
// Параметры:
//   СоставПолнойВыгрузки - список полной выгрузки.
//   СоставВспомогательнойВыгрузки - список вспомогательной выгрузки.
//   СтрокаДЗ - обрабатываемая строка дерева метаданных.
//
Процедура ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ)
	
	Если (СтрокаДЗ.ЭлементОписания <> Неопределено) 
		И СтрокаДЗ.ЭлементОписания.Выгружаемый Тогда
		
		СтрокаДобавления = Неопределено;
		
		Если СтрокаДЗ.Выгружать Тогда
			
			СтрокаДобавления = СоставПолнойВыгрузки.Добавить();
						
		ИначеЕсли СтрокаДЗ.ВыгружатьПриНеобходимости Тогда
			
			СтрокаДобавления = СоставВспомогательнойВыгрузки.Добавить();
									
		КонецЕсли;
		
		Если СтрокаДобавления <> Неопределено Тогда
			
			СтрокаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;	
			СтрокаДобавления.СтрокаДерева = СтрокаДЗ;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаДЗ Из СтрокаДЗ.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, ПодчиненнаяСтрокаДЗ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет строку дерева метаданных, попутно заполняя соответствие ссылочных типов объектам метаданных.
//
// Параметры:
//   ОбъектМД - ОбъектМетаданных - описание объекта метаданных.
//   ЭлементДЗ - СтрокаДереваЗначений - заполняемая строка дерева метаданных.
//   ЭлементОписания - описание класса, к которому принадлежит объект метаданных (свойства, подчиненные классы).
//
Процедура ПостроениеПоддереваОбъекта(ОбъектМД, ЭлементДЗ, ЭлементОписания)
	
	ЭлементДЗ.Метаданные = ОбъектМД;
	ЭлементДЗ.ОбъектМД   = ОбъектМД;
	ЭлементДЗ.ПолноеИмяМетаданных = ОбъектМД.Имя;
	ЭлементДЗ.ЭлементОписания = ЭлементОписания;
	ЭлементДЗ.Выгружать = Ложь;
	ЭлементДЗ.ВыгружатьПриНеобходимости = Истина;
	ЭлементДЗ.ИндексКартинки = ЭлементОписания.ИндексКартинки;
	
	Если ЭлементОписания.Менеджер <> Неопределено Тогда
		
		// Заполнение соответствия ссылочных типов объектам метаданных.
		Если ОбъектОбразуетСсылочныйТип(ОбъектМД) Тогда
			СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
		КонецЕсли;
		
		Если Метаданные.РегистрыНакопления.Содержит(ОбъектМД) 
			Или	Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
			
			КоллекцияРегистровСИтогами().Добавить(ЭлементДЗ);
			
		КонецЕсли;
		
	КонецЕсли;		
		
	// подчиненные ветви
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Если Не ПодчиненныйКласс.Выгружаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ВеткаКласса = ЭлементДЗ.Строки.Добавить();
		ВеткаКласса.Метаданные = ПодчиненныйКласс.Класс;
		ВеткаКласса.Выгружать = Ложь;
		ВеткаКласса.ВыгружатьПриНеобходимости = Истина;
		ВеткаКласса.ПолноеИмяМетаданных = ПодчиненныйКласс.Класс;
		ВеткаКласса.ИндексКартинки = ПодчиненныйКласс.ИндексКартинки;
				
		ПодчиненныеОбъектыДанногоКласса = ОбъектМД[ПодчиненныйКласс.Класс];
				
		Для Каждого ПодчиненныйОбъектМД Из ПодчиненныеОбъектыДанногоКласса Цикл 
			ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
			ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс);
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура удаляет из дерева метаданных строки, соответствующие метаданным, заведомо не попадающим в выгрузку.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных, подчиненные которой рассматриваются
//        с точки зрения удаления из списка потенциально выгружаемых.
//
Процедура СверткаПоддереваОбъекта(ЭлементДЗ)
	
	УдаляемыеВеткиКлассов = Новый Массив;
	Для Каждого ВеткаКласса Из ЭлементДЗ.Строки Цикл
		
		УдаляемыеПодчиненныеМД = Новый Массив;
		
		Для Каждого ПодчиненныйОбъектМД Из ВеткаКласса.Строки Цикл
			СверткаПоддереваОбъекта(ПодчиненныйОбъектМД);
			Если (ПодчиненныйОбъектМД.Строки.Количество()) = 0
				И (Не ПодчиненныйОбъектМД.ЭлементОписания.Выгружаемый) Тогда
				
				УдаляемыеПодчиненныеМД.Добавить(ВеткаКласса.Строки.Индекс(ПодчиненныйОбъектМД));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Сч = 1 По УдаляемыеПодчиненныеМД.Количество() Цикл
			ВеткаКласса.Строки.Удалить(УдаляемыеПодчиненныеМД[УдаляемыеПодчиненныеМД.Количество() - Сч]);
		КонецЦикла;
		
		Если ВеткаКласса.Строки.Количество() = 0 Тогда
			УдаляемыеВеткиКлассов.Добавить(ЭлементДЗ.Строки.Индекс(ВеткаКласса));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = 1 По УдаляемыеВеткиКлассов.Количество() Цикл
		ЭлементДЗ.Строки.Удалить(УдаляемыеВеткиКлассов[УдаляемыеВеткиКлассов.Количество() - Сч]);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
//
Процедура УстановитьВыгружатьПодчиненным(ЭлементДЗ)
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.Выгружать = ЭлементДЗ.Выгружать;
		УстановитьВыгружатьПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
//
Процедура ОбновитьСостояниеВыгружать(ЭлементДЗ)
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // Обновляем вверх или до корня, или до первого встретившегося выгружаемого.
	КонецЕсли;
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.Выгружать;
		Иначе
			Если Не Состояние = ПодчиненныйЭлементДЗ.Выгружать Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.Выгружать = Состояние;
		ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
	КонецЕсли;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
//
Процедура УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ)
	
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.ВыгружатьПриНеобходимости = ЭлементДЗ.ВыгружатьПриНеобходимости;
		УстановитьВыгружатьПриНеобходимостиПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
//
Процедура ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ)
	
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // Обновляем вверх или до корня, или до первого встретившегося выгружаемого.
	КонецЕсли;
	
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости;
		Иначе
			Если Не Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = Состояние;
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
//
Процедура ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(ЭлементДЗ)
	
	Если ЭлементДЗ.ВыгружатьПриНеобходимости = 2 Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	
КонецПроцедуры

// Функция определяет, являются ли объекты данного класса метаданных типизированными.
//
// Параметры:
//   Описание - описание класса.
// Возврат - Истина, если объекты данного класса метаданных типизированы, Ложь в противном случае.
//
Функция КлассМДТипизированный(Описание)
	
	Для Каждого Свойство Из Описание.Свойства Цикл
		Если Свойство.Значение = "Тип" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Функция определяет, являются ли тип ссылочным.
//
// Параметры:
//   Тип - Тип - исследуемый тип
// Возврат - Истина, если тип ссылочный, Ложь в противном случае.
//
Функция СсылочныйТип(Тип)
	
	МетаданныеТипа = СсылочныеТипы.Получить(Тип);
	Возврат МетаданныеТипа <> Неопределено;	
		
КонецФункции

// Процедура добавляет в массив новый элемент, если он является уникальным.
//
// Параметры:
//   Массив - Массив из Произвольный - исследуемый тип
//   Элемент - Произвольный - добавляемый элемент.
//
Процедура ДобавитьВМассивЕслиУникальный(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных, соответствующего строке дерева.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
// Возврат - массив потенциально используемых соответствующей записью типов.
//
Функция ПолучитьВсеТипы(ЭлементДЗ)
	
	ОбъектМД = ЭлементДЗ.ОбъектМД;
	Если ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданных") 
		И ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
		
		ВызватьИсключение(НСтр("ru = 'Внутренняя ошибка обработки выгрузки'"));
		
	КонецЕсли;
	
	Возврат ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементДЗ.ЭлементОписания);
	
КонецФункции

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных.
//
// Параметры:
//   ОбъектМД - ОбъектМетаданных - описание метаданного.
//   ЭлементОписания - описание класса объекта метаданного.
// Возврат - массив потенциально используемых соответствующей записью типов.
//
Функция ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементОписания)
	
	ВсеТипы = Новый Массив;
	
	Для Каждого Свойство Из ЭлементОписания.Свойства Цикл
		
		ЗначениеСвойства = ОбъектМД[Свойство.Значение];
		Если ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") И ЗначениеСвойства.Количество() > 0 Тогда
			
			Для Каждого СтрокаКоллекции Из ЗначениеСвойства Цикл
				
				СсылочныйТипКлючИЗначение = СоответствиеОбъектовМетаданныхИСсылочныхТипов[СтрокаКоллекции];
				
				Если СсылочныйТипКлючИЗначение <> Неопределено Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение);	
					
				КонецЕсли;
				
			КонецЦикла;			
						
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда
			
			Для Каждого СсылочныйТипКлючИЗначение Из СсылочныеТипы Цикл
				
				Если ЗначениеСвойства = СсылочныйТипКлючИЗначение.Значение Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КлассМДТипизированный(ЭлементОписания) Тогда
		
		ОписаниеТипа = ОбъектМД.Тип;
		Для Каждого ОдинТип Из ОписаниеТипа.Типы() Цикл
			
			Если СсылочныйТип(ОдинТип) Тогда
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМД)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМД)
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД)
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМД) Тогда
			
			// Какой-то из регистров, ищем в возможных регистраторах.
			Для Каждого ДокументМД Из Метаданные.Документы Цикл
				
				Если ДокументМД.Движения.Содержит(ОбъектМД) Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Документы[ДокументМД.Имя].ПустаяСсылка()));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Для Каждого ПодчиненныйОбъектМД Из ОбъектМД[ПодчиненныйКласс.Класс] Цикл
			
			ТипыПодчиненного = ПолучитьТипыИспользуемыеОМД(ПодчиненныйОбъектМД, ПодчиненныйКласс);
			Для Каждого ОдинТип Из ТипыПодчиненного Цикл
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВсеТипы;
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных.
// Поиск осуществляется среди строк, подчиненных переданной.
//
// Параметры:
//   СтрокаДЗ - СтрокаДереваЗначений - строка дерева метаданных, от которой осуществляется поиск.
//   ОбъектМД - ОбъектМетаданных - описание метаданного.
//   
// Возвращаемое значение:
//   СтрокаДереваЗначений- строка дерева метаданных.
//
Функция ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД)
	
	Возврат СтрокаДЗ.Строки.Найти(ОбъектМД, "ОбъектМД", Истина);	
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных.
// Поиск осуществляется по всему дереву метаданных.
//
// Параметры:
//   ОбъектМД - ОбъектМетаданных - описание метаданного.
// Возвращаемое значение:
//   СтрокаДереваЗначений- строка дерева метаданных.
//
Функция ЭлементДЗПоОбъектуМД(ОбъектМД)
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ЭлементДЗ = ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД);
		Если ЭлементДЗ <> Неопределено Тогда 
			Возврат ЭлементДЗ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Процедура определяет, на какие объект может ссылаться запись, соответствующая объекту метаданных, отображаемому
// данной строкой дерева метаданных и проставляет им признак ВыгружатьПриНеобходимости.
//
// Параметры:
//   ЭлементДЗ - СтрокаДереваЗначений - строка дерева метаданных.
//
Процедура УстановкаСостоянияВыгружатьПриНеобходимости(ЭлементДЗ)
	
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	Если ЭлементДЗ.Выгружать <> 1 И ЭлементДЗ.ВыгружатьПриНеобходимости <> 1 Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементДЗ.ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеТипы = ПолучитьВсеТипы(ЭлементДЗ);
	Для Каждого СсылочныйТип Из ВсеТипы Цикл
		
		ТипИОбъект = СсылочныеТипы.Получить(СсылочныйТип);
		Если ТипИОбъект = Неопределено Тогда
			
			ТекстИсключения = НСтр("ru = 'Внутренняя ошибка. Неполное заполнение структуры ссылочных типов %1'");
			ТекстИсключения = ПодставитьПараметрыВСтроку(ТекстИсключения, СсылочныйТип);
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;
		
		ОбъектМД = ТипИОбъект;
		СтрокаДЗ = ЭлементДЗПоОбъектуМД(ОбъектМД);
		Если СтрокаДЗ = Неопределено Тогда 
			
			ТекстИсключения = НСтр("ru = 'Внутренняя ошибка. Неполное заполнение дерева метаданных. Отсутствует объект, образующий тип %1'");
			ТекстИсключения = ПодставитьПараметрыВСтроку(ТекстИсключения, СсылочныйТип);
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;
		
		Если СтрокаДЗ.Выгружать = 1 
			Или СтрокаДЗ.ВыгружатьПриНеобходимости = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДЗ.ВыгружатьПриНеобходимости = 1;
		УстановкаСостоянияВыгружатьПриНеобходимости(СтрокаДЗ);
						
	КонецЦикла;
	
КонецПроцедуры

Функция ВсегоОбработанныхЗаписей()
	
	Возврат мВыгруженныеОбъекты.Количество() + ОбработанныхКонстант + ОбработанныхНаборовЗаписей;
	
КонецФункции

// Возвращаемое значение:
//   ДеревоЗначений - дерево описаний метаданных:
//     * Менеджер - КонстантыМенеджер
//                - СправочникиМенеджер
//                - ДокументыМенеджер
//                - РегистрыСведенийМенеджер
//                - ПоследовательностиМенеджер
//     * Класс - Строка
//     * Выгружаемый - Булево
//     * ДляЗапроса - Строка
//     * Свойства - СписокЗначений
//     * ИндексКартинки - Число
// 
Функция КоллекцияОписанийМетаданных()
	
	МетаданныеОписание = Новый ДеревоЗначений;
	МетаданныеОписание.Колонки.Добавить("Менеджер");
	МетаданныеОписание.Колонки.Добавить("Класс",       Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));	
	МетаданныеОписание.Колонки.Добавить("Выгружаемый", Новый ОписаниеТипов("Булево"));
	МетаданныеОписание.Колонки.Добавить("ДляЗапроса",  Новый ОписаниеТипов("Строка"));	
	МетаданныеОписание.Колонки.Добавить("Свойства",    Новый ОписаниеТипов("СписокЗначений"));
	МетаданныеОписание.Колонки.Добавить("ИндексКартинки");
	
	Возврат МетаданныеОписание;
	
КонецФункции

Функция НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, ЕстьДочерниеЭлементы = Ложь)
	
	Результат = ТекущаяКоллекцияСтрок.Добавить();
	
	Если ЕстьДочерниеЭлементы Тогда
		ТекущаяКоллекцияСтрок = Результат.Строки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура производит заполнение дерева описания классов объектов метаданных.
//
// Параметры:
//
Процедура ЗаполнитьОписаниеМетаданных()
	
	МетаданныеОписание = КоллекцияОписанийМетаданных();
	
	ТекущаяКоллекцияСтрок = МетаданныеОписание.Строки;
	
	//////////////////////////////////
	// Конфигурации
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "Конфигурации";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.ИндексКартинки = 0;
	
	//////////////////////////////////
	// Конфигурации.Константы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Константы";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = Константы;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.ИндексКартинки = 1;
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.Справочники
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "Справочники";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = Справочники;
	ОписаниеКласса.ДляЗапроса  = "Справочник.";
	ОписаниеКласса.Свойства.Добавить("Владельцы");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 3;
	
	//////////////////////////////////
	// Конфигурации.Справочники.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.Документы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "Документы";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = Документы;
	ОписаниеКласса.ДляЗапроса  = "Документ.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Движения");
	ОписаниеКласса.ИндексКартинки = 7;

	//////////////////////////////////
	// Конфигурации.Документы.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.Документы.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	
	//////////////////////////////////
	// Конфигурации.Документы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.Последовательности
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "Последовательности";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = Последовательности;
	ОписаниеКласса.ДляЗапроса  = "Последовательность.";
	ОписаниеКласса.Свойства.Добавить("Документы");
	ОписаниеКласса.Свойства.Добавить("Движения");
	ОписаниеКласса.ИндексКартинки = 5;
	
	//////////////////////////////////
	// Конфигурации.Последовательности.Измерения
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("СоответствиеДокументам");
	ОписаниеКласса.Свойства.Добавить("СоответствиеДвижениям");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ПланыВидовХарактеристик";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = ПланыВидовХарактеристик;
	ОписаниеКласса.ДляЗапроса  = "ПланВидовХарактеристик.";
	ОписаниеКласса.Свойства.Добавить("ДополнительныеЗначенияХарактеристик");
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 9;

	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	
	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");

	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.ПланыСчетов
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ПланыСчетов";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = ПланыСчетов;
	ОписаниеКласса.ДляЗапроса  = "ПланСчетов.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("ВидыСубконто");
	ОписаниеКласса.ИндексКартинки = 11;
	
	//////////////////////////////////
	// Конфигурации.ПланыСчетов.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.ПланыСчетов.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";

	//////////////////////////////////
	// Конфигурации.ПланыСчетов.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ПланыВидовРасчета";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = ПланыВидовРасчета;
	ОписаниеКласса.ДляЗапроса  = "ПланВидовРасчета.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("ЗависимостьОтВидовРасчета");
	ОписаниеКласса.Свойства.Добавить("БазовыеВидыРасчета");
	ОписаниеКласса.Свойства.Добавить("ИспользованиеПериодаДействия");
	ОписаниеКласса.ИндексКартинки = 13;

	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.РегистрыСведений
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "РегистрыСведений";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = РегистрыСведений;
	ОписаниеКласса.ДляЗапроса  = "РегистрСведений.";
	ОписаниеКласса.ИндексКартинки = 15;

	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Ресурсы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Измерения
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "РегистрыНакопления";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = РегистрыНакопления;
	ОписаниеКласса.ДляЗапроса  = "РегистрНакопления.";
	ОписаниеКласса.ИндексКартинки = 17;

	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Ресурсы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Измерения
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);;
	ОписаниеКласса.Класс = "РегистрыБухгалтерии";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = РегистрыБухгалтерии;
	ОписаниеКласса.ДляЗапроса  = "РегистрБухгалтерии.";
	ОписаниеКласса.Свойства.Добавить("ПланСчетов");
	ОписаниеКласса.Свойства.Добавить("Корреспонденция");
	ОписаниеКласса.ИндексКартинки = 19;

	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии.Измерения
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии.Ресурсы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "РегистрыРасчета";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = РегистрыРасчета;
	ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.";
	ОписаниеКласса.Свойства.Добавить("Периодичность");
	ОписаниеКласса.Свойства.Добавить("ПериодДействия");
	ОписаниеКласса.Свойства.Добавить("БазовыйПериод");
	ОписаниеКласса.Свойства.Добавить("График");
	ОписаниеКласса.Свойства.Добавить("ЗначениеГрафика");
	ОписаниеКласса.Свойства.Добавить("ДатаГрафика");
	ОписаниеКласса.Свойства.Добавить("ПланВидовРасчета");
	ОписаниеКласса.ИндексКартинки = 21;

	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Ресурсы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Измерения
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("БазовоеИзмерение");
	ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Перерасчеты.Измерения
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "БизнесПроцессы";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = БизнесПроцессы;
	ОписаниеКласса.ДляЗапроса  = "БизнесПроцесс.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Задача");
	ОписаниеКласса.ИндексКартинки = 23;
	
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.Задачи
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "Задачи";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = Задачи;
	ОписаниеКласса.ДляЗапроса  = "Задача.";
	ОписаниеКласса.Свойства.Добавить("Адресация");
	ОписаниеКласса.Свойства.Добавить("ОсновнойРеквизитАдресации");
	ОписаниеКласса.Свойства.Добавить("ТекущийИсполнитель");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 25;
	
	//////////////////////////////////
	// Конфигурации.Задачи.РеквизитыАдресации
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "РеквизитыАдресации";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ИзмерениеАдресации");
	
	//////////////////////////////////
	// Конфигурации.Задачи.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.Задачи.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";

	//////////////////////////////////
	// Конфигурации.Задачи.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
	//////////////////////////////////
	// Конфигурации.ПланыОбмена
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ПланыОбмена";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = ПланыОбмена;
	ОписаниеКласса.ДляЗапроса  = "ПланОбмена.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 27;

	//////////////////////////////////
	// Конфигурации.ПланыОбмена.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.ТабличныеЧасти
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок, Истина);
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";

	//////////////////////////////////
	// Конфигурации.ПланыОбмена.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = НоваяСтрокаОписанияМетаданных(ТекущаяКоллекцияСтрок);
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	
	ТекущаяКоллекцияСтрок = ОписаниеКласса.Родитель.Родитель.Родитель.Строки;
	
КонецПроцедуры

// Функция определяет имеет ли переданный объект метаданных ссылочный тип.
//
// Возврат - Истина, если переданный объект метаданных имеет ссылочный тип, Ложь - противном случае.
//
Функция ОбъектОбразуетСсылочныйТип(ОбъектМД)
	
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМД)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Процедура определяет, какие типы объектов следует выгружать для сохранения ссылочной целостности.
//
// Параметры:
//   Выгрузка - ТаблицаЗначений - совокупность выгружаемых объектов.
//
Процедура ПересчитатьВыгружаемыеПоСсылке(Выгрузка)
	
	// Сброс всех флажков ВыгружатьПриНеобходимости.
	СтрокаКонфигурации = ДеревоМетаданных.Строки[0];
	СтрокаКонфигурации.ВыгружатьПриНеобходимости = 0;
	ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(СтрокаКонфигурации);
	
	// Обработка переданного набора объектов.
	Для Каждого Выгружаемый Из Выгрузка Цикл
		
		УстановкаСостоянияВыгружатьПриНеобходимости(Выгружаемый.СтрокаДерева);
				
	КонецЦикла;
	
КонецПроцедуры

// Процедура, при необходимости, устанавливает отсутствие необходимости использования итогов.
//
Процедура УбратьИспользованиеИтогов()
	
	Если ВключитьВозможностьРедактированияИспользованияИтогов Тогда
		
		Для Каждого Регистр_СДЗ Из КоллекцияРегистровСИтогами() Цикл
			
			Регистр_СДЗ.ЭлементОписания.Менеджер[Регистр_СДЗ.ОбъектМД.Имя].УстановитьИспользованиеИтогов(Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, при необходимости, устанавливает необходимость использования итогов.
//
// Параметры:
//
Процедура ВосстановитьИспользованиеИтогов()
	
	Если ВключитьВозможностьРедактированияИспользованияИтогов Тогда
		
		Для Каждого Регистр_СДЗ Из КоллекцияРегистровСИтогами() Цикл
			
			Регистр_СДЗ.ЭлементОписания.Менеджер[Регистр_СДЗ.ОбъектМД.Имя].УстановитьИспользованиеИтогов(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Возвращаемое значение:
//   ТаблицаЗначений - коллекция предопределенных элементов:
//     * ИмяТаблицы - Строка - имя таблицы ИБ.
//     * Ссылка - Строка - строковое представление ссылки.
//     * ИмяПредопределенныхДанных - Строка - идентификатор значения.
// 
Функция КоллекцияПредопределенныеДанные()
	Возврат ТаблицаПредопределенных;
КонецФункции

Процедура ИнициализироватьТаблицуПредопределенных()
	
	ТаблицаПредопределенных = Новый ТаблицаЗначений;
	ТаблицаПредопределенных.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПредопределенных.Колонки.Добавить("Ссылка");
	ТаблицаПредопределенных.Колонки.Добавить("ИмяПредопределенныхДанных");
	
КонецПроцедуры

Процедура ВыгрузитьТаблицуПредопределенных(ЗаписьXML)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PredefinedData");
	
	Если ТаблицаПредопределенных.Количество() > 0 Тогда
		
		ТаблицаПредопределенных.Сортировать("ИмяТаблицы");
		
		ИмяПредыдущейТаблицы = "";
		
		Для Каждого Элемент Из ТаблицаПредопределенных Цикл
			
			Если ИмяПредыдущейТаблицы <> Элемент.ИмяТаблицы Тогда
				Если Не ПустаяСтрока(ИмяПредыдущейТаблицы) Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				ЗаписьXML.ЗаписатьНачалоЭлемента(Элемент.ИмяТаблицы);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("item");
			ЗаписьXML.ЗаписатьАтрибут("Ссылка", Элемент.Ссылка);
			ЗаписьXML.ЗаписатьАтрибут("ИмяПредопределенныхДанных", Элемент.ИмяПредопределенныхДанных);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ИмяПредыдущейТаблицы = Элемент.ИмяТаблицы;
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуПредопределенных(ЧтениеXML)
	
	ЧтениеXML.Пропустить(); // При первом чтении пропускам основной блок данных.
	ЧтениеXML.Прочитать();
	
	ИнициализироватьТаблицуПредопределенных();
	ВременнаяСтрока = КоллекцияПредопределенныеДанные().Добавить();
	
	СоответствиеЗаменыСсылок = Новый Соответствие;
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ИмяТаблицыМетаданных КАК Таблица
	|ГДЕ
	|	Таблица.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.ЛокальноеИмя <> "item" Тогда
				
				ВременнаяСтрока.ИмяТаблицы = ЧтениеXML.ЛокальноеИмя;
				
				ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ВременнаяСтрока.ИмяТаблицы);
				Запрос = Новый Запрос(ТекстЗапроса);
				
			Иначе
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					
					ВременнаяСтрока[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
					
				КонецЦикла;
				
				Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ВременнаяСтрока.ИмяПредопределенныхДанных);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Если Выборка.Количество() = 1 Тогда
						
						Выборка.Следующий();
						
						СсылкаВБазе = XMLСтрока(Выборка.Ссылка);
						СсылкаВФайле = ВременнаяСтрока.Ссылка;
						
						Если СсылкаВБазе <> СсылкаВФайле Тогда
							
							XMLТип = XMLТипСсылки(Выборка.Ссылка);
							
							СоответствиеТипа = СоответствиеЗаменыСсылок.Получить(XMLТип);
							
							Если СоответствиеТипа = Неопределено Тогда
								
								СоответствиеТипа = Новый Соответствие;
								СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
								СоответствиеЗаменыСсылок.Вставить(XMLТип, СоответствиеТипа);
								
							Иначе
								
								СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						ТекстИсключения = НСтр("ru = 'Обнаружено дублирование предопределенных элементов %1 в таблице %2.'");
						ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ВременнаяСтрока.ИмяПредопределенныхДанных);
						ТекстИсключения = СтрЗаменить(ТекстИсключения, "%2", ВременнаяСтрока.ИмяТаблицы);
						
						ВызватьИсключение ТекстИсключения;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Функция ЗаменитьСсылкиНаПредопределенные(ИмяФайла)
	
	ПотокЧтения = Новый ЧтениеТекста(ИмяФайла);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ПотокЗаписи = Новый ЗаписьТекста(ВременныйФайл);
	
	// Константы для разбора текста.
	НачалоТипа = "xsi:type=""v8:";
	ДлинаНачалаТипа = СтрДлина(НачалоТипа);
	КонецТипа = """>";
	ДлинаКонцаТипа = СтрДлина(КонецТипа);
	
	ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ИсходнаяСтрока <> Неопределено Цикл
		
		ОстатокСтроки = Неопределено;
		
		ТекущаяПозиция = 1;
		ПозицияТипа = СтрНайти(ИсходнаяСтрока, НачалоТипа);
		Пока ПозицияТипа > 0 Цикл
			
			ПотокЗаписи.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
			
			ОстатокСтроки = Сред(ИсходнаяСтрока, ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1);
			ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1;
			
			ПозицияКонцаТипа = СтрНайти(ОстатокСтроки, КонецТипа);
			Если ПозицияКонцаТипа = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
			СоответствиеЗамены = СоответствиеЗаменыСсылок.Получить(ИмяТипа);
			Если СоответствиеЗамены = Неопределено Тогда
				ПозицияТипа = СтрНайти(ОстатокСтроки, НачалоТипа);
				Продолжить;
			КонецЕсли;
			
			ПотокЗаписи.Записать(ИмяТипа);
			ПотокЗаписи.Записать(КонецТипа);
			
			ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
			
			НайденнаяСсылкаXML = СоответствиеЗамены.Получить(ИсходнаяСсылкаXML);
			
			Если НайденнаяСсылкаXML = Неопределено Тогда
				ПотокЗаписи.Записать(ИсходнаяСсылкаXML);
			Иначе
				ПотокЗаписи.Записать(НайденнаяСсылкаXML);
			КонецЕсли;
			
			ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
			ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
			ПозицияТипа = СтрНайти(ОстатокСтроки, НачалоТипа);
			
		КонецЦикла;
		
		Если ОстатокСтроки <> Неопределено Тогда
			ПотокЗаписи.ЗаписатьСтроку(ОстатокСтроки);
		Иначе
			ПотокЗаписи.ЗаписатьСтроку(ИсходнаяСтрока);
		КонецЕсли;
		
		ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ПотокЧтения.Закрыть();
	ПотокЗаписи.Закрыть();
	
	Возврат ВременныйФайл;
	
КонецФункции

Функция ЭтоМетаданныеСПредопределеннымиЭлементами(ОбъектМетаданных)
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

Процедура ИнициализироватьСериализаторXDTOСАннотациейТипов()
	
	ТипыСАннотациейСсылок = ПредопределенныеТипыПриВыгрузке();
	
	Если ТипыСАннотациейСсылок.Количество() > 0 Тогда
		
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыСАннотациейСсылок);
		Сериализатор = Новый СериализаторXDTO(Фабрика);
		
	Иначе
		
		Сериализатор = СериализаторXDTO;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредопределенныеТипыПриВыгрузке()
	
	Типы = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыСчетов Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

// Возвращает фабрику с указанием типов.
//
// Параметры:
//  Типы - ФиксированныйМассив из ОбъектМетаданных - массив типов.
//
// Возвращаемое значение:
//  ФабрикаXDTO - фабрика.
//
Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы)
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	УказанныеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		УказанныеТипы.Вставить(XMLТипСсылки(Тип), Истина);
	КонецЦикла;
	
	ПространствоИмен = Новый Соответствие;
	ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	РазыменовательПространствИменDOM = Новый РазыменовательПространствИменDOM(ПространствоИмен);
	ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
	
	Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath, РазыменовательПространствИменDOM);
	Результат = Запрос.Вычислить(Схема.ДокументDOM);

	Пока Истина Цикл
		
		УзелПоля = Результат.ПолучитьСледующий();
		Если УзелПоля = Неопределено Тогда
			Прервать;
		КонецЕсли;
		АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
		ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
		
		Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелПоля.УстановитьАтрибут("nillable", "true");
		УзелПоля.УдалитьАтрибут("type");
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	УдалитьФайлы(ИмяФайлаСхемы);
	
	Возврат Фабрика;
	
КонецФункции

// Возвращает имя типа, который будет использован в xml файле для указанного объекта метаданных.
// Используется при поиске и замене ссылок при загрузке, при модификации схемы current-config при записи.
// 
// Параметры:
//  Значение - ОбъектМетаданных
//           - ЛюбаяСсылка - объект метаданных или Ссылка.
//
// Возвращаемое значение:
//  Строка - строка вида AccountingRegisterRecordSet.Хозрасчетный, описывающая объект метаданных.
//
Функция XMLТипСсылки(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Значение;
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Ссылка = МенеджерОбъекта.ПолучитьСсылку();
	Иначе
		ОбъектМетаданных = Значение.Метаданные();
		Ссылка = Значение;
	КонецЕсли;
	
	Если ОбъектОбразуетСсылочныйТип(ОбъектМетаданных) Тогда
		
		Возврат СериализаторXDTO.XMLТипЗнч(Ссылка).ИмяТипа;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Ошибка при определении XMLТипа ссылки для объекта %1: объект не является ссылочным.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ОбъектМетаданных.ПолноеИмя());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер.
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ПолноеИмя);
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;
	
	Если ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	КонецЕсли;
	
	Возврат Менеджер[ИмяОМ];
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".")
	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		Поз = СтрНайти(Стр, Разделитель);
		Если Поз = 0 Тогда
			Если (СокрЛП(Стр) <> "") Тогда
				МассивСтрок.Добавить(Стр);
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Стр,Поз - 1));
		Стр = Сред(Стр, Поз + ДлинаРазделителя);
	КонецЦикла;
	
КонецФункции

Функция ВычислитьВыражение(Знач Выражение)
	
	УстановитьБезопасныйРежим(Истина);
	Для Каждого ИмяРазделителя Из РазделителиКонфигурации Цикл
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
	КонецЦикла;
	
	// Вызов ВычислитьВБезопасномРежиме не требуется, т.к. безопасный режим устанавливается без использования средств БСП.
	Возврат Вычислить(Выражение);
	
КонецФункции

// Инициализирует реквизиты обработки и модульные переменные.
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()
	
	ПриЗагрузкеИспользоватьРежимОбменаДанными    = Истина;
	ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки = Ложь;
	ИспользоватьОтборПоДатеДляВсехОбъектов       = Истина;

	мНаличиеВыгрузкиПодчиненныхОбъектов     = Ложь;
	мКоличествоСохраненныхПоследнихВыгрузок = 50;

	мТипРезультатЗапроса = Тип("РезультатЗапроса");
	мТипДанныхУдаления   = Тип("УдалениеОбъекта");

	мСоответствиеКолонокДвижений = Новый Соответствие;

	ОбработанныхКонстант       = 0;
	ОбработанныхНаборовЗаписей = 0;

	РазделителиКонфигурации = Новый Массив;
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			РазделителиКонфигурации.Добавить(ОбщийРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	РазделителиКонфигурации = Новый ФиксированныйМассив(РазделителиКонфигурации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции из базовой функциональности для обеспечения автономности.

Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

Функция ИменаПодсистем() Экспорт
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция КодОсновногоЯзыка()
	Если ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
		МодульОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
		Возврат МодульОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
КонецФункции

#КонецОбласти

#Область Инициализация

ИнициализацияРеквизитовИМодульныхПеременных();

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли