///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// При расстановке фрагментов кода в этих объектах будут использоваться условные вызовы ("Если ПодсистемаСуществует...").
// Это может потребоваться, если предусмотрено внедрение библиотеки без подсистемы УправлениеДоступом.
//
// Пример добавления нескольких подсистем в этот список:
//  ПрочитатьСписокОбъектовПодсистемы(Метаданные.Подсистемы.МояПодсистема1, БиблиотечныеОбъекты);
//  ПрочитатьСписокОбъектовПодсистемы(Метаданные.Подсистемы.МояПодсистема2, БиблиотечныеОбъекты);
//  ПрочитатьСписокОбъектовПодсистемы(Метаданные.Подсистемы.МояПодсистема3, БиблиотечныеОбъекты);
Перем БиблиотечныеОбъекты;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияПомощника

// События, возникающие в процессе перебора объектов метаданных.

Процедура ПриЧтенииОсновныхНастроек(Параметры)

КонецПроцедуры

Процедура ПриАнализеОбъекта(Параметры, СтрокаОбъекта)

КонецПроцедуры

Процедура ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	
	УправлениеДоступом_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
	
КонецПроцедуры

#КонецОбласти


#Область APIРедактированияМетодов

Процедура ДобавитьОтступы(Текст)
	НовыйТекст = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		НовыйТекст = НовыйТекст + Символы.Таб + Строка + Символы.ПС;
	КонецЦикла;
	Текст = СокрП(НовыйТекст);
КонецПроцедуры

Функция НайтиПроцедуруМодуля(Модуль, ИмяПроцедуры)
	ПрочитатьСтруктуруМодуля(Модуль);
	Возврат НайтиБлок(Модуль.Структура.Содержимое, "Процедура" + " " + ИмяПроцедуры + "(");
КонецФункции

Функция НайтиОбластьМодуля(Модуль, ИмяОбласти)
	ПрочитатьСтруктуруМодуля(Модуль);
	Возврат НайтиБлок(Модуль.Структура.Содержимое, "#Область" + " " + ИмяОбласти);
КонецФункции

Функция ПолучитьОбластьПодсистемы(ЭлементМодуля, ИмяПодсистемы, ДобавитьОтступы = Ложь, СоздаватьПередДругимиОбластями = Ложь);
	Заголовок = "//" + " " + ИмяПодсистемы;
	Подвал = "//" + " " + "Конец" + " " + ИмяПодсистемы;
	
	Результат = НайтиБлок(ЭлементМодуля.Содержимое, Заголовок);
	Если Результат = Неопределено Тогда
		Если ДобавитьОтступы Тогда
			ДобавитьОтступы(Заголовок);
			ДобавитьОтступы(Подвал);
		КонецЕсли;
		
		Если СоздаватьПередДругимиОбластями Тогда
			Результат = ДобавитьЭлементВНачало(ЭлементМодуля);
		Иначе
			Результат = ДобавитьЭлементВКонец(ЭлементМодуля);
		КонецЕсли;
		
		Результат.Заголовок = Заголовок;
		Результат.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОбластьОбработчикиСобытийФормы(Модуль);
	ПрочитатьСтруктуруМодуля(Модуль);
	
	ИмяОбласти = "ОбработчикиСобытийФормы";
	
	Заголовок = "#Область" + " " + ИмяОбласти;
	Подвал = "#КонецОбласти";
	
	Область = НайтиОбластьМодуля(Модуль, ИмяОбласти);
	Если Область = Неопределено Тогда
		Область = ДобавитьЭлементПослеОбластиПеременных(Модуль.Структура);
		Область.Заголовок = Заголовок;
		Область.Подвал = Подвал;
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ДобавитьЭлементВКонец(ЭлементМодуля, ДобавлятьОтступы = Истина)
	
	НовыйБлок = НовыйБлок(ЭлементМодуля);
	
	ЕстьОтступВКонце = ЭлементМодуля.Содержимое.Количество() > 0
		И (ТипЗнч(ЭлементМодуля.Содержимое[ЭлементМодуля.Содержимое.Количество() - 1]) <> Тип("Структура")
			И ПустаяСтрока(ЭлементМодуля.Содержимое[ЭлементМодуля.Содержимое.Количество() - 1]));
	
	Отступ = Отступ(ЭлементМодуля);
	
	Если ДобавлятьОтступы И Не ЕстьОтступВКонце Тогда
		ЭлементМодуля.Содержимое.Добавить(Отступ);
	КонецЕсли;
	
	ЭлементМодуля.Содержимое.Добавить(НовыйБлок);
	
	Если ДобавлятьОтступы Тогда
		ЭлементМодуля.Содержимое.Добавить(Отступ);
	КонецЕсли;
	
	Возврат НовыйБлок;
	
КонецФункции

Функция ДобавитьЭлементВНачало(ЭлементМодуля, ДобавлятьОтступы = Истина)
	
	НовыйБлок = НовыйБлок(ЭлементМодуля);
	
	ЕстьОтступВНачале = ЭлементМодуля.Содержимое.Количество() > 0
		И (ТипЗнч(ЭлементМодуля.Содержимое[0]) <> Тип("Структура") И ПустаяСтрока(ЭлементМодуля.Содержимое[0]));
		
	Отступ = Отступ(ЭлементМодуля);
	
	Если ДобавлятьОтступы И Не ЕстьОтступВНачале Тогда
		ЭлементМодуля.Содержимое.Вставить(0, Отступ);
	КонецЕсли;
	
	ЭлементМодуля.Содержимое.Вставить(0, НовыйБлок);
	
	Если ДобавлятьОтступы Тогда
		ЭлементМодуля.Содержимое.Вставить(0, Отступ);
	КонецЕсли;
	
	Возврат НовыйБлок;
	
КонецФункции

Функция ДобавитьЭлементПослеОбластиПеременных(ЭлементМодуля)
	
	Заголовки = Новый Массив;
	Заголовки.Добавить("Процедура");
	Заголовки.Добавить("Функция");
	
	НайденныеБлоки = НайтиБлоки(ЭлементМодуля.Содержимое, Заголовки);
	
	Если НайденныеБлоки.Количество() = 0 Тогда
		Возврат ДобавитьЭлементВНачало(ЭлементМодуля, Истина);
	КонецЕсли;
	
	ТекущийБлок = НайденныеБлоки[0];
	Пока ТекущийБлок.Родитель <> ЭлементМодуля Цикл
		ТекущийБлок = ТекущийБлок.Родитель;
	КонецЦикла;
	
	Индекс = ЭлементМодуля.Содержимое.Найти(ТекущийБлок);
	НовыйБлок = НовыйБлок(ЭлементМодуля);
	ЭлементМодуля.Содержимое.Вставить(Индекс, "");
	ЭлементМодуля.Содержимое.Вставить(Индекс, НовыйБлок);
	
	Возврат НовыйБлок;
	
КонецФункции

Функция Отступ(ЭлементМодуля)
	
	Если ЗначениеЗаполнено(ЭлементМодуля.Заголовок) Тогда
		Заголовок = СокрЛ(ЭлементМодуля.Заголовок);
		Если СтрНачинаетсяС(Заголовок, "Процедура") Или СтрНачинаетсяС(Заголовок, "Функция") Тогда
			Возврат Символы.Таб;
		ИначеЕсли СтрНачинаетсяС(Заголовок, "#") Тогда
			Возврат Отступ(ЭлементМодуля.Родитель);
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция СтрокаВБлок(Текст)
	ВидыБлоков = ВидыБлоков();
	
	Результат = НовыйБлок();
	Если СтрДлина(Текст) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийБлок = Результат;
	Описание = Новый Массив;
	ИнструкцияПрепроцессора = "";
	Для Каждого Строка Из СтрРазделить(Текст, Символы.ПС, Истина) Цикл
		Если ЭтоЗаголовокБлока(Строка, ВидыБлоков) Тогда
			НовыйБлок = НовыйБлок(ТекущийБлок, Строка, СтрСоединить(Описание, Символы.ПС));
			ТекущийБлок.Содержимое.Добавить(НовыйБлок);
			ТекущийБлок = НовыйБлок;
			ТекущийБлок.ИнструкцияПрепроцессора = ИнструкцияПрепроцессора;
			ИнструкцияПрепроцессора = "";
			Описание.Очистить();
		ИначеЕсли ЭтоПродолжениеЗаголовка(ТекущийБлок.Заголовок, Строка) Тогда
			ТекущийБлок.Заголовок = ТекущийБлок.Заголовок + Символы.ПС + Строка;
		ИначеЕсли ЭтоПодвалБлока(Строка, ТекущийБлок, ВидыБлоков) Тогда
			ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
			ТекущийБлок.Подвал = Строка;
			ТекущийБлок = ТекущийБлок.Родитель;
		ИначеЕсли СтрНачинаетсяС(Строка, "//") И ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
			Описание.Добавить(Строка);
		ИначеЕсли СтрНачинаетсяС(Строка, "&") И ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
			ИнструкцияПрепроцессора = Строка;
		Иначе
			ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
			Если Не ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
				ТекущийБлок.Содержимое.Добавить(ИнструкцияПрепроцессора);
				ИнструкцияПрепроцессора = "";
			КонецЕсли;
			ТекущийБлок.Содержимое.Добавить(Строка);
		КонецЕсли;
	
		Если СтрНачинаетсяС(СокрЛ(ТекущийБлок.Заголовок), "Перем") И СтрНайти(ТекущийБлок.Заголовок, ";") > 0 Тогда
			ТекущийБлок = ТекущийБлок.Родитель;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
	Если Не ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
		ТекущийБлок.Содержимое.Добавить(ИнструкцияПрепроцессора);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция БлокВСтроку(Блок)
	Если ТипЗнч(Блок) = Тип("Строка") Тогда
		Возврат Блок;
	КонецЕсли;
	
	КоллекцияСтрок = БлокВКоллекциюСтрок(Блок);
	
	Результат = СтрСоединить(КоллекцияСтрок, Символы.ПС);
	Возврат Результат;
КонецФункции

// Параметры:
//   Блок - см. НовыйБлок
// Возвращаемое значение:
//   Массив
//
Функция БлокВКоллекциюСтрок(Знач Блок)
	
	КоллекцияСтрок = Новый Массив;
	
	Если СтрДлина(Блок.Описание) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Описание);
	КонецЕсли;
	
	Если СтрДлина(Блок.ИнструкцияПрепроцессора) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.ИнструкцияПрепроцессора);
	КонецЕсли;
	
	Если СтрДлина(Блок.Заголовок) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Заголовок);
	КонецЕсли;
	
	Для Каждого БлокСодержимого Из Блок.Содержимое Цикл
		КоллекцияСтрок.Добавить(БлокВСтроку(БлокСодержимого));
	КонецЦикла;
	
	Если СтрДлина(Блок.Подвал) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Подвал);
	КонецЕсли;
	
	Возврат КоллекцияСтрок;

КонецФункции

// Возвращаемое значение:
//   Структура:
//   * Родитель - Неопределено
//   * Подвал - Строка
//   * Содержимое - Массив
//   * Заголовок - Строка
//   * ИнструкцияПрепроцессора - Строка
//   * Описание - Строка
//
Функция НовыйБлок(Родитель = Неопределено, Заголовок = "", Описание = "")
	Результат = Новый Структура;
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("ИнструкцияПрепроцессора", "");
	Результат.Вставить("Заголовок", Заголовок);
	Результат.Вставить("Содержимое", Новый Массив);
	Результат.Вставить("Подвал", "");
	
	Результат.Вставить("Родитель", Родитель);
	Возврат Результат;
КонецФункции

Функция НайтиБлок(КоллекцияБлоков, Заголовок, ИскатьВПодчиненных = Истина)
	Результат = Неопределено;
	
	// Поиск по верхнему уровню.
	Для Каждого Элемент Из КоллекцияБлоков Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНачинаетсяС(СокрЛ(Элемент.Заголовок), Заголовок) Тогда
			Возврат Элемент;
		КонецЕсли;
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по уровню ниже.
	Если Результат = Неопределено И ИскатьВПодчиненных Тогда
		Для Каждого Элемент Из КоллекцияБлоков Цикл
			Если ТипЗнч(Элемент) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Результат = НайтиБлок(Элемент.Содержимое, Заголовок);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НайтиБлоки(КоллекцияБлоков, Знач Заголовки)
	
	Если ТипЗнч(Заголовки) = Тип("Строка") Тогда
		Заголовки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заголовки);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из КоллекцияБлоков Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Заголовок Из Заголовки Цикл
			Если СтрНачинаетсяС(СокрЛ(Элемент.Заголовок), Заголовок) Тогда
				Результат.Добавить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НайденныеБлоки = НайтиБлоки(Элемент.Содержимое, Заголовки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НайденныеБлоки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция ЭтоПродолжениеЗаголовка(Заголовок, Строка)
	Возврат (СтрНачинаетсяС(Заголовок, "Функция") Или СтрНачинаетсяС(Заголовок, "Процедура"))
		И СтрНайти(Заголовок, ")") = 0
		Или СтрНачинаетсяС(СокрЛ(Заголовок), "Перем") И СтрНайти(Заголовок, ";") = 0;
КонецФункции

Функция ЭтоЗаголовокБлока(Знач Строка, ВидыБлоков)
	Строка = СокрЛП(Строка);
	
	Для Каждого ВидБлока Из ВидыБлоков Цикл
		Если СтрНачинаетсяС(Строка, ВидБлока.Ключ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ЭтоПодвалБлока(Знач Строка, Блок, ВидыБлоков)
	Строка = СокрЛ(Строка);
	ЗаголовокБлока = СокрЛ(Блок.Заголовок);
	
	Для Каждого ВидБлока Из ВидыБлоков Цикл
		Если ВидБлока.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрНачинаетсяС(Строка, ВидБлока.Значение) Тогда
			Если СтрНачинаетсяС(ЗаголовокБлока, ВидБлока.Ключ) Тогда
				Возврат Истина;
			Иначе
				// Это подвал, но от другого блока. Проверяем его к родительским блокам.
				ТекущийБлок = Блок;
				Пока ТекущийБлок <> Неопределено И Не СтрНачинаетсяС(СокрЛ(ТекущийБлок.Заголовок), ВидБлока.Ключ) Цикл
					ТекущийБлок = ТекущийБлок.Родитель;
				КонецЦикла;
				Если ТекущийБлок = Неопределено Тогда
					// Это подвал блока, у которого нет начала.
					Возврат Ложь;
				Иначе
					// Переносим содержимое ошибочного блока в родительский блок.
					Для Каждого Элемент Из Блок.Содержимое Цикл
						ТекущийБлок.Содержимое.Добавить(Элемент);
					КонецЦикла;
					Блок.Содержимое = Новый Массив;
					
					// Переключаем текущий блок на родительский.
					Блок = ТекущийБлок; 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ВидыБлоков()
	Результат = Новый Соответствие;
	Результат.Вставить("#Если", "#КонецЕсли");
	Результат.Вставить("Функция", "КонецФункции");
	Результат.Вставить("Процедура", "КонецПроцедуры");
	Результат.Вставить("#Область", "#КонецОбласти");
	Результат.Вставить("// _Демо начало", "// _Демо конец");
	Результат.Вставить("// СтандартныеПодсистемы.", "// Конец СтандартныеПодсистемы.");
	Результат.Вставить("Перем ", Неопределено);
	Возврат Результат;
КонецФункции

Процедура ПоместитьСтрокиОписанияВСодержимое(Содержимое, Описание)
	Если Описание.Количество() > 0 Тогда
		Для Каждого СтрокаОписания Из Описание Цикл
			Содержимое.Добавить(СтрокаОписания);
		КонецЦикла;
		Описание.Очистить();
	КонецЕсли;
КонецПроцедуры

Функция МодульФормы(СтрокаФормы)
	ПолноеИмяМодуля = СтрокаФормы.Каталог + "Ext\Form\Module.bsl";
	Возврат ОписаниеМодуля(ПолноеИмяМодуля);
КонецФункции

Функция ЗаписатьМодуль(Модуль)
	ТекстМодуля = БлокВСтроку(Модуль.Структура);
	ПолноеИмяМодуля = Модуль.ПолноеИмяМодуля;
	Если ТекстМодуля <> ПрочитатьТекстМодуля(ПолноеИмяМодуля) Тогда
		Модуль.ТекстМодуля = ТекстМодуля;
		ЗаписатьТекстМодуля(ПолноеИмяМодуля, ТекстМодуля);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ОписаниеМодуля(ПолноеИмяМодуля)
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяМодуля", ПолноеИмяМодуля);
	Результат.Вставить("ТекстМодуля", ПрочитатьТекстМодуля(ПолноеИмяМодуля));
	Возврат Результат;
КонецФункции

Процедура ПрочитатьСтруктуруМодуля(Модуль)
	Если Не Модуль.Свойство("Структура") Тогда
		Модуль.Вставить("Структура", СтрокаВБлок(Модуль.ТекстМодуля));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Параметры:
//   Параметры - Структура:
//   * ИзмененныеФайлы - Массив
//   СтрокаОбъекта - Структура:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//   СтрокаФормы - Структура:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//
Процедура УправлениеДоступом_ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы)
	
	Модуль = МодульФормы(СтрокаФормы);
	Если СтрНайти(Модуль.ТекстМодуля, "УправлениеДоступом.ПриЧтенииНаСервере(") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедураМодуля = НайтиПроцедуруМодуля(Модуль, "ПриЧтенииНаСервере");
	Если ПроцедураМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстДляВставки =
	"УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);";
	
	Если ЭтоБиблиотечныйОбъект(СтрокаОбъекта.Метаданные) Тогда
		ТекстДляВставки =
		"Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.УправлениеДоступом"") Тогда
		|	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль(""УправлениеДоступом"");
		|	МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		|КонецЕсли;";
	КонецЕсли;
	
	ДобавитьОтступы(ТекстДляВставки);
	
	ПроцедураМодуля = НайтиПроцедуруМодуля(Модуль, "ПослеЗаписиНаСервере");
	Если ПроцедураМодуля = Неопределено Тогда
		// Добавление обработчика
		ИмяФайла = СтрокаФормы.Каталог + "Ext\Form.xml";
		ДокументDOM = ПрочитатьДокументDOM(ИмяФайла);
		Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
		Выражение = "/xmlns:Form/xmlns:Events/xmlns:Event[@name='AfterWriteAtServer']";
		Если ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий() = Неопределено Тогда
			Выражение = "/xmlns:Form/xmlns:Events";
			ОбработчикиФормы = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий();
			Если ОбработчикиФормы = Неопределено Тогда
				Выражение = "/xmlns:Form";
				Форма = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий();
				ОбработчикиФормы = Форма.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Events"));
			КонецЕсли;
			Обработчик = ОбработчикиФормы.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Event"));
			Обработчик.УстановитьАтрибут("name", "AfterWriteAtServer");
			Обработчик.ТекстовоеСодержимое = "ПослеЗаписиНаСервере";
			ЗаписатьДокументDOM(ДокументDOM, ИмяФайла);
		КонецЕсли;
		
		// Вставка процедуры
		ОбластьОбработчикиСобытийФормы = ПолучитьОбластьОбработчикиСобытийФормы(Модуль);
		ПроцедураМодуля = ДобавитьЭлементВКонец(ОбластьОбработчикиСобытийФормы);
		ПроцедураМодуля.ИнструкцияПрепроцессора = "&НаСервере";
		ПроцедураМодуля.Заголовок = "Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)";
		ПроцедураМодуля.Подвал = "КонецПроцедуры";
	Иначе
		ПроцедураСтрокой = БлокВСтроку(ПроцедураМодуля);
		// Не изменяет процедуру, если уже есть вставка кода.
		Если СтрНайти(ПроцедураСтрокой, "УправлениеДоступом.ПослеЗаписиНаСервере(") > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьУправлениеДоступом = ПолучитьОбластьПодсистемы(ПроцедураМодуля, "СтандартныеПодсистемы.УправлениеДоступом", Истина, Истина);
	Вставка = ДобавитьЭлементВНачало(ОбластьУправлениеДоступом, Ложь);
	Вставка.Содержимое.Добавить(ТекстДляВставки);
	
	ЗаписатьМодуль(Модуль);
	ИмяФайла = СтрокаОбъекта.Каталог + "Forms" + ПолучитьРазделительПути() + СтрокаФормы.Имя + ".xml";
	Если Метаданные.ОбщиеФормы.Содержит(СтрокаФормы.Метаданные) Тогда
		ИмяФайла = Параметры.РабочийКаталог + "CommonForms" + ПолучитьРазделительПути() + СтрокаФормы.Имя + ".xml";
	КонецЕсли;
	Параметры.ИзмененныеФайлы.Добавить(ИмяФайла);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПомощника

// Параметры:
//   Параметры - Структура:
//     * ГлобальныеСообщения - ТаблицаЗначений
//
Процедура ЗаписатьГлобальноеСообщение(Параметры, Текст, Порядок)
	Сообщение = Параметры.ГлобальныеСообщения.Добавить();
	Сообщение.ТекстГС   = Текст;
	Сообщение.ПорядокГС = Порядок;
КонецПроцедуры

// Параметры:
//   Параметры - Структура:
//     * СообщенияПоОбъектам - ТаблицаЗначений
//   СтрокаФормы - см. УправлениеДоступом_ПриАнализеФормы.СтрокаОбъекта
//
Процедура ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, ТипСообщения, Текст)
	СтрокаВида = СтрокаОбъекта.Родитель;
	
	Сообщение = Параметры.СообщенияПоОбъектам.Добавить();
	Сообщение.ПриоритетВида    = Параметры.ПриоритетыВидов[СтрокаВида.Имя];
	Сообщение.Вид              = СтрокаВида.ПредставлениеСписка;
	Сообщение.ОбъектМетаданных = СтрокаОбъекта.ПолноеИмя;
	Если ТипЗнч(СтрокаФормы) = Тип("Строка") Тогда
		Сообщение.Форма = СтрокаФормы;
	Иначе
		Сообщение.Форма            = СтрокаФормы.Имя;
	КонецЕсли;
	Сообщение.ТипСообщения     = ТипСообщения;
	Сообщение.Текст            = Текст;
КонецПроцедуры

// Обработчики фоновых заданий.

Процедура Внедрение(Параметры, АдресРезультата) Экспорт
	Если Не ЗначениеЗаполнено(Параметры.РабочийКаталог) Тогда
		ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла("DevTools"));
		СоздатьКаталог(ПутьККаталогу);
		Параметры.РабочийКаталог = ПутьККаталогу;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Параметры.Пользователь = ИмяПользователя();
	КонецЕсли;
	
	Если Параметры.ВыгружатьФайлыВКаталог Тогда
		ВыгрузитьКонфигурациюВXML(Параметры);
	КонецЕсли;
	
	ПрочитатьОсновныеНастройки(Параметры);
	ИзменитьВыгруженныеТексты(Параметры);
	ЗагрузитьКонфигурациюИзXML(Параметры);
	
	Результат = Новый Структура;
	Результат.Вставить("РабочийКаталог",    Параметры.РабочийКаталог);
	Результат.Вставить("ДеревоМетаданных",  Параметры.ДеревоМетаданных);
	Результат.Вставить("ТабличныйДокумент", СформироватьОтчет(Параметры));
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

// Функции, используемые из формы и из этого модуля.

Функция ОткрытКонфигуратор() Экспорт
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Чтение метаданных текущей конфигурации.

Процедура ПрочитатьОсновныеНастройки(Параметры)
	
	ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Чтение основных настроек из переопределяемых модулей...'"));
	
	Параметры.Вставить("СКД", ПолучитьМакет("СхемаКомпоновкиДанных"));
	Параметры.Вставить("ГлобальныеСообщения", СоздатьТаблицуПоСхемеНабора(Параметры.СКД, "ГлобальныеСообщения"));
	Параметры.Вставить("СообщенияПоОбъектам", СоздатьТаблицуПоСхемеНабора(Параметры.СКД, "СообщенияПоОбъектам"));
	Параметры.Вставить("ИзмененныеФайлы", Новый Массив);
	
	ПриЧтенииОсновныхНастроек(Параметры);
	
	ДлительныеОперации.СообщитьПрогресс(2, НСтр("ru = 'Построение дерева метаданных...'"));
	ЗарегистрироватьСоответствияДляБыстрогоПреобразованияИмен(Параметры);
	
	Параметры.Вставить("КоличествоОбъектов", 0);
	Параметры.Вставить("ДеревоМетаданных", ДеревоМетаданных());
	Параметры.Вставить("ПриоритетВида", 0);
	Параметры.Вставить("ПриоритетыВидов", Новый Соответствие);

	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ОбщиеМодули", НСтр("ru = 'Общие модули'"), НСтр("ru = 'Общий модуль'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ОбщиеФормы", НСтр("ru = 'Общие формы'"), НСтр("ru = 'Общая форма'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыОбмена", НСтр("ru = 'Планы обмена'"), НСтр("ru = 'План обмена'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Справочники", НСтр("ru = 'Справочники'"), НСтр("ru = 'Справочник'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Документы", НСтр("ru = 'Документы'"), НСтр("ru = 'Документ'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ЖурналыДокументов", НСтр("ru = 'Журналы документов'"), НСтр("ru = 'Журнал документов'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Отчеты", НСтр("ru = 'Отчеты'"), НСтр("ru = 'Отчет'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Обработки", НСтр("ru = 'Обработки'"), НСтр("ru = 'Обработка'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), НСтр("ru = 'План видов характеристик'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыСчетов", НСтр("ru = 'Планы счетов'"), НСтр("ru = 'План счетов'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"), НСтр("ru = 'План видов расчета'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыСведений", НСтр("ru = 'Регистры сведений'"), НСтр("ru = 'Регистр сведений'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыНакопления", НСтр("ru = 'Регистры накопления'"), НСтр("ru = 'Регистр накопления'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"), НСтр("ru = 'Регистр бухгалтерии'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "РегистрыРасчета", НСтр("ru = 'Регистры расчета'"), НСтр("ru = 'Регистр расчета'"), Ложь);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "БизнесПроцессы", НСтр("ru = 'Бизнес-процессы'"), НСтр("ru = 'Бизнес-процесс'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Задачи", НСтр("ru = 'Задачи'"), НСтр("ru = 'Задача'"), Истина);
	ЗарегистрироватьКоллекциюМетаданных(Параметры, "Роли", НСтр("ru = 'Роли'"), НСтр("ru = 'Роль'"), Ложь);

	Параметры.Удалить("ПриоритетВида");
	
КонецПроцедуры

// Возвращаемое значение:
//  ДеревоЗначений:
//   * Метаданные - ОбъектМетаданных
//   * Имя - Строка
//   * ПолноеИмя - Строка
//   * ПредставлениеСписка - Строка
//   * ПредставлениеОбъекта - Строка
//   * Каталог - Строка
//   * НомерКартинки - Число
//   * Ссылочный - Булево
//  
Функция ДеревоМетаданных()
	
	ДеревоМетаданных = Новый ДеревоЗначений();
	
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеСписка", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеОбъекта", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка"));
	ДеревоМетаданных.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ДеревоМетаданных.Колонки.Добавить("Ссылочный", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоМетаданных;
	
КонецФункции

Функция СоздатьТаблицуПоСхемеНабора(СхемаКомпоновкиДанных, ИмяНабораДанных)
	Результат = Новый ТаблицаЗначений;
	ПоляНабораДанныхСхемыКД = СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля;
	Для Каждого ЭлементКД Из ПоляНабораДанныхСхемыКД Цикл
		Если ТипЗнч(ЭлементКД) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ИмяКолонки = СтрЗаменить(Строка(ЭлементКД.Поле), ".", "_");
			Результат.Колонки.Добавить(ИмяКолонки, ЭлементКД.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Параметры:
//   Параметры - Структура:
//   * ДеревоМетаданных - ДеревоЗначений:
//   ** Метаданные - ОбъектМетаданных
//   ** Имя - Строка
//   ** ПолноеИмя - Строка
//   ** ПредставлениеСписка - Строка
//   ** ПредставлениеОбъекта - Строка
//   ** Каталог - Строка
//   ** НомерКартинки - Число
//   ** Ссылочный - Булево
//
Процедура ЗарегистрироватьКоллекциюМетаданных(Параметры, Вид, ПредставлениеСписка, ПредставлениеОбъекта, Ссылочный)
	Параметры.ПриоритетВида = Параметры.ПриоритетВида + 1;
	Параметры.ПриоритетыВидов.Вставить(Вид, Параметры.ПриоритетВида);
	
	Коллекция = Метаданные[Вид];
	Количество = Коллекция.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	Параметры.КоличествоОбъектов = Параметры.КоличествоОбъектов + Количество;
	
	ДеревоВПараметрах = Параметры.ДеревоМетаданных;
	СтрокаВида = ДеревоВПараметрах.Строки.Добавить();
	СтрокаВида.Имя       = Вид;
	СтрокаВида.ПолноеИмя = Вид;
	СтрокаВида.ПредставлениеСписка  = ПредставлениеСписка;
	СтрокаВида.ПредставлениеОбъекта = ПредставлениеОбъекта;
	СтрокаВида.НомерКартинки = Параметры.НомераКартинок[НРег(Вид)];
	СтрокаВида.Ссылочный = Ссылочный;
	
	Для Каждого ОбъектМетаданных Из Коллекция Цикл
		Если ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда
			Продолжить; // Объект расширения.
		КонецЕсли;
		
		СтрокаОбъекта = СтрокаВида.Строки.Добавить();
		СтрокаОбъекта.Метаданные         = ОбъектМетаданных;
		СтрокаОбъекта.Имя                = ОбъектМетаданных.Имя;
		СтрокаОбъекта.ПолноеИмя          = ОбъектМетаданных.ПолноеИмя();
		СтрокаОбъекта.НомерКартинки      = СтрокаВида.НомерКартинки;
		ЗаполнитьПредставлениеОбъектаМетаданных(СтрокаОбъекта, ОбъектМетаданных);
		СтрокаОбъекта.Ссылочный = Ссылочный;
		
		Если Вид = "ОбщиеФормы" Или Вид = "ОбщиеМодули" Или Вид = "Роли" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого МетаданныеФормы Из ОбъектМетаданных.Формы Цикл
			СтрокаФормы = СтрокаОбъекта.Строки.Добавить();
			СтрокаФормы.Метаданные = МетаданныеФормы;
			СтрокаФормы.Имя        = МетаданныеФормы.Имя;
			СтрокаФормы.ПолноеИмя  = МетаданныеФормы.ПолноеИмя();
			СтрокаФормы.ПредставлениеСписка  = МетаданныеФормы.Представление();
			СтрокаФормы.ПредставлениеОбъекта = СтрокаФормы.ПредставлениеСписка;
			СтрокаФормы.Ссылочный = Ссылочный;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПредставлениеОбъектаМетаданных(СтрокаОбъекта, ОбъектМетаданных)
	СтандартныеСвойства = Новый Структура("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Тогда
		СтрокаОбъекта.ПредставлениеОбъекта = СтандартныеСвойства.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Тогда
		СтрокаОбъекта.ПредставлениеОбъекта = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
	Иначе
		СтрокаОбъекта.ПредставлениеОбъекта = ОбъектМетаданных.Представление();
	КонецЕсли;
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеСписка) Тогда
		СтрокаОбъекта.ПредставлениеСписка = СтандартныеСвойства.ПредставлениеСписка;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеСписка) Тогда
		СтрокаОбъекта.ПредставлениеСписка = СтандартныеСвойства.РасширенноеПредставлениеСписка;
	Иначе
		СтрокаОбъекта.ПредставлениеСписка = ОбъектМетаданных.Представление();
	КонецЕсли;
КонецПроцедуры

// Выгрузка и загрузка конфигурации из XML.

Функция ВыгрузитьКонфигурациюВXML(Параметры)
	
	Если ФайлСуществует(Параметры.РабочийКаталог) Тогда
		УдалитьФайлы(Параметры.РабочийКаталог, "*");
	Иначе
		СоздатьКаталог(Параметры.РабочийКаталог);
	КонецЕсли;
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	КаталогКопии1CD = Неопределено;
	
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			ДлительныеОперации.СообщитьПрогресс(5, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Копирование %1, т.к. не закрыт конфигуратор...'"),
				"1Cv8.1CD"));			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПутьККонфигурации).file;
			КаталогКопии1CD = Параметры.РабочийКаталог + "BaseCopy" + ПолучитьРазделительПути();
			СоздатьКаталог(КаталогКопии1CD);
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогКопии1CD + "1Cv8.1CD");
			ПутьККонфигурации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"File=""%1"";", КаталогКопии1CD);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для выгрузки модулей необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + "Выгрузка.log";
	
	ДлительныеОперации.СообщитьПрогресс(10, НСтр("ru = 'Выгрузка конфигурации в XML...'"));
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(ПутьККонфигурации);
	Если Не ПустаяСтрока(Параметры.Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Параметры.Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Параметры.Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(Параметры.РабочийКаталог);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если КаталогКопии1CD <> Неопределено Тогда
		УдалитьФайлы(КаталогКопии1CD);
	КонецЕсли;
	
	Если Результат.КодВозврата <> 0 Тогда
		Сообщения = "";
		Файл = Новый Файл(ИмяФайлаСообщений);
		Если Файл.Существует() Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяФайлаСообщений);
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выгрузить конфигурацию в XML (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, Символы.ПС + Символы.Таб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьКонфигурациюИзXML(Параметры)
		
	Если Параметры.ИзмененныеФайлы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Файлы конфигурации не изменены, загрузка не требуется.'");
		ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 90);
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаИзмененныеФайлы = Параметры.РабочийКаталог + "ИзмененныеФайлы.txt";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаИзмененныеФайлы, КодировкаТекста.UTF8, , Ложь);
	ЗаписьТекста.Записать(СтрСоединить(Параметры.ИзмененныеФайлы, Символы.ПС));
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + "Загрузка.log";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "\1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединенияИнформационнойБазы());
	Если Не ПустаяСтрока(Параметры.Пользователь) Тогда 
		КомандаЗапуска.Добавить("/N");
		КомандаЗапуска.Добавить(Параметры.Пользователь);
		КомандаЗапуска.Добавить("/P");
		КомандаЗапуска.Добавить(Параметры.Пароль);
	КонецЕсли;
	КомандаЗапуска.Добавить("/LoadConfigFromFiles");
	КомандаЗапуска.Добавить(Параметры.РабочийКаталог);
	КомандаЗапуска.Добавить("-listfile");
	КомандаЗапуска.Добавить(ИмяФайлаИзмененныеФайлы);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	АдресФайлаРучнойЗагрузки = Параметры.РабочийКаталог + "load.cmd";
	ЗаписьТекста = Новый ЗаписьТекста(АдресФайлаРучнойЗагрузки, КодировкаТекста.OEM);
	ЗаписьТекста.Записать(ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска));
	ЗаписьТекста.Закрыть();
	
	Если ОткрытКонфигуратор() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Конфигурация не загружена, т.к. открыт конфигуратор.
				|Загрузку можно выполнить в конфигураторе из каталога ""%1"" (или запустив файл ""%2"").'"),
			Параметры.РабочийКаталог,
			АдресФайлаРучнойЗагрузки);
		ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 10);
		Возврат Ложь;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(90, НСтр("ru = 'Загрузка конфигурации из XML...'"));
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Сообщения = "";
		Файл = Новый Файл(ИмяФайлаСообщений);
		Если Файл.Существует() Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений);
			Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось загрузить изменения в конфигурацию (код ошибки ""%1"")'"),
			Результат.КодВозврата);
		Если Сообщения <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, Символы.ПС + Символы.Таб);
		Иначе
			ТекстОшибки = ТекстОшибки + "."
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Внесены изменения в конфигурацию.'");
	ЗаписатьГлобальноеСообщение(Параметры, ТекстСообщения, 90);
	
	Возврат Истина;
	
КонецФункции

// Анализ и изменение файлов конфигурации.
// 
// Параметры:
//   Параметры - Структура:
//   * ВыгружатьВКаталог - Булево
//   * РабочийКаталог - Строка
//   * Пользователь - СправочникСсылка.Пользователи
//   * Пароль - Строка
//   * СКД - СхемаКомпоновкиДанных
//   * ГлобальныеСообщения - ТаблицаЗначений
//   * СообщенияПоОбъектам - ТаблицаЗначений
//   * ИзмененныеФайлы - Массив из Строка
//   * КоличествоОбъектов - Число
//   * ДеревоМетаданных - см. ДеревоМетаданных
//   * ПриоритетВида - Число
//   * ПриоритетВида - Соответствие из КлючИЗначение:
//     ** Ключ - Строка
//     ** Значение - Число
//   * ОбъектыСКомандами - см. ОбъектыСКомандами
//   * НовыеОбъектыСКомандами - см. ОбъектыСКомандами
//   * СвойстваРазделовДатЗапрета - см. ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.СвойстваРазделовДатЗапрета
//   * НовыеПредопределенныеРазделыДатЗапрета - Массив
//
Процедура ИзменитьВыгруженныеТексты(Параметры)
	ДостигнутыйПроцент = 20;
	Диапазон = 90 - ДостигнутыйПроцент;
	Всего = Параметры.КоличествоОбъектов;
	Номер = 0;
	Для Каждого СтрокаВида Из Параметры.ДеревоМетаданных.Строки Цикл
		ВидНаАнглийском = Параметры.РусскоАнглийскийВоМножественном[НРег(СтрокаВида.Имя)];
		Если ВидНаАнглийском = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен перевод имени ""%1"" на английский язык.'"),
				СтрокаВида.Имя);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 0);
			Продолжить;
		КонецЕсли;
		СтрокаВида.Каталог = Параметры.РабочийКаталог + ВидНаАнглийском + ПолучитьРазделительПути();
		Если Не ФайлСуществует(СтрокаВида.Каталог) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружен каталог ""%1"".'"),
				СтрокаВида.Каталог);
			ЗаписатьГлобальноеСообщение(Параметры, Текст, 10);
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаОбъекта Из СтрокаВида.Строки Цикл
			// Прогресс анализа.
			Номер = Номер + 1;
			Процент = ДостигнутыйПроцент + Диапазон*Номер/Всего;
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Анализируется %1 ""%2""...'"),
				НРег(СтрокаВида.ПредставлениеОбъекта),
				СтрокаОбъекта.Имя);
			ДлительныеОперации.СообщитьПрогресс(Процент, Текст);
			
			// Анализ форм.
			СтрокаОбъекта.Каталог = СтрокаВида.Каталог + СтрокаОбъекта.Имя + ПолучитьРазделительПути();
			Для Каждого СтрокаФормы Из СтрокаОбъекта.Строки Цикл
				СтрокаФормы.Каталог = СтрокаОбъекта.Каталог + "Forms" + ПолучитьРазделительПути() + СтрокаФормы.Имя + ПолучитьРазделительПути();
				Если Не ФайлСуществует(СтрокаФормы.Каталог) Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не обнаружен каталог ""%1"".'"),
						СтрокаФормы.Каталог);
					ЗаписатьСообщениеПоОбъекту(Параметры, СтрокаОбъекта, СтрокаФормы, "Ошибка", Текст);
					Продолжить;
				КонецЕсли;
				
				ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаФормы);
			КонецЦикла;
			
			// Анализ модулей объекта.
			Если СтрокаВида.Имя = "ОбщиеФормы" Тогда
				ПриАнализеФормы(Параметры, СтрокаОбъекта, СтрокаОбъекта);
			Иначе
				ПриАнализеОбъекта(Параметры, СтрокаОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Формирование результирующего отчета.

Функция СформироватьОтчет(Параметры)
	НастройкиКД = Параметры.СКД.ВариантыНастроек.Основной.Настройки;
	
	ВнешниеНаборыДанных = Новый Структура("ГлобальныеСообщения, СообщенияПоОбъектам");
	ЗаполнитьЗначенияСвойств(ВнешниеНаборыДанных, Параметры);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(Параметры.СКД, НастройкиКД);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	Возврат ДокументРезультат;
КонецФункции

// Работа с файлами.

Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

// Преобразования.

Процедура ЗарегистрироватьСоответствияДляБыстрогоПреобразованияИмен(Параметры)
	Параметры.Вставить("РусскоАнглийскийВЕдинственном", Новый Соответствие);
	Параметры.Вставить("РусскоАнглийскийВоМножественном", Новый Соответствие);
	Параметры.Вставить("РусскийИзЕдинственногоВоМножественный", Новый Соответствие);
	Параметры.Вставить("РусскийИзМножественногоВЕдинственный", Новый Соответствие);
	Параметры.Вставить("НомераКартинок", Новый Соответствие);
	
	// Виды объектов метаданных.
	ЗарегистрироватьТермин(Параметры, "WebСервис", "WebСервисы", "WebService", "WebServices", -1);
	ЗарегистрироватьТермин(Параметры, "WSСсылка", "WSСсылки", "WSReference", "", -1);
	ЗарегистрироватьТермин(Параметры, "БизнесПроцесс", "БизнесПроцессы", "BusinessProcess", "BusinessProcesses", 19);
	ЗарегистрироватьТермин(Параметры, "ГруппаКоманд", "ГруппыКоманд", "CommandGroup", "CommandGroups", -1);
	ЗарегистрироватьТермин(Параметры, "Документ", "Документы", "Document", "Documents", 12);
	ЗарегистрироватьТермин(Параметры, "ЖурналДокументов", "ЖурналыДокументов", "DocumentJournal", "DocumentJournals");
	ЗарегистрироватьТермин(Параметры, "Задача", "Задачи", "Task", "Tasks", 21);
	ЗарегистрироватьТермин(Параметры, "Константа", "Константы", "Constant", "Constants", 25);
	ЗарегистрироватьТермин(Параметры, "Конфигурация", "", "Configuration", "Configurations", -1);
	ЗарегистрироватьТермин(Параметры, "КритерийОтбора", "КритерииОтбора", "FilterCriterion", "FilterCriteria");
	ЗарегистрироватьТермин(Параметры, "НумераторДокументов", "НумераторыДокументов", "DocumentNumerator", "", -1);
	ЗарегистрироватьТермин(Параметры, "Обработка", "Обработки", "DataProcessor", "DataProcessors");
	ЗарегистрироватьТермин(Параметры, "ОбщаяКартинка", "ОбщиеКартинки", "CommonPicture", "CommonPictures", БиблиотекаКартинок.Картинка);
	ЗарегистрироватьТермин(Параметры, "ОбщаяКоманда", "ОбщиеКоманды", "CommonCommand", "CommonCommands", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщаяФорма", "ОбщиеФормы", "CommonForm", "CommonForms", БиблиотекаКартинок.Форма);
	ЗарегистрироватьТермин(Параметры, "ОбщийМакет", "ОбщиеМакеты", "CommonTemplate", "CommonTemplates", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщийМодуль", "ОбщиеМодули", "CommonModule", "CommonModules", -1);
	ЗарегистрироватьТермин(Параметры, "ОбщийРеквизит", "ОбщиеРеквизиты", "CommonAttribute", "CommonAttributes", 3);
	ЗарегистрироватьТермин(Параметры, "ОпределяемыйТип", "ОпределяемыеТипы", "DefinedType", "DefinedTypes", -1);
	ЗарегистрироватьТермин(Параметры, "Отчет", "Отчеты", "Report", "Reports");
	ЗарегистрироватьТермин(Параметры, "ПакетXDTO", "ПакетыXDTO", "XDTOPackage", "XDTOPackages", -1);
	ЗарегистрироватьТермин(Параметры, "ПараметрСеанса", "ПараметрыСеанса", "SessionParameter", "SessionParameters", -1);
	ЗарегистрироватьТермин(Параметры, "ПараметрФункциональныхОпций", "ПараметрыФункциональныхОпций", "FunctionalOptionsParameter", "FunctionalOptionsParameters", -1);
	ЗарегистрироватьТермин(Параметры, "Перечисление", "Перечисления", "Enum", "Enums");
	ЗарегистрироватьТермин(Параметры, "ПланВидовРасчета", "ПланыВидовРасчета", "ChartOfCalculationTypes", "ChartsOfCalculationTypes", 17);
	ЗарегистрироватьТермин(Параметры, "ПланВидовХарактеристик", "ПланыВидовХарактеристик", "ChartOfCharacteristicTypes", "ChartsOfCharacteristicTypes", 3);
	ЗарегистрироватьТермин(Параметры, "ПланОбмена", "ПланыОбмена", "ExchangePlan", "ExchangePlans", 23);
	ЗарегистрироватьТермин(Параметры, "ПланСчетов", "ПланыСчетов", "ChartOfAccounts", "ChartsOfAccounts", 15);
	ЗарегистрироватьТермин(Параметры, "ПодпискаНаСобытие", "ПодпискиНаСобытия", "EventSubscription", "EventSubscriptions", -1);
	ЗарегистрироватьТермин(Параметры, "Подсистема", "Подсистемы", "Subsystem", "Subsystems");
	ЗарегистрироватьТермин(Параметры, "Последовательность", "Последовательности", "Sequence", "Sequences", -1);
	ЗарегистрироватьТермин(Параметры, "РегистрБухгалтерии", "РегистрыБухгалтерии", "AccountingRegister", "AccountingRegisters", 34);
	ЗарегистрироватьТермин(Параметры, "РегистрНакопления", "РегистрыНакопления", "AccumulationRegister", "AccumulationRegisters", 28);
	ЗарегистрироватьТермин(Параметры, "РегистрРасчета", "РегистрыРасчета", "CalculationRegister", "CalculationRegisters", 38);
	ЗарегистрироватьТермин(Параметры, "РегистрСведений", "РегистрыСведений", "InformationRegister", "InformationRegisters", 26);
	ЗарегистрироватьТермин(Параметры, "РегламентноеЗадание", "РегламентныеЗадания", "ScheduledJob", "ScheduledJobs");
	ЗарегистрироватьТермин(Параметры, "Роль", "Роли", "Role", "Roles", -1);
	ЗарегистрироватьТермин(Параметры, "Справочник", "Справочники", "Catalog", "Catalogs");
	ЗарегистрироватьТермин(Параметры, "Стиль", "Стили", "Style", "", -1);
	ЗарегистрироватьТермин(Параметры, "ФункциональнаяОпция", "ФункциональныеОпции", "FunctionalOption", "FunctionalOptions", БиблиотекаКартинок.УстановитьФлажки);
	ЗарегистрироватьТермин(Параметры, "ХранилищеНастроек", "ХранилищаНастроек", "SettingsStorage", "SettingsStorages");
	ЗарегистрироватьТермин(Параметры, "ЭлементСтиля", "ЭлементыСтиля", "StyleItem", "StyleItems", -1);
	ЗарегистрироватьТермин(Параметры, "Язык", "Языки", "Language", "Languages", -1);
	
	// Типы вложенных объектов метаданных.
	ЗарегистрироватьТермин(Параметры, "Модуль", "", "Module", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульМенеджера", "", "ManagerModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульОбъекта", "", "ObjectModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульКоманды", "", "CommandModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульНабораЗаписей", "", "RecordSetModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульМенеджераЗначения", "", "ValueManagerModule", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "МодульВнешнегоСоединения", "", "ExternalConnectionModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульУправляемогоПриложения", "", "ManagedApplicationModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульОбычногоПриложения", "", "OrdinaryApplicationModule", "", -1);
	ЗарегистрироватьТермин(Параметры, "МодульСеанса", "", "SessionModule", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "Справка", "", "Help", "");
	ЗарегистрироватьТермин(Параметры, "Форма", "Формы", "Form", "Forms");
	ЗарегистрироватьТермин(Параметры, "КартаМаршрута", "", "Flowchart", "", -1);
	ЗарегистрироватьТермин(Параметры, "Картинка", "Картинки", "Picture", "Pictures");
	ЗарегистрироватьТермин(Параметры, "КомандныйИнтерфейс", "", "CommandInterface", "", -1);
	
	ЗарегистрироватьТермин(Параметры, "Макет", "Макеты", "Template", "Templates", -1);
	ЗарегистрироватьТермин(Параметры, "Команда", "Команды", "Command", "Commands", -1);
	ЗарегистрироватьТермин(Параметры, "Агрегаты", "", "Aggregates", "", -1);
	ЗарегистрироватьТермин(Параметры, "Перерасчет", "Перерасчеты", "Recalculation", "Recalculations", -1);
	ЗарегистрироватьТермин(Параметры, "Предопределенные", "", "Predefined", "", -1);
	ЗарегистрироватьТермин(Параметры, "Состав", "", "Content", "", -1);
	ЗарегистрироватьТермин(Параметры, "Права", "", "Rights", "", -1);
	ЗарегистрироватьТермин(Параметры, "Расписание", "", "Schedule", "", -1);
	
	// Типы элементов форм.
	ЗарегистрироватьТермин(Параметры, "ГруппаКнопок", "", "ButtonGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "ГруппаКолонок", "", "ColumnGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "КоманднаяПанель", "", "CommandBar", "", -1);
	ЗарегистрироватьТермин(Параметры, "КонтекстноеМеню", "", "ContextMenu", "", -1);
	ЗарегистрироватьТермин(Параметры, "ОбычнаяГруппа", "", "UsualGroup", "", -1);
	ЗарегистрироватьТермин(Параметры, "Подменю", "", "Popup", "", -1);
	ЗарегистрироватьТермин(Параметры, "Страница", "", "Page", "", -1);
	ЗарегистрироватьТермин(Параметры, "Страницы", "", "Pages", "", -1);
	
КонецПроцедуры

Процедура ЗарегистрироватьТермин(Параметры, РусскийВЕдинственном, РусскийВоМножественном, АнглийскийВЕдинственном, АнглийскийВоМножественном, НомерКартинки = 0)
	Если РусскийВоМножественном = "" Тогда
		РусскийВоМножественном = РусскийВЕдинственном;
	КонецЕсли;
	Если АнглийскийВоМножественном = "" Тогда
		АнглийскийВоМножественном = АнглийскийВЕдинственном;
	КонецЕсли;
	Параметры.РусскоАнглийскийВЕдинственном.Вставить(НРег(РусскийВЕдинственном), АнглийскийВЕдинственном);
	Параметры.РусскоАнглийскийВоМножественном.Вставить(НРег(РусскийВоМножественном), АнглийскийВоМножественном);
	Параметры.РусскийИзЕдинственногоВоМножественный.Вставить(НРег(РусскийВЕдинственном), РусскийВоМножественном);
	Параметры.РусскийИзМножественногоВЕдинственный.Вставить(НРег(РусскийВоМножественном), РусскийВЕдинственном);
	Если НомерКартинки = 0 Тогда
		НомерКартинки = БиблиотекаКартинок[РусскийВЕдинственном];
	КонецЕсли;
	Параметры.НомераКартинок.Вставить(НРег(РусскийВоМножественном), НомерКартинки);
КонецПроцедуры

// Работа с файлами модулей.

Функция ПрочитатьТекстМодуля(ПолноеИмяМодуля)
	Если Не ФайлСуществует(ПолноеИмяМодуля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяМодуля);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат ТекстМодуля;
КонецФункции

Процедура ЗаписатьТекстМодуля(ПолноеИмяМодуля, ТекстМодуля)
	Файл = Новый Файл(ПолноеИмяМодуля);
	СоздатьКаталог(Файл.Путь);
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяМодуля, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстМодуля);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

// Работа с DOM и XPath.

Функция ПрочитатьДокументDOM(ПутьКФайлу)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

Процедура ЗаписатьДокументDOM(ДокументDOM, ИмяФайла)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
КонецПроцедуры

// Проверка принадлежности объектов к БСП.

Функция ЭтоБиблиотечныйОбъект(ОбъектМетаданных)
	
	Возврат БиблиотечныеОбъекты[ОбъектМетаданных.ПолноеИмя()] <> Неопределено;
	
КонецФункции

Функция ПрочитатьСписокОбъектовПодсистемы(Знач Подсистема, СписокОбъектов = Неопределено)
	
	Если СписокОбъектов = Неопределено Тогда
		СписокОбъектов = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
		СписокОбъектов.Вставить(ОбъектМетаданных.ПолноеИмя(), Истина);
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ПрочитатьСписокОбъектовПодсистемы(ПодчиненнаяПодсистема, СписокОбъектов)
	КонецЦикла;
	
	Возврат СписокОбъектов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

БиблиотечныеОбъекты = ПрочитатьСписокОбъектовПодсистемы(Метаданные.Подсистемы.СтандартныеПодсистемы);

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли