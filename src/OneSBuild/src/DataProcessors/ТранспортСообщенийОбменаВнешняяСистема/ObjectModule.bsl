///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ИдентификаторОбмена; // Идентификатор настройки обмена данными.
Перем ИдентификаторФайла; // Идентификатор пакета в сервисе.
Перем ЕстьСледующий; // Признак наличия файлов для обработки.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет инициализацию свойств обработки начальными значениями и константами.
//
// Параметры:
//  НастройкиТранспорта - Произвольный - параметры обмена данными.
//
Процедура Инициализация(НастройкиТранспорта) Экспорт
	
	ИдентификаторОбмена = НастройкиТранспорта.ИдентификаторОбмена;
	
КонецПроцедуры

// Выполняет отправку настроек обмена в сервис обмена данными с внешними системами.
//
// Параметры:
//  НастройкиXDTO - Структура - настройки обмена данными.
//
Процедура ОтправитьНастройкиXDTO(НастройкиXDTO) Экспорт
	
	Если НастройкиXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("AvailableVersion");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого НомерВерсии Из НастройкиXDTO.ПоддерживаемыеВерсии Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(НомерВерсии);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("Format");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(НастройкиXDTO.ФорматОбмена);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	РезультатОперации = СервисОбменаСообщениями.ОбновитьНастройкиОбмена(
		ИдентификаторОбмена,
		ЗаписьДанныхСообщения.Закрыть());
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ВызватьИсключение РезультатОперации.СообщениеОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

// Получает сообщение обмена из внешней системы.
//
// Параметры:
//  ИмяФайлаСообщенияОбмена - Строка - имя файла в который должно быть сохранено сообщение.
//
// Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - отсутствуют файлы для загрузки.
//
Функция ПолучитьСообщение(ИмяФайлаСообщенияОбмена) Экспорт
	
	РезультатОперации = СервисОбменаСообщениями.ОписаниеФайлаОбменаДанными(
		ИдентификаторОбмена);
	
	Если РезультатОперации.КодОшибки = "НетФайловДляЗагрузки" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ВызватьИсключение РезультатОперации.СообщениеОбОшибке;
	КонецЕсли;
	
	РезультатЗагрузкиФайла = СервисОбменаСообщениями.ФайлОбменаДанными(
		ИдентификаторОбмена,
		РезультатОперации.ОписаниеФайлаОбмена);
	Если ЗначениеЗаполнено(РезультатЗагрузкиФайла.КодОшибки) Тогда
		ВызватьИсключение РезультатЗагрузкиФайла.СообщениеОбОшибке;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатЗагрузкиФайла.АдресФайла);
	ДанныеФайла.Записать(ИмяФайлаСообщенияОбмена);
	
	ЕстьСледующий      = РезультатОперации.ОписаниеФайлаОбмена.ЕстьСледующий;
	ИдентификаторФайла = РезультатОперации.ОписаниеФайлаОбмена.ИдентификаторФайла;
	
	Возврат Истина;
	
КонецФункции

// Выполняется после обработки сообщения обмена и отправляет подтверждение
// об обработке.
//
// Параметры:
//   СообщениеОбработано - Булево - Истина - сообщение обработано, Ложь возникли
//                         при обработке;
//  ЕстьСледующееСообщение - Булево - признак наличия сообщений от внешней системы.
//
Процедура ПослеОбработкиПолученногоСообщения(СообщениеОбработано, ЕстьСледующееСообщение) Экспорт
	
	Если Не СообщениеОбработано Тогда
		ЕстьСледующееСообщение = Ложь;
		Возврат;
	КонецЕсли;
	
	РезультатОперации = СервисОбменаСообщениями.ПодтвердитьОбработкуФайлаОбменаДанными(
		ИдентификаторОбмена,
		ИдентификаторФайла);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ВызватьИсключение РезультатОперации.СообщениеОбОшибке;
	КонецЕсли;
	
	ЕстьСледующееСообщение = ЕстьСледующий;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли